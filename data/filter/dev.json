[
    [
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many singers do we have?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "How many singers do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many do singers we have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "do we have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "How many singers do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "How many singers do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many singers do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "How many singers do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the total number of singers?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What is the total number of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "the is What total number of singers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the total number of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "What is the total number of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What is the total number of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "What is the total number of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is the total number of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age asc",
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age asc",
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "Show country, name, age for all singers ordered by age from the oldest to the youngest.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "Show name, ordered by from the to youngest.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "What are the names, countries, and ages for in every singer descending order of age?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "are the names, countries, and for every singer in descending of age?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'United States'",
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country != 'France'",
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country != 'United States'",
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "is What the average, minimum, and maximum age of all singers from France?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What the average, minimum, age of singers from France?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'United States'",
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country != 'France'",
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is the average, maximum minimum, and age for all French singers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is minimum, age for all singers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "Show the name and the release year of the song by the youngest singer.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age desc limit 1",
            "question": "Show the name and the release year of the song by the youngest singer.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Show the name and the release year of the song by the youngest singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "Show the name and the release year song of by the the youngest singer.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "the and the release year of song by the youngest singer.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "Show the name and the release year of the song by the youngest singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "Show the name and the release year of the song by the youngest singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "Show the name and the release year of the song by the youngest singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age desc limit 1",
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age desc limit 1",
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What are the years and release names for all the songs of the youngest singer?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What are names and release for all the songs of the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "What are all distinct countries where singers above age 20 are from?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 16",
            "question": "What are all distinct countries where singers above age 20 are from?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age < 20",
            "question": "What are all distinct countries where singers above age 20 are from?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age < 16",
            "question": "What are all distinct countries where singers above age 20 are from?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are all distinct countries where singers above age 20 are from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "What are all where distinct countries singers above age 20 are from?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "are all distinct countries where above age 20 are",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "What are all distinct countries where singers above age 20 are from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "What are  the different countries with singers above age 20?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 18",
            "question": "What are  the different countries with singers above age 20?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age < 20",
            "question": "What are  the different countries with singers above age 20?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age < 18",
            "question": "What are  the different countries with singers above age 20?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "What are  the different countries with singers above age 20?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "What are different the countries with singers above age 20?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "What are the different countries with above age",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "What are  the different countries with singers above age 20?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "Show all countries and the number of singers in each country.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Show all countries and the number of singers in each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "Show all countries and the singers number of in each country.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "and the number of in each country.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "Show all countries and the number of singers in each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Show all countries and the number of singers in each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all countries and the number of singers in each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "Show all countries and the number of singers in each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "How many singers are from each country?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "How many singers are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "How many are singers from each country?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "many are from country?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "How many singers are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many singers are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "How many singers are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "How many singers are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "List all song names by singers above the average age.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "List all song names by singers above the average age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "List all song names singers above by the average age.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "List song names by singers above the average age.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "List all song names by singers above the average age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "List all song names by singers above the average age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "List all song names by singers above the average age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "List all song names by singers above the average age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "What are all the song names by singers who are older than average?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "What are all the song names by singers who are older than average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "What are all the song names who singers by are older than average?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "What are all the song names by singers are older than average?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What are all the song names by singers who are older than average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What are all the song names by singers who are older than average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "What are all the song names by singers who are older than average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What are all the song names by singers who are older than average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "Show location and name for all capacity with a stadiums between 5000 and 10000.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "Show location and name for all with capacity between 5000 10000.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select avg( capacity ) , max( capacity ) from stadium",
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity not between 5000 and 10000",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity not between 5000 and 10000",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What are the locations and names of capacity stations all with between 5000 and 10000?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What and stations capacity between 5000 and 10000?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "select max( capacity ) , average from stadium",
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select max( capacity ) , average from stadium",
            "question": "What is the maximum and capacity the average of all stadiums ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "select max( capacity ) , average from stadium",
            "question": "is the the average of stadiums ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "select avg( capacity ) , max( capacity ) from stadium",
            "question": "What is the average and maximum capacities for all stadiums ?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is the average and maximum capacities for all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select avg( capacity ) , max( capacity ) from stadium",
            "question": "What is the average and capacities for maximum all stadiums ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "select avg( capacity ) , max( capacity ) from stadium",
            "question": "What is ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the average and maximum capacities for all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is the average and maximum capacities for all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "What is the average and maximum capacities for all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the average and maximum capacities for all stadiums ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average asc limit 1",
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is the name and for the capacity stadium with highest average attendance?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "is the name and for the stadium with highest average attendance?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average asc limit 1",
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is name and the capacity for the stadium with the highest average attendance?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What is name and capacity stadium with the average attendance?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "How many concerts are there in year 2014 or 2015?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2238 OR YEAR = 1792",
            "question": "How many concerts are there in year 2014 or 2015?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 or YEAR != 2015",
            "question": "How many concerts are there in year 2014 or 2015?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR != 2238 and YEAR = 1792",
            "question": "How many concerts are there in year 2014 or 2015?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "How many concerts are there in year 2014 or 2015?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "How many concerts are there year in 2014 or 2015?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "How many concerts are there or 2015?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "How many concerts are there in year 2014 or 2015?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "How many concerts occurred in 2014 or 2015?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 1007 OR YEAR = 1728",
            "question": "How many concerts occurred in 2014 or 2015?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 or YEAR != 2015",
            "question": "How many concerts occurred in 2014 or 2015?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR != 1007 and YEAR != 1728",
            "question": "How many concerts occurred in 2014 or 2015?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "How many concerts occurred in 2014 or 2015?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "How occurred concerts many in 2014 or 2015?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "How many concerts occurred in 2014 or",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many concerts occurred in 2014 or 2015?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "the Show stadium name and the number of concerts in each stadium.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "the name the of concerts stadium.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "For each stadium, how many concerts play there?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "For each stadium, how many concerts play there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "For each how stadium, many concerts play there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "For stadium, many play there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "select max( capacity ) , average from stadium",
            "question": "For each stadium, how many concerts play there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select avg( capacity ) , max( capacity ) from stadium",
            "question": "For each stadium, how many concerts play there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "For each stadium, how many concerts play there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "For each stadium, how many concerts play there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2302 GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count( * ) asc limit 1",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year <= 2302 GROUP BY T2.stadium_id ORDER BY count( * ) desc limit 1",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the stadium name and capacity with concerts most number of in year 2014 or after.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show name and most concerts 2014 or after.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 1762 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) asc limit 1",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year < 1762 group by T2.stadium_id order by count( * ) asc limit 1",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "What is the name and capacity of the stadium most with the concerts after 2013 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2013 group by T2.stadium_id order by count( * ) desc limit 1",
            "question": "the name and of the stadium with the most 2013",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which year has most number of concerts?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) asc limit 1",
            "question": "Which year has most number of concerts?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Which year has most number of concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "has Which year most number of concerts?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which year number of concerts?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Which year has most number of concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "Which year has most number of concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "Which year has most number of concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the year that had the most concerts?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What is the year that had the most concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "is the What year that had the most concerts?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the year that the most concerts?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What is the year that had the most concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What is the year that had the most concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "What is the year that had the most concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "What is the year that had the most concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "Show the stadium names without any concert.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "Show the stadium names without any concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "Show the without names stadium any concert.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "stadium names concert.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "Show the stadium names without any concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "Show the stadium names without any concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "Show the stadium names without any concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "Show the stadium names without any concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "What are the names of the stadiums without any concerts?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "What are the names of the stadiums without any concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "What names are the of the stadiums without any concerts?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "What the names the stadiums without concerts?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are the names of the stadiums without any concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "What are the names of the stadiums without any concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What are the names of the stadiums without any concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What are the names of the stadiums without any concerts?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 32 INTERSECT SELECT country FROM singer WHERE age < 45",
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 intersect SELECT country FROM singer WHERE age > 30",
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 32 except SELECT country FROM singer WHERE age < 45",
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "Show countries where singer age above a 40 and a singer below 30 are from.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "Show countries where a above age a singer below 30 are from.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2238",
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium except SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year != 2014",
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium except SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year != 2238",
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "Show names for all stadiums except a having for stadiums concert in year 2014.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "Show names all stadiums stadiums having a concert in year 2014.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2238",
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What names of are the all stadiums that did not have a concert in 2014?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the names of that did not have a concert in 2014?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "Show the name and theme for all the concerts and number of singers in each concert.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.concert_name , T2.theme , count( * ) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "question": "Show the name and concerts and the number of singers in each concert.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "select max( capacity ) , average from stadium",
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert )",
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "What are the names , themes , and number of singers for every concert ?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "What are the names , themes , and number of singers for every concert ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "What are the , , names themes and number of singers for every concert ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "What the names themes , and number of singers every",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "What are the names , themes , and number of singers for every concert ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are the names , themes , and number of singers for every concert ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "What are the names , themes , and number of singers for every concert ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "question": "What are the names , themes , and number of singers for every concert ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "List singer names and number of concerts for each singer.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "List singer names and number of concerts for each singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "List singer names and number concerts of for each singer.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "List singer names and of concerts for singer.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "List singer names and number of concerts for each singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "List singer names and number of concerts for each singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "List singer names and number of concerts for each singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "List singer names and number of concerts for each singer.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "What are the names of the singers and number of concerts for each person?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "What are the names of the singers and number of concerts for each person?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "What are the of the names singers and number of concerts for each person?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "question": "are names the and number of concerts for each person?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the names of the singers and number of concerts for each person?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "What are the names of the singers and number of concerts for each person?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select max( capacity ) , average from stadium",
            "question": "What are the names of the singers and number of concerts for each person?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "What are the names of the singers and number of concerts for each person?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "List all singer names in concerts in year 2014.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 1727",
            "question": "List all singer names in concerts in year 2014.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT country , count( * ) FROM singer GROUP BY country",
            "question": "List all singer names in concerts in year 2014.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "List all singer in concerts names in year 2014.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "List all singer names in concerts year 2014.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "List all singer names in concerts in year 2014.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "List all singer names in concerts in year 2014.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "List all singer names in concerts in year 2014.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2686",
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year != 2014",
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year != 2686",
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are the names of the singers who concert in performed a in 2014?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "question": "What are the names of the singers who performed a 2014?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name not like '%Hey%'",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "what is the name and nation of the singer who a song 'Hey' have having in its name?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "is the and nation who have a song having 'Hey' its name?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "and name the What is country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "is the name and country of origin every who a 'Hey' in its title?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT avg( age ) , min( age ) , max( age ) FROM singer WHERE country = 'France'",
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 1511 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 1728",
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year != 2014 intersect SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year != 1511 intersect SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year != 1728",
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT DISTINCT country FROM singer WHERE age > 20",
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "Find the name the stadiums of location which and some concerts happened in the years of both 2014 and 2015.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "the and location the stadiums which some concerts happened in the years 2015.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2686 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 1344",
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year != 2014 intersect SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year != 2015",
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2686 union SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 1344",
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "What are the names and the that of locations stadiums had concerts that occurred in both 2014 and 2015?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "What are the names locations of the stadiums had concerts both 2014 and 2015?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity asc limit 1 )",
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "Find the number of happened the in concerts stadium with the highest capacity .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "number of concerts the stadium with the highest capacity .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "label": 1,
            "type": "original_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity asc limit 1 )",
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "What are the number of concerts the in that occurred stadium with the largest capacity ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "concert_singer"
        },
        {
            "query": "select count( * ) from concert where stadium_id = ( select stadium_id from stadium order by capacity desc limit 1 )",
            "question": "are number concerts that occurred the stadium largest capacity ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        },
        {
            "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "concert_singer"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find the number of pets whose weight is heavier than 10.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 11",
            "question": "Find the number of pets whose weight is heavier than 10.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight < 11",
            "question": "Find the number of pets whose weight is heavier than 10.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the number of pets whose weight is heavier than 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find the number of weight pets whose is heavier than 10.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find number pets heavier than 10.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "Find the number of pets whose weight is heavier than 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the number of pets whose weight is heavier than 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "How many pets have a greater weight than 10?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 12",
            "question": "How many pets have a greater weight than 10?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight < 10",
            "question": "How many pets have a greater weight than 10?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight < 12",
            "question": "How many pets have a greater weight than 10?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "question": "How many pets have a greater weight than 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "How many have pets a greater weight than 10?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "How many pets a",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "How many pets have a greater weight than 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the weight of the youngest dog.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age desc limit 1",
            "question": "Find the weight of the youngest dog.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age desc limit 1",
            "question": "Find the weight of the youngest dog.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find the weight of the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the of weight the youngest dog.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "the weight of youngest dog.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find the weight of the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find the weight of the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "How much does the youngest dog weigh?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age desc limit 1",
            "question": "How much does the youngest dog weigh?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "How much does the youngest dog weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "How much the does youngest dog weigh?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "much does the dog",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "How much does the youngest dog weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "How much does the youngest dog weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "How much does the youngest dog weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "Find the maximum weight for each type of pet. the weight List maximum and pet type.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "Find the maximum for type pet. List maximum weight type.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "List the maximum weight and type for each type of pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "List the maximum weight and type for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "List weight maximum the and type for each type of pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "List the maximum weight and type for each type of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "List the maximum weight and type for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "List the maximum weight and type for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "List the maximum weight and type for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "List the maximum weight and type for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "Find number of pets owned by students who are older than 20.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 17",
            "question": "Find number of pets owned by students who are older than 20.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find number of pets owned by students who are older than 20.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "Find number of pets owned by students who older are than 20.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "Find number of pets owned by students are older than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find number of pets owned by students who are older than 20.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "question": "Find number of pets owned by students who are older than 20.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find number of pets owned by students who are older than 20.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "How many pets are owned by students that have an age greater than 20?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 23",
            "question": "How many pets are owned by students that have an age greater than 20?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age < 20",
            "question": "How many pets are owned by students that have an age greater than 20?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "How many pets are owned by students that have an age greater than 20?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "How many pets are students that owned by have an age greater than 20?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "How many owned by that have an age greater than 20?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "How many pets are owned by students that have an age greater than 20?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "How many pets are owned by students that have an age greater than 20?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'M' AND T3.pettype = 'dog'",
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex != 'F' or T3.pettype = 'dog'",
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex != 'M' or T3.pettype != 'dog'",
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "Find the number of dog pets that are raised female (with students by sex F).",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "Find number of pets raised students F).",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "How many dog pets are raised by female students?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex != 'F' and T3.pettype != 'dog'",
            "question": "How many dog pets are raised by female students?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "How many dog pets are raised by female students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "How many are pets dog raised by female students?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "How dog pets are raised by",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "How many dog pets are raised by female students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "How many dog pets are raised by female students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "How many dog pets are raised by female students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find the number of distinct type of pets.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find the number of distinct type of pets.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find the number of distinct of type pets.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find type pets.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find the number of distinct type of pets.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the number of distinct type of pets.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "question": "Find the number of distinct type of pets.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find the number of distinct type of pets.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "How many different types of pet are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "How many different types of pet are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "How many different of types pet are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "different of pet are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "How many different types of pet are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "How many different types of pet are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "How many different types of pet are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "How many different types of pet are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find the first name of students who have cat or dog pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'cat'",
            "question": "Find the first name of students who have cat or dog pet.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' or T3.pettype != 'dog'",
            "question": "Find the first name of students who have cat or dog pet.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' or T3.pettype != 'cat'",
            "question": "Find the first name of students who have cat or dog pet.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the first name of students who have cat or dog pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find the first name students of who have cat or dog pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "the first of who cat or dog pet.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "Find the first name of students who have cat or dog pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'cat'",
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat' or T3.pettype != 'dog'",
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' and T3.pettype = 'cat'",
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "What are names of every first the student who has a cat or dog as a pet?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "names every student who has a cat or dog as a pet?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "Find the first name of students who have both cat and dog pets .",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype != 'dog'",
            "question": "Find the first name of students who have both cat and dog pets .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype != 'cat' except select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype != 'dog'",
            "question": "Find the first name of students who have both cat and dog pets .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "Find the first name of students who have both cat and dog pets .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "Find the first name of students who have dog cat both and pets .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "Find the first name of students who have both cat pets .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find the first name of students who have both cat and dog pets .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find the first name of students who have both cat and dog pets .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat' intersect SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog'",
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat' intersect SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog'",
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "question": "What are the names who students' first have both cats and dogs as pets?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "question": "What are the students' first names who have both cats and dogs as",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the major and age of students who do not have a cat pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
            "question": "Find the major and age of students who do not have a cat pet.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat' )",
            "question": "Find the major and age of students who do not have a cat pet.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the major and age of students who do not have a cat pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the major and students age of who do not have a cat pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "the major and age who do not have a cat pet.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the major and age of students who do not have a cat pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the major and age of students who do not have a cat pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid not in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat' )",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid not in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog' )",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What major is every student who does not cat as pet, own a a and also how old are they?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "is every student who does not a cat a pet, and also",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "Find the id of students who do not have a cat pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "question": "Find the id of students who do not have a cat pet.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student except SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog'",
            "question": "Find the id of students who do not have a cat pet.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the id of students who do not have a cat pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "Find of the id students who do not have a cat pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "Find the of students who do not have a cat pet.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the id of students who do not have a cat pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the id of students who do not have a cat pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "What are the ids of the students who do not own cats as pets?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "question": "What are the ids of the students who do not own cats as pets?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student union SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat'",
            "question": "What are the ids of the students who do not own cats as pets?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student except SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog'",
            "question": "What are the ids of the students who do not own cats as pets?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "What are the ids of the students who do not own cats as pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "What are the ids of the students who do own as not cats pets?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "What are the ids of the students who do own cats as pets?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What are the ids of the students who do not own cats as pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog' or T1.stuid in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog' or T1.stuid not in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the first name and who students age of have a dog but do not have a cat as a pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the first name and age students have a but not a cat as a",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog' and T1.stuid in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'cat' )",
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype != 'dog' or T1.stuid in ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the first name of every student who dog a has but does not have a cat?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is first name every student has a dog but does not have cat?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the type and weight of the youngest pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age desc limit 1",
            "question": "Find the type and weight of the youngest pet.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age desc limit 1",
            "question": "Find the type and weight of the youngest pet.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "select count( * ) , T1.stuid from student as T1 join has_pet as T2 on T1.stuid = T2.stuid group by T1.stuid",
            "question": "Find the type and weight of the youngest pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the type and weight the of youngest pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "the and weight of pet.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the type and weight of the youngest pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the type and weight of the youngest pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age desc limit 1",
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What type pet is the of youngest animal, and how much does it weigh?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What type of pet is the youngest animal, does it weigh?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 2",
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age < 1",
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age < 2",
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the and of id weight all pets whose age is older than 1.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the and weight pets whose age older than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "What is the id and weight of every pet who is older than 1?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "What is the id and weight of every pet who is older than 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "What is and id the weight of every pet who is older than 1?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "What is the id of pet who older than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What is the id and weight of every pet who is older than 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the id and weight of every pet who is older than 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "What is the id and weight of every pet who is older than 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What is the id and weight of every pet who is older than 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the average and maximum age for each type of pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "Find the average and maximum age for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the average and maximum age each for type of pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the average and age type of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the average and maximum age for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "Find the average and maximum age for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find the average and maximum age for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the average and maximum age for each type of pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "What is the average and maximum age for each pet type?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "What is the average and maximum age for each pet type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "What is the average and maximum age pet each for type?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "is the average and age each pet type?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the average and maximum age for each pet type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "What is the average and maximum age for each pet type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "What is the average and maximum age for each pet type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What is the average and maximum age for each pet type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the average weight for each pet type.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the average weight for each pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the weight average for each pet type.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the average each pet type.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the average weight for each pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "Find the average weight for each pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the average weight for each pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "question": "Find the average weight for each pet type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "What is the average weight for each type of pet?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "What is the average weight for each type of pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "What is weight average the for each type of pet?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "the average weight for each type of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "What is the average weight for each type of pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What is the average weight for each type of pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "question": "What is the average weight for each type of pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What is the average weight for each type of pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find the first name and age of students who have a pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find the first name and age of students who have a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find name first the and age of students who have a pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find the first name age of students who have a pet.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the first name and age of students who have a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the first name and age of students who have a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the first name and age of students who have a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the first name and age of students who have a pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "What are the different first names and ages of the students who do have pets?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What are the different first names and ages of the students who do have pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "What are the different first names ages of and the students who do have pets?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "different first names and ages of the students have pets?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "question": "What are the different first names and ages of the students who do have pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "What are the different first names and ages of the students who do have pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What are the different first names and ages of the students who do have pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "What are the different first names and ages of the students who do have pets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Brody'",
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname != 'Brody'",
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the id pet the owned of by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "the id of the owned by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Adams'",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What is the id of owned the pet by the student whose last name is 'Smith'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "What is id of the pet owned by student whose name is",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "question": "Find the number of pets for each student who has any pet and student id.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "Find the number of pets for each student who has any pet and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "question": "Find the number of pets for each has any who student pet and student id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "question": "number of pets for student has any pet and student",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the number of pets for each student who has any pet and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "Find the number of pets for each student who has any pet and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find the number of pets for each student who has any pet and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the number of pets for each student who has any pet and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "select count( * ) , T1.stuid from student as T1 join has_pet as T2 on T1.stuid = T2.stuid group by T1.stuid",
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select count( * ) , T1.stuid from student as T1 join has_pet as T2 on T1.stuid = T2.stuid group by T1.stuid",
            "question": "For students who have how many does , pets pets each student have ? list their ids instead of names .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "select count( * ) , T1.stuid from student as T1 join has_pet as T2 on T1.stuid = T2.stuid group by T1.stuid",
            "question": "For have how many pets does ? list their ids of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( weight ) , pettype FROM pets GROUP BY pettype",
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "Find the first name and gender of student who have more than one pet.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 2",
            "question": "Find the first name and gender of student who have more than one pet.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) < 1",
            "question": "Find the first name and gender of student who have more than one pet.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( DISTINCT pettype ) FROM pets",
            "question": "Find the first name and gender of student who have more than one pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "first Find the name and gender of student who have more than one pet.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "Find the and gender of student who have pet.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "question": "Find the first name and gender of student who have more than one pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "question": "Find the first name and gender of student who have more than one pet.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 2",
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) < 2",
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "What and name first is the gender of the all the students who have more than one pet?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "and of the all the students who more than one",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select count( * ) , T1.stuid from student as T1 join has_pet as T2 on T1.stuid = T2.stuid group by T1.stuid",
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find the last name of the student who has a cat that is age 3.",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 2 AND T3.pettype = 'dog'",
            "question": "Find the last name of the student who has a cat that is age 3.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 or T3.pettype != 'cat'",
            "question": "Find the last name of the student who has a cat that is age 3.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 2 or T3.pettype = 'dog'",
            "question": "Find the last name of the student who has a cat that is age 3.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the last name of the student who has a cat that is age 3.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find last name of the the student who has a cat that is age 3.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "Find last name the student has cat that age 3.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT petid , weight FROM pets WHERE pet_age > 1",
            "question": "Find the last name of the student who has a cat that is age 3.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 2 AND T3.pettype = 'dog'",
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age != 3 and T3.pettype = 'cat'",
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age != 2 or T3.pettype = 'dog'",
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "What is the last name of the student has a who cat that is 3 years old?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "question": "What is the last name the who has is 3 years old?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT count( * ) FROM pets WHERE weight > 10",
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the average age of students who do not have any pet .",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid in ( select stuid from has_pet )",
            "question": "Find the average age of students who do not have any pet .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
            "question": "Find the average age of students who do not have any pet .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "Find the average age of students who do have not any pet .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "average age of do not have any .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "question": "Find the average age of students who do not have any pet .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "question": "Find the average age of students who do not have any pet .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "Find the average age of students who do not have any pet .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "What is the average age for all students who do not own any pets ?",
            "label": 1,
            "type": "original_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid in ( select stuid from has_pet )",
            "question": "What is the average age for all students who do not own any pets ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "What is the average age for all students who do not own any pets ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "What is the average age for all not do who students own any pets ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "pets_1"
        },
        {
            "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
            "question": "What is the age for all students who own any ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
            "question": "What is the average age for all students who do not own any pets ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
            "question": "What is the average age for all students who do not own any pets ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        },
        {
            "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
            "question": "What is the average age for all students who do not own any pets ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "pets_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "How many continents are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "How many continents are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "many How continents are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "many there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How many continents are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "How many continents are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How many continents are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "How many continents are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "What is the number of continents?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "What is the number of continents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "the is What number of continents?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "number of continents?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the number of continents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the number of continents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the number of continents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What is the number of continents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "How many countries does each continent have? List the continent and id, continent name the number of countries.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "each List the continent id, continent name and number of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "For each continent, list its id, name, and how many countries it has?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "For each continent, list its id, name, and how many countries it has?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "For each continent, list its name, and id, how many countries it has?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "each continent, list its id, name, and it has?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "For each continent, list its id, name, and how many countries it has?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For each continent, list its id, name, and how many countries it has?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "For each continent, list its id, name, and how many countries it has?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "For each continent, list its id, name, and how many countries it has?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "How many countries are listed?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "How many countries are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "How are many countries listed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "many countries are listed?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "How many countries are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "How many countries are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "How many countries are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "How many countries are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "How many countries exist?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "How many countries exist?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "many countries How exist?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "How many countries",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "How many countries exist?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1",
            "question": "How many countries exist?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "How many countries exist?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "How many countries exist?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How many models does each car List produce? maker maker full name, id and the number.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How many models does car maker produce? full name, and number.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What is of the full name each car maker, along with its id and how many models it produces?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What the full name each car maker, along its many models it produces?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "Which model of the car has the minimum horsepower?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower desc limit 1",
            "question": "Which model of the car has the minimum horsepower?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "Which model of the car has the minimum horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "Which model car of the has the minimum horsepower?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "of the car has horsepower?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "Which model of the car has the minimum horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "Which model of the car has the minimum horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "Which model of the car has the minimum horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower desc limit 1",
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "What is the model of the car with the of amount smallest horsepower?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "What the model of the car with the smallest of horsepower?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "Find the model of the car whose weight is below the average weight.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight > ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "Find the model of the car whose weight is below the average weight.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "Find the model of the car whose weight is below the average weight.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "the model Find of the car whose weight is below the average weight.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "Find the model the whose weight is below average weight.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "Find the model of the car whose weight is below the average weight.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "Find the model of the car whose weight is below the average weight.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "Find the model of the car whose weight is below the average weight.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "What is the model for the car with a weight smaller than the average?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What is the model for the car with a weight smaller than the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "What is the for the model car with a weight smaller than the average?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "What is model for the car weight smaller than average?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is the model for the car with a weight smaller than the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "What is the model for the car with a weight smaller than the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the model for the car with a weight smaller than the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the model for the car with a weight smaller than the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1975'",
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "Find the the name of makers that produced some cars in the year of 1970?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "name of the makers that produced cars in the year of 1970?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1971'",
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What is the name the of car different makers who produced a car in 1970?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What is of the different car a car in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "Find the make and production time of that were cars the produced in the earliest year?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "Find production of the cars in the earliest year?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What is the maker of the carr produced in the earliest year year was what and it?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What is maker the carr produced the earliest year and what year",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "Which distinct car models are the produced after 1980?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1782",
            "question": "Which distinct car models are the produced after 1980?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "Which distinct car models are the produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "Which distinct car are models the produced after 1980?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "distinct car are the produced after 1980?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "Which distinct car models are the produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "Which distinct car models are the produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "Which distinct car models are the produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "What are the different models for the cards produced after 1980?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1760",
            "question": "What are the different models for the cards produced after 1980?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What are the different models for the cards produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "What are the for different models the cards produced after 1980?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "What different models the cards produced after 1980?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "What are the different models for the cards produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "What are the different models for the cards produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What are the different models for the cards produced after 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "How many car makers are there in each continents? the List continent name and the count.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "How there in each List the continent and the count.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "is name of the What each continent and how many car makers are there in each one?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "name continent and how many car makers are there in each one?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "Which of the countries has the most car makers? List the country name.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) asc limit 1",
            "question": "Which of the countries has the most car makers? List the country name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "Which of the countries has the most car makers? List the country name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "Which of countries the has the most car makers? List the country name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "Which of countries has most car makers? List the name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "Which of the countries has the most car makers? List the country name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "Which of the countries has the most car makers? List the country name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "Which of the countries has the most car makers? List the country name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "What is the name of the country with the most car makers?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) asc limit 1",
            "question": "What is the name of the country with the most car makers?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the name of the country with the most car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "What is name the of the country with the most car makers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "What is the name of the country with car makers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "What is the name of the country with the most car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What is the name of the country with the most car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "What is the name of the country with the most car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select count( * ) , T2.fullname from model_list as T1 join car_makers as T2 on T1.maker = T2.id group by T2.id",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) , T2.fullname from model_list as T1 join car_makers as T2 on T1.maker = T2.id group by T2.id",
            "question": "How many each models are by car produced maker ? Only list the count and the maker full name .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) , T2.fullname from model_list as T1 join car_makers as T2 on T1.maker = T2.id group by T2.id",
            "question": "many car by each maker ? Only the maker name .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT Count( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Count( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
            "question": "What is the number of car models that are produced by each maker id full what and and is the name of each maker?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Count( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
            "question": "is number of car that are produced by maker what the id and name of maker?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) , T2.fullname from model_list as T1 join car_makers as T2 on T1.maker = T2.id group by T2.id",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'honda accord lx'",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make != 'amc hornet sportabout ( sw ) '",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What is the accelerate of the car hornet make amc sportabout (sw)?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What is the of car make amc hornet (sw)?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'peugeot 504'",
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make != 'amc hornet sportabout ( sw ) '",
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make != 'peugeot 504'",
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How much does the accelerate car that makes amc hornet sportabout (sw)?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "much does car makes amc hornet",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "How many car makers are there in france?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'usa'",
            "question": "How many car makers are there in france?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "How many car makers are there in france?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "How car many makers are there in france?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "many car makers are there france?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "How many car makers are there in france?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "How many car makers are there in france?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "How many car makers are there in france?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "What is the number of makers of care in France?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'mexico'",
            "question": "What is the number of makers of care in France?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the number of makers of care in France?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "What is of number the makers of care in France?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "What is number of makers care in France?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What is the number of makers of care in France?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the number of makers of care in France?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "What is the number of makers of care in France?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "How many car models are produced in the usa?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'new zealand'",
            "question": "How many car models are produced in the usa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName != 'new zealand'",
            "question": "How many car models are produced in the usa?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "How many car models are produced in the usa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "How car many models are produced in the usa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "How many models are produced in the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "How many car models are produced in the usa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "How many car models are produced in the usa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "What is the count of the car models produced in the United States?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'uk'",
            "question": "What is the count of the car models produced in the United States?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName != 'usa'",
            "question": "What is the count of the car models produced in the United States?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName != 'uk'",
            "question": "What is the count of the car models produced in the United States?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What is the count of the car models produced in the United States?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "What is the count of the models produced car in the United States?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "What is the count the car produced the United States?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "What is the count of the car models produced in the United States?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 6",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is average miles the per gallon(mpg) of the cars with 4 cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "is the average miles per gallon(mpg) the cars with cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) , T2.fullname from model_list as T1 join car_makers as T2 on T1.maker = T2.id group by T2.id",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 5",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders != 4",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the average miles per gallon of cards with the all 4 cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What the average miles per gallon all the cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 10 and year = 1481",
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders != 8 or year = 1974",
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders != 10 and year = 1481",
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the smallest weight produced car the of with 8 cylinders on 1974 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is smallest weight the car 8 cylinders 1974 ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 7 and year = 2221",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders != 8 or year != 1974",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders != 7 or year != 2221",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the minimum weight of the car cylinders with 8 produced in 1974 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What the minimum weight of the with 8 cylinders produced in 1974 ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "What are all the makers and models?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "What are all the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "What are all and the makers models?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "all makers and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What are all the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What are all the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "What are all the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What are all the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "What are the makers and models?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "What are the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "the What are makers and models?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "are the makers and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What are the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What are the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What are the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What are the makers and models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What are the countries having at least one car maker? List name and id.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What are the countries having at least one car maker? List name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What are the having countries least at one car maker? List name and id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What the countries having least one car List name id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What are the countries having at least one car maker? List name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "What are the countries having at least one car maker? List name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "What are the countries having at least one car maker? List name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What are the countries having at least one car maker? List name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What are the names and ids of all countries with at least one car maker?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) <= 1",
            "question": "What are the names and ids of all countries with at least one car maker?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What are the names and ids of all countries with at least one car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What names the are and ids of all countries with at least one car maker?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What are the names and ids of all with at least car maker?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "What are the names and ids of all countries with at least one car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What are the names and ids of all countries with at least one car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What are the names and ids of all countries with at least one car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What is the number of the cars with horsepower more than 150?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 100",
            "question": "What is the number of the cars with horsepower more than 150?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower < 150",
            "question": "What is the number of the cars with horsepower more than 150?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower < 100",
            "question": "What is the number of the cars with horsepower more than 150?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What is the number of the cars with horsepower more than 150?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What is the number of the cars with more than horsepower 150?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What the the cars with horsepower more 150?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What is the number of the cars with horsepower more than 150?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What is the number of cars with a horsepower greater than 150?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 180",
            "question": "What is the number of cars with a horsepower greater than 150?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower < 150",
            "question": "What is the number of cars with a horsepower greater than 150?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower < 180",
            "question": "What is the number of cars with a horsepower greater than 150?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the number of cars with a horsepower greater than 150?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What is the number of cars with a greater horsepower than 150?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "What is the number cars with a horsepower",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "What is the number of cars with a horsepower greater than 150?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What is the average weight of cars each year?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What is the average weight of cars each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "is What the average weight of cars each year?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What is the average of cars each",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count( * ) >= 1",
            "question": "What is the average weight of cars each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What is the average weight of cars each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the average weight of cars each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What is the average weight of cars each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What is the average weight and year for each year?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the average weight and year for each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What is the and weight average year for each year?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What is average weight and year each year?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What is the average weight and year for each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "What is the average weight and year for each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "What is the average weight and year for each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "What is the average weight and year for each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) <= 3",
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) , T2.fullname from model_list as T1 join car_makers as T2 on T1.maker = T2.id group by T2.id",
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "Which in countries europe have at least 3 car manufacturers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "Which countries europe have least car",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 4",
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) <= 3",
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent != 'europe' GROUP BY T1.CountryName HAVING count( * ) <= 4",
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( Weight ) , YEAR FROM CARS_DATA GROUP BY YEAR",
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What the names are of all European countries with at least 3 manufacturers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What are names all European with at least",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the maximum horsepower and the make of the 3 car with models cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the maximum and the make of the car models",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower asc limit 1",
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the largest amount of horsepower for the models with make and what cylinders 3 is it?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the largest amount of horsepower the models with 3 cylinders and is it?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'",
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1",
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg asc limit 1",
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg asc limit 1",
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1",
            "question": "Which saves model most the gasoline? That is to say, have the maximum miles per gallon.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1",
            "question": "Which model saves gasoline? That to say, have the maximum miles gallon.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What is the car model with the highest mpg ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg asc limit 1",
            "question": "What is the car model with the highest mpg ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "What is the car model with the highest mpg ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What is the with model car the highest mpg ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What the car model with the highest ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the car model with the highest mpg ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "What is the car model with the highest mpg ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the car model with the highest mpg ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "What is the average horsepower of the cars before 1980?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 2475",
            "question": "What is the average horsepower of the cars before 1980?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR > 1980",
            "question": "What is the average horsepower of the cars before 1980?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR > 2475",
            "question": "What is the average horsepower of the cars before 1980?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the average horsepower of the cars before 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "What is the of horsepower average the cars before 1980?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "What is the average horsepower of cars before",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is the average horsepower of the cars before 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 2376",
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "What is the average horsepower for all cars before produced 1980 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "What average horsepower all cars before 1980",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the average edispl of the cars of model volvo?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'pontiac'",
            "question": "What is the average edispl of the cars of model volvo?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model != 'volvo'",
            "question": "What is the average edispl of the cars of model volvo?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model != 'pontiac'",
            "question": "What is the average edispl of the cars of model volvo?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What is the average edispl of the cars of model volvo?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the average edispl of cars the of model volvo?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the average edispl the cars of model volvo?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select T1.model from car_names as T1 join cars_data as T2 on T1.makeid = T2.id order by T2.mpg desc limit 1",
            "question": "What is the average edispl of the cars of model volvo?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the average edispl for all volvos?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'ford'",
            "question": "What is the average edispl for all volvos?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the average edispl for all volvos?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What is the edispl average for all volvos?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( T2.edispl ) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo'",
            "question": "What the average edispl for all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What is the average edispl for all volvos?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is the average edispl for all volvos?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the average edispl for all volvos?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the maximum accelerate for different number of cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the maximum accelerate for different number of cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the for accelerate maximum different number of cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the accelerate for different number of cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What is the maximum accelerate for different number of cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the maximum accelerate for different number of cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the maximum accelerate for different number of cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "What is the maximum accelerate for different number of cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the maximum accelerate for all the different cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the maximum accelerate for all the different cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the maximum accelerate the for all different cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "maximum accelerate for all the cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3",
            "question": "What is the maximum accelerate for all the different cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What is the maximum accelerate for all the different cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the maximum accelerate for all the different cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "What is the maximum accelerate for all the different cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which model has the most version(make) of cars?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) asc limit 1",
            "question": "Which model has the most version(make) of cars?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "Which model has the most version(make) of cars?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which model has the version(make) most of cars?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which model most version(make)",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "Which model has the most version(make) of cars?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "Which model has the most version(make) of cars?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "Which model has the most version(make) of cars?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What model has the most different versions?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What model has the most different versions?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What model most has the different versions?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What model has most different",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What model has the most different versions?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What model has the most different versions?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "What model has the most different versions?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What model has the most different versions?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "How many cars have more than 4 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 3",
            "question": "How many cars have more than 4 cylinders?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "How many cars have more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "How many cars more have than 4 cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "many cars have than 4 cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "How many cars have more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3",
            "question": "How many cars have more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "How many cars have more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is the number of cars with more than 4 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 5",
            "question": "What is the number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders < 4",
            "question": "What is the number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "What is the number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "is the What number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "What is number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "What is the number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What is the number of cars with more than 4 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "how many cars were produced in 1980?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 2376",
            "question": "how many cars were produced in 1980?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR != 1980",
            "question": "how many cars were produced in 1980?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "how many cars were produced in 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "how many cars produced were in 1980?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "how many in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "how many cars were produced in 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "how many cars were produced in 1980?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "In 1980, how many cars were made?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1760",
            "question": "In 1980, how many cars were made?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR != 1980",
            "question": "In 1980, how many cars were made?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR != 1760",
            "question": "In 1980, how many cars were made?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "In 1980, how many cars were made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "In 1980, how cars were many made?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "1980, how cars were",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE Cylinders > 4",
            "question": "In 1980, how many cars were made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'Volkswagen'",
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName != 'American Motor Company'",
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName != 'Volkswagen'",
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "How many car models were produced by with full the maker name American Motor Company?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "How many car models were by maker full name American Motor Company?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'Ford Motor Company'",
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName != 'American Motor Company'",
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the number of car models created maker car the by American Motor Company?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "What is the of models by the maker American Company?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 2",
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) < 3",
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "Which makers designed more than 3 car models? List and the full name id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "Which makers more than car models? List full and the id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'",
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are the names and ids of all makers with more than 3 models?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) < 3",
            "question": "What are the names and ids of all makers with more than 3 models?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) < 3",
            "question": "What are the names and ids of all makers with more than 3 models?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "What are the names and ids of all makers with more than 3 models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are names the and ids of all makers with more than 3 models?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are names and ids of all makers with than 3 models?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What are the names and ids of all makers with more than 3 models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What are the names and ids of all makers with more than 3 models?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'Daimler Benz' OR T4.weight > 5250",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' and T4.weight > 3500",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName != 'Daimler Benz' and T4.weight < 5250",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "Which distinctive models produced maker by are with the full name General Motors or weighing more than 3500?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "distinctive models are produced maker with name General weighing more",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'Chrysler' OR T4.weight > 3063",
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' and T4.weight < 3500",
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'Chrysler' and T4.weight < 3063",
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "What are the different models the by either created car maker General Motors or weighed more than 3500?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "are models created by either the car maker General Motors weighed more than 3500?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight not between 3000 and 4000",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "In which years cars were produced weighing 3000 than less no and no more than 4000 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "In which years were produced than and no more than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight not between 3000 and 4000",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 or 4000",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What are the different years in which there were cars produced 4000 less that weighed and than also cars that weighted more than 3000 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What years which were cars produced than 4000 and that weighted more than ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the horsepower of the car with the largest accelerate?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate asc limit 1",
            "question": "What is the horsepower of the car with the largest accelerate?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "What is the horsepower of the car with the largest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is horsepower the of the car with the largest accelerate?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the horsepower of car with the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the horsepower of the car with the largest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count( * ) >= 3",
            "question": "What is the horsepower of the car with the largest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What is the horsepower of the car with the largest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate asc limit 1",
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is horsepower the of the car with the greatest accelerate?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "What is the of car with the greatest accelerate?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CONTINENTS",
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model != 'volvo' ORDER BY T1.accelerate asc limit 1",
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc' ORDER BY T1.accelerate desc limit 1",
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For many volvo, model how cylinders does the car with the least accelerate have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For volvo, how many cylinders does the car accelerate",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM COUNTRIES",
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'ford' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model != 'volvo' ORDER BY T1.accelerate desc limit 1",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "For a volvo model, how many cylinders does the least version with accelerate have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "a volvo how cylinders does least accelerate have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate < ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower asc limit 1 )",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate < ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower asc limit 1 )",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "How many cars have a larger the accelerate than car with the largest horsepower?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "How cars have a accelerate car with horsepower?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "the number What of is cars with a greater accelerate than the one with the most horsepower?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "What is the number cars a greater accelerate than the the most horsepower?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "How many countries has more than 2 car makers ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3",
            "question": "How many countries has more than 2 car makers ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) < 2",
            "question": "How many countries has more than 2 car makers ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) < 3",
            "question": "How many countries has more than 2 car makers ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "How many countries has more than 2 car makers ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "many countries How has more than 2 car makers ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "countries has more 2 car makers ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "How many countries has more than 2 car makers ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "What is the number of countries with more than 2 car makers ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 1",
            "question": "What is the number of countries with more than 2 car makers ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What is the number of countries with more than 2 car makers ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "What is the number of countries more with than 2 car makers ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "What is the number of countries than 2 car ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What is the number of countries with more than 2 car makers ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What is the number of countries with more than 2 car makers ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select distinct year from cars_data where weight between 3000 and 4000",
            "question": "What is the number of countries with more than 2 car makers ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "How many cars has over 6 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 5",
            "question": "How many cars has over 6 cylinders?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders < 6",
            "question": "How many cars has over 6 cylinders?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders < 5",
            "question": "How many cars has over 6 cylinders?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE horsepower > 150",
            "question": "How many cars has over 6 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "cars many How has over 6 cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "has over 6 cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout ( sw ) '",
            "question": "How many cars has over 6 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "What is the number of carsw ith over 6 cylinders?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders < 6",
            "question": "What is the number of carsw ith over 6 cylinders?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders < 6",
            "question": "What is the number of carsw ith over 6 cylinders?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What is the number of carsw ith over 6 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "What is number the of carsw ith over 6 cylinders?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Cylinders > 6",
            "question": "What is the of over cylinders?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "question": "What is the number of carsw ith over 6 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.FullName , T1.Id , count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "question": "What is the number of carsw ith over 6 cylinders?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders != 4 ORDER BY T2.horsepower desc limit 1",
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For the cars 4 with cylinders, which model has the largest horsepower?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For cars with cylinders, model has the largest horsepower?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower asc limit 1",
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders != 4 ORDER BY T2.horsepower desc limit 1",
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1",
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For all of the 4 cylinder which cars, model has the most horsepower?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "For 4 cylinder cars, which has most",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count( * ) DESC LIMIT 1",
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3",
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 4",
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower < ( SELECT min( Horsepower ) FROM CARS_DATA ) and T1.Cylinders <= 3",
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower < ( SELECT min( Horsepower ) FROM CARS_DATA ) or T1.Cylinders <= 4",
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'",
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3",
            "question": "Among the cars with more than lowest horsepower, which ones do not have 3 car than the cylinders? List more makeid and make name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > ( SELECT min( Horsepower ) FROM CARS_DATA ) AND T1.Cylinders <= 3",
            "question": "Among cars more than horsepower, ones not have than 3 cylinders? List the makeid and make name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ) ",
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower < ( select min( horsepower ) from cars_data ) or T1.cylinders > 4",
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders > 4",
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "Among the cars that do not have the minimum horsepower , what names of make and are all ids the those with less than 4 cylinders ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "Among the cars that do the minimum , are the make ids names of all those less than cylinders ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 7 or year < 2178",
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders != 8 and year < 1980",
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders != 7 and year < 2178",
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "What is the maximum miles per car of with gallon the 8 cylinders or produced before 1980 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "What is the maximum miles per of the car with 8 cylinders or produced before",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 6 or year < 990",
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 and year > 1980",
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 6 and year < 990",
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = ( SELECT min( YEAR ) FROM CARS_DATA ) ",
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "What is the maximum mpg cars of had that the 8 cylinders or that were produced before 1980 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select max( mpg ) from cars_data where cylinders = 8 or year < 1980",
            "question": "the the cars that 8 cylinders that were produced before 1980 ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 4200 AND T4.FullName != 'Volvo'",
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 or T4.FullName != 'Ford Motor Company'",
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Maker , Model FROM MODEL_LIST",
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "Which models are lighter than 3500 but the built by not 'Ford Motor Company'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "Which are lighter than 3500 not built by the 'Ford",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( horsepower ) FROM CARS_DATA WHERE YEAR < 1980",
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT avg( mpg ) FROM CARS_DATA WHERE Cylinders = 4",
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3063 AND T4.FullName != 'Citroen'",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 or T4.FullName = 'Ford Motor Company'",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight > 3063 or T4.FullName != 'Citroen'",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.ContId , T1.Continent , count( * ) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What are the models different are wthat lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "different wthat lighter than 3500 were by",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT count( * ) FROM CARS_DATA WHERE YEAR = 1980",
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the name of the countries where there is not a single car maker?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Count( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
            "question": "What are the name of the countries where there is not a single car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the countries of name the where there is not a single car maker?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are of countries where there not a single maker?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1",
            "question": "What are the name of the countries where there is not a single car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500",
            "question": "What are the name of the countries where there is not a single car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select count( * ) from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 2",
            "question": "What are the name of the countries where there is not a single car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < ( SELECT avg( Weight ) FROM CARS_DATA )",
            "question": "What are the name of the countries where there is not a single car maker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the names of the countries with no car makers?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries union SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the names of the countries with no car makers?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries intersect SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the names of the countries with no car makers?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT max( Accelerate ) , Cylinders FROM CARS_DATA GROUP BY Cylinders",
            "question": "What are the names of the countries with no car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the names of the no countries with car makers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the of the countries with no car",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT Count( * ) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
            "question": "What are the names of the countries with no car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980",
            "question": "What are the names of the countries with no car makers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) >= 2 intersect select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) > 3",
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) >= 2 intersect select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) > 4",
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) <= 2 intersect select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) > 3",
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) >= 2 union select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) < 4",
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1",
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) >= 2 intersect select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) > 3",
            "question": "Which are the car makers which produce at least 2 models and List 3 ? car more than makers the id and the maker .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) >= 2 intersect select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) > 3",
            "question": "Which car makers produce at 2 models and 3 car makers ? List the id",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select T2.makeid , T2.make from cars_data as T1 join car_names as T2 on T1.id = T2.makeid where T1.horsepower > ( select min( horsepower ) from cars_data ) and T1.cylinders < 4",
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 3 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 4",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) <= 2 except SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) <= 3 intersect SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 4",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select min( weight ) from cars_data where cylinders = 8 and year = 1974",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "What are the ids and makers produce of that car makers all at least 2 models and make more than 3 cars?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count( * ) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count( * ) > 3",
            "question": "are ids and of all car makers that at least and than 3 cars?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company'",
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'scion'",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 union SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model != 'fiat'",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) < 3 intersect SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'scion'",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "What are the id and names countries have the which more of than 3 car makers or produce the 'fiat' model?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count( * ) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'",
            "question": "are the id names countries have more 3 car makers or produce the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker group by T1.id having count( * ) >= 2 intersect select T1.id , T1.maker from car_makers as T1 join model_list as T2 on T1.id = T2.maker join car_names as T3 on T2.model = T3.model group by T1.id having count( * ) > 3",
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "label": 1,
            "type": "original_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 4 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'datsun'",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) < 3 intersect select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 4 except select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'datsun'",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "car_1"
        },
        {
            "query": "select avg( horsepower ) from cars_data where year < 1980",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "What are the ids and names of all have either countries that than more 3 car makers or produce fiat model ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "car_1"
        },
        {
            "query": "select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country group by T1.countryid having count( * ) > 3 union select T1.countryid , T1.countryname from countries as T1 join car_makers as T2 on T1.countryid = T2.country join model_list as T3 on T2.id = T3.maker where T3.model = 'fiat'",
            "question": "What are the ids and names of all countries either have than makers produce model ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "car_1"
        },
        {
            "query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970'",
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "car_1"
        }
    ],
    [
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'AirTran Airways'",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline != 'JetBlue Airways'",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline != 'AirTran Airways'",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "country does Which Airline \"JetBlue Airways\" belong to?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "country does Airline \"JetBlue belong to?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What country is Jetblue Airways affiliated with?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'AirTran Airways'",
            "question": "What country is Jetblue Airways affiliated with?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline != 'JetBlue Airways'",
            "question": "What country is Jetblue Airways affiliated with?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline != 'AirTran Airways'",
            "question": "What country is Jetblue Airways affiliated with?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "What country is Jetblue Airways affiliated with?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What country is Jetblue affiliated Airways with?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What country is Jetblue affiliated with?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "What country is Jetblue Airways affiliated with?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'Continental Airlines'",
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline != 'JetBlue Airways'",
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline != 'Continental Airlines'",
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "is the What abbreviation of Airline \"JetBlue Airways\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "is the abbreviation of Airline \"JetBlue",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'United Airlines'",
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline != 'JetBlue Airways'",
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Which abbreviation Jetblue corresponds to Airways?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "abbreviation corresponds to Jetblue Airways?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "List all airline names and their abbreviations in \"USA\".",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country != 'USA'",
            "question": "List all airline names and their abbreviations in \"USA\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "List all airline names and their abbreviations in \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "List all airline their and names abbreviations in \"USA\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "List airline names and their in \"USA\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "List all airline names and their abbreviations in \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "List all airline names and their abbreviations in \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "List all airline names and their abbreviations in \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "What are the airline and abbreviations names for airlines in the USA?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "What the airline for airlines the USA?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "List the airport code and name in the city of Anthony.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Antlers '",
            "question": "List the airport code and name in the city of Anthony.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city != 'Anthony'",
            "question": "List the airport code and name in the city of Anthony.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city != 'Antlers '",
            "question": "List the airport code and name in the city of Anthony.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "List the airport code and name in the city of Anthony.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "List the code airport and name in the city of Anthony.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "List the airport and in the city of Anthony.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "List the airport code and name in the city of Anthony.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Albert Lea '",
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city != 'Albert Lea '",
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "Give code airport the and airport name corresonding to the city Anthony.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "Give the airport code and airport to city Anthony.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "How many airlines do we have?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many airlines do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "How airlines many do we have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "How many do",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "How many airlines do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "How many airlines do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "How many airlines do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "How many airlines do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "What is the total number of airlines?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "What is the total number of airlines?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "What total the is number of airlines?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "What total number of airlines?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the total number of airlines?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What is the total number of airlines?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What is the total number of airlines?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "What is the total number of airlines?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "How many airports do we have?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "How many airports do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "How airports do many we have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "How we have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "How many airports do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "How many airports do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "How many airports do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "How many airports do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "Return the number of  airports.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Return the number of  airports.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "number Return the of airports.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "Return number airports.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "Return the number of  airports.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Return the number of  airports.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Return the number of  airports.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the number of  airports.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "How many flights do we have?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "How many flights do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "How many do flights we have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "many flights we",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "How many flights do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many flights do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many flights do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "How many flights do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Return the number of flights.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the number of flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Return number of the flights.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Return number of flights.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Return the number of flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Return the number of flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Return the number of flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Return the number of flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Which airline has abbreviation 'UAL'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "Which airline has abbreviation 'UAL'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Which abbreviation has airline 'UAL'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "has abbreviation",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which airline has abbreviation 'UAL'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airline has abbreviation 'UAL'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "Which airline has abbreviation 'UAL'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Which airline has abbreviation 'UAL'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Give the airline with abbreviation 'UAL'.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'Virgin'",
            "question": "Give the airline with abbreviation 'UAL'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Give the airline with abbreviation 'UAL'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Give airline with the abbreviation 'UAL'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Give with abbreviation 'UAL'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Give the airline with abbreviation 'UAL'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give the airline with abbreviation 'UAL'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give the airline with abbreviation 'UAL'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "How many airlines are from USA?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country != 'USA'",
            "question": "How many airlines are from USA?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many airlines are from USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "many airlines How are from USA?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "How many are from",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "How many airlines are from USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "How many airlines are from USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "How many airlines are from USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Return the number of airlines in the USA.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country != 'USA'",
            "question": "Return the number of airlines in the USA.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country != 'USA'",
            "question": "Return the number of airlines in the USA.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Return the number of airlines in the USA.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "the number Return of airlines in the USA.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Return of airlines in the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Return the number of airlines in the USA.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "Return the number of airlines in the USA.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Which city and country is the Alton airport at?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Annette Island '",
            "question": "Which city and country is the Alton airport at?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName != 'Alton'",
            "question": "Which city and country is the Alton airport at?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Which city and country is the Alton airport at?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Which city and country the is Alton airport at?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Which city is Alton at?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which city and country is the Alton airport at?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city and country is the Alton airport at?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Give the city and country for the Alton airport.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Tradewind '",
            "question": "Give the city and country for the Alton airport.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName != 'Alton'",
            "question": "Give the city and country for the Alton airport.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Give the city and country for the Alton airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Give the city country and for the Alton airport.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Give and country for the Alton airport.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give the city and country for the Alton airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "Give the city and country for the Alton airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "What is the airport name for airport 'AKO'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AEX'",
            "question": "What is the airport name for airport 'AKO'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What is the airport name for airport 'AKO'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "What is the airport for name airport 'AKO'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "What is the airport name for 'AKO'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "What is the airport name for airport 'AKO'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "What is the airport name for airport 'AKO'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "What is the airport name for airport 'AKO'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "Return the name of the airport with code 'AKO'.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'APN'",
            "question": "Return the name of the airport with code 'AKO'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode != 'AKO'",
            "question": "Return the name of the airport with code 'AKO'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Return the name of the airport with code 'AKO'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "the Return name of the airport with code 'AKO'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "Return name the airport with code 'AKO'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Return the name of the airport with code 'AKO'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Return the name of the airport with code 'AKO'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What are airport names at City 'Aberdeen'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = ' Neptune '",
            "question": "What are airport names at City 'Aberdeen'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City != 'Aberdeen'",
            "question": "What are airport names at City 'Aberdeen'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City != ' Neptune '",
            "question": "What are airport names at City 'Aberdeen'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "What are airport names at City 'Aberdeen'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What airport names are at City 'Aberdeen'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What are airport names at 'Aberdeen'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "What are airport names at City 'Aberdeen'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What are the names of airports in Aberdeen?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Alamogordo '",
            "question": "What are the names of airports in Aberdeen?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City != 'Alamogordo '",
            "question": "What are the names of airports in Aberdeen?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What are the names of airports in Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What are of the names airports in Aberdeen?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "What are names of in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "What are the names of airports in Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "What are the names of airports in Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "How many flights depart from 'APG'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = ' ABI'",
            "question": "How many flights depart from 'APG'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many flights depart from 'APG'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "How many flights from depart 'APG'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "many flights depart",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "How many flights depart from 'APG'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many flights depart from 'APG'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "How many flights depart from 'APG'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Count the number of flights departing from 'APG'.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = ' ALI'",
            "question": "Count the number of flights departing from 'APG'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport != 'APG'",
            "question": "Count the number of flights departing from 'APG'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Count the number of flights departing from 'APG'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Count number of the flights departing from 'APG'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Count the number of flights from 'APG'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Count the number of flights departing from 'APG'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of flights departing from 'APG'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "How many flights have destination ATO?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = ' AEX'",
            "question": "How many flights have destination ATO?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport != 'ATO'",
            "question": "How many flights have destination ATO?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport != ' AEX'",
            "question": "How many flights have destination ATO?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many flights have destination ATO?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "How have flights many destination ATO?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "How many have",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "How many flights have destination ATO?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "Count the number of flights into ATO.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = ' AIA'",
            "question": "Count the number of flights into ATO.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport != 'ATO'",
            "question": "Count the number of flights into ATO.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport != ' AIA'",
            "question": "Count the number of flights into ATO.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "Count the number of flights into ATO.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "Count the of number flights into ATO.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "Count of flights ATO.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Count the number of flights into ATO.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many flights depart from City Aberdeen?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Apple Valley '",
            "question": "How many flights depart from City Aberdeen?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "How many flights depart from City Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many flights from depart City Aberdeen?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "many flights depart Aberdeen?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "How many flights depart from City Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "How many flights depart from City Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "How many flights depart from City Aberdeen?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Return the number of flights departing from Aberdeen.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Amery '",
            "question": "Return the number of flights departing from Aberdeen.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City != 'Aberdeen'",
            "question": "Return the number of flights departing from Aberdeen.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City != 'Amery '",
            "question": "Return the number of flights departing from Aberdeen.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "Return the number of flights departing from Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Return the of flights number departing from Aberdeen.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "the number of flights from",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the number of flights departing from Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many flights arriving in Aberdeen city?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Akiachak '",
            "question": "How many flights arriving in Aberdeen city?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many flights arriving in Aberdeen city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many in arriving flights Aberdeen city?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many flights in Aberdeen city?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "How many flights arriving in Aberdeen city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "How many flights arriving in Aberdeen city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many flights arriving in Aberdeen city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Return the number of flights arriving in Aberdeen.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = ' Aliceville AL '",
            "question": "Return the number of flights arriving in Aberdeen.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Return the number of flights arriving in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Return the number arriving flights of in Aberdeen.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "number flights arriving in Aberdeen.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Return the number of flights arriving in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Return the number of flights arriving in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Return the number of flights arriving in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Anvik ' AND T3.City = ' Alexander City AL '",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' or T3.City != 'Aberdeen'",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Anvik ' or T3.City != ' Alexander City AL '",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "How many flights depart from 'Aberdeen' and City have destination City 'Ashley'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "How flights depart from City 'Aberdeen' have destination City 'Ashley'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "How many flights fly from Aberdeen to Ashley?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Amityville ' AND T3.City = 'Abilene '",
            "question": "How many flights fly from Aberdeen to Ashley?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' or T3.City != 'Aberdeen'",
            "question": "How many flights fly from Aberdeen to Ashley?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City != 'Amityville ' or T3.City = 'Abilene '",
            "question": "How many flights fly from Aberdeen to Ashley?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "How many flights fly from Aberdeen to Ashley?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "flights many How fly from Aberdeen to Ashley?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "flights from to",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "How many flights fly from Aberdeen to Ashley?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'Southwest Airlines'",
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline != 'JetBlue Airways'",
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "How flights many does airline 'JetBlue Airways' have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "How many flights does airline Airways'",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Give the number of Jetblue Airways flights.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'Northwest Airlines'",
            "question": "Give the number of Jetblue Airways flights.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline != 'Northwest Airlines'",
            "question": "Give the number of Jetblue Airways flights.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "Give the number of Jetblue Airways flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "the number Give of Jetblue Airways flights.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "the number of Jetblue",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Give the number of Jetblue Airways flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "Give the number of Jetblue Airways flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'JetBlue Airways' AND T2.DestAirport = ' ALI'",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' or T2.DestAirport = 'ASY'",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline != 'JetBlue Airways' and T2.DestAirport = ' ALI'",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "How 'United many Airlines' flights go to Airport 'ASY'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "How many 'United flights to Airport",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'US Airways' AND T2.DestAirport = ' AHD'",
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline != 'United Airlines' and T2.DestAirport = 'ASY'",
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "Count the United number of Airlines flights arriving in ASY Airport.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "Count of United Airlines flights arriving ASY",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'Virgin America' AND T2.SourceAirport = ' ALZ'",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline != 'United Airlines' and T2.SourceAirport != 'AHD'",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline != 'Virgin America' or T2.SourceAirport = ' ALZ'",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "How many Airlines' flights 'United depart from Airport 'AHD'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "many 'United Airport 'AHD'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'Northwest Airlines' AND T2.SourceAirport = ' ABL'",
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline != 'Northwest Airlines' or T2.SourceAirport = ' ABL'",
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "Return the number of United Airlines from flights leaving AHD Airport.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "Return the number Airlines leaving from AHD",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Adrian ' AND T3.Airline = 'United Airlines'",
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' or T3.Airline = 'United Airlines'",
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "How United many Airlines flights go to City 'Aberdeen'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "How many United Airlines flights City",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Arlington Heights ' AND T3.Airline = 'Southwest Airlines'",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' or T3.Airline != 'United Airlines'",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City != 'Arlington Heights ' or T3.Airline = 'Southwest Airlines'",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "number the Count of United Airlines flights that arrive in Aberdeen.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Count the number of United Airlines flights in Aberdeen.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city has most number of arriving flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) asc limit 1",
            "question": "Which city has most number of arriving flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) asc limit 1",
            "question": "Which city has most number of arriving flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Which city has most number of arriving flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city most has number of arriving flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which has most number of arriving flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "Which city has most number of arriving flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "Which city has most number of arriving flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city has the most frequent destination airport?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) asc limit 1",
            "question": "Which city has the most frequent destination airport?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) asc limit 1",
            "question": "Which city has the most frequent destination airport?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Which city has the most frequent destination airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city the has most frequent destination airport?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "has the most",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "Which city has the most frequent destination airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Which city has the most frequent destination airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city has most number of departing flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) asc limit 1",
            "question": "Which city has most number of departing flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Which city has most number of departing flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city has number most of departing flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "city most number flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Which city has most number of departing flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "Which city has most number of departing flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which city has most number of departing flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city is the most frequent source airport?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Which city is the most frequent source airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city is the frequent source most airport?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which city the most frequent source",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Which city is the most frequent source airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "Which city is the most frequent source airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Which city is the most frequent source airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Which city is the most frequent source airport?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the code of airport that has the highest number of flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport and T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) desc limit 1",
            "question": "What is the code of airport that has the highest number of flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "What is the code of airport that has the highest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the code of that airport has the highest number of flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the code airport that has the highest of flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "What is the code of airport that has the highest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "What is the code of airport that has the highest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "What is the code of airport that has the highest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the airport code of the airport with the most flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport or T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) asc limit 1",
            "question": "What is the airport code of the airport with the most flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport and T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) desc limit 1",
            "question": "What is the airport code of the airport with the most flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What is the airport code of the airport with the most flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is airport the code of the airport with the most flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "of airport with most flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "What is the airport code of the airport with the most flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "What is the airport code of the airport with the most flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "What is the code of airport that has fewest number of flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport and T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) limit 1",
            "question": "What is the code of airport that has fewest number of flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport and T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) limit 1",
            "question": "What is the code of airport that has fewest number of flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What is the code of airport that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "What is the code of airport that has fewest of number flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "What code of airport that fewest number of flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What is the code of airport that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode = 'AKO'",
            "question": "What is the code of airport that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "Give the code of the airport with the least flights.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport and T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) limit 1",
            "question": "Give the code of the airport with the least flights.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport or T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) desc limit 1",
            "question": "Give the code of the airport with the least flights.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give the code of the airport with the least flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "Give of code the the airport with the least flights.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "Give code airport with flights.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Give the code of the airport with the least flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "Give the code of the airport with the least flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airline has most number of flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airline has most number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airline has of most number flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which has most number of flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "Which airline has most number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "Which airline has most number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Which airline has most number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airline has most number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "What airline serves the most flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) asc limit 1",
            "question": "What airline serves the most flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) asc limit 1",
            "question": "What airline serves the most flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "What airline serves the most flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "What serves airline the most flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "What airline the flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "What airline serves the most flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "What airline serves the most flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) desc limit 1",
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "Find the and country abbreviation of the airline that has fewest number of flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "Find and country of the airline has fewest of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) desc limit 1",
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "is abbreviation of the What the airilne has the fewest flights and what country is it in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "What is abbreviation the fewest flights and country is it in?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' ANP'",
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "What are airlines some that have flight departing from airport 'AHD'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "are airlines that have flight from airport 'AHD'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Which airlines have a flight with source airport AHD?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' APN'",
            "question": "Which airlines have a flight with source airport AHD?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airlines have a flight with source airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Which airlines have flight a with source airport AHD?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Which airlines have a flight with source",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Which airlines have a flight with source airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Which airlines have a flight with source airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airlines have a flight with source airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = ' AEL'",
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "What are that have airlines flights arriving at airport 'AHD'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "What are airlines have arriving at airport",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "Which airlines have a flight with destination airport AHD?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = ' APV'",
            "question": "Which airlines have a flight with destination airport AHD?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Which airlines have a flight with destination airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "Which airlines a have flight with destination airport AHD?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "Which a flight with airport AHD?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Which airlines have a flight with destination airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = 'Ashley' AND T3.City = 'Aberdeen'",
            "question": "Which airlines have a flight with destination airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Which airlines have a flight with destination airport AHD?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' MMI' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' ANW'",
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != 'APG' intersect SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != 'CVO'",
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' MMI' except SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' ANW'",
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Find all airlines that have flights from airports both 'APG' and 'CVO'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Find all airlines that have from both airports 'APG' and 'CVO'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' ALN' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' AMA'",
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' except SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != ' ALN' intersect SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != ' AMA'",
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airlines have departing flights from both and APG CVO airports?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airlines have departing from APG and airports?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' NDV' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' AMA'",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != 'CVO' intersect SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Find all that airlines have flights from airport 'CVO' but not from 'APG'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Find airlines that have flights from airport 'CVO' but not from",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' CAK' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' ANB'",
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' union SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != 'APG'",
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport != ' CAK' except SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ' ANB'",
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "have Which airlines departures from CVO but not from APG airports?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'",
            "question": "Which airlines have departures CVO not APG",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRPORTS",
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Find all airlines that have at least 10 flights.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 7",
            "question": "Find all airlines that have at least 10 flights.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 7",
            "question": "Find all airlines that have at least 10 flights.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Find all airlines that have at least 10 flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Find all have airlines that at least 10 flights.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "all that have at 10 flights.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "Find all airlines that have at least 10 flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Find all airlines that have at least 10 flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Which airlines have at least 10 flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 9",
            "question": "Which airlines have at least 10 flights?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 10",
            "question": "Which airlines have at least 10 flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT City , Country FROM AIRPORTS WHERE AirportName = 'Alton'",
            "question": "Which airlines have at least 10 flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Which airlines at least have 10 flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "Which airlines have least 10 flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which airlines have at least 10 flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which airlines have at least 10 flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Find all airlines that have fewer than 200 flights.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 300",
            "question": "Find all airlines that have fewer than 200 flights.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 200",
            "question": "Find all airlines that have fewer than 200 flights.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "Find all airlines that have fewer than 200 flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Find all airlines fewer that have than 200 flights.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Find airlines that have fewer than 200",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find all airlines that have fewer than 200 flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find all airlines that have fewer than 200 flights.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which airlines have less than 200 flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 134",
            "question": "Which airlines have less than 200 flights?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 200",
            "question": "Which airlines have less than 200 flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Which airlines have less than 200 flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which airlines less have than 200 flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "Which airlines than flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airlines have less than 200 flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Which airlines have less than 200 flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'Southwest Airlines'",
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline != 'Southwest Airlines'",
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) LIMIT 1",
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "What are flight numbers of \"United Airline Airlines\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "What are flight numbers of \"United Airlines\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Which flight numbers correspond to United Airlines flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'AirTran Airways'",
            "question": "Which flight numbers correspond to United Airlines flights?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "Which flight numbers correspond to United Airlines flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Which flight numbers United to correspond Airlines flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Which flight numbers to United flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.DestAirport = 'ASY'",
            "question": "Which flight numbers correspond to United Airlines flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Which flight numbers correspond to United Airlines flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'",
            "question": "Which flight numbers correspond to United Airlines flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = ' QAW'",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport != ' QAW'",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What are of numbers flight flights departing from Airport \"APG\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "What flight flights departing from \"APG\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Give the flight numbers of flights leaving from APG.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = ' ANN'",
            "question": "Give the flight numbers of flights leaving from APG.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport != ' ANN'",
            "question": "Give the flight numbers of flights leaving from APG.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Give the flight numbers of flights leaving from APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "flight Give the numbers of flights leaving from APG.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = 'APG'",
            "question": "Give the flight numbers flights APG.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportCode , AirportName FROM AIRPORTS WHERE city = 'Anthony'",
            "question": "Give the flight numbers of flights leaving from APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD'",
            "question": "Give the flight numbers of flights leaving from APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = ' ABQ'",
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport != ' ABQ'",
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "What are flight numbers of flights Airport at arriving \"APG\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "What flight flights \"APG\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) < 200",
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "Give the flight numbers of flights landing at APG.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = ' ARX'",
            "question": "Give the flight numbers of flights landing at APG.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "Give the flight numbers of flights landing at APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "Give the flight of numbers flights landing at APG.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport = 'APG'",
            "question": "flight of flights landing at",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Give the flight numbers of flights landing at APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count( * ) LIMIT 1",
            "question": "Give the flight numbers of flights landing at APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Give the flight numbers of flights landing at APG.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Abingdon '",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City != 'Aberdeen'",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "flight are What numbers of flights departing from City \"Aberdeen \"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What flights departing City \"Aberdeen \"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation = 'UAL'",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aniak '",
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City != 'Aniak '",
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give flight the numbers of flights leaving from Aberdeen.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give flight numbers of flights",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES WHERE Country = 'USA'",
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways'",
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Arctic Village '",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "flight What are numbers of flights arriving at City \"Aberdeen\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "What of at \"Aberdeen\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Airline , Abbreviation FROM AIRLINES WHERE Country = 'USA'",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = 'United Airlines' AND T2.SourceAirport = 'AHD'",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aspen '",
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City != 'Aberdeen'",
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City != 'Aspen '",
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = 'Aberdeen' AND T3.Airline = 'United Airlines'",
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "Give the flight numbers of arriving flights in Aberdeen.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
            "question": "the flight numbers of flights arriving in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = 'United Airlines'",
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Amityville ' OR T2.city = 'Akiachak '",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city != 'Aberdeen' and T2.city = 'Abilene'",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city != 'Amityville ' or T2.city = 'Akiachak '",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM AIRLINES",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "Find the number of flights landing the in city of Aberdeen or Abilene.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "Find the number landing city of Aberdeen or Abilene.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen'",
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "How many flights land in Aberdeen or Abilene?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Anacortes ' OR T2.city = 'AkronCanton OH '",
            "question": "How many flights land in Aberdeen or Abilene?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city != 'Aberdeen' and T2.city != 'Abilene'",
            "question": "How many flights land in Aberdeen or Abilene?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Anacortes ' and T2.city != 'AkronCanton OH '",
            "question": "How many flights land in Aberdeen or Abilene?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT Country FROM AIRLINES WHERE Airline = 'JetBlue Airways'",
            "question": "How many flights land in Aberdeen or Abilene?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "many How flights land in Aberdeen or Abilene?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = 'Aberdeen' OR T2.city = 'Abilene'",
            "question": "How many flights land or Abilene?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count( * ) > 10",
            "question": "How many flights land in Aberdeen or Abilene?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Find the name of airports which do not have any flight in and out.",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode not in ( SELECT SourceAirport FROM Flights intersect SELECT DestAirport FROM Flights )",
            "question": "Find the name of airports which do not have any flight in and out.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode in ( SELECT SourceAirport FROM Flights union SELECT DestAirport FROM Flights )",
            "question": "Find the name of airports which do not have any flight in and out.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the name of airports which do not have any flight in and out.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Find the name of airports which have not any do flight in and out.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "the name of which do not have any flight in and out.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Find the name of airports which do not have any flight in and out.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Find the name of airports which do not have any flight in and out.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Which airports do not have departing or arriving flights?",
            "label": 1,
            "type": "original_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode in ( SELECT SourceAirport FROM Flights intersect SELECT DestAirport FROM Flights )",
            "question": "Which airports do not have departing or arriving flights?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode in ( SELECT SourceAirport FROM Flights union SELECT DestAirport FROM Flights )",
            "question": "Which airports do not have departing or arriving flights?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS WHERE DestAirport = 'ATO'",
            "question": "Which airports do not have departing or arriving flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Which airports do have not departing or arriving flights?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights )",
            "question": "Which have departing or arriving flights?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT count( * ) FROM FLIGHTS",
            "question": "Which airports do not have departing or arriving flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        },
        {
            "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO'",
            "question": "Which airports do not have departing or arriving flights?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "flight_2"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "How many employees are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "How many employees are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "How employees are many there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "How many are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "How many employees are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "How many employees are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "How many employees are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "How many employees are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Count the number of employees",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Count the number of employees",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Count number of the employees",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Count the of employees",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Count the number of employees",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Count the number of employees",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "Count the number of employees",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Count the number of employees",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "Sort employee names by their age in ascending order.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Sort employee names by their age in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "Sort employee by names their age in ascending order.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "Sort employee age in ascending order.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Sort employee names by their age in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Sort employee names by their age in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Sort employee names by their age in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Sort employee names by their age in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "List the names of employees and sort in ascending order of age.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "List the names of employees and sort in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "List the names of employees and sort order in ascending of age.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "List the and in ascending age.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "List the names of employees and sort in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "List the names of employees and sort in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "List the names of employees and sort in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "List the names of employees and sort in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "What is the number of employees from each city?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "What is the number of employees from each city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "What is the number employees of from each city?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "What is the number of employees from city?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "What is the number of employees from each city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "What is the number of employees from each city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "What is the number of employees from each city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "What is the number of employees from each city?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Count the number of employees for each city.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Count the number of employees for each city.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Count the number of for employees each city.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Count the number employees for each city.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Count the number of employees for each city.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Count the number of employees for each city.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of employees for each city.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Count the number of employees for each city.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Which cities do more than one employee under age 30 come from?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 25 GROUP BY city HAVING count( * ) > 2",
            "question": "Which cities do more than one employee under age 30 come from?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age > 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Which cities do more than one employee under age 30 come from?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age > 25 GROUP BY city HAVING count( * ) > 2",
            "question": "Which cities do more than one employee under age 30 come from?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which cities do more than one employee under age 30 come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Which cities do than more one employee under age 30 come from?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Which cities more than one under age 30 come from?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Which cities do more than one employee under age 30 come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Find the cities that have more than one employee under age 30.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 36 GROUP BY city HAVING count( * ) > 2",
            "question": "Find the cities that have more than one employee under age 30.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age > 36 GROUP BY city HAVING count( * ) < 2",
            "question": "Find the cities that have more than one employee under age 30.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Find the cities that have more than one employee under age 30.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Find the cities that have more than one under employee age 30.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Find the cities have more than one employee age 30.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Find the cities that have more than one employee under age 30.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Find the cities that have more than one employee under age 30.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Find the number of shops in each location.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Find the number of shops in each location.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Find the number of each shops in location.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Find shops in location.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Find the number of shops in each location.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "Find the number of shops in each location.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the number of shops in each location.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Find the number of shops in each location.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "How many shops are there in each location?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "How many shops are there in each location?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "many shops How are there in each location?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "many in location?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "How many shops are there in each location?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "How many shops are there in each location?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "How many shops are there in each location?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "How many shops are there in each location?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products asc limit 1",
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Find the manager name and district of the of number whose shop products is the largest.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Find the manager name and district the whose number of products is largest.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products asc limit 1",
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products asc limit 1",
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "What are the and name manager district of the shop that sells the largest number of products?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "What are the manager name district the shop that sells the of products?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "find the minimum and maximum number of products of all stores.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "find the minimum and maximum number of products of all stores.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "find the minimum and maximum number products of of all stores.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "the minimum and maximum number of of all stores.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the minimum and maximum number of products of all stores.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "find the minimum and maximum number of products of all stores.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "find the minimum and maximum number of products of all stores.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the minimum and maximum number of products of all stores.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "What are the minimum and maximum number of products across all the shops?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "What are the minimum and maximum number of products across all the shops?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "What are the minimum and maximum products of number across all the shops?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "are the minimum and number products across the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "What are the minimum and maximum number of products across all the shops?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "What are the minimum and maximum number of products across all the shops?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "What are the minimum and maximum number of products across all the shops?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "What are the minimum and maximum number of products across all the shops?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products asc",
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Return the name, location and district of all in shops descending order of number of products.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Return the name, location and district descending order of number of products.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products asc",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products asc",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Sort all the in products shops by number descending order, and return the name, location and district of each shop.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Sort all shops by number products descending order, and return the name, and district each shop.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products < ( SELECT avg( number_products ) FROM shop )",
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products < ( SELECT avg( number_products ) FROM shop )",
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Find the names of stores whose number is than more products the average number of products.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Find names whose number than the number",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products < ( SELECT avg( number_products ) FROM shop )",
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products < ( SELECT avg( number_products ) FROM shop )",
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Which shops' number products is above the average? the me Give shop names.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Which shops' number products is the me the shop names.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the name of was employee who awarded the most times in the evaluation.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the name who was awarded the times in evaluation.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which employee received the awards most in evaluations? Give me the employee name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which employee received most awards in evaluations? the name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Find the name of the employee who got the highest one time bonus.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus asc limit 1",
            "question": "Find the name of the employee who got the highest one time bonus.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus asc limit 1",
            "question": "Find the name of the employee who got the highest one time bonus.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Find the name of the employee who got the highest one time bonus.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Find the name the of employee who got the highest one time bonus.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "the name employee who got the highest time",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Find the name of the employee who got the highest one time bonus.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Find the name of the employee who got the highest one time bonus.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus asc limit 1",
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Which the received employee biggest bonus? Give me the employee name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "received the biggest bonus? Give me the employee",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Find the names of employees who never won any award in the evaluation.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Find the names of employees who never won any award in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Find the names of employees never won who any award in the evaluation.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Find names of employees who award in the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Find the names of employees who never won any award in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Find the names of employees who never won any award in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the names of employees who never won any award in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Find the names of employees who never won any award in the evaluation.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "What are the names of the employees who never received any evaluation?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID in ( SELECT Employee_ID FROM evaluation )",
            "question": "What are the names of the employees who never received any evaluation?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "What are the names of the employees who never received any evaluation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "What the are names of the employees who never received any evaluation?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "are names of the employees who never received",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of the employees who never received any evaluation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "What are the names of the employees who never received any evaluation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "What are the names of the employees who never received any evaluation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name the of shop that is hiring the largest number of employees?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the the that is the largest number of employees?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which shop has the most employees? Give me the shop name.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Which shop has the most employees? Give me the shop name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "shop Which has the most employees? Give me the shop name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which the most employees? Give me the name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Which shop has the most employees? Give me the shop name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Which shop has the most employees? Give me the shop name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Which shop has the most employees? Give me the shop name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Which shop has the most employees? Give me the shop name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Find the name of the shops that do not hire any employee.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Find the name of the shops that do not hire any employee.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Find the name of that shops the do not hire any employee.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Find the name the shops not hire any employee.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Find the name of the shops that do not hire any employee.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "question": "Find the name of the shops that do not hire any employee.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Find the name of the shops that do not hire any employee.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Find the name of the shops that do not hire any employee.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Which shops run with no employees? Find the shop names",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which shops run with no employees? Find the shop names",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Which shops run no employees? with Find the shop names",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "shops run with no employees? Find shop names",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Which shops run with no employees? Find the shop names",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "Which shops run with no employees? Find the shop names",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Which shops run with no employees? Find the shop names",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "Which shops run with no employees? Find the shop names",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "Find number the of employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "the employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "For each shop, return the number of employees working there and of name the the shop.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name",
            "question": "For each return the of working and of shop.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation )",
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "What is total bonus given in all evaluations?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "What is total bonus given in all evaluations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "What is total bonus given all in evaluations?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "What total bonus given in all evaluations?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is total bonus given in all evaluations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE number_products > ( SELECT avg( number_products ) FROM shop )",
            "question": "What is total bonus given in all evaluations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "What is total bonus given in all evaluations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "What is total bonus given in all evaluations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "Find the total amount of bonus given in all the evaluations.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Find the total amount of bonus given in all the evaluations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "Find the total amount given bonus of in all the evaluations.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "the total of bonus given all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Find the total amount of bonus given in all the evaluations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Find the total amount of bonus given in all the evaluations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Find the total amount of bonus given in all the evaluations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Find the total amount of bonus given in all the evaluations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT * FROM hiring",
            "question": "Give me all the information about hiring.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "Give me all the information about hiring.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Give me all information the about hiring.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Give me all information about hiring.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM shop WHERE shop_id NOT IN ( SELECT shop_id FROM hiring )",
            "question": "Give me all the information about hiring.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "Give me all the information about hiring.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "Give me all the information about hiring.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING count( * ) > 1",
            "question": "Give me all the information about hiring.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT * FROM hiring",
            "question": "What is all the information about hiring?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name FROM employee ORDER BY age",
            "question": "What is all the information about hiring?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "What all the is information about hiring?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "What is information about",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "What is all the information about hiring?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "What is all the information about hiring?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "What is all the information about hiring?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , city FROM employee GROUP BY city",
            "question": "What is all the information about hiring?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3600 INTERSECT SELECT district FROM shop WHERE Number_products > 8572",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products > 3000 intersect SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products > 3600 except SELECT district FROM shop WHERE Number_products > 8572",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Which district has both stores with less 3000 and products than stores with more than 10000 products?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "district both with less than 3000 products stores with than 10000",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 2700 INTERSECT SELECT district FROM shop WHERE Number_products > 8572",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products > 2700 intersect SELECT district FROM shop WHERE Number_products > 8572",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT min( Number_products ) , max( Number_products ) FROM shop",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Find the districts in which there are both shops selling less than 3000 products shops and selling than 10000 more products.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "question": "Find the in which both shops selling less and shops selling more than 10000 products.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "How many different store locations are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.bonus DESC LIMIT 1",
            "question": "How many different store locations are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "How store different many locations are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "different are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "How many different store locations are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) FROM employee",
            "question": "How many different store locations are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "How many different store locations are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT * FROM hiring",
            "question": "How many different store locations are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Count the number of distinct store locations.",
            "label": 1,
            "type": "original_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( * ) , LOCATION FROM shop GROUP BY LOCATION",
            "question": "Count the number of distinct store locations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "Count number of the distinct store locations.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT count( DISTINCT LOCATION ) FROM shop",
            "question": "the number of distinct store locations.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T1.name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of distinct store locations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT sum( bonus ) FROM evaluation",
            "question": "Count the number of distinct store locations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT T2.name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.shop_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of distinct store locations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        },
        {
            "query": "SELECT name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "question": "Count the number of distinct store locations.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "employee_hire_evaluation"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "How many documents do we have?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "How many documents do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "How many we documents do have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "How many documents do we",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "How many documents do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "How many documents do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many documents do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "How many documents do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "Count the number of documents.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "Count the number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "Count number of the documents.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "the of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "Count the number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Count the number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "Count the number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "List document IDs, document names, document descriptions and for all documents.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "IDs, document and document descriptions all documents.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "What are the ids, names, and descriptions for all documents?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "What are the ids, names, and descriptions for all documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "What are names, ids, the and descriptions for all documents?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "are and descriptions for all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "What are the ids, names, and descriptions for all documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "What are the ids, names, and descriptions for all documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "What are the ids, names, and descriptions for all documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "What are the ids, names, and descriptions for all documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "What is the document name and template id for with with description document the letter 'w' in it?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "is document name and id for document with with in it?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description not like '%w%'",
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description not like '%w%'",
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Return the names and template ids for contain documents that the letter w in their description.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Return the names template ids that contain the letter w in their description.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'How Google people work'",
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name != 'Robbin CV'",
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "What is the document id, template id document description for and named \"Robbin CV\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "What is id, template id and description for \"Robbin CV\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'A history of Arts'",
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name != 'Robbin CV'",
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name != 'A history of Arts'",
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "Return the document id, template id, and for description the document with the name Robbin CV.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "Return document id, template id, and description document with",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "How many different templates do all document use?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "How many different templates do all document use?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "How many do templates different all document use?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "How many different do document use?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "How many different templates do all document use?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different templates do all document use?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "How many different templates do all document use?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "How many different templates do all document use?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "Count the number of different templates used for documents.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "Count the number of different templates used for documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "Count the number of different for templates used documents.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "Count number of different templates for documents.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of different templates used for documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Count the number of different templates used for documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "Count the number of different templates used for documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "Count the number of different templates used for documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "How many documents are using the template with type code 'PPT'?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'AD'",
            "question": "How many documents are using the template with type code 'PPT'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code != 'PPT'",
            "question": "How many documents are using the template with type code 'PPT'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "How many documents are using the template with type code 'PPT'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "How many documents are using the with type template code 'PPT'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "documents are using the template type code 'PPT'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "How many documents are using the template with type code 'PPT'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "How many documents are using the template with type code 'PPT'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "Count the number of documents that use the PPT template type.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'CV'",
            "question": "Count the number of documents that use the PPT template type.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "Count the number of documents that use the PPT template type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "Count the number of documents the use that PPT template type.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "the number of documents that use the template type.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "Count the number of documents that use the PPT template type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "Count the number of documents that use the PPT template type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Count the number of documents that use the PPT template type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "Show all template ids and number of documents using each template.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Show all template ids and number of documents using each template.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "Show all template ids and documents of number using each template.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "Show template ids and number using each",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Show all template ids and number of documents using each template.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Show all template ids and number of documents using each template.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "Show all template ids and number of documents using each template.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "Show all template ids and number of documents using each template.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "What are all different template for documents, and used ids how many times were each of them used?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "What are different template ids for how many times each of them",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the id and type code for the template used by the most documents?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "What is the id and type code for the template used by the most documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the id and type code for the by used template the most documents?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the type code for the template used by the most",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What is the id and type code for the template used by the most documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What is the id and type code for the template used by the most documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "What is the id and type code for the template used by the most documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "What is the id and type code for the template used by the most documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) asc limit 1",
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the id code and of type the template that is used for the greatest number of documents.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the id and type code of is used for the greatest number documents.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "Show ids for all templates that are used by more than one document.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 2",
            "question": "Show ids for all templates that are used by more than one document.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) < 1",
            "question": "Show ids for all templates that are used by more than one document.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Show ids for all templates that are used by more than one document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "Show ids for all templates that are more used by than one document.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "Show ids for all templates that used by than one document.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Show ids for all templates that are used by more than one document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "Show ids for all templates that are used by more than one document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "What are the template ids of any templates used in more than a single document?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 2",
            "question": "What are the template ids of any templates used in more than a single document?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) < 1",
            "question": "What are the template ids of any templates used in more than a single document?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) < 2",
            "question": "What are the template ids of any templates used in more than a single document?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the template ids of any templates used in more than a single document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "What are the template ids of any more in used templates than a single document?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "What the template of more than a document?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "What are the template ids of any templates used in more than a single document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Show ids for all templates not used by any document.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates intersect SELECT template_id FROM Documents",
            "question": "Show ids for all templates not used by any document.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show ids for all templates not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Show ids for all templates not by used any document.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "ids for all not by any",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "Show ids for all templates not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Show ids for all templates not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "Show ids for all templates not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What are the ids for templates that are not used in any documents?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "What are the ids for templates that are not used in any documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What are the ids for templates that not used are in any documents?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What are the for templates that are not used in any documents?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "What are the ids for templates that are not used in any documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "What are the ids for templates that are not used in any documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "What are the ids for templates that are not used in any documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "What are the ids for templates that are not used in any documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "How many templates do we have?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "How many templates do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "How do templates many we have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "many do we have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "How many templates do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "How many templates do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "How many templates do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "How many templates do we have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "Count the number of templates.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "Count the number of templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "the number Count of templates.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "Count number of templates.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Count the number of templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Count the number of templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "Count the number of templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Count the number of templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Show template ids, version numbers, and template codes for type all templates.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "version numbers, and template type for all templates.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are the ids, version numbers, and type codes for each template?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "What are the ids, version numbers, and type codes for each template?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are the version ids, numbers, and type codes for each template?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are ids, type codes each template?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the ids, version numbers, and type codes for each template?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "What are the ids, version numbers, and type codes for each template?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "What are the ids, version numbers, and type codes for each template?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "What are the ids, version numbers, and type codes for each template?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "Show all distinct template type codes for all templates.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Show all distinct template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "Show distinct all template type codes for all templates.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "Show distinct template type for all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "Show all distinct template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "Show all distinct template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all distinct template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all distinct template type codes for all templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What are the different template type codes?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "What are the different template type codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What the are different template type codes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What are different template type",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the different template type codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "What are the different template type codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What are the different template type codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "What are the different template type codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "What are the ids of templates with template type code PP or PPT?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'CV' OR template_type_code = 'AD'",
            "question": "What are the ids of templates with template type code PP or PPT?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' and template_type_code = 'PPT'",
            "question": "What are the ids of templates with template type code PP or PPT?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the ids of templates with template type code PP or PPT?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "What are the templates ids of with template type code PP or PPT?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "are the ids of templates with template type PPT?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the ids of templates with template type code PP or PPT?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What are the ids of templates with template type code PP or PPT?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Return the ids of templates that have the code PP or PPT.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PPT' OR template_type_code = 'BK'",
            "question": "Return the ids of templates that have the code PP or PPT.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code != 'PPT' and template_type_code != 'BK'",
            "question": "Return the ids of templates that have the code PP or PPT.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "Return the ids of templates that have the code PP or PPT.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Return the ids of templates that code the have PP or PPT.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Return the PPT.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "Return the ids of templates that have the code PP or PPT.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "Return the ids of templates that have the code PP or PPT.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "How many templates have template type code CV?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code != 'CV'",
            "question": "How many templates have template type code CV?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "How many templates have template type code CV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "How many have templates template type code CV?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "many templates have template type code CV?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "How many templates have template type code CV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "How many templates have template type code CV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "How many templates have template type code CV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "Count the number of templates of the type CV.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'BK'",
            "question": "Count the number of templates of the type CV.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code != 'BK'",
            "question": "Count the number of templates of the type CV.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Count the number of templates of the type CV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "Count the number of the of templates type CV.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "the of templates of the type CV.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "Count the number of templates of the type CV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "Count the number of templates of the type CV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 6",
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number < 5",
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "the is What number version and template type code for the template with version number later than 5?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "What is the version number and code for the template version later than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 6",
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number < 5",
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number < 6",
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "Return the version numbers and template type codes of a templates with number version greater than 5.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "the version numbers and template codes of a than 5.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show all template type codes and number of templates for each.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Show all template type codes and number of templates for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show all template type and number codes of templates for each.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show type codes and number templates for",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Show all template type codes and number of templates for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "Show all template type codes and number of templates for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Show all template type codes and number of templates for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show all template type codes and number of templates for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "What are the different template type codes, and correspond templates how many to each?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "the different type codes, and how many templates to each?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which template type code has most number of templates?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Which template type code has most number of templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "type Which template code has most number of templates?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which template type has number of templates?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Which template type code has most number of templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Which template type code has most number of templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Which template type code has most number of templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "Which template type code has most number of templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the type code of the template type that the most templates belong to.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) asc limit 1",
            "question": "Return the type code of the template type that the most templates belong to.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Return the type code of the template type that the most templates belong to.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "the Return type code of the template type that the most templates belong to.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "type code of the type that to.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "Return the type code of the template type that the most templates belong to.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Return the type code of the template type that the most templates belong to.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Return the type code of the template type that the most templates belong to.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "Show all template type codes with less than three templates.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) > 3",
            "question": "Show all template type codes with less than three templates.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Show all template type codes with less than three templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "Show all template codes type with less than three templates.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "Show all type with than three templates.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Show all template type codes with less than three templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Show all template type codes with less than three templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Show all template type codes with less than three templates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "What are the codes of template types have fewer that than 3 templates?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "What codes of template that fewer templates?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "What the smallest version number and its template type code?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What the smallest version number and its template type code?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "smallest the What version number and its template type code?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "What the smallest version and its template type code?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What the smallest version number and its template type code?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What the smallest version number and its template type code?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "What the smallest version number and its template type code?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What the smallest version number and its template type code?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "Return the lowest version number, along its corresponding with template type code.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "the lowest version number, along with its corresponding template code.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Summer Show'",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name != 'Summer Show'",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "What is the template type code of the template used with by the document name \"Data base\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "type code the used document with name base\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Do not panic'",
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name != 'Data base'",
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name != 'Do not panic'",
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Return the template type code of the template is a by used that document named Data base.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Return template type the template that is by a document named Data base.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Show all document names using templates with template type code BK.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'PPT'",
            "question": "Show all document names using templates with template type code BK.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code != 'PPT'",
            "question": "Show all document names using templates with template type code BK.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "Show all document names using templates with template type code BK.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Show all names document using templates with template type code BK.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Show all using templates with template type code",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show all document names using templates with template type code BK.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Show all document names using templates with template type code BK.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are the names of documents that use templates with the code BK?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'PPT'",
            "question": "What are the names of documents that use templates with the code BK?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code != 'BK'",
            "question": "What are the names of documents that use templates with the code BK?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "What are the names of documents that use templates with the code BK?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are of the names documents that use templates with the code BK?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What the names of documents with the code BK?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "What are the names of documents that use templates with the code BK?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "What are the names of documents that use templates with the code BK?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "Show all template type codes and the number of documents using each type.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all template type codes and the number of documents using each type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "all template Show type codes and the number of documents using each type.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "all template type codes and the documents each type.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "Show all template type codes and the number of documents using each type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "Show all template type codes and the number of documents using each type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all template type codes and the number of documents using each type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all template type codes and the number of documents using each type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What are the different template type codes, and how many documents use each type?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are the different template type codes, and how many documents use each type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What are the different template type codes, many how documents and use each type?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "are different template how many documents use each type?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "What are the different template type codes, and how many documents use each type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the different template type codes, and how many documents use each type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are the different template type codes, and how many documents use each type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "What are the different template type codes, and how many documents use each type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which template type code is used by most number of documents?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) asc limit 1",
            "question": "Which template type code is used by most number of documents?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Which template type code is used by most number of documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which template type code is used by number of most documents?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which template type code used by most of documents?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "Which template type code is used by most number of documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "Which template type code is used by most number of documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Which template type code is used by most number of documents?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the code of the template type that is most commonly used in documents.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) asc limit 1",
            "question": "Return the code of the template type that is most commonly used in documents.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the code of the template type that is most commonly used in documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the code of the type template is that most commonly used in documents.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the code of the template type is most commonly in documents.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Return the code of the template type that is most commonly used in documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Return the code of the template type that is most commonly used in documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Return the code of the template type that is most commonly used in documents.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "Show all template type codes that are not used by any document.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates union SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "Show all template type codes that are not used by any document.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Show all template type codes that are not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "Show template type all codes that are not used by any document.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "Show template type codes that are not used by any document.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Show all template type codes that are not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show all template type codes that are not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Show all template type codes that are not used by any document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "What are the codes of template types that are not used for any document?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates union SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "What are the codes of template types that are not used for any document?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "What are the codes of template types that are not used for any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "What are the codes of template not that are types used for any document?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "question": "are the of template types are used any",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are the codes of template types that are not used for any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "What are the codes of template types that are not used for any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are the codes of template types that are not used for any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all template type codes and descriptions.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Show all template type codes and descriptions.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all template and codes type descriptions.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all template type and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Show all template type codes and descriptions.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "Show all template type codes and descriptions.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "Show all template type codes and descriptions.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Show all template type codes and descriptions.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "What are the type codes and descriptions for all template types?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "What are the type codes and descriptions for all template types?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "What are the type codes and for all descriptions template types?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "What are codes and descriptions all template types?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "What are the type codes and descriptions for all template types?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "What are the type codes and descriptions for all template types?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What are the type codes and descriptions for all template types?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "What are the type codes and descriptions for all template types?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "What is the template type descriptions for template type code \"AD\".",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'PP'",
            "question": "What is the template type descriptions for template type code \"AD\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code != 'PP'",
            "question": "What is the template type descriptions for template type code \"AD\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT version_number , template_type_code FROM Templates WHERE version_number > 5",
            "question": "What is the template type descriptions for template type code \"AD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "What is type template the descriptions for template type code \"AD\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "What is the template for template type code \"AD\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "What is the template type descriptions for template type code \"AD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "What is the template type descriptions for template type code \"AD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "Return the template type description of the template type with the code AD.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'PPT'",
            "question": "Return the template type description of the template type with the code AD.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code != 'AD'",
            "question": "Return the template type description of the template type with the code AD.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code != 'PPT'",
            "question": "Return the template type description of the template type with the code AD.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the template type description of the template type with the code AD.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "Return the template of description type the template type with the code AD.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "Return template type description the code",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Return the template type description of the template type with the code AD.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "What is the template type code for template type description \"Book\".",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Presentation'",
            "question": "What is the template type code for template type description \"Book\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description != 'Book'",
            "question": "What is the template type code for template type description \"Book\".",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description != 'Presentation'",
            "question": "What is the template type code for template type description \"Book\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "What is the template type code for template type description \"Book\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "What is the code template type for template type description \"Book\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "What the template type code for template type description \"Book\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "What is the template type code for template type description \"Book\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Return the type code of the template type with the description \"Book\".",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'CV'",
            "question": "Return the type code of the template type with the description \"Book\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description != 'Book'",
            "question": "Return the type code of the template type with the description \"Book\".",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description != 'CV'",
            "question": "Return the type code of the template type with the description \"Book\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Return the type code of the template type with the description \"Book\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Return the type code of template type the with the description \"Book\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Return the type code template type with the \"Book\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "Return the type code of the template type with the description \"Book\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "What are the distinct template type descriptions for used the templates ever by any document?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "What the distinct for the templates ever any document?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Return the different descriptions for templates that have been used in a document.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the different descriptions for templates that have been used in a document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Return the different descriptions that templates for have been used in a document.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Return different descriptions that have been used in a document.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "Return the different descriptions for templates that have been used in a document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "Return the different descriptions for templates that have been used in a document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Return the different descriptions for templates that have been used in a document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the different descriptions for templates that have been used in a document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "What are the template ids with template type description \"Presentation\".",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Paper'",
            "question": "What are the template ids with template type description \"Presentation\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "What are the template ids with template type description \"Presentation\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "What are the template with template ids type description \"Presentation\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "What the ids with template type",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are the template ids with template type description \"Presentation\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What are the template ids with template type description \"Presentation\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "What are the template ids with template type description \"Presentation\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'CV'",
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "Return the ids to corresponding templates with the description 'Presentation'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "Return the with the description 'Presentation'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "How many paragraphs in total?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "How many paragraphs in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "How paragraphs in many total?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "How paragraphs total?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "How many paragraphs in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "How many paragraphs in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "How many paragraphs in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many paragraphs in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Count the number of paragraphs.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "Count the number of paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "Count of the number paragraphs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs",
            "question": "the number of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Count the number of paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Count the number of paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Welcome to NY'",
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name != 'Summer Show'",
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "How many for the paragraphs document with name 'Summer Show'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "many for the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Data base'",
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name != 'Summer Show'",
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "number the Count of paragraphs in the document named 'Summer Show'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "question": "the number of the named Show'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text not like 'korea'",
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "Show paragraph paragraph details for with text 'Korea ' .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "details for paragraph with ' .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text not like 'korea'",
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "What the details are for the paragraph that includes the text 'Korea ' ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "What are the details the that includes text 'Korea '",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Customer reviews'",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Show all paragraph ids for and texts the document with name 'Welcome to NY'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Show all paragraph ids and texts document with name 'Welcome to NY'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , count( * ) FROM Templates GROUP BY template_type_code",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name != 'Welcome to NY'",
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "What are the ids and texts of in document paragraphs the titled 'Welcome to NY'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "What the and texts of paragraphs in the document 'Welcome NY'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Data base'",
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name != 'Data base'",
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Show all texts paragraph for the document \"Customer reviews\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "all paragraph texts document",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'How to write a CV'",
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name != 'How to write a CV'",
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What are the texts paragraph for the document with the name 'Customer reviews'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "What are paragraph texts the document the reviews'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , document_name , document_description FROM Documents",
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Show all document number and ids the of paragraphs in each document. Order by document id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Show all document ids and the of paragraphs in each document. by document",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "select other_details from paragraphs where paragraph_text like 'korea'",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code = 'AD'",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Return the different document ids along with the number of paragraphs each, ordered to corresponding by id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Return the different document with the number of paragraphs corresponding to each, ordered id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Show all document ids, names and number of the paragraphs in each document.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "Show all ids, and the of paragraphs in each document.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "What are the ids and names of each as the as well document, number of paragraphs in each?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name , count( * ) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "question": "What are the names of each as well as the in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates WHERE template_type_code = 'CV'",
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "List all document ids with at least two paragraphs.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 3",
            "question": "List all document ids with at least two paragraphs.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) <= 2",
            "question": "List all document ids with at least two paragraphs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) <= 3",
            "question": "List all document ids with at least two paragraphs.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code , count( * ) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "question": "List all document ids with at least two paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "List all document with ids at least two paragraphs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "List all document with at least two",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents",
            "question": "List all document ids with at least two paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) <= 2",
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) <= 2",
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "What are the ids documents of that have 2 or more paragraphs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) >= 2",
            "question": "of documents have 2 more paragraphs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description = 'Book'",
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the document id and name with greatest number of paragraphs?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) asc limit 1",
            "question": "What is the document id and name with greatest number of paragraphs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) asc limit 1",
            "question": "What is the document id and name with greatest number of paragraphs?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count( * ) < 3",
            "question": "What is the document id and name with greatest number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the document id name and with greatest number of paragraphs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the and greatest of paragraphs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "What is the document id and name with greatest number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = 'Data base'",
            "question": "What is the document id and name with greatest number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the id and name of the document with the most paragraphs.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) asc limit 1",
            "question": "Return the id and name of the document with the most paragraphs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) asc limit 1",
            "question": "Return the id and name of the document with the most paragraphs.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "Return the id and name of the document with the most paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the id and name of document the with the most paragraphs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "the name of document with the most paragraphs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE '%w%'",
            "question": "Return the id and name of the document with the most paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , count( * ) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "question": "Return the id and name of the document with the most paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the document id with least number of paragraphs?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) desc limit 1",
            "question": "What is the document id with least number of paragraphs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the document id with least number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "the What is document id with least number of paragraphs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What document id with least",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "What is the document id with least number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , count( * ) FROM Documents GROUP BY template_id",
            "question": "What is the document id with least number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "question": "What is the document id with least number of paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Return the id of the document with the fewest paragraphs.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) desc limit 1",
            "question": "Return the id of the document with the fewest paragraphs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) desc limit 1",
            "question": "Return the id of the document with the fewest paragraphs.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id , version_number , template_type_code FROM Templates",
            "question": "Return the id of the document with the fewest paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Return the the id of document with the fewest paragraphs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Return the of the document with fewest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Return the id of the document with the fewest paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( DISTINCT template_id ) FROM Documents",
            "question": "Return the id of the document with the fewest paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "What is the document id with 1 to 2 paragraphs?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) not between 1 or 2",
            "question": "What is the document id with 1 to 2 paragraphs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) between 1 or 2",
            "question": "What is the document id with 1 to 2 paragraphs?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "What is the document id with 1 to 2 paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "What the is document id with 1 to 2 paragraphs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "What is document id to 2",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT min( Version_Number ) , template_type_code FROM Templates",
            "question": "What is the document id with 1 to 2 paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'",
            "question": "What is the document id with 1 to 2 paragraphs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) not between 1 or 2",
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id , template_id , Document_Description FROM Documents WHERE document_name = 'Robbin CV'",
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "Give the ids of documents between that have one and two paragraphs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count( * ) BETWEEN 1 AND 2",
            "question": "Give ids of documents between paragraphs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates WHERE template_type_code = 'PP' OR template_type_code = 'PPT'",
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'",
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'UK'",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text != 'Brazil' intersect SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text != 'Brazil' intersect SELECT document_id FROM Paragraphs WHERE paragraph_text != 'UK'",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Customer reviews'",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "document Show the id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "Show the id with paragraph text 'Brazil'",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Templates",
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "label": 1,
            "type": "original_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Micronesia' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Papua New Guinea'",
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count( * ) > 1",
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "What are the ids of documents contain the paragraph that text 'Brazil' and 'Ireland'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "question": "What are the of that contain the paragraph 'Brazil' 'Ireland'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT DISTINCT template_type_code FROM Templates",
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "query": "SELECT count( * ) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "cre_Doc_Template_Mgt"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "How many teachers are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "How many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "many teachers How are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "How teachers are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "How many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "How many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "How many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "How many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "What is the total count of teachers?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What is the total count of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "What is the count of total teachers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "the total count of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "What is the total count of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What is the total count of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What is the total count of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What is the total count of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "List the names of teachers in ascending order of age.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age desc",
            "question": "List the names of teachers in ascending order of age.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "List the names of teachers in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "List the names of in teachers ascending order of age.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "the names of in ascending order of age.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the names of teachers in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "List the names of teachers in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "List the names of teachers in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "What are the names of the teachers ordered by ascending age?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age desc",
            "question": "What are the names of the teachers ordered by ascending age?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What are the names of the teachers ordered by ascending age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "What are the names of teachers ordered the by ascending age?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "What the names of teachers by ascending",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "What are the names of the teachers ordered by ascending age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "What are the names of the teachers ordered by ascending age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What are the names of the teachers ordered by ascending age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What are the age and hometown of teachers?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the age and hometown of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What the are age and hometown of teachers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "are the of teachers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "What are the age and hometown of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What are the age and hometown of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What are the age and hometown of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "What are the age and hometown of teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What is the age and hometown of every teacher?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "What is the age and hometown of every teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What is and age the hometown of every teacher?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What is hometown of every teacher?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What is the age and hometown of every teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "What is the age and hometown of every teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What is the age and hometown of every teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What is the age and hometown of every teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'Farnworth Municipal Borough'",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown = 'Farnworth Municipal Borough'",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "List the name of teachers whose hometown is Lever `` not Little Urban District '' .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "List the name of teachers whose is not `` Little District ''",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'Farnworth Municipal Borough'",
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What are the names of the teachers whose hometown is not Lever Little `` District Urban '' ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What are the names of whose hometown not `` Little Lever ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "Show the name of teachers aged either 32 or 33?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 29 OR Age = 38",
            "question": "Show the name of teachers aged either 32 or 33?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 and Age != 33",
            "question": "Show the name of teachers aged either 32 or 33?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 29 and Age = 38",
            "question": "Show the name of teachers aged either 32 or 33?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "Show the name of teachers aged either 32 or 33?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "Show the of name teachers aged either 32 or 33?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "the name of teachers 33?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "Show the name of teachers aged either 32 or 33?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 43 OR Age = 40",
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age != 32 or Age = 33",
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 43 or Age != 40",
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "What are the names of the teachers who aged 32 either are or 33?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "What names of the teachers are aged 33?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "What is the hometown of the youngest teacher?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age desc limit 1",
            "question": "What is the hometown of the youngest teacher?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What is the hometown of the youngest teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "What is the of hometown the youngest teacher?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "What the of the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What is the hometown of the youngest teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What is the hometown of the youngest teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What is the hometown of the youngest teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Where is the youngest teacher from?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age desc limit 1",
            "question": "Where is the youngest teacher from?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age desc limit 1",
            "question": "Where is the youngest teacher from?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "Where is the youngest teacher from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Where the youngest is teacher from?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Where is youngest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "Where is the youngest teacher from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "Where is the youngest teacher from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "Show hometown different of teachers and the number of teachers from each hometown.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "hometown of teachers and number of teachers each hometown.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "For each hometown, how many teachers are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "For each hometown, how many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "For each how hometown, many teachers are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "For each hometown, how are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "For each hometown, how many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "For each hometown, how many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "For each hometown, how many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "For each hometown, how many teachers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the most common hometown of teachers.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) asc limit 1",
            "question": "List the most common hometown of teachers.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "List the most common hometown of teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the hometown common most of teachers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "most common hometown of teachers.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "List the most common hometown of teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "List the most common hometown of teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "List the most common hometown of teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the most commmon hometowns for teachers?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What is the most commmon hometowns for teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the commmon hometowns most for teachers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "is the most commmon hometowns for teachers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "What is the most commmon hometowns for teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What is the most commmon hometowns for teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What is the most commmon hometowns for teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What is the most commmon hometowns for teachers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "Show the hometowns shared by at least two teachers.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) <= 2",
            "question": "Show the hometowns shared by at least two teachers.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "Show the hometowns shared by at least two teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "Show the hometowns by at shared least two teachers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "Show the hometowns shared by at least",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "Show the hometowns shared by at least two teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Show the hometowns shared by at least two teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "Show the hometowns shared by at least two teachers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What are the towns from which at least two teachers come from?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 3",
            "question": "What are the towns from which at least two teachers come from?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) <= 2",
            "question": "What are the towns from which at least two teachers come from?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) <= 3",
            "question": "What are the towns from which at least two teachers come from?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the towns from which at least two teachers come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "are the What towns from which at least two teachers come from?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What are the towns which at least two teachers come from?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "What are the towns from which at least two teachers come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "names Show of teachers and the courses they are arranged to teach.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "Show names of and the courses they arranged teach.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What is the name of each teacher and what course they teach?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What is the name of each teacher and what course they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What is the name of each teacher and they what course teach?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What is name of and course teach?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "What is the name of each teacher and what course they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What is the name of each teacher and what course they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "What is the name of each teacher and what course they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the name of each teacher and what course they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "Show names of teachers and the courses they ascending are to arranged teach in alphabetical order of the teacher's name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "Show of teachers the courses are arranged teach in ascending alphabetical order the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the names the the of and courses teachers they teach in ascending alphabetical order by the name of the teacher?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the names of the teachers they teach ascending alphabetical by the name of the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "Show the name of the teacher for the math course.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course != 'Math'",
            "question": "Show the name of the teacher for the math course.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course != 'Math'",
            "question": "Show the name of the teacher for the math course.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "Show the name of the teacher for the math course.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "Show the name of the teacher math for the course.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "Show the name of the teacher the math course.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Age , Hometown FROM teacher",
            "question": "Show the name of the teacher for the math course.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "Show the name of the teacher for the math course.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What are the names of the people who teach math courses?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Science'",
            "question": "What are the names of the people who teach math courses?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What are the names of the people who teach math courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "What are the names of the people teach who math courses?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Math'",
            "question": "the names of who teach math courses?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "What are the names of the people who teach math courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the names of the people who teach math courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the names of the people who teach math courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "Show names of teachers and the number of courses they teach.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "Show names of teachers and the number of courses they teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "Show names of teachers and the of number courses they teach.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "and of they teach.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Show names of teachers and the number of courses they teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "Show names of teachers and the number of courses they teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Show names of teachers and the number of courses they teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "question": "Show names of teachers and the number of courses they teach.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "What are the names of the teachers and how many courses do they teach?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers and how many courses do they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "What are the names of the teachers many how and courses do they teach?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "What the names of the how many do they teach?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the names of the teachers and how many courses do they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "question": "What are the names of the teachers and how many courses do they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers and how many courses do they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers and how many courses do they teach?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "Show names of teachers that teach at least two courses.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 3",
            "question": "Show names of teachers that teach at least two courses.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) <= 3",
            "question": "Show names of teachers that teach at least two courses.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher ORDER BY Age ASC",
            "question": "Show names of teachers that teach at least two courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "Show names of teachers that teach two least at courses.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "Show names of that teach at least two courses.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "Show names of teachers that teach at least two courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 2",
            "question": "Show names of teachers that teach at least two courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the names of the teachers who teach at least two courses?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 3",
            "question": "What are the names of the teachers who teach at least two courses?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What are the names of the teachers who teach at least two courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the of names the teachers who teach at least two courses?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "are the names the who teach least two courses?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "What are the names of the teachers who teach at least two courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "What are the names of the teachers who teach at least two courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "question": "What are the names of the teachers who teach at least two courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id in ( SELECT Teacher_id FROM course_arrange )",
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "List the names of teachers who have been not arranged to teach courses.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "List teachers who have been arranged to courses.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "label": 1,
            "type": "original_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers have courses whose not been arranged?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
            "question": "What are the names of the teachers courses not arranged?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT count( * ) FROM teacher",
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "select name from teacher where hometown != 'little lever urban district'",
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        },
        {
            "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "course_teach"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 30",
            "question": "How many visitors below age 30 are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 27",
            "question": "How many visitors below age 30 are there?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age > 27",
            "question": "How many visitors below age 30 are there?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "How many visitors below age 30 are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 30",
            "question": "visitors many How below age 30 are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 30",
            "question": "How many visitors 30 are",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.Museum_ID , T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many visitors below age 30 are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "How many visitors below age 30 are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 3 ORDER BY Level_of_membership DESC",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership < 4 ORDER BY Level_of_membership asc",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order results high by level the the from to low.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "Find the names of the visitors whose membership level higher than order results by the level from high to",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership <= 4",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership <= 3",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership >= 4",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership <= 4",
            "question": "What is the average age of the visitors whose level membership is not higher than 4?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership <= 4",
            "question": "is the average age of the whose membership level not higher 4?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 30",
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 5 ORDER BY age DESC",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.Museum_ID , T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "Find the name of the membership visitors level whose and membership level is higher than 4, and sort by their age from old to young.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "the membership level the level higher than sort by their age from young.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE id NOT IN ( SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.open_year > 2010 )",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket DESC LIMIT 1",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "question": "Find the id and name of the museum that has the most staff members?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff asc limit 1",
            "question": "Find the id and name of the museum that has the most staff members?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff asc limit 1",
            "question": "Find the id and name of the museum that has the most staff members?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "Find the id and name of the museum that has the most staff members?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "question": "Find the id and name of the museum that most the has staff members?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "question": "Find the and of the that has the staff",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "Find the id and name of the museum that has the most staff members?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership <= 4",
            "question": "Find the id and name of the museum that has the most staff members?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT avg( num_of_staff ) FROM museum WHERE open_year < 2009",
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_staff ) FROM museum WHERE open_year < 2344",
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_staff ) FROM museum WHERE open_year > 2009",
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket DESC LIMIT 1",
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_staff ) FROM museum WHERE open_year < 2009",
            "question": "Find number the average of staff working for the museums that were open before 2009.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_staff ) FROM museum WHERE open_year < 2009",
            "question": "the average of working for the museums that were open before 2009.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.Museum_ID , T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'RiverPark Museum'",
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_ticket ) , max( num_of_ticket ) FROM visit",
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "What are the staff year and opening number of the museum named Plaza Museum?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "What are the opening year staff of the museum",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_ticket ) , max( num_of_ticket ) FROM visit",
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 2010 )",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 1723 )",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE num_of_staff < ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 2010 )",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.visitor_id , T1.name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum( T2.Total_spent ) DESC LIMIT 1",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 2010 )",
            "question": "find the names of museums the staff which more than have minimum staff number of all museums opened after 2010.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 2010 )",
            "question": "find names of which staff than the minimum staff number all museums opened after 2010.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 2",
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "find the id, and name for age visitors who visited some museums more than once.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "the id, name age visitors who museums more than once.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 30",
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT T2.visitor_id , T1.name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum( T2.Total_spent ) DESC LIMIT 1",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.visitor_id , T1.name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum( T2.Total_spent ) asc limit 1",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.visitor_id , T1.name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum( T2.Total_spent ) DESC LIMIT 1",
            "question": "What are the id, name and membership level of visitors who have money largest amount the in spent of total in all museum tickets?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.visitor_id , T1.name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum( T2.Total_spent ) DESC LIMIT 1",
            "question": "What are the id, name and membership of visitors who spent the largest amount of money in in museum tickets?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 2010 )",
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT T2.Museum_ID , T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the id and name of the museum visited most times?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "What are the id and name of the museum visited most times?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.Museum_ID , T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the id and of name the museum visited most times?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.Museum_ID , T1.name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY count( * ) DESC LIMIT 1",
            "question": "are the id and name the most times?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE age < 30",
            "question": "What are the id and name of the museum visited most times?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "What are the id and name of the museum visited most times?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_ticket ) , max( num_of_ticket ) FROM visit",
            "question": "What are the id and name of the museum visited most times?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "What are the id and name of the museum visited most times?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "What is the name of the museum that had no visitor yet?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID in ( SELECT museum_id FROM visit )",
            "question": "What is the name of the museum that had no visitor yet?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "What is the name of the museum that had no visitor yet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "What is the name of the museum had that no visitor yet?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "What the name of the museum had no visitor",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "What is the name of the museum that had no visitor yet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "What is the name of the museum that had no visitor yet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( age ) FROM visitor WHERE Level_of_membership <= 4",
            "question": "What is the name of the museum that had no visitor yet?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket DESC LIMIT 1",
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket asc limit 1",
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket asc limit 1",
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE num_of_staff > ( SELECT min( num_of_staff ) FROM museum WHERE open_year > 2010 )",
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket DESC LIMIT 1",
            "question": "Find the of age name and the visitor who bought the most tickets at once.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.num_of_ticket DESC LIMIT 1",
            "question": "Find the age of the visitor who bought most tickets at once.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT avg( num_of_ticket ) , max( num_of_ticket ) FROM visit",
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_ticket ) , max( num_of_ticket ) FROM visit",
            "question": "What the are average and maximum number of tickets bought in all visits?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_ticket ) , max( num_of_ticket ) FROM visit",
            "question": "are average and tickets bought in all visits?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM museum WHERE Museum_ID NOT IN ( SELECT museum_id FROM visit )",
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership != 1",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership != 1",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "What is the total ticket the of expense visitors whose membership level is 1?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "What is the total expense the membership level is 1?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT avg( num_of_staff ) FROM museum WHERE open_year < 2009",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 1722 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 1341",
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 except SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 1722 intersect SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 1341",
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "What is the name of the visitor who visited both a opened a and before 2009 museum museum opened after 2011?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year < 2009 INTERSECT SELECT T1.name FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id JOIN museum AS T3 ON T3.Museum_ID = T2.Museum_ID WHERE T3.open_year > 2011",
            "question": "is the name who visited both a museum opened 2009 and a museum after 2011?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM visitor WHERE id NOT IN ( SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.open_year > 2010 )",
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE id NOT IN ( SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.open_year > 1723 )",
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE id in ( SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.open_year > 1723 )",
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T2.visitor_id , T1.name , T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY sum( T2.Total_spent ) DESC LIMIT 1",
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE id NOT IN ( SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.open_year > 2010 )",
            "question": "Find the number of visitors who did museum visit any not opened after 2010.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM visitor WHERE id NOT IN ( SELECT T2.visitor_id FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.open_year > 2010 )",
            "question": "the of visitors who any museum opened after 2010.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT sum( T2.Total_spent ) FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.Level_of_membership = 1",
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT T1.id , T1.name , T1.age FROM visitor AS T1 JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id HAVING count( * ) > 1",
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "How many museums were opened after 2013 or before 2008?",
            "label": 1,
            "type": "original_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2684 OR open_year < 1339",
            "question": "How many museums were opened after 2013 or before 2008?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year < 2013 or open_year < 2008",
            "question": "How many museums were opened after 2013 or before 2008?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2684 and open_year < 1339",
            "question": "How many museums were opened after 2013 or before 2008?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "question": "How many museums were opened after 2013 or before 2008?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "How many museums after were opened 2013 or before 2008?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT count( * ) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "question": "How many museums were opened 2013 or before 2008?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "museum_visit"
        },
        {
            "query": "SELECT name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "question": "How many museums were opened after 2013 or before 2008?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "museum_visit"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM players",
            "question": "Find the total number of players.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "Find the total number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "Find the number total of players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "the total players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the total number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "Find the total number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find the total number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the total number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM players",
            "question": "How many players are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "How many players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "How players are many there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "How many players there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "How many players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "How many players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "How many players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find the total number of matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "Find the total number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find the number total of matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find total number matches.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the total number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the total number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the total number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "Find the total number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Count the number of matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Count the number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Count the of number matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "number matches.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "Count the number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "Count the number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "Count the number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "Count the number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "List the first name and birth date of all players from the country with code USA.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'GRN'",
            "question": "List the first name and birth date of all players from the country with code USA.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code != 'GRN'",
            "question": "List the first name and birth date of all players from the country with code USA.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "List the first name and birth date of all players from the country with code USA.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "List the first name and birth players date of all from the country with code USA.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "List first and birth date of all country USA.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "List the first name and birth date of all players from the country with code USA.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the first name and birth date of all players from the country with code USA.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "What are the first names and birth dates of players from the USA?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'MKD'",
            "question": "What are the first names and birth dates of players from the USA?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code != 'USA'",
            "question": "What are the first names and birth dates of players from the USA?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "What are the first names and birth dates of players from the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "What the are first names and birth dates of players from the USA?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "What are first birth dates players from the USA?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first names and birth dates of players from the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the first names and birth dates of players from the USA?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "Find the average age of losers and winners of all matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find the average age of losers and winners of all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "Find the age average of losers and winners of all matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "average age losers and winners all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "Find the average age of losers and winners of all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "Find the average age of losers and winners of all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the average age of losers and winners of all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "Find the average age of losers and winners of all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "What are the average ages of losers and winners across matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "What are the average ages of losers and winners across matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "What are the average losers ages of and winners across matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "What are the losers and across matches?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What are the average ages of losers and winners across matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the average ages of losers and winners across matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "What are the average ages of losers and winners across matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "What are the average ages of losers and winners across matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find the average rank of winners in all matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the average rank of winners in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find average rank the of winners in all matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find average rank of in matches.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the average rank of winners in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "Find the average rank of winners in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the average rank of winners in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the average rank of winners in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "What is the average rank for winners in all matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What is the average rank for winners in all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "What is the average rank for in winners all matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "What the average rank winners all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What is the average rank for winners in all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "What is the average rank for winners in all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "What is the average rank for winners in all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What is the average rank for winners in all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "Find the highest rank of losers in all matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "Find the highest rank of losers in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "Find the highest rank of in losers all matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "Find the highest rank of in all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the highest rank of losers in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the highest rank of losers in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "Find the highest rank of losers in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the highest rank of losers in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "What is the best rank of losers across all matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "What is the best rank of losers across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "What is rank best the of losers across all matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "best rank of all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "What is the best rank of losers across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the best rank of losers across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What is the best rank of losers across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the best rank of losers across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "find the number of distinct country codes of all players.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "find the number of distinct country codes of all players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "find the number of distinct codes country of all players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "find number distinct country codes of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "find the number of distinct country codes of all players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "find the number of distinct country codes of all players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "find the number of distinct country codes of all players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "find the number of distinct country codes of all players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "How many distinct countries do players come from?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "How many distinct countries do players come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "distinct many How countries do players come from?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "How distinct countries players",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "How many distinct countries do players come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "How many distinct countries do players come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "How many distinct countries do players come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "How many distinct countries do players come from?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "Find the number of distinct name of losers.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the number of distinct name of losers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "Find number the of distinct name of losers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "the of distinct name of losers.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the number of distinct name of losers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the number of distinct name of losers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the number of distinct name of losers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "Find the number of distinct name of losers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "How many different loser names are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "How many different loser names are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "How many different names loser are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "How many different names there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different loser names are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "How many different loser names are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "How many different loser names are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "How many different loser names are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the name of tourney that has more than 10 matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 12",
            "question": "Find the name of tourney that has more than 10 matches.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) < 12",
            "question": "Find the name of tourney that has more than 10 matches.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the name of tourney that has more than 10 matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the of tourney name that has more than 10 matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find of that more than matches.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the name of tourney that has more than 10 matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "Find the name of tourney that has more than 10 matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What are the names of tournaments that have more than 10 matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 12",
            "question": "What are the names of tournaments that have more than 10 matches?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) < 10",
            "question": "What are the names of tournaments that have more than 10 matches?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the names of tournaments that have more than 10 matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What are the names of tournaments that have than more 10 matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What are the names of tournaments more than 10 matches?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "What are the names of tournaments that have more than 10 matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What are the names of tournaments that have more than 10 matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2684 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2240",
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR != 2013 union SELECT winner_name FROM matches WHERE YEAR != 2016",
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR != 2684 intersect SELECT winner_name FROM matches WHERE YEAR != 2240",
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "List the names of all winners who played 2013 in both and 2016.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "List names winners who in both 2013 and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "What are the names of players who won in both 2013 and 2016?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2684 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 1728",
            "question": "What are the names of players who won in both 2013 and 2016?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 union SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "What are the names of players who won in both 2013 and 2016?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2684 except SELECT winner_name FROM matches WHERE YEAR = 1728",
            "question": "What are the names of players who won in both 2013 and 2016?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the names of players who won in both 2013 and 2016?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "the What are names of players who won in both 2013 and 2016?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "What of players won in both 2013 2016?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "What are the names of players who won in both 2013 and 2016?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2349 OR YEAR = 2304",
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR != 2349 or YEAR != 2304",
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "List of number the all matches who played in years of 2013 or 2016.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "number of all who years of 2013 or 2016.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "How many matches were played in 2013 or 2016?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 1510 OR YEAR = 2520",
            "question": "How many matches were played in 2013 or 2016?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 1510 or YEAR != 2520",
            "question": "How many matches were played in 2013 or 2016?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "How many matches were played in 2013 or 2016?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "many How matches were played in 2013 or 2016?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "question": "in 2013 or 2016?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "How many matches were played in 2013 or 2016?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "How many matches were played in 2013 or 2016?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Olympics' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Moscow'",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' union SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name != 'Australian Open'",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Olympics' union SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name != 'Moscow'",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What are the country code name the and of players first who won in both tourney WTA Championships and Australian Open?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What the country code and first players who won in both tourney Championships and Australian",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Miami' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Gstaad'",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name != 'WTA Championships' intersect SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name != 'Australian Open'",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name != 'Miami' except SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Gstaad'",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What names are the first and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What are the first names country codes players who both WTA and Australian Open?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "Find the first name and country code of the oldest player.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date desc limit 1",
            "question": "Find the first name and country code of the oldest player.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date desc limit 1",
            "question": "Find the first name and country code of the oldest player.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the first name and country code of the oldest player.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "Find the first name country and code of the oldest player.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "the country code of the oldest player.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "Find the first name and country code of the oldest player.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "Find the first name and country code of the oldest player.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "What is the first name and country code of the oldest player?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "What is the first name and country code of the oldest player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "What is the and name first country code of the oldest player?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "What is the first of oldest player?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What is the first name and country code of the oldest player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "What is the first name and country code of the oldest player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "What is the first name and country code of the oldest player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "What is the first name and country code of the oldest player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "List the first and last name of all players in the order of birth date.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "List the first and last name of all players in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "List the last name and first of all players in the order of birth date.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "List the first and last name all players in the of date.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "List the first and last name of all players in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "List the first and last name of all players in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "List the first and last name of all players in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the first and last name of all players in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "What are the full names of all players, sorted by birth date?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "What are the full names of all players, sorted by birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "What are the full all names of players, sorted by birth date?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "What the names of all players, sorted birth date?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What are the full names of all players, sorted by birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "What are the full names of all players, sorted by birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "What are the full names of all players, sorted by birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the full names of all players, sorted by birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'R' ORDER BY birth_date",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand != 'L' ORDER BY birth_date",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand != 'R' ORDER BY birth_date",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT min( loser_rank ) FROM matches",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "List the first and last name of all players who are left / hand in L the order of birth date.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "List first and of all who are left / in of birth date.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the full names of all left handed players, in order of birth date?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'R' ORDER BY birth_date",
            "question": "What are the full names of all left handed players, in order of birth date?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand != 'L' ORDER BY birth_date",
            "question": "What are the full names of all left handed players, in order of birth date?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand != 'R' ORDER BY birth_date",
            "question": "What are the full names of all left handed players, in order of birth date?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the full names of all left handed players, in order of birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are of full names the all left handed players, in order of birth date?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "are the names of all handed players, in of birth",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What are the full names of all left handed players, in order of birth date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours asc limit 1",
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Find the first name and country code player who of the did the most number of tours.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Find the first name and code the player who the most of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What is the first name and country code of the player with the most tours?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours asc limit 1",
            "question": "What is the first name and country code of the player with the most tours?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "What is the first name and country code of the player with the most tours?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What is the first code and name country of the player with the most tours?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "What is the first name and code of the player with the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What is the first name and country code of the player with the most tours?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "What is the first name and country code of the player with the most tours?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "What is the first name and country code of the player with the most tours?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the year that has the most number of matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "Find the year that has the most number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the has year that the most number of matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the has the most number matches.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "Find the year that has the most number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "Find the year that has the most number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the year that has the most number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the year that has the most number of matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which year had the most matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Which year had the most matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "year had Which the most matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which year the most matches?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which year had the most matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "Which year had the most matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which year had the most matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "Which year had the most matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the name and rank points of the winner who won the most times.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) asc limit 1",
            "question": "Find the name and rank points of the winner who won the most times.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) asc limit 1",
            "question": "Find the name and rank points of the winner who won the most times.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the name and rank points of the winner who won the most times.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "and Find the name rank points of the winner who won the most times.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the name rank points of the who the times.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Find the name and rank points of the winner who won the most times.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "Find the name and rank points of the winner who won the most times.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the winner who most matches, the and won has how many rank points does this player have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of winner who has won most and how many points have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Singapore' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name != 'Australian Open' ORDER BY winner_rank_points asc limit 1",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the name of the winner who has the highest rank points and Australian in Open the participated tourney.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the name the winner who the rank points and participated in the Australian Open tourney.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Istanbul' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name != 'Australian Open' ORDER BY winner_rank_points desc limit 1",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What is the name of the winner with the who rank most points participated in the Australian Open tournament?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What is the name the winner with the most who participated in tournament?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "find the names of loser and winner who with played the in match greatest number of minutes.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "the names of and winner played in the match greatest number minutes.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "What are the names of the winner and loser who played in the longest match?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes asc limit 1",
            "question": "What are the names of the winner and loser who played in the longest match?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of the winner and loser who played in the longest match?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "the What are names of the winner and loser who played in the longest match?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "the names of the and who played in longest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "What are the names of the winner and loser who played in the longest match?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the names of the winner and loser who played in the longest match?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What are the names of the winner and loser who played in the longest match?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the average ranking for each player and their first name.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the average ranking for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the average for each ranking player and their first name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find for each player their first",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Find the average ranking for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the average ranking for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "Find the average ranking for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the average ranking for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first names of all players, and their average rankings?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What are the first names of all players, and their average rankings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first all of names players, and their average rankings?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first names of all players, and average",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the first names of all players, and their average rankings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "What are the first names of all players, and their average rankings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "What are the first names of all players, and their average rankings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the first names of all players, and their average rankings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the total ranking points for each player and their first name.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "Find the total ranking points for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "Find the total ranking for points each player and their first name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "the total points for player and first name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the total ranking points for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the total ranking points for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "Find the total ranking points for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "Find the total ranking points for each player and their first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first names of all players, and their total ranking points?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the first names of all players, and their total ranking points?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first names of players, all and their total ranking points?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the first names of players, and their total",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What are the first names of all players, and their total ranking points?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "What are the first names of all players, and their total ranking points?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "What are the first names of all players, and their total ranking points?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "What are the first names of all players, and their total ranking points?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "find the number of players for each country.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "find the number of players for each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "number the find of players for each country.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "find the number of players for country.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "find the number of players for each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "find the number of players for each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "find the number of players for each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the number of players for each country.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "How many players are from each country?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "How many players are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "How players many are from each country?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "many players from each country?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "How many players are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "How many players are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "How many players are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "How many players are from each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the code of the country where has the greatest number of players.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) asc limit 1",
            "question": "find the code of the country where has the greatest number of players.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "find the code of the country where has the greatest number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the code of the country where has the number of greatest players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the of the country where has greatest number of players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "find the code of the country where has the greatest number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "find the code of the country where has the greatest number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "find the code of the country where has the greatest number of players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the code of the country with the most players?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "What is the code of the country with the most players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What code is the of the country with the most players?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the code of the country the most players?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What is the code of the country with the most players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What is the code of the country with the most players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "What is the code of the country with the most players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM players",
            "question": "What is the code of the country with the most players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "Find the codes of countries that have more than 50 players.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 75",
            "question": "Find the codes of countries that have more than 50 players.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) < 75",
            "question": "Find the codes of countries that have more than 50 players.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find the codes of countries that have more than 50 players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "Find the codes of countries have that more than 50 players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "that than 50 players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the codes of countries that have more than 50 players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "Find the codes of countries that have more than 50 players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "What are the codes of countries with more than 50 players?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 63",
            "question": "What are the codes of countries with more than 50 players?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) < 63",
            "question": "What are the codes of countries with more than 50 players?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , country_code FROM players GROUP BY country_code",
            "question": "What are the codes of countries with more than 50 players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "What are the codes countries of with more than 50 players?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "What the codes of 50",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "What are the codes of countries with more than 50 players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the codes of countries with more than 50 players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the total number of tours for each ranking date.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the total number of tours for each ranking date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the total number of each for tours ranking date.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find total number tours for ranking date.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the total number of tours for each ranking date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "Find the total number of tours for each ranking date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code HAVING count( * ) > 50",
            "question": "Find the total number of tours for each ranking date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the total number of tours for each ranking date.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "How many total tours were there for each ranking date?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "How many total tours were there for each ranking date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "How many total were tours there for each ranking date?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "How many tours were for ranking",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "How many total tours were there for each ranking date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many total tours were there for each ranking date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "How many total tours were there for each ranking date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "How many total tours were there for each ranking date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the number of matches happened in each year.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "Find the number of matches happened in each year.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find number of the matches happened in each year.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the number of matches happened each year.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the number of matches happened in each year.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "Find the number of matches happened in each year.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "question": "Find the number of matches happened in each year.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count( * ) > 10",
            "question": "Find the number of matches happened in each year.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "How many matches were played in each year?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "How many matches were played in each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "How many matches were in played each year?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "How many were played in each year?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "How many matches were played in each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "How many matches were played in each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "How many matches were played in each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "How many matches were played in each year?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "Find the name and rank of the winners 3 youngest across all matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "the name and rank 3 youngest across all matches.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT country_code ) FROM players",
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age desc limit 3",
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "What are the names and the of ranks three youngest winners across all matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "What the names ranks of three youngest winners across all matches?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'Eastbourne' AND winner_hand = 'R'",
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name != 'WTA Championships' or winner_hand = 'L'",
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name != 'Eastbourne' or winner_hand != 'R'",
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "How many different participated winners in both the WTA Championships and were left handed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "many different winners both participated WTA and left",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'Roland Garros' AND winner_hand = 'R'",
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' or winner_hand != 'L'",
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "the Find number of left handed winners who participated in the WTA Championships.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "Find the number of left handed winners who participated in the WTA",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , YEAR FROM matches GROUP BY YEAR",
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points asc limit 1",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points asc limit 1",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the first name, country and the birth code of date winner who has the highest rank points in all matches.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "Find the name, code birth date of the who has the highest rank points all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( winner_rank ) FROM matches",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What is the first name, country code, and birth of the player date the with most winner rank points across all matches?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "What name, country code, and birth date of player most winner rank points all matches?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT loser_name ) FROM matches",
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( loser_age ) , avg( winner_age ) FROM matches",
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "Find the number of players for each hand type.",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , last_name FROM players ORDER BY birth_date",
            "question": "Find the number of players for each hand type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "Find the number of players for hand each type.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "Find the of for each hand type.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( tours ) , ranking_date FROM rankings GROUP BY ranking_date",
            "question": "Find the number of players for each hand type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'",
            "question": "Find the number of players for each hand type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) FROM matches",
            "question": "Find the number of players for each hand type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( DISTINCT winner_name ) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "question": "Find the number of players for each hand type.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "How many players are there for each hand type?",
            "label": 1,
            "type": "original_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT avg( ranking ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "How many players are there for each hand type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "How many players are for there each hand type?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT count( * ) , hand FROM players GROUP BY hand",
            "question": "players are there for each hand type?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT sum( ranking_points ) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "question": "How many players are there for each hand type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "question": "How many players are there for each hand type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "question": "How many players are there for each hand type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        },
        {
            "query": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "question": "How many players are there for each hand type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "wta_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'",
            "question": "How many ships ended up being 'Captured'?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Sank'",
            "question": "How many ships ended up being 'Captured'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship != 'Captured'",
            "question": "How many ships ended up being 'Captured'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship != 'Sank'",
            "question": "How many ships ended up being 'Captured'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "How many ships ended up being 'Captured'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'",
            "question": "How many ended ships up being 'Captured'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'",
            "question": "ships ended up being 'Captured'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "How many ships ended up being 'Captured'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT name , tonnage FROM ship ORDER BY name DESC",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , tonnage FROM ship ORDER BY name asc",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , tonnage FROM ship ORDER BY name asc",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , tonnage FROM ship ORDER BY name DESC",
            "question": "List the name ordered and by tonnage in descending alphaetical order for the names.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , tonnage FROM ship ORDER BY name DESC",
            "question": "the and tonnage ordered by in order for the names.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT name , date FROM battle",
            "question": "List the name, date and result of each battle.",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "List the name, date and result of each battle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "List the name, date and of each result battle.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "List name, date and result",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT avg( injured ) FROM death",
            "question": "List the name, date and result of each battle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "question": "List the name, date and result of each battle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "question": "List the name, date and result of each battle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT avg( injured ) FROM death",
            "question": "List the name, date and result of each battle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT max( killed ) , min( killed ) FROM death",
            "question": "What is maximum and minimum death toll caused each time?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "What is maximum and minimum death toll caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT max( killed ) , min( killed ) FROM death",
            "question": "maximum is What and minimum death toll caused each time?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT max( killed ) , min( killed ) FROM death",
            "question": "What maximum and minimum death toll caused time?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What is maximum and minimum death toll caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ",
            "question": "What is maximum and minimum death toll caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "What is maximum and minimum death toll caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "What is maximum and minimum death toll caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT avg( injured ) FROM death",
            "question": "What is the average number of injuries caused each time?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "What is the average number of injuries caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT avg( injured ) FROM death",
            "question": "What is the average of number injuries caused each time?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT avg( injured ) FROM death",
            "question": "average injuries caused each time?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "What is the average number of injuries caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT max( killed ) , min( killed ) FROM death",
            "question": "What is the average number of injuries caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "question": "What is the average number of injuries caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What is the average number of injuries caused each time?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = '225'",
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage != '225'",
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'",
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "What are the death and injury situations the ship by caused with tonnage 't'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "What are the death injury situations caused by ship with tonnage 't'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Unknown'",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander = 'Boril'",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "What are the name and results of the battles commander when the bulgarian is not 'Boril'",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "are the name and results of the battles when bulgarian is not 'Boril'",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type != 'Brig'",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type != 'Brig'",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM ship WHERE disposition_of_ship = 'Captured'",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What are the different ids and names of the battles that 'Brig' lost type any shipes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What the different ids and names of the battles lost any 'Brig' type shipes?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) > 10",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) > 14",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) < 14",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) > 10",
            "question": "What are the the names and ids of battles that led to more than 10 people killed in total.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) > 10",
            "question": "are the ids and names of battles that led to more than 10 people in total.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT max( killed ) , min( killed ) FROM death",
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the ship id and name that caused most total injuries?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) asc limit 1",
            "question": "What is the ship id and name that caused most total injuries?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ",
            "question": "What is the ship id and name that caused most total injuries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the and ship id name that caused most total injuries?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What the ship id and name caused total injuries?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "What is the ship id and name that caused most total injuries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What is the ship id and name that caused most total injuries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "question": "What is the ship id and name that caused most total injuries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Unknown' AND latin_commander = 'Henry I'",
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander != 'Kaloyan' and latin_commander = 'Baldwin I'",
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Unknown' or latin_commander != 'Henry I'",
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , tonnage FROM ship ORDER BY name DESC",
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "question": "What are the names are battle which distinct between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "question": "What are the distinct battle names are between commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "How many different results are there for the battles?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "How many different results are there for the battles?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "How many different results are the there for battles?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "How many different results are there for the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT max( killed ) , min( killed ) FROM death",
            "question": "How many different results are there for the battles?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "question": "How many different results are there for the battles?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum( T3.killed ) > 10",
            "question": "How many different results are there for the battles?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "question": "How many different results are there for the battles?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ",
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = 't' )",
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id in ( SELECT lost_in_battle FROM ship WHERE tonnage != '225' )",
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id in ( SELECT lost_in_battle FROM ship WHERE tonnage = 't' )",
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ",
            "question": "How did many battles not lose any ship with tonnage '225'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( * ) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' ) ",
            "question": "How battles did not lose any ship with tonnage",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Three Brothers' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice'",
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name != 'Lettice' intersect SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name != 'Three Brothers' intersect SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name != 'Lettice'",
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "List the and the battle date that name has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "question": "List name and date the battle has the ship the ship 'HMS Atalanta'",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T1.killed , T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'MidAtlantic'",
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle union SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location != 'English Channel'",
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle intersect SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'MidAtlantic'",
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT avg( injured ) FROM death",
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "question": "Show names, results and bulgarian commanders of ships with battles the no lost in the 'English Channel'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "question": "Show names, and bulgarian commanders of battles no ships lost in the Channel'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT note FROM death WHERE note LIKE '%East%'",
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT note FROM death WHERE note LIKE '%East%'",
            "question": "What are the notes of the death events which has substring 'East'?",
            "label": 1,
            "type": "original_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT note FROM death WHERE note not like '%East%'",
            "question": "What are the notes of the death events which has substring 'East'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT note FROM death WHERE note not like '%East%'",
            "question": "What are the notes of the death events which has substring 'East'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT count( DISTINCT RESULT ) FROM battle",
            "question": "What are the notes of the death events which has substring 'East'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT note FROM death WHERE note LIKE '%East%'",
            "question": "What are the notes of the death events substring which has 'East'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT note FROM death WHERE note LIKE '%East%'",
            "question": "What are the notes of the death events substring 'East'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT name , date FROM battle",
            "question": "What are the notes of the death events which has substring 'East'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        },
        {
            "query": "SELECT T2.id , T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the notes of the death events which has substring 'East'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "battle_death"
        }
    ],
    [
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "what are all the addresses including line 1 and line 2?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "what are all the addresses including line 1 and line 2?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "what are all the addresses including and 1 line line 2?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "what the addresses including 2?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "what are all the addresses including line 1 and line 2?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "what are all the addresses including line 1 and line 2?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "what are all the addresses including line 1 and line 2?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "what are all the addresses including line 1 and line 2?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What is the first and second line for all addresses?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the first and second line for all addresses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What is the first line and second for all addresses?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What the first second for addresses?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What is the first and second line for all addresses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the first and second line for all addresses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What is the first and second line for all addresses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the first and second line for all addresses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "How many courses in total are listed?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "How many courses in total are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "many How courses in total are listed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "How many courses in total listed?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "How many courses in total are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "How many courses in total are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many courses in total are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "How many courses in total are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "How many courses are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "How many courses are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "How are courses many there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "How many are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "How many courses are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "How many courses are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many courses are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many courses are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "How is the math course described?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'nlp'",
            "question": "How is the math course described?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name != 'nlp'",
            "question": "How is the math course described?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How is the math course described?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "How math is the course described?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "How is the math course",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How is the math course described?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "How is the math course described?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What are the descriptions for all the math courses?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'en'",
            "question": "What are the descriptions for all the math courses?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name != 'math'",
            "question": "What are the descriptions for all the math courses?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name != 'en'",
            "question": "What are the descriptions for all the math courses?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "What are the descriptions for all the math courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What are the descriptions for math all the courses?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What are the descriptions",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the descriptions for all the math courses?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Lake Careyberg'",
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the zip code of in address the the city Port Chelsea?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "is the zip code of the in the Chelsea?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the zip code for Port Chelsea?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Oceane'",
            "question": "What is the zip code for Port Chelsea?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city != 'Port Chelsea'",
            "question": "What is the zip code for Port Chelsea?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city != 'Port Oceane'",
            "question": "What is the zip code for Port Chelsea?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "What is the zip code for Port Chelsea?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the zip for Port code Chelsea?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "is the zip code for Port",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "What is the zip code for Port Chelsea?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which department offers the most number of degrees? List department name and id.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) asc limit 1",
            "question": "Which department offers the most number of degrees? List department name and id.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which department offers the most number of degrees? List department name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which department offers the most number of degrees? department List name and id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which offers the most number of degrees? List department name and id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "Which department offers the most number of degrees? List department name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "Which department offers the most number of degrees? List department name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "Which department offers the most number of degrees? List department name and id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "What is the name and id of the department with the most number of degrees ?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) asc limit 1",
            "question": "What is the name and id of the department with the most number of degrees ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "What is the name and id of the department with the most number of degrees ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "What is the name and id of the most department the with number of degrees ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "the name and of the department with most number of degrees",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the name and id of the department with the most number of degrees ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the name and id of the department with the most number of degrees ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "What is the name and id of the department with the most number of degrees ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "How many departments offer any degree?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "How many departments offer any degree?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "How many offer any departments degree?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "many offer any degree?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "How many departments offer any degree?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "How many departments offer any degree?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "How many departments offer any degree?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How many departments offer any degree?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "How many different departments offer degrees?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different departments offer degrees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "How different departments many offer degrees?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "different departments offer degrees?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different departments offer degrees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How many different departments offer degrees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "How many different departments offer degrees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "How many different departments offer degrees?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "How many different degree names are offered?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "How many different degree names are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "How degree different many names are offered?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "different degree names are offered?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different degree names are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "How many different degree names are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "How many different degree names are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "How many different degree names are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "How many different degrees are offered?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different degrees are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "many different How degrees are offered?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "many different degrees are",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "How many different degrees are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How many different degrees are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "How many different degrees are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "How many different degrees are offered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How many degrees does the engineering department offer?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'biology'",
            "question": "How many degrees does the engineering department offer?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "How many degrees does the engineering department offer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "degrees many How does the engineering department offer?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How degrees the department",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many degrees does the engineering department offer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "How many degrees does the engineering department offer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "How many degrees does the engineering department offer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How many degrees does the engineering department have?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'linguistic'",
            "question": "How many degrees does the engineering department have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many degrees does the engineering department have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "degrees How many does the engineering department have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "How many department have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "How many degrees does the engineering department have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "How many degrees does the engineering department have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "How many degrees does the engineering department have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the names and descriptions of all the sections?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What are the names and descriptions of all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are and names the descriptions of all the sections?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What the and descriptions of all the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "What are the names and descriptions of all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "What are the names and descriptions of all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What are the names and descriptions of all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What are the names and descriptions of all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the names and descriptions for all the sections?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "What are the names and descriptions for all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are names and the descriptions for all the sections?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the and descriptions for all sections?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and descriptions for all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and descriptions for all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "What are the names and descriptions for all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and descriptions for all the sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What are the names and id of courses having at most 2 sections?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 3",
            "question": "What are the names and id of courses having at most 2 sections?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) >= 2",
            "question": "What are the names and id of courses having at most 2 sections?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the names and id of courses having at most 2 sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What are the names id and of courses having at most 2 sections?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "are the names of 2 sections?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and id of courses having at most 2 sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "What are the names and id of courses having at most 2 sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What are the names and ids of every course with less than 2 sections?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) >= 2",
            "question": "What are the names and ids of every course with less than 2 sections?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) >= 2",
            "question": "What are the names and ids of every course with less than 2 sections?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and ids of every course with less than 2 sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What the are and names ids of every course with less than 2 sections?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "names of course with less than 2 sections?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and ids of every course with less than 2 sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "What are the names and ids of every course with less than 2 sections?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "List the section_name in reversed lexicographical order.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name asc",
            "question": "List the section_name in reversed lexicographical order.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "List the section_name in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "section_name List the in reversed lexicographical order.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "List",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "List the section_name in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "List the section_name in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "List the section_name in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "What are the names of the sections in reverse alphabetical order?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name asc",
            "question": "What are the names of the sections in reverse alphabetical order?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What are the names of the sections in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "What are the names of the sections reverse alphabetical in order?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "are the of the sections in reverse alphabetical",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of the sections in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the names of the sections in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the names of the sections in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is semester the which most student registered in? Show both the name and the id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is which most student both name the id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) asc limit 1",
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "For each semester, what is and of id the name the one with the most students registered?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "For each what is name and id of the one most registered?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the description of the department whose name has the substring the computer?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name not like '%computer%'",
            "question": "What is the description of the department whose name has the substring the computer?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What is the description of the department whose name has the substring the computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is description of the the department whose name has the substring the computer?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the the department has the substring computer?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "What is the description of the department whose name has the substring the computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the description of the department whose name has the substring the computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What is the description of the department whose name has the substring the computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the department description for the one whose name has the word computer?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What is the department description for the one whose name has the word computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the department description for one name whose the has the word computer?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "is the department for the one whose name has",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "What is the department description for the one whose name has the word computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "What is the department description for the one whose name has the word computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What is the department description for the one whose name has the word computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "What is the department description for the one whose name has the word computer?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) != 2",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "Who are enrolled in 2 degree List one the programs semester? in first name, middle name and last name and the id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "Who in 2 programs in one semester? List the first middle name and id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "What are the first, middle, and of with last names, along ids, the all students who enrolled in 2 degree programs in one semester?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "What are the first, middle, and last names, along with the students who enrolled in degree in semester?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Master'",
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "Who is enrolled Bachelor a in degree program? List the first name, middle name, last name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "Who enrolled in a Bachelor degree program? the name, middle name, name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name != 'Bachelor'",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name != 'Bachelor'",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What are the first, middle, names last for and everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "are the first, last everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the kind of program which most number of students are enrolled in?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) asc limit 1",
            "question": "Find the kind of program which most number of students are enrolled in?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) asc limit 1",
            "question": "Find the kind of program which most number of students are enrolled in?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Find the kind of program which most number of students are enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the kind of most which program number of students are enrolled in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find kind of program most of students are enrolled in?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Find the kind of program which most number of students are enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "Find the kind of program which most number of students are enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the degree summary has that name the most number of students enrolled?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "is the summary that has the number students enrolled?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) asc limit 1",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) asc limit 1",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the program which of most are number students enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the which most number of students enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) asc limit 1",
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the program id and the summary the of degree has that the most students enrolled?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "is the program id and the summary of the degree that the students",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) asc limit 1",
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which student the enrolled times has in any for most program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which student has enrolled the most in any program? List the first name, middle last the number of enrollments and id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the first, middle, and with the and id last along name, number of enrollments, for the student who enrolled the most in any program?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "is the middle, last name, along the and number of for student who enrolled the most in any program?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id in ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id in ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Which semesters do not have any student enrolled? the List semester name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "semesters do not any student enrolled? List the semester",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the name of the semester with no students enrolled?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id in ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the name of the semester with no students enrolled?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id in ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the name of the semester with no students enrolled?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What is the name of the semester with no students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the name of the semester students no with enrolled?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What is the of the semester with no students enrolled?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "What is the name of the semester with no students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What is the name of the semester with no students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What are names course the all of the courses which ever have students enrolled in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What all the course of which ever have enrolled in?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What are the names of all courses that have some students enrolled?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of all courses that have some students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What are the names of all courses some that have students enrolled?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "are the names all courses that have",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the names of all courses that have some students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What are the names of all courses that have some students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What are the names of all courses that have some students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of all courses that have some students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What's the name of the course with most number of enrollments?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) asc limit 1",
            "question": "What's the name of the course with most number of enrollments?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What's the name of the course with most number of enrollments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What's name of the the course with most number of enrollments?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What's the with most number of enrollments?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "What's the name of the course with most number of enrollments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What's the name of the course with most number of enrollments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "What's the name of the course with most number of enrollments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the course with the most students enrolled?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the course with the most students enrolled?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the course with the most students enrolled?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "What is the name of the course with the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of course the with the most students enrolled?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "the name the with most students",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the name of the course with the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the course with the most students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'SouthDakota' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county != 'NorthCarolina' intersect SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'SouthDakota' intersect SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Find the last currently name live the who of students in the state of North Carolina but have not registered in any degree program.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "last name who live in the of North but have not in any degree program.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'Arkansas' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county != 'NorthCarolina' except SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county != 'Arkansas' intersect SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What are the last name of the students who live Carolina but in have North not registered in any degree programs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "the last the who live in North Carolina but not registered in any degree programs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) <= 2",
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) <= 2",
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "Show the date and id of the transcript with least at 2 course results.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "Show the date and id of transcript with at least 2 course results.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 3",
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) <= 2",
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) <= 3",
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "What is the date and id of the transcript with 2 at courses least listed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "What is the date and id of the transcript with at 2",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Milton' AND last_name = 'Schuppe'",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' and last_name != 'Ward'",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name != 'Milton' or last_name != 'Schuppe'",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "What is the phone number of the man with the first name Timmothy last and the name Ward?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "What is the phone the man with the name and the last Ward?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'Timmothy' and last_name = 'Osinski'",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name != 'ward'",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name != 'Timmothy' and last_name = 'Osinski'",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "What is the mobile number phone of the student named Timmothy Ward ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "What is the phone the Timmothy Ward ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered desc limit 1",
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Who is the first student to register? List the first name, middle and name last name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Who first to register? List the first name, middle name and name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "What is the first, middle, and last name of the first student to register?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered desc limit 1",
            "question": "What is the first, middle, and last name of the first student to register?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered desc limit 1",
            "question": "What is the first, middle, and last name of the first student to register?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "What is the first, middle, and last name of the first student to register?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "What is and first, middle, the last name of the first student to register?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "the first, middle, and name of first student to",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the first, middle, and last name of the first student to register?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "What is the first, middle, and last name of the first student to register?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left desc limit 1",
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left desc limit 1",
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "Who is the earliest graduate the of the List school? first name, middle name and last name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "Who is the earliest graduate of the school? the first name, middle and name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "What is the first, last middle, and name of the earliest school graduate?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "What is first, middle, and last name the earliest school graduate?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "Whose permanent address is different her current or from his address? List his or her first name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "Whose permanent address from his her current address? his her first name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name , section_description FROM Sections",
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id = permanent_address_id",
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "What is the first name of the student whose permanent address is or his her different from current one?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "What is the first name of the student whose permanent address is different from his or her current",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which address holds most number the of students currently? List the address id and all lines.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which most number currently? List the address id and all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) asc limit 1",
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) asc limit 1",
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the id, line 1, line and 2 of the address with the most students?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the line 1, of the address with most students?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "On average, when were the transcripts printed?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "On average, when were the transcripts printed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "On average, when the transcripts were printed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "On average, when were transcripts",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "On average, when were the transcripts printed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "On average, when were the transcripts printed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "On average, when were the transcripts printed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "On average, when were the transcripts printed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "What is the average transcript date?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "What is the average transcript date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "What is average transcript the date?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "What is average date?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the average transcript date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "What is the average transcript date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "What is the average transcript date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "What is the average transcript date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "When is the first transcript released? List the date and details.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "When is the first transcript released? List the date and details.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "When is the first transcript released? List date and the details.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "When is the first transcript released? List date details.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "When is the first transcript released? List the date and details.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "When is the first transcript released? List the date and details.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "When is the first transcript released? List the date and details.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "When is the first transcript released? List the date and details.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date desc limit 1",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 2",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "What is earliest date the of a transcript release, and what details can you tell me?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "question": "What the earliest date of a transcript release, and what details can you tell",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "How many transcripts are released?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "How many transcripts are released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "many How transcripts are released?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "many transcripts are released?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "How many transcripts are released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "How many transcripts are released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "How many transcripts are released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "How many transcripts are released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "How many transcripts are listed?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "How many transcripts are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "How transcripts many are listed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "many transcripts are listed?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many transcripts are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "How many transcripts are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "question": "How many transcripts are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "How many transcripts are listed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "What is the last transcript release date?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date asc limit 1",
            "question": "What is the last transcript release date?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT line_1 , line_2 FROM addresses",
            "question": "What is the last transcript release date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "the is What last transcript release date?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "is the last transcript release date?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What is the last transcript release date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "What is the last transcript release date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "What is the last transcript release date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "When was the last transcript released?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date asc limit 1",
            "question": "When was the last transcript released?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date asc limit 1",
            "question": "When was the last transcript released?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "When was the last transcript released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "When the was last transcript released?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "When was the last",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "When was the last transcript released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "When was the last transcript released?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) asc limit 1",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) asc limit 1",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many times at most can a course enrollment result show in course transcripts? different Also the show enrollment id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many at most can a course enrollment result show in different transcripts? show the enrollment id.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) asc limit 1",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the maximum number of times that a in up shows course different transcripts and what is that course's enrollment id?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the number times course shows up in different transcripts and what is course's id?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) desc limit 1",
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show the of the date which transcript shows the least number of results, also list the id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "Show date of the transcript which number of results, list",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the date and id of the transcript with the least number of results?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) desc limit 1",
            "question": "What is the date and id of the transcript with the least number of results?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) desc limit 1",
            "question": "What is the date and id of the transcript with the least number of results?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the date and id of the transcript with the least number of results?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the date the of and id transcript with the least number of results?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
            "question": "What the date and the transcript with the least number of results?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the date and id of the transcript with the least number of results?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT course_description FROM Courses WHERE course_name = 'math'",
            "question": "What is the date and id of the transcript with the least number of results?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'PHD'",
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name != 'Master' intersect SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name != 'Bachelor' intersect SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'PHD'",
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "Find the semester when both students Master and Bachelor students got enrolled in.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "Find semester when both Master students and students got in.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'PHD' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' except SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name != 'Bachelor'",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'PHD' union SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name != 'Bachelor'",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Courses",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What is the the semester of id that had both Masters and Bachelors students enrolled?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "What is the id of semester that both and students",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "How many different addresses do the students currently live?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different addresses do the students currently live?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "different How many addresses do the students currently live?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "How many do students currently live?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "How many different addresses do the students currently live?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
            "question": "How many different addresses do the students currently live?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different addresses do the students currently live?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "How many different addresses do the students currently live?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What are the different addresses that have students living there?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What are the different addresses that have students living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "What are different addresses the that have students living there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT current_address_id ) FROM Students",
            "question": "the different addresses that living there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "question": "What are the different addresses that have students living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What are the different addresses that have students living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the different addresses that have students living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 2",
            "question": "What are the different addresses that have students living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "List all the student details in reversed lexicographical order.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "List all the student details in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "List all the student details lexicographical reversed in order.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "all details in reversed lexicographical order.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "List all the student details in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "List all the student details in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT avg( transcript_date ) FROM Transcripts",
            "question": "List all the student details in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( DISTINCT degree_summary_name ) FROM Degree_Programs",
            "question": "List all the student details in reversed lexicographical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details asc",
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "What other you details can tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
            "question": "other can tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Transcripts",
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "Describe the section h.",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'b'",
            "question": "Describe the section h.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name != 'h'",
            "question": "Describe the section h.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "question": "Describe the section h.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "Describe section the h.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "Describe section",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "question": "Describe the section h.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
            "question": "Describe the section h.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What is the description for the section named h?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'e'",
            "question": "What is the description for the section named h?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the description for the section named h?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What is the description for section named the h?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_description FROM Sections WHERE section_name = 'h'",
            "question": "What for section h?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "question": "What is the description for the section named h?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "question": "What is the description for the section named h?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "question": "What is the description for the section named h?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'Kyrgyz Republic' or T1.cell_mobile_number = '8775499067x8723'",
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country != 'haiti' and T1.cell_mobile_number != '09700166582'",
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country != 'Kyrgyz Republic' or T1.cell_mobile_number != '8775499067x8723'",
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "Find the first name of the students permanently in live who country the Haiti or have the cell phone number 09700166582 .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "Find first name students permanently live in country or have cell phone number 09700166582 .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'Lesotho' or T1.cell_mobile_number = '4622467921'",
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number != '09700166582'",
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'Lesotho' and T1.cell_mobile_number = '4622467921'",
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "What are the first names of in Haiti who live students the permanently or have the cell phone number 09700166582 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'haiti' or T1.cell_mobile_number = '09700166582'",
            "question": "What are first names students who live in or have cell phone number 09700166582 ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "student_transcripts_tracking"
        },
        {
            "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "student_transcripts_tracking"
        }
    ],
    [
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "List the title of all cartoons in alphabetical order.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the title of all cartoons in alphabetical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "List the title of all in cartoons alphabetical order.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "List of all cartoons in order.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "List the title of all cartoons in alphabetical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "List the title of all cartoons in alphabetical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "List the title of all cartoons in alphabetical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "List the title of all cartoons in alphabetical order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What are the titles cartoons of the sorted alphabetically?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "the the cartoons sorted",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "List all cartoon directed by \"Ben Jones\".",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by != 'Ben Jones'",
            "question": "List all cartoon directed by \"Ben Jones\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "List all cartoon directed by \"Ben Jones\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "all List cartoon directed by \"Ben Jones\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "all directed \"Ben Jones\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "List all cartoon directed by \"Ben Jones\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "List all cartoon directed by \"Ben Jones\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "List all cartoon directed by \"Ben Jones\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by != 'Ben Jones'",
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "What are the names cartoons of all directed by Ben Jones?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "What are the names cartoons directed by Ben Jones?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Michael Jelenic'",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by != 'Joseph Kuhr'",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "How were many cartoons written by \"Joseph Kuhr\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "many were written by \"Joseph",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'J M DeMatteis'",
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "the What is number of cartoones written by Joseph Kuhr?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What the of cartoones written Joseph Kuhr?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "list all cartoon titles and their directors ordered by their air date",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "list all cartoon titles and their directors ordered by their air date",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "list all cartoon their titles and directors ordered by their air date",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "list cartoon titles and ordered by their",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "list all cartoon titles and their directors ordered by their air date",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "list all cartoon titles and their directors ordered by their air date",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "list all cartoon titles and their directors ordered by their air date",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "list all cartoon titles and their directors ordered by their air date",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "What is and name the directors of all the cartoons that are ordered by air date?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "is name and directors of all the cartoons by air",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Michael Chang' OR Directed_by = 'Brandon Vietti'",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "the List title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "title of cartoon by \"Ben or \"Brandon Vietti\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by != 'Ben Jones' or Directed_by = 'Brandon Vietti'",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' or Directed_by != 'Brandon Vietti'",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "What are the titles all of cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "are the titles all cartoons directed by Ben Jones Brandon",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) asc limit 1",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which country has the most of TV List Channels? the country and number of TV Channels it has.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "country has the TV country of TV Channels it has.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the country with the most TV of Channels number and how many does it have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the country with the most TV Channels and many does it have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "List the number of different series names and contents in the TV Channel table.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "List the number of different series names and contents in the TV Channel table.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "number List of the different series names and contents in the TV Channel table.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "List number of different series and contents the TV",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "List the number of different series names and contents in the TV Channel table.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "List the number of different series names and contents in the TV Channel table.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "List the number of different series names and contents in the TV Channel table.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "List the number of different series names and contents in the TV Channel table.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "How many different series and contents are listed in the TV Channel table?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "How many different series and contents are listed in the TV Channel table?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "different How many series and contents are listed in the TV Channel table?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "How many different series and are listed in the TV Channel table?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many different series and contents are listed in the TV Channel table?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "How many different series and contents are listed in the TV Channel table?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "How many different series and contents are listed in the TV Channel table?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "How many different series and contents are listed in the TV Channel table?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Classica'",
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name != 'Sky Radio'",
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the content of TV serial with Channel name \"Sky Radio\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "the content of Channel serial name \"Sky Radio\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the content of the series Sky Radio?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'MTV Live HD'",
            "question": "What is the content of the series Sky Radio?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name != 'Sky Radio'",
            "question": "What is the content of the series Sky Radio?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the content of the series Sky Radio?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the content of series the Sky Radio?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What the content series Sky",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What is the content of the series Sky Radio?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "What is the content of the series Sky Radio?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'MTV Live HD'",
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the Package Option of TV Channel with name serial \"Sky Radio\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "is the Package Option with serial name Radio\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Music Box Italia'",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name != 'Sky Radio'",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "Package What are the Options of the TV Channels whose series names are Sky Radio?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "are Package Options of the TV Channels whose series Radio?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "How many TV Channel using language English?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'Italian'",
            "question": "How many TV Channel using language English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE != 'Italian'",
            "question": "How many TV Channel using language English?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "How many TV Channel using language English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "TV many How Channel using language English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "TV using language English?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "How many TV Channel using language English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "How many TV Channel using language English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "How many TV Channels use the English language?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE != 'English'",
            "question": "How many TV Channels use the English language?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE != 'English'",
            "question": "How many TV Channels use the English language?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "How many TV Channels use the English language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "How many TV Channels English the use language?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "How TV use English language?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "How many TV Channels use the English language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "How many TV Channels use the English language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "the language used List least number of TV Channel. List language and number of TV Channel.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "the language least number of TV Channel. List and number of TV",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) desc limit 1",
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the languages used by the least number and Channels of how TV many channels use it?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What the languages used by the least number TV and many channels use it?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "List each language and the number of TV Channels using it.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "List each language and the number of TV Channels using it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "List each language the and number of TV Channels using it.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "List language and number of TV using it.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "List each language and the number of TV Channels using it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "List each language and the number of TV Channels using it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "List each language and the number of TV Channels using it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "List each language and the number of TV Channels using it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "For each language, list the number of TV Channels that use it.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "For each language, list the number of TV Channels that use it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "For each list language, the number of TV Channels that use it.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "each language, list the number TV Channels that use it.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "For each language, list the number of TV Channels that use it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "For each language, list the number of TV Channels that use it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "For each language, list the number of TV Channels that use it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "For each language, list the number of TV Channels that use it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Deep Cover for Batman'",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title != 'Deep Cover for Batman'",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue series Beetle!\"? List the Channel's TV name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "is TV Channel that shows Rise of the Beetle!\"? List the TV Channel's series name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'Journey to the Center of the Bat'",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What is the series name of the TV Channel that shows the cartoon of the Blue Rise \"The Beetle\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What is the series of TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Music'",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the title of all Cartoons showed on TV name Channel with series \"Sky Radio\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the title Cartoons showed on TV Channel series name \"Sky",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'MTV Dance'",
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name != 'Sky Radio'",
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the title of all the cartools that are on the TV \"Sky with name the series Channel Radio\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the title of the cartools that are the TV with the series name \"Sky",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "List the Episode of all TV series sorted by rating.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "List the Episode of all TV series sorted by rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "List the Episode of all TV sorted by series rating.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "the TV sorted by rating.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "List the Episode of all TV series sorted by rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "List the Episode of all TV series sorted by rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "List the Episode of all TV series sorted by rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "List the Episode of all TV series sorted by rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "What are all of the episodes ordered by ratings?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What are all of the episodes ordered by ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "What are all of the ordered episodes by ratings?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "of episodes ordered by ratings?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What are all of the episodes ordered by ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are all of the episodes ordered by ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What are all of the episodes ordered by ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What are all of the episodes ordered by ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating asc limit 3",
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "List top 3 TV Rating highest series. List the TV series's Episode and Rating.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "List 3 highest series. List the TV Episode and Rating.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating asc limit 3",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating asc limit 3",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What are 3 most episodes the highly rated in TV series table and what were those ratings?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What are 3 most rated episodes the TV series table and what ratings?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is minimum and maximum share of TV series?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What is minimum and maximum share of TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is minimum share maximum and of TV series?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is minimum and maximum share TV",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "What is minimum and maximum share of TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "What is minimum and maximum share of TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "What is minimum and maximum share of TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What is minimum and maximum share of TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is the maximum and minimum share for the TV series?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What is the maximum and minimum share for the TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is the maximum and share minimum for the TV series?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What is the maximum and for the TV series?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "What is the maximum and minimum share for the TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "What is the maximum and minimum share for the TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the maximum and minimum share for the TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the maximum and minimum share for the TV series?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'Double Down'",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode != 'Double Down'",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the air TV series date of with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What the date TV series Episode \"A of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'Game Three'",
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode != 'A Love of a Lifetime'",
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode != 'Game Three'",
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "When did the episode \"A Love a of Lifetime\" air?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "When the of Lifetime\"",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'Home By Another Way'",
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode != 'A Love of a Lifetime'",
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What Rank Weekly is of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is Weekly Rank TV series with Episode \"A Love of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'The Year of the Rabbit'",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode != 'A Love of a Lifetime'",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode != 'The Year of the Rabbit'",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the weekly for rank the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the rank for the episode \"A Love Lifetime\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'Blowback'",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the TV Channel of TV series with Episode Lifetime\"? Love \"A List a of the TV Channel's series name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the TV of TV series with \"A Love of a List TV Channel's",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'Game Three'",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode != 'A Love of a Lifetime'",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What is the name the of series that has the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What the name the series the episode \"A of a Lifetime\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List the Episode TV of series all showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "List Episode of all TV showed TV with series Radio\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Hip Hop TV'",
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What the is episode for the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What the the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "Find the number of cartoons directed by of each the listed directors.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "the number of cartoons directed by the listed",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "How many cartoons did each director create?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "How many cartoons did each director create?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "How many cartoons each director did create?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "cartoons did create?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "How many cartoons did each director create?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "How many cartoons did each director create?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "How many cartoons did each director create?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "How many cartoons did each director create?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date asc limit 1",
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date asc limit 1",
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "Find the production and code channel of the most recently aired cartoon .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "Find production code channel the most recently aired cartoon .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date asc limit 1",
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date asc limit 1",
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "What is the produdction code and channel of the recent most cartoon ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "What the produdction code and channel of the most cartoon ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE",
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV != 'yes'",
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV != 'yes'",
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "Find the package choice and series name of the TV channel high has that definition TV.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "Find the package and series of the that has definition TV.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'",
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'no'",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV != 'yes'",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "What are the package name the and the options of series for the TV Channel that supports high definition TV?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option , series_name FROM TV_Channel WHERE hight_definition_TV = 'yes'",
            "question": "are the package options of the series TV that supports high definition TV?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Country , count( * ) FROM TV_Channel GROUP BY Country ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by != 'Todd Casey'",
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "which countries' tv channels are cartoon playing some written by Todd Casey?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "countries' channels some cartoon written Todd Casey?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Steven Melching'",
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by != 'Todd Casey'",
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by != 'Steven Melching'",
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'",
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the countries that cartoons on have TV that were written by Todd Casey?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the have on TV that were written by",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM TV_series",
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Steven Melching'",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel intersect SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel intersect SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Steven Melching'",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "which countries' tv channels are not playing any cartoon Todd written by Casey?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "countries' tv are not playing any Todd Casey?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Adam Beechen'",
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel except SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by != 'Adam Beechen'",
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM TV_Channel WHERE LANGUAGE = 'English'",
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the are countries that not playing cartoons written by Todd Casey?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "are the countries are not cartoons written by Todd",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) , Directed_by FROM cartoon GROUP BY Directed_by",
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Brandon Vietti' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by != 'Michael Chang' intersect SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by != 'Ben Jones'",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Brandon Vietti' intersect SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by != 'Ben Jones'",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "Find the series name and country of the is playing tv channel that some cartoons directed by Ben Jones and Michael Chang?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "Find the series and country of the tv channel that some cartoons directed and Chang?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Brandon Vietti'",
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' except SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by != 'Michael Chang' intersect SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Brandon Vietti'",
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3",
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "What the and name is series country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "What is the series and of TV playing cartoons directed Ben Jones and cartoons by Chang?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon ORDER BY title",
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'Italian'",
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "find the pixel aspect nation of and ratio the tv channels that do not use English.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "pixel and nation of channels that do use English.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'Italian'",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE = 'Italian'",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "What is the pixel aspect ratio and all for origin country of TV channels that do not use English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "What is the aspect and of origin TV channels that do use English?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT LANGUAGE , count( * ) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 1",
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) < 1",
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "find id of the tv that from countries the channels where have more than two tv channels.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "id the tv channels that from the countries where have two tv",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) < 2",
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "What are the ids of all tv that have channels more than 2 TV channels?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM tv_channel GROUP BY country HAVING count( * ) > 2",
            "question": "the of all tv have more than TV channels?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Episode FROM TV_series ORDER BY rating",
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang'",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel except SELECT channel FROM cartoon WHERE directed_by != 'Michael Chang'",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "find the id of tv channels that do not play directed by any cartoon Ben Jones.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "the id of channels that do not play directed Ben Jones.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Michael Chang'",
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel except SELECT channel FROM cartoon WHERE directed_by != 'Ben Jones'",
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'",
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "What are of ids the TV the channels that do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "question": "What the of TV channels do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Brandon Vietti' )",
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'",
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "find the of tv package the option channel that do not have any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "find the the tv channel that do not have any cartoon Jones.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( DISTINCT series_name ) , count( DISTINCT content ) FROM TV_Channel",
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "select production_code , channel from cartoon order by original_air_date desc limit 1",
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'",
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "label": 1,
            "type": "original_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Brandon Vietti' )",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id in ( SELECT channel FROM cartoon WHERE directed_by != 'Brandon Vietti' )",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "What are the package options of all tv channels that are directed playing cartoons any not by Ben Jones?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN ( SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones' )",
            "question": "are the options of all tv channels that are not playing any by Ben Jones?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT count( * ) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        },
        {
            "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "tvshow"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "How many poker players are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "How many poker players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "How many poker are players there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "How poker players are",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "How many poker players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "How many poker players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "How many poker players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "How many poker players are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Count the number of poker players.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "Count the number of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Count the of number poker players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Count number poker players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "Count the number of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "Count the number of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "Count the number of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "Count the number of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "List the earnings of poker players in descending order.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings asc",
            "question": "List the earnings of poker players in descending order.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings asc",
            "question": "List the earnings of poker players in descending order.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "List the earnings of poker players in descending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "List the earnings poker of players in descending order.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "List earnings of poker players in order.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "List the earnings of poker players in descending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "List the earnings of poker players in descending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What are the earnings of poker players, ordered descending by value?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings asc",
            "question": "What are the earnings of poker players, ordered descending by value?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings asc",
            "question": "What are the earnings of poker players, ordered descending by value?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What are the earnings of poker players, ordered descending by value?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What are of the earnings poker players, ordered descending by value?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What earnings poker players, ordered descending by value?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What are the earnings of poker players, ordered descending by value?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What are the earnings of poker players, ordered descending by value?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "List the final tables made and the best finishes of poker players.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "List the final tables made and the best finishes of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "List the final tables made the and best finishes of poker players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "List final tables made and the finishes of poker players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "List the final tables made and the best finishes of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "List the final tables made and the best finishes of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the final tables made and the best finishes of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "List the final tables made and the best finishes of poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the final tables made and best finishes for all poker players?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What are the final tables made and best finishes for all poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the final tables best made and finishes for all poker players?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the final tables all poker players?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "What are the final tables made and best finishes for all poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the final tables made and best finishes for all poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What are the final tables made and best finishes for all poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What are the final tables made and best finishes for all poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "What is the average earnings of poker players?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What is the average earnings of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "What the is average earnings of poker players?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "What is the average poker players?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What is the average earnings of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the average earnings of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "What is the average earnings of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What is the average earnings of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "Return the average earnings across all poker players.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "Return the average earnings across all poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "Return the earnings average across all poker players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "Return the average earnings all players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "Return the average earnings across all poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "Return the average earnings across all poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "Return the average earnings across all poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "Return the average earnings across all poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What is the money rank of the poker player with the highest earnings?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "What is the money rank of the poker player with the highest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What is the money rank poker of the player with the highest earnings?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What is the rank of the poker with the highest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What is the money rank of the poker player with the highest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "What is the money rank of the poker player with the highest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What is the money rank of the poker player with the highest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "What is the money rank of the poker player with the highest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "Return the money rank of the player with the greatest earnings.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "Return the money rank of the player with the greatest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "Return the money rank of with player the the greatest earnings.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "Return money rank the player with the greatest earnings.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "Return the money rank of the player with the greatest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "Return the money rank of the player with the greatest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "Return the money rank of the player with the greatest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "Return the money rank of the player with the greatest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 175000",
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings > 175000",
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "What is the maximum number of final tables made among poker with less earnings players than 200000?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "What is the maximum number final tables made players with less than 200000?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 250000",
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings > 250000",
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "Return the maximum final across made tables all poker players who have earnings below 200000.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "Return the maximum final made across all poker players who",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What are the names of poker players?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What are the names of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What are the poker names of players?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What are the names players?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "What are the names of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are the names of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "What are the names of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the names of poker players?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "Return the names of all the poker players.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "Return the names of all the poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "Return the of names all the poker players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "the names of all poker players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "Return the names of all the poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "Return the names of all the poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "Return the names of all the poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "Return the names of all the poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 250000",
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "the are What names of poker players whose earnings is higher than 300000?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "What the names of poker whose earnings is higher 300000?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "Give the names of poker players who have earnings above 300000.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 266667",
            "question": "Give the names of poker players who have earnings above 300000.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings < 266667",
            "question": "Give the names of poker players who have earnings above 300000.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "Give the names of poker players who have earnings above 300000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "Give the names of poker players have who earnings above 300000.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "Give the names poker players who 300000.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "Give the names of poker players who have earnings above 300000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Give the names of poker players who have earnings above 300000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "List the names ordered poker players of by the final tables made in ascending order.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "List the of players ordered by final tables ascending",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "What are the names of poker players, ordered the of ascending number by final tables they have made?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "are names of poker the number of final they have made?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings desc limit 1",
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings desc limit 1",
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "What is the date birth of the poker player with the lowest earnings?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "the birth of the the earnings?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings desc limit 1",
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "Return the birth date of the poker the with player lowest earnings.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "Return the birth date of poker player with lowest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "What is the money rank of the tallest poker player?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height asc limit 1",
            "question": "What is the money rank of the tallest poker player?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height asc limit 1",
            "question": "What is the money rank of the tallest poker player?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What is the money rank of the tallest poker player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "What is the money of rank the tallest poker player?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "What the rank of tallest poker player?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What is the money rank of the tallest poker player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What is the money rank of the tallest poker player?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Return the money rank of the poker player with the greatest height.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height asc limit 1",
            "question": "Return the money rank of the poker player with the greatest height.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "Return the money rank of the poker player with the greatest height.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Return the money rank of the poker the player with greatest height.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Return the money rank of the poker player with greatest height.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "Return the money rank of the poker player with the greatest height.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "Return the money rank of the poker player with the greatest height.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Return the money rank of the poker player with the greatest height.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "What is the average earnings of poker players with height higher than 200?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 167",
            "question": "What is the average earnings of poker players with height higher than 200?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height < 167",
            "question": "What is the average earnings of poker players with height higher than 200?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What is the average earnings of poker players with height higher than 200?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "What average is the earnings of poker players with height higher than 200?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "is the average earnings poker players with height higher than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What is the average earnings of poker players with height higher than 200?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What is the average earnings of poker players with height higher than 200?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "Give average earnings of poker players who are taller than 200.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 150",
            "question": "Give average earnings of poker players who are taller than 200.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height < 200",
            "question": "Give average earnings of poker players who are taller than 200.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height < 150",
            "question": "Give average earnings of poker players who are taller than 200.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "Give average earnings of poker players who are taller than 200.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "Give earnings average of poker players who are taller than 200.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "Give earnings players who are than 200.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Give average earnings of poker players who are taller than 200.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "What are the names of poker players in descending order of earnings?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What are the names of poker players in descending order of earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "What are of the names poker players in descending order of earnings?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "What are the names of poker in of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What are the names of poker players in descending order of earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What are the names of poker players in descending order of earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the names of poker players in descending order of earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What are the names of poker players in descending order of earnings?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "Return the names of poker players sorted by their earnings descending.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings asc",
            "question": "Return the names of poker players sorted by their earnings descending.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings asc",
            "question": "Return the names of poker players sorted by their earnings descending.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Return the names of poker players sorted by their earnings descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "Return the names players poker of sorted by their earnings descending.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "Return the names of poker players sorted earnings",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "Return the names of poker players sorted by their earnings descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "Return the names of poker players sorted by their earnings descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What are different nationalities of people and the corresponding number of each people from nation?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What are different nationalities of and the corresponding number of from each nation?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "How many people are there of each nationality?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "How many people are there of each nationality?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "How people many are there of each nationality?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "How people are there of each nationality?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "How many people are there of each nationality?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "How many people are there of each nationality?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "How many people are there of each nationality?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "How many people are there of each nationality?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the most common nationality of people?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) asc limit 1",
            "question": "What is the most common nationality of people?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) asc limit 1",
            "question": "What is the most common nationality of people?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "What is the most common nationality of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is most the common nationality of people?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "is the most",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What is the most common nationality of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What is the most common nationality of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Give the nationality that is most common across all people.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) asc limit 1",
            "question": "Give the nationality that is most common across all people.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) asc limit 1",
            "question": "Give the nationality that is most common across all people.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "Give the nationality that is most common across all people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Give that nationality the is most common across all people.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "the nationality common across all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "question": "Give the nationality that is most common across all people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "Give the nationality that is most common across all people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What are the nationalities that are shared by at least two people?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 3",
            "question": "What are the nationalities that are shared by at least two people?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) <= 2",
            "question": "What are the nationalities that are shared by at least two people?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) <= 3",
            "question": "What are the nationalities that are shared by at least two people?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "What are the nationalities that are shared by at least two people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "are What the nationalities that are shared by at least two people?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "What are nationalities that shared by at least two",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "What are the nationalities that are shared by at least two people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "Return the nationalities for which there are two or more people.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 3",
            "question": "Return the nationalities for which there are two or more people.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) <= 3",
            "question": "Return the nationalities for which there are two or more people.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "question": "Return the nationalities for which there are two or more people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "Return the nationalities for which are two there or more people.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "there two or more people.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "Return the nationalities for which there are two or more people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Return the nationalities for which there are two or more people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "List the names and people dates birth of in ascending alphabetical order of name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "List the names birth dates of name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "What are the names and birth of people, dates ordered by their names in alphabetical order?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "What are and dates of people, ordered by their in alphabetical",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( Earnings ) FROM poker_player",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Show names of people whose nationality is not \"Russia\".",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality = 'Russia'",
            "question": "Show names of people whose nationality is not \"Russia\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Show names of people whose nationality is not \"Russia\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Show names of people nationality whose is not \"Russia\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Show names of whose nationality is not \"Russia\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "question": "Show names of people whose nationality is not \"Russia\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show names of people whose nationality is not \"Russia\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "Show names of people whose nationality is not \"Russia\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What are the names of people who are not from Russia?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Bulgaria'",
            "question": "What are the names of people who are not from Russia?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality = 'Russia'",
            "question": "What are the names of people who are not from Russia?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality = 'Bulgaria'",
            "question": "What are the names of people who are not from Russia?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name , Birth_Date FROM people ORDER BY Name ASC",
            "question": "What are the names of people who are not from Russia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What the are names of people who are not from Russia?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What are the names people who are not Russia?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are the names of people who are not from Russia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "List the names of people that are not poker players.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID in ( SELECT People_ID FROM poker_player )",
            "question": "List the names of people that are not poker players.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID in ( SELECT People_ID FROM poker_player )",
            "question": "List the names of people that are not poker players.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "List the names of people that are not poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "the names List of people that are not poker players.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "List the of are not poker players.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "List the names of people that are not poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "List the names of people that are not poker players.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are the names of people who do not play poker?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID in ( SELECT People_ID FROM poker_player )",
            "question": "What are the names of people who do not play poker?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "question": "What are the names of people who do not play poker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What are the people names of who do not play poker?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "What the names of who do not play",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "What are the names of people who do not play poker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "What are the names of people who do not play poker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "What are the names of people who do not play poker?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "How many distinct nationalities are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "question": "How many distinct nationalities are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "How many are distinct nationalities there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "How many distinct are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality , COUNT( * ) FROM people GROUP BY Nationality",
            "question": "How many distinct nationalities are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( * ) FROM poker_player",
            "question": "How many distinct nationalities are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "How many distinct nationalities are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT max( Final_Table_Made ) FROM poker_player WHERE Earnings < 200000",
            "question": "How many distinct nationalities are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "Count the number of different nationalities.",
            "label": 1,
            "type": "original_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "question": "Count the number of different nationalities.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "Count the different of number nationalities.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM people",
            "question": "the number of different nationalities.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )",
            "question": "Count the number of different nationalities.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Final_Table_Made , Best_Finish FROM poker_player",
            "question": "Count the number of different nationalities.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT( * ) >= 2",
            "question": "Count the number of different nationalities.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        },
        {
            "query": "SELECT avg( T2.Earnings ) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "question": "Count the number of different nationalities.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "poker_player"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM area_code_state",
            "question": "How many states are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "How many states are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM area_code_state",
            "question": "How are states many there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM area_code_state",
            "question": "How many states there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many states are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "How many states are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many states are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "How many states are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name asc",
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT vote_id , phone_number , state FROM votes",
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "question": "List the contestant numbers and names, ordered contestant by name descending.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "question": "the contestant names, by name",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT vote_id , phone_number , state FROM votes",
            "question": "List the vote ids, phone numbers and states of all votes.",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM area_code_state",
            "question": "List the vote ids, phone numbers and states of all votes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT vote_id , phone_number , state FROM votes",
            "question": "List the vote ids, phone and states numbers of all votes.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT vote_id , phone_number , state FROM votes",
            "question": "List the ids, phone numbers and of votes.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'CA'",
            "question": "List the vote ids, phone numbers and states of all votes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "List the vote ids, phone numbers and states of all votes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "List the vote ids, phone numbers and states of all votes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "List the vote ids, phone numbers and states of all votes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What are the maximum and minimum values of area codes?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "question": "What are the maximum and minimum values of area codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What are the maximum and minimum of values area codes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What are the and minimum values area codes?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "What are the maximum and minimum values of area codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM area_code_state",
            "question": "What are the maximum and minimum values of area codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the maximum and minimum values of area codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "What are the maximum and minimum values of area codes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'CA'",
            "question": "What is last date created of votes from the state 'CA'?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'NC'",
            "question": "What is last date created of votes from the state 'CA'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state != 'NC'",
            "question": "What is last date created of votes from the state 'CA'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "What is last date created of votes from the state 'CA'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'CA'",
            "question": "What is last date created votes of from the state 'CA'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'CA'",
            "question": "What is last votes from the 'CA'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "What is last date created of votes from the state 'CA'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What is last date created of votes from the state 'CA'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Alana Bregman'",
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the of the names contestants whose names are not 'Jessie Alloway'",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the names the contestants whose are not 'Jessie Alloway'",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT state , created FROM votes",
            "question": "What are the distinct states and create time of all votes?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the distinct states and create time of all votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT DISTINCT state , created FROM votes",
            "question": "What are the distinct and create states time of all votes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT DISTINCT state , created FROM votes",
            "question": "What the distinct states and time of votes?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the distinct states and create time of all votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the distinct states and create time of all votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "question": "What are the distinct states and create time of all votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "What are the distinct states and create time of all votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count( * ) >= 2",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count( * ) <= 2",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count( * ) <= 2",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count( * ) >= 2",
            "question": "the What contestant are numbers and names of the contestants who had at least two votes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count( * ) >= 2",
            "question": "What the contestant and names of contestants who at least two votes?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'CA'",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) desc limit 1",
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) desc limit 1",
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "Of got the contestants who all voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "Of got voted, is the contestant number and name the who least",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'VT' OR state = 'KS'",
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state != 'NY' and state = 'CA'",
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'VT' and state != 'KS'",
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM area_code_state",
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "What are the number of votes from or state 'NY' 'CA'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "are the votes state 'NY' 'CA'?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( created ) FROM votes WHERE state = 'CA'",
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "question": "How many contestants did not get voted?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number in ( SELECT contestant_number FROM votes )",
            "question": "How many contestants did not get voted?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number in ( SELECT contestant_number FROM votes )",
            "question": "How many contestants did not get voted?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "How many contestants did not get voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "question": "How did contestants many not get voted?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "question": "did not voted?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "How many contestants did not get voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many contestants did not get voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the area code in which the most voters voted?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "select contestant_name from contestants where contestant_name like '%al%'",
            "question": "What is the area code in which the most voters voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the area in code which the most voters voted?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count( * ) DESC LIMIT 1",
            "question": "What the area in which the most voters voted?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What is the area code in which the most voters voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "What is the area code in which the most voters voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "select contestant_name from contestants where contestant_name like '%al%'",
            "question": "What is the area code in which the most voters voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT DISTINCT state , created FROM votes",
            "question": "What is the area code in which the most voters voted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Kurt Walser'",
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name != 'Tabatha Gehling'",
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name != 'Kurt Walser'",
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "What are the create dates, states, phone the and of numbers votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "What are states, and phone numbers of votes were the contestant 'Tabatha",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kurt Walser'",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name != 'Tabatha Gehling' intersect SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kurt Walser'",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "area in codes List the which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "question": "List the area in which voters voted the contestant and contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count( * ) ASC LIMIT 1",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT max( area_code ) , min( area_code ) FROM area_code_state",
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "select contestant_name from contestants where contestant_name like '%al%'",
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "label": 1,
            "type": "original_query",
            "db_id": "voter_1"
        },
        {
            "query": "select contestant_name from contestants where contestant_name not like '%al%'",
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "select contestant_name from contestants where contestant_name like '%al%'",
            "question": "Return the names of the contestants contain whose names the substring 'Al' .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "voter_1"
        },
        {
            "query": "select contestant_name from contestants where contestant_name like '%al%'",
            "question": "the names the contestants whose names contain the substring 'Al' .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        },
        {
            "query": "SELECT count( * ) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "voter_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "What are the names of all the countries that became independent after 1950?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 2145",
            "question": "What are the names of all the countries that became independent after 1950?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear < 2145",
            "question": "What are the names of all the countries that became independent after 1950?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "What are the names of all the countries that became independent after 1950?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "What are of the names all the countries that became independent after 1950?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "the of all countries that became after 1950?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the names of all the countries that became independent after 1950?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "What are the names of all the countries that became independent after 1950?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "Give the names of the nations that were founded after 1950.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 2438",
            "question": "Give the names of the nations that were founded after 1950.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear < 1950",
            "question": "Give the names of the nations that were founded after 1950.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear < 2438",
            "question": "Give the names of the nations that were founded after 1950.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "Give the names of the nations that were founded after 1950.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "Give the names of the nations that after founded were 1950.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "Give the of the nations that were founded 1950.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "Give the names of the nations that were founded after 1950.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "How many countries have a republic as their form of government?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Islamic Republic'",
            "question": "How many countries have a republic as their form of government?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm != 'Republic'",
            "question": "How many countries have a republic as their form of government?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "How many countries have a republic as their form of government?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "How many countries a republic have as their form of government?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "How many countries republic as their form of government?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "How many countries have a republic as their form of government?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "How many countries have a republic as their form of government?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "How many countries have governments that are republics?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Nonmetropolitan Territory of New Zealand'",
            "question": "How many countries have governments that are republics?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm != 'Nonmetropolitan Territory of New Zealand'",
            "question": "How many countries have governments that are republics?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "How many countries have governments that are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "How countries many have governments that are republics?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "many countries governments are republics?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "How many countries have governments that are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 't' and T2.language = 'chinese' and T1.continent = 'asia'",
            "question": "How many countries have governments that are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Southern Africa'",
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region != 'Southern Africa'",
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "What is the total surface area the of countries in the Caribbean region?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "is the total surface area of the countries the Caribbean region?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "How much surface area do the countires in the Carribean cover together?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Southern and Central Asia'",
            "question": "How much surface area do the countires in the Carribean cover together?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region != 'Caribbean'",
            "question": "How much surface area do the countires in the Carribean cover together?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region != 'Southern and Central Asia'",
            "question": "How much surface area do the countires in the Carribean cover together?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "How much surface area do the countires in the Carribean cover together?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "How surface much area do the countires in the Carribean cover together?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "How much area do the Carribean together?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "How much surface area do the countires in the Carribean cover together?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "Which continent is Anguilla in?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Panama'",
            "question": "Which continent is Anguilla in?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name != 'Anguilla'",
            "question": "Which continent is Anguilla in?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name != 'Panama'",
            "question": "Which continent is Anguilla in?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "Which continent is Anguilla in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "continent Which is Anguilla in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "Which Anguilla in?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "Which continent is Anguilla in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "What is the continent name which Anguilla belongs to?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Egypt'",
            "question": "What is the continent name which Anguilla belongs to?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name != 'Anguilla'",
            "question": "What is the continent name which Anguilla belongs to?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "What is the continent name which Anguilla belongs to?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "What is the continent name Anguilla which belongs to?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "What is Anguilla to?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the continent name which Anguilla belongs to?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "What is the continent name which Anguilla belongs to?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "Which region is the city Kabul located in?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'West Covina'",
            "question": "Which region is the city Kabul located in?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name != 'Kabul'",
            "question": "Which region is the city Kabul located in?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Which region is the city Kabul located in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "Which region is the Kabul city located in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "Which is city Kabul located in?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "Which region is the city Kabul located in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "Which region is the city Kabul located in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "What region is Kabul in?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Zaoyang'",
            "question": "What region is Kabul in?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name != 'Kabul'",
            "question": "What region is Kabul in?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "What region is Kabul in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "is region What Kabul in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "region is Kabul in?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "What region is Kabul in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What region is Kabul in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Which language is the most popular in Aruba?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Switzerland' ORDER BY Percentage DESC LIMIT 1",
            "question": "Which language is the most popular in Aruba?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Switzerland' ORDER BY Percentage asc limit 1",
            "question": "Which language is the most popular in Aruba?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Which language is the most popular in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Which language is the popular in most Aruba?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "language is the popular Aruba?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "Which language is the most popular in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "Which language is the most popular in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What language is predominantly spoken in Aruba?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Christmas Island' ORDER BY Percentage DESC LIMIT 1",
            "question": "What language is predominantly spoken in Aruba?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name != 'Aruba' ORDER BY Percentage asc limit 1",
            "question": "What language is predominantly spoken in Aruba?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "What language is predominantly spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What language is predominantly in spoken Aruba?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What language is spoken",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "What language is predominantly spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What language is predominantly spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What are the population and life expectancies in Brazil?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Mozambique'",
            "question": "What are the population and life expectancies in Brazil?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name != 'Brazil'",
            "question": "What are the population and life expectancies in Brazil?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name != 'Mozambique'",
            "question": "What are the population and life expectancies in Brazil?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the population and life expectancies in Brazil?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What are the life population and expectancies in Brazil?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What and life Brazil?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What are the population and life expectancies in Brazil?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Zambia'",
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "Give me Brazil\u2019s and population life expectancies.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "Brazil\u2019s population life expectancies.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What are the region and population of Angola?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Ireland'",
            "question": "What are the region and population of Angola?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name != 'Angola'",
            "question": "What are the region and population of Angola?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the region and population of Angola?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What are the region population of and Angola?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "the region and population Angola?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "What are the region and population of Angola?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "What are the region and population of Angola?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What region does Angola belong to and what is its population?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Peru'",
            "question": "What region does Angola belong to and what is its population?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name != 'Peru'",
            "question": "What region does Angola belong to and what is its population?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What region does Angola belong to and what is its population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What region belong Angola does to and what is its population?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "region does Angola and what is",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "question": "What region does Angola belong to and what is its population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "What region does Angola belong to and what is its population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Eastern Asia'",
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region != 'Central Africa'",
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What is the average expected life expectancy for countries in Central region the of Africa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "the average life expectancy for countries the region of Central Africa?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Baltic Countries'",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region != 'Central Africa'",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region != 'Baltic Countries'",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "How the long is people\u2019s average life expectancy in Central Africa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "How long people\u2019s in Central Africa?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy LIMIT 1",
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent != 'Asia' ORDER BY LifeExpectancy desc limit 1",
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent != 'Africa' ORDER BY LifeExpectancy limit 1",
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "What is the name of country has that the shortest life expectancy in Asia?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "is name country has shortest in Asia?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'North America' ORDER BY LifeExpectancy LIMIT 1",
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy desc limit 1",
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent != 'North America' ORDER BY LifeExpectancy desc limit 1",
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "Give the name of the country in the with Asia lowest life expectancy.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "Give the name of country in with life",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "What is the total population and maximum GNP in Asia?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Africa'",
            "question": "What is the total population and maximum GNP in Asia?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent != 'Asia'",
            "question": "What is the total population and maximum GNP in Asia?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What is the total population and maximum GNP in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "What is the total population maximum GNP and in Asia?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "What is the population and GNP",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "What is the total population and maximum GNP in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "What is the total population and maximum GNP in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Africa'",
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent != 'Asia'",
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent != 'Africa'",
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "How many people live in Asia, and what is the GNP among largest them?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "How people live Asia, and what the largest GNP among them?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "What is the average life expectancy in African countries that are republics?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Antarctica' AND GovernmentForm = 'Autonomous Area'",
            "question": "What is the average life expectancy in African countries that are republics?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' or GovernmentForm = 'Republic'",
            "question": "What is the average life expectancy in African countries that are republics?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent != 'Antarctica' and GovernmentForm != 'Autonomous Area'",
            "question": "What is the average life expectancy in African countries that are republics?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What is the average life expectancy in African countries that are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "What is the average life expectancy in that countries African are republics?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "the average life expectancy in African countries that are republics?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What is the average life expectancy in African countries that are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Oceania' AND GovernmentForm = 'Nonmetropolitan Territory of The Netherlands'",
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent != 'Africa' and GovernmentForm != 'Republic'",
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Oceania' and GovernmentForm != 'Nonmetropolitan Territory of The Netherlands'",
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Give the average life expectancy for countries in Africa are which republics?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Give the life expectancy for countries Africa are republics?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "What is the total surface area of the continents Asia and Europe?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'South America' OR Continent = 'South America'",
            "question": "What is the total surface area of the continents Asia and Europe?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' and Continent != 'Europe'",
            "question": "What is the total surface area of the continents Asia and Europe?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent != 'South America' and Continent = 'South America'",
            "question": "What is the total surface area of the continents Asia and Europe?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What is the total surface area of the continents Asia and Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "What is the total surface area of Asia the continents and Europe?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "total surface area of the continents Asia and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What is the total surface area of the continents Asia and Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Africa'",
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' and Continent != 'Europe'",
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent != 'Asia' or Continent = 'Africa'",
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Give the total surface area covered by Asia in countries or Europe.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Give area covered by countries in Asia or Europe.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "How many people live in Gelderland district?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Kirov'",
            "question": "How many people live in Gelderland district?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District != 'Kirov'",
            "question": "How many people live in Gelderland district?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "How many people live in Gelderland district?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "How many people in live Gelderland district?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "people Gelderland district?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "How many people live in Gelderland district?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "How many people live in Gelderland district?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "What is the total population of Gelderland district?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Sindh'",
            "question": "What is the total population of Gelderland district?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District != 'Gelderland'",
            "question": "What is the total population of Gelderland district?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What is the total population of Gelderland district?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "is the What total population of Gelderland district?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "What Gelderland",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What is the total population of Gelderland district?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "What is the total population of Gelderland district?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'PeoplesRepublic'",
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm != 'US Territory'",
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "What is the average GNP and total population in all nations US government is whose territory?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "What the average and population in all nations government US territory?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm != 'US Territory'",
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm != 'Republic'",
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "Give the mean GNP and total population of are considered nations which US territory.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "and total population nations which are considered US territory.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "How many unique languages are spoken in the world?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "How many unique languages are spoken in the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "How many unique languages are in spoken the world?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "How many languages spoken in the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "How many unique languages are spoken in the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "How many unique languages are spoken in the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "How many unique languages are spoken in the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "How many unique languages are spoken in the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "What is the number of distinct languages used around the world?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What is the number of distinct languages used around the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "the is What number of distinct languages used around the world?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "What is number of languages around the world?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What is the number of distinct languages used around the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What is the number of distinct languages used around the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What is the number of distinct languages used around the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "What is the number of distinct languages used around the world?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "How many type of governments are in Africa?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Europe'",
            "question": "How many type of governments are in Africa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent != 'Africa'",
            "question": "How many type of governments are in Africa?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "How many type of governments are in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "How many of type governments are in Africa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "How many of governments in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "How many type of governments are in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "How many type of governments are in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "How many different forms of governments are there in Africa?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Antarctica'",
            "question": "How many different forms of governments are there in Africa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent != 'Africa'",
            "question": "How many different forms of governments are there in Africa?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent != 'Antarctica'",
            "question": "How many different forms of governments are there in Africa?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "How many different forms of governments are there in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "How different many forms of governments are there in Africa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "How different forms of governments are in Africa?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "question": "How many different forms of governments are there in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "What is the total number of languages used in Aruba?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Mali'",
            "question": "What is the total number of languages used in Aruba?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name != 'Mali'",
            "question": "What is the total number of languages used in Aruba?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "What is the total number of languages used in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "What is the total of number languages used in Aruba?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "is the languages used Aruba?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What is the total number of languages used in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "What is the total number of languages used in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "How many languages are spoken in Aruba?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Hungary'",
            "question": "How many languages are spoken in Aruba?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "How many languages are spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "languages How many are spoken in Aruba?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "How spoken in Aruba?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "How many languages are spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "How many languages are spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "How many languages are spoken in Aruba?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "How many official languages does Afghanistan have?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Latvia' AND IsOfficial = 'T'",
            "question": "How many official languages does Afghanistan have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name != 'Afghanistan' and IsOfficial != 'T'",
            "question": "How many official languages does Afghanistan have?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name != 'Latvia' and IsOfficial = 'T'",
            "question": "How many official languages does Afghanistan have?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "How many official languages does Afghanistan have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "How languages official many does Afghanistan have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "How does Afghanistan have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "How many official languages does Afghanistan have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "How many official languages are spoken in Afghanistan?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Mozambique' AND IsOfficial = 'F'",
            "question": "How many official languages are spoken in Afghanistan?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name != 'Afghanistan' and IsOfficial != 'T'",
            "question": "How many official languages are spoken in Afghanistan?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name != 'Mozambique' or IsOfficial = 'F'",
            "question": "How many official languages are spoken in Afghanistan?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "How many official languages are spoken in Afghanistan?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "How languages official many are spoken in Afghanistan?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "How are in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "How many official languages are spoken in Afghanistan?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is name of the country that speaks the largest number of languages?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) asc limit 1",
            "question": "What is name of the country that speaks the largest number of languages?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What is name of the country that speaks the largest number of languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is name country of the that speaks the largest number of languages?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is name of the speaks largest of languages?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What is name of the country that speaks the largest number of languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "What is name of the country that speaks the largest number of languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "What is name of the country that speaks the largest number of languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Give the name of the nation that uses the of greatest amount languages.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Give the of the nation that the languages.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Which continent has the most diverse languages?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) asc limit 1",
            "question": "Which continent has the most diverse languages?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "Which continent has the most diverse languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Which the has continent most diverse languages?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Which continent the most diverse",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "Which continent has the most diverse languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "Which continent has the most diverse languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which continent has the most diverse languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Which continent speaks the most languages?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) asc limit 1",
            "question": "Which continent speaks the most languages?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "Which continent speaks the most languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "continent Which speaks the most languages?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Which speaks the most languages?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "Which continent speaks the most languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "Which continent speaks the most languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Which continent speaks the most languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "How many countries speak both English and Dutch?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Nkole' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Kiga' )",
            "question": "How many countries speak both English and Dutch?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Nkole' union SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Kiga' )",
            "question": "How many countries speak both English and Dutch?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "How many countries speak both English and Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "How many countries speak English both and Dutch?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "many countries both and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "How many countries speak both English and Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "How many countries speak both English and Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "What is the number of nations that use English and Dutch?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Edo' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Maya Languages' )",
            "question": "What is the number of nations that use English and Dutch?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' except SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "What is the number of nations that use English and Dutch?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Edo' union SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Maya Languages' )",
            "question": "What is the number of nations that use English and Dutch?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What is the number of nations that use English and Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "is What the number of nations that use English and Dutch?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "What is the number nations use and Dutch?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What is the number of nations that use English and Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "What are the names of nations speak both English and French?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Tamil'",
            "question": "What are the names of nations speak both English and French?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' intersect SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'French'",
            "question": "What are the names of nations speak both English and French?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto' union SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Tamil'",
            "question": "What are the names of nations speak both English and French?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What are the names of nations speak both English and French?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "What are the names of nations speak and both English French?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "What are nations speak both English and French?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "What are the names of nations speak both English and French?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Give the names of nations that speak both English and French.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Mazandarani' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Polynesian Languages'",
            "question": "Give the names of nations that speak both English and French.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Mazandarani' intersect SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Polynesian Languages'",
            "question": "Give the names of nations that speak both English and French.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Give the names of nations that speak both English and French.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Give the names of that nations speak both English and French.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Give the names of nations that speak both English and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "Give the names of nations that speak both English and French.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "Give the names of nations that speak both English and French.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "What are the names of nations where both English and French are official languages?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Maranao' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Sango' AND T2.IsOfficial = 'F'",
            "question": "What are the names of nations where both English and French are official languages?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' and T2.IsOfficial != 'T' union SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'French' or T2.IsOfficial = 'T'",
            "question": "What are the names of nations where both English and French are official languages?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Maranao' or T2.IsOfficial = 'T' except SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Sango' or T2.IsOfficial != 'F'",
            "question": "What are the names of nations where both English and French are official languages?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What are the names of nations where both English and French are official languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "What are the names of nations where English French both and are official languages?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "are the names of nations where both English and French are official languages?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "What are the names of nations where both English and French are official languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "Give the names of countries with English and French as official languages.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Karen' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Irish' AND T2.IsOfficial = 'F'",
            "question": "Give the names of countries with English and French as official languages.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' or T2.IsOfficial != 'T' intersect SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'French' or T2.IsOfficial = 'T'",
            "question": "Give the names of countries with English and French as official languages.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Karen' or T2.IsOfficial = 'T' except SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Irish' or T2.IsOfficial != 'F'",
            "question": "Give the names of countries with English and French as official languages.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Give the names of countries with English and French as official languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "Give the names of countries with English French as and official languages.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "Give the names of countries with English and as languages.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "Give the names of countries with English and French as official languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Norwegian'",
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "What is the number of where distinct continents Chinese is spoken?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "What is the number of distinct continents Chinese is spoken?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "How many continents speak Chinese?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Haiti Creole'",
            "question": "How many continents speak Chinese?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "How many continents speak Chinese?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "continents How many speak Chinese?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( DISTINCT Continent ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'",
            "question": "How many speak Chinese?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "How many continents speak Chinese?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "How many continents speak Chinese?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "How many continents speak Chinese?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What are the regions that use English or Dutch?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Malinke' OR T2.Language = 'Hadareb'",
            "question": "What are the regions that use English or Dutch?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' or T2.Language != 'Dutch'",
            "question": "What are the regions that use English or Dutch?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Malinke' or T2.Language != 'Hadareb'",
            "question": "What are the regions that use English or Dutch?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "What are the regions that use English or Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What are the regions that English use or Dutch?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "regions that English or Dutch?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the regions that use English or Dutch?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "Which regions speak Dutch or English?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Mossi' OR T2.Language = 'Banja'",
            "question": "Which regions speak Dutch or English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Mossi' or T2.Language != 'Banja'",
            "question": "Which regions speak Dutch or English?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "Which regions speak Dutch or English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "Which regions Dutch speak or English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "Which speak Dutch or",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "Which regions speak Dutch or English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Which regions speak Dutch or English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'english' and isofficial = 't' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'dutch' and isofficial = 't'",
            "question": "What are the countries where either English or Dutch is the official language ?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'Haiti Creole' and isofficial = 'F' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'Mixtec' and isofficial = 'T'",
            "question": "What are the countries where either English or Dutch is the official language ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language != 'english' and isofficial = 't' intersect select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language != 'dutch' and isofficial = 't'",
            "question": "What are the countries where either English or Dutch is the official language ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'Haiti Creole' or isofficial = 'F' except select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language != 'Mixtec' and isofficial != 'T'",
            "question": "What are the countries where either English or Dutch is the official language ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the countries where either English or Dutch is the official language ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'english' and isofficial = 't' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'dutch' and isofficial = 't'",
            "question": "What are the countries where either English or Dutch the official is language ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'english' and isofficial = 't' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'dutch' and isofficial = 't'",
            "question": "What are the countries where either or Dutch is the ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "What are the countries where either English or Dutch is the official language ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "Which countries have either English or Dutch as an official language?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Marendje' AND IsOfficial = 'F' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Wolof' AND IsOfficial = 'T'",
            "question": "Which countries have either English or Dutch as an official language?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' or IsOfficial != 'T' except SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' or IsOfficial != 'T'",
            "question": "Which countries have either English or Dutch as an official language?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Marendje' and IsOfficial = 'F' except SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Wolof' and IsOfficial = 'T'",
            "question": "Which countries have either English or Dutch as an official language?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Which countries have either English or Dutch as an official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "Which countries have either English or Dutch official an as language?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND IsOfficial = 'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND IsOfficial = 'T'",
            "question": "countries have either English as official language?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "Which countries have either English or Dutch as an official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Which language is the most popular on the Asian continent?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) asc limit 1",
            "question": "Which language is the most popular on the Asian continent?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent != 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) desc limit 1",
            "question": "Which language is the most popular on the Asian continent?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Which language is the most popular on the Asian continent?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "language Which is the most popular on the Asian continent?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "language the most popular on the continent?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "Which language is the most popular on the Asian continent?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "Which language is the most popular on the Asian continent?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the language that is used by the largest number of Asian nations?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent != 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) desc limit 1",
            "question": "What is the language that is used by the largest number of Asian nations?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent != 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) desc limit 1",
            "question": "What is the language that is used by the largest number of Asian nations?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "What is the language that is used by the largest number of Asian nations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the language that is used by of largest number the Asian nations?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is used by the number of Asian nations?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What is the language that is used by the largest number of Asian nations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What is the language that is used by the largest number of Asian nations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "Which languages are spoken by only one country in republic governments?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Socialistic State' GROUP BY T2.Language HAVING COUNT( * ) = 2",
            "question": "Which languages are spoken by only one country in republic governments?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Socialistic State' GROUP BY T2.Language HAVING COUNT( * ) != 2",
            "question": "Which languages are spoken by only one country in republic governments?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Which languages are spoken by only one country in republic governments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "Which languages are spoken by one only country in republic governments?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "Which languages are one country in republic governments?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "Which languages are spoken by only one country in republic governments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "Which languages are spoken by only one country in republic governments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "What languages are only used by a single country with a republic government?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Emirate Federation' GROUP BY T2.Language HAVING COUNT( * ) = 2",
            "question": "What languages are only used by a single country with a republic government?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm != 'Republic' GROUP BY T2.Language HAVING COUNT( * ) != 1",
            "question": "What languages are only used by a single country with a republic government?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What languages are only used by a single country with a republic government?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "What languages are only used by single country a with a republic government?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "What languages are used by a single country republic",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "What languages are only used by a single country with a republic government?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "What languages are only used by a single country with a republic government?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "Find the city with the largest population that uses English.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'Bari' ORDER BY T1.Population DESC LIMIT 1",
            "question": "Find the city with the largest population that uses English.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language != 'English' ORDER BY T1.Population asc limit 1",
            "question": "Find the city with the largest population that uses English.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "Find the city with the largest population that uses English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "Find city the with the largest population that uses English.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "Find the the largest that uses",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "Find the city with the largest population that uses English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Find the city with the largest population that uses English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What is the most populace city that speaks English?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'Luhya' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What is the most populace city that speaks English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "What is the most populace city that speaks English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What is the city most populace that speaks English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What is the city that English?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "What is the most populace city that speaks English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "What is the most populace city that speaks English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What is the most populace city that speaks English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'South America' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent != 'Asia' ORDER BY SurfaceArea asc limit 1",
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'South America' ORDER BY SurfaceArea asc limit 1",
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Find the name, population and expected of length life asian country with the largest area?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Find name, population and expected life of asian country with the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Africa' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent != 'Africa' ORDER BY SurfaceArea asc limit 1",
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What are the name, population, and life expectancy of Asian largest the country by land?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What the and life largest Asian country by land?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Rundi' AND T2.IsOfficial = 'T' )",
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name not in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' and T2.IsOfficial = 'T' )",
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name not in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Rundi' or T2.IsOfficial != 'T' )",
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "What is average life expectancy in the countries is English where not the official language?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "What is average life expectancy in the countries English is not the language?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Gur' AND T2.IsOfficial = 'F' )",
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name not in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' and T2.IsOfficial != 'T' )",
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name not in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Gur' or T2.IsOfficial = 'F' )",
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "Give the mean life expectancy countries in of which English is not the official language.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "Give the mean life of is the official language.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "What is the total number of people living in the nations that do not use English?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Tamashek' )",
            "question": "What is the total number of people living in the nations that do not use English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' )",
            "question": "What is the total number of people living in the nations that do not use English?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name not in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Tamashek' )",
            "question": "What is the total number of people living in the nations that do not use English?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What is the total number of people living in the nations that do not use English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "What is the of total number people living in the nations that do not use English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "What the number of living in the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "What is the total number of people living in the nations that do not use English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "How many people live in countries that do not speak English?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Limba' )",
            "question": "How many people live in countries that do not speak English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "How many people live in countries that do not speak English?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name in ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'Limba' )",
            "question": "How many people live in countries that do not speak English?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "How many people live in countries that do not speak English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "How many people live in countries that speak do not English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "many people live in that not speak English?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "How many people live in countries that do not speak English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Lennart Meri' AND T2.IsOfficial = 'T'",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState != 'Beatrix' and T2.IsOfficial = 'T'",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "What is the official language spoken in the country head of state whose is Beatrix?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "What the official spoken in the country whose head of state Beatrix?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Norodom Sihanouk' AND T2.IsOfficial = 'F'",
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState != 'Norodom Sihanouk' or T2.IsOfficial != 'F'",
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "official is language What the used in the country the name of whose head of state is Beatrix.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "the used in the country the name of head of state",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 2413 AND T2.IsOfficial = 'F'",
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 or T2.IsOfficial != 'T'",
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "What is the number unique total official of languages spoken in the countries that are founded before 1930?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "What the number official languages spoken the that founded before 1930?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 2123 AND T2.IsOfficial = 'F'",
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 and T2.IsOfficial != 'T'",
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 2123 or T2.IsOfficial = 'F'",
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "For the countries founded before is 1930, the what total number of distinct official languages?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "For the founded 1930, what is the number of distinct official languages?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'South America' )",
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea < ( SELECT min( SurfaceArea ) FROM country WHERE Continent != 'Europe' )",
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea < ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'South America' )",
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "What are the countries have that greater surface area than any country in Europe?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "What the countries have greater surface area than any country Europe?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "Which countries have greater area than that of any country in Europe?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which countries have greater area than that of any country in Europe?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea < ( SELECT min( SurfaceArea ) FROM country WHERE Continent != 'Europe' )",
            "question": "Which countries have greater area than that of any country in Europe?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "Which countries have greater area than that of any country in Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "Which have countries greater area than that of any country in Europe?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "Which greater area than that of any country in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "Which countries have greater area than that of any country in Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "Which countries have greater area than that of any country in Europe?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Oceania' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Antarctica' )",
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' and population > ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent != 'Oceania' or population < ( SELECT max( population ) FROM country WHERE Continent != 'Antarctica' )",
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the African have countries that a population less than any country in Asia?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "are the African that have a population less than any country in Asia?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Europe' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' or population > ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Europe' and population < ( SELECT min( population ) FROM country WHERE Continent != 'Africa' )",
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "African Which countries have a smaller population than that of any country in Asia?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which African have smaller that of any country Asia?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'South America' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent != 'Asia' and population > ( SELECT max( population ) FROM country WHERE Continent != 'Africa' )",
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'South America' or population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "Which Asian countries population have a that is larger than any country in Africa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "Which Asian countries have population is larger than any country in Africa?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'South America' )",
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent != 'Asia' or population < ( SELECT min( population ) FROM country WHERE Continent != 'Africa' )",
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' or population < ( SELECT min( population ) FROM country WHERE Continent != 'South America' )",
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What Asian the countries are which have a population larger than that of any country in Africa?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT min( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "What are Asian countries have a population than that country",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the country codes for countries that do not speak English?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Gilaki'",
            "question": "What are the country codes for countries that do not speak English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage except SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "What are the country codes for countries that do not speak English?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What are the country codes for countries that do not speak English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the country codes that for countries do not speak English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What country codes countries that not speak",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "What are the country codes for countries that do not speak English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "What are the country codes for countries that do not speak English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the country codes for countries that do not speak English.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Dusun'",
            "question": "Return the country codes for countries that do not speak English.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage intersect SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the country codes for countries that do not speak English.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage union SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != 'Dusun'",
            "question": "Return the country codes for countries that do not speak English.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "Return the country codes for countries that do not speak English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return country codes the for countries that do not speak English.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the codes for that do not speak",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "Return the country codes for countries that do not speak English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "What are the country codes of countries where people use languages other than English?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'Paiwan'",
            "question": "What are the country codes of countries where people use languages other than English?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the country codes of countries where people use languages other than English?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "What are the country codes of countries where people use languages other than English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "are country What the codes of countries where people use languages other than English?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "What are the of countries where people use languages other than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "What are the country codes of countries where people use languages other than English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "What are the country codes of countries where people use languages other than English?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'Mazandarani'",
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "Give the country codes in for which countries people speak langauges that are not English.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "Give the country for people speak langauges are not English.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Dependent Territory of Norway' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Senufo and Minianka'",
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Dependent Territory of Norway' union SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != 'Senufo or Minianka'",
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What the the are of codes countries that do not speak English and whose government forms are not Republic?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the codes of countries that not speak English government forms are not Republic?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Part of Denmark' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'Bubi'",
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm = 'Republic' intersect SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Part of Denmark' intersect SELECT CountryCode FROM countrylanguage WHERE LANGUAGE != 'Bubi'",
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the codes of countries that do not speak not English and do have Republics for governments.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "Return the codes of that do not speak English and do not have Republics for governments.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "Which cities are in European countries where English is not the official language?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'South America' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'F' AND T4.Language = 'Dinka' )",
            "question": "Which cities are in European countries where English is not the official language?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' or T1.Name in ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial != 'T' and T4.Language != 'English' )",
            "question": "Which cities are in European countries where English is not the official language?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'South America' or T1.Name not in ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial != 'F' or T4.Language != 'Dinka' )",
            "question": "Which cities are in European countries where English is not the official language?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Which cities are in European countries where English is not the official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "Which are cities in European countries where English is not the official language?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "Which cities are in European countries where is not the official",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'english' and isofficial = 't' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'dutch' and isofficial = 't'",
            "question": "Which cities are in European countries where English is not the official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Asia' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'Garifuna' )",
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' and T1.Name not in ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' or T4.Language = 'English' )",
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent != 'Asia' and T1.Name not in ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' and T4.Language = 'Garifuna' )",
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "What are the names of cities in Europe for which not is the English official language?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "are names cities in Europe for which English is not the official language?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 't' and T2.language = 'chinese' and T1.continent = 'asia'",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 'F' and T2.language = 'Burmese' and T1.continent = 'Oceania'",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 't' and T2.language != 'chinese' and T1.continent = 'asia'",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 'F' and T2.language != 'Burmese' and T1.continent != 'Oceania'",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 't' and T2.language = 'chinese' and T1.continent = 'asia'",
            "question": "Which unique cities are in Asian countries where Chinese language official is the ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "select distinct T3.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode join city as T3 on T1.code = T3.countrycode where T2.isofficial = 't' and T2.language = 'chinese' and T1.continent = 'asia'",
            "question": "unique in Asian countries where Chinese is official language",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Creole English' AND T1.Continent = 'Oceania'",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' or T2.Language != 'Chinese' or T1.Continent = 'Asia'",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' and T2.Language = 'Creole English' and T1.Continent != 'Oceania'",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "Return cities of the names different that are in Asia and for which Chinese is the official language.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "Return the different names of cities that are in Asia and which Chinese is",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'english' and isofficial = 't' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'dutch' and isofficial = 't'",
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population desc limit 1",
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "What are the independence name, and year, surface area of the country with the smallest population?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "name, independence and area of the country with",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population desc limit 1",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "Give the name, year of surface and area independence, of the country that has the lowest population.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "question": "Give name, year of independence, and surface of has the lowest population.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1",
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What are the population, name and leader of the country with the largest area?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What are the population, name and leader of the country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What are the population, name and leader of the with the country largest area?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "What the population, and leader the country with the area?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the population, name and leader of the country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What are the population, name and leader of the country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "What are the population, name and leader of the country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What are the population, name and leader of the country with the largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea asc limit 1",
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea asc limit 1",
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Give the name, population, and head of state for the country largest that the has area.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Give population, for the country has largest area.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'english' and isofficial = 't' union select T1.name from country as T1 join countrylanguage as T2 on T1.code = T2.countrycode where T2.language = 'dutch' and isofficial = 't'",
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 3",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) < 3",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "Return the country name and the numbers languages of for spoken each country that speaks at least 3 languages.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "the country and the numbers languages for that speaks at 3",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Region = 'Caribbean'",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) < 2",
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) < 2",
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "What are the names of countries that speak more than 2 well how languages, as as many languages they speak?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "are the countries that speak than languages, as well languages speak?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "Find the in of cities number each district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "Find number of cities district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , max( GNP ) FROM country WHERE Continent = 'Asia'",
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population < ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' AND population > ( SELECT max( population ) FROM country WHERE Continent = 'Africa' )",
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "How many cities in each district have a population that average above the is population across all cities?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "How cities district a population that is the average population across all",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 84",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) < 84",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "Find the government form name and total form government each whose for population average life expectancy is longer than 72.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "Find the government form name and total for each government whose average life expectancy longer 72.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 96",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) < 72",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "government different the are forms What and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg( LifeExpectancy ) > 72",
            "question": "different government forms and what is the total population of each for government have average life than 72?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 60",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT( * ) > 2",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "Find the average life expectancy and total population for each continent where the average shorter life than expectancy is 72?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "Find the average life expectancy total population for continent the life expectancy is shorter 72?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , Population , LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 96",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) > 72",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select name from city where population between 160000 and 900000",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents average less an than have that expectancy life 72?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "What are the different and the total and life to for continents that have an average life",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea asc limit 5",
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "What are the names and of countries with areas the top 5 largest area?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "What are names and areas of the top 5 area?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'",
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = 'English'",
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Return the names and surface areas of the 5 largest countries.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' )",
            "question": "Return the names and surface areas of the 5 largest countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Return the names and surface areas of largest 5 the countries.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "the and surface areas of the 5 largest countries.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' AND IsOfficial = 'T'",
            "question": "Return the names and surface areas of the 5 largest countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Return the names and surface areas of the 5 largest countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Return the names and surface areas of the 5 largest countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Return the names and surface areas of the 5 largest countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "What are names of countries with the top 3 largest population?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population asc limit 3",
            "question": "What are names of countries with the top 3 largest population?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population asc limit 3",
            "question": "What are names of countries with the top 3 largest population?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are names of countries with the top 3 largest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "What are names countries of with the top 3 largest population?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "What are names countries top 3",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "What are names of countries with the top 3 largest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Region = 'Central Africa'",
            "question": "What are names of countries with the top 3 largest population?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "Return the names of the 3 most populated countries.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population asc limit 3",
            "question": "Return the names of the 3 most populated countries.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "Return the names of the 3 most populated countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "Return the names the 3 of most populated countries.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "question": "of the 3 populated",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the names of the 3 most populated countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "question": "Return the names of the 3 most populated countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "Return the names of the 3 most populated countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What are the names of the nations with the 3 lowest populations?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population desc limit 3",
            "question": "What are the names of the nations with the 3 lowest populations?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "What are the names of the nations with the 3 lowest populations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What are the names of nations the with the 3 lowest populations?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "are the names the nations the 3 lowest populations?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What are the names of the nations with the 3 lowest populations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "What are the names of the nations with the 3 lowest populations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "What are the names of the nations with the 3 lowest populations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "Return the names of the 3 countries with the fewest people.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT GovernmentForm ) FROM country WHERE Continent = 'Africa'",
            "question": "Return the names of the 3 countries with the fewest people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "Return the names the of 3 countries with the fewest people.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "the of 3 countries with the people.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE GovernmentForm = 'Republic'",
            "question": "Return the names of the 3 countries with the fewest people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "Return the names of the 3 countries with the fewest people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "Return the names of the 3 countries with the fewest people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = 'T'",
            "question": "Return the names of the 3 countries with the fewest people.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "how many countries are in Asia?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Africa'",
            "question": "how many countries are in Asia?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "how many countries are in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "how many are in countries Asia?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "how many countries in Asia?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "how many countries are in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T'",
            "question": "how many countries are in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM city WHERE District = 'Gelderland'",
            "question": "how many countries are in Asia?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Count the number of countries in Asia.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'North America'",
            "question": "Count the number of countries in Asia.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent != 'Asia'",
            "question": "Count the number of countries in Asia.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent != 'North America'",
            "question": "Count the number of countries in Asia.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "Count the number of countries in Asia.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Count the number in of countries Asia.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Count the number of countries in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "Count the number of countries in Asia.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'South America' AND Population = '279000'",
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' or Population = '80000'",
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent != 'South America' and Population = '279000'",
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "What are the names of the countries that are in the continent of Europe of and have a population 80000?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "What are names of the countries that are of and population of 80000?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Antarctica' AND Population = '126714000'",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent != 'Europe' or Population != '80000'",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Antarctica' or Population = '126714000'",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French'",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "Give the names of countries that are in Europe a have and population equal to 80000.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE continent = 'Europe' AND Population = '80000'",
            "question": "Give names are and a population to 80000.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) FROM country WHERE Name NOT IN ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' )",
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'Asia' and surfacearea > 3375",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent != 'north america' or surfacearea > 3000",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent != 'Asia' or surfacearea < 3375",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "What is the total population and average area of countries the continent of in North America whose area is bigger than 3000 ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "What is the total population and average area of countries in North America is 3000 ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT max( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'Antarctica' and surfacearea > 4500",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent != 'north america' and surfacearea > 3000",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent != 'Antarctica' or surfacearea > 4500",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area 3000 than greater .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "the total population and average surface area to North America that a area greater than 3000 .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "question": "What are the cities whose population is between 160000 and 900000?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population not between 160000 and 900000",
            "question": "What are the cities whose population is between 160000 and 900000?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population not between 160000 or 900000",
            "question": "What are the cities whose population is between 160000 and 900000?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the cities whose population is between 160000 and 900000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "question": "What the are cities whose population is between 160000 and 900000?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "question": "What whose population is between 160000 900000?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English'",
            "question": "What are the cities whose population is between 160000 and 900000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( * ) FROM ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' )",
            "question": "What are the cities whose population is between 160000 and 900000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "select name from city where population between 160000 and 900000",
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "select name from city where population not between 160000 and 900000",
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select name from city where population between 160000 and 900000",
            "question": "Return the cities names that of have a population between 160000 and 900000 .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "select name from city where population between 160000 and 900000",
            "question": "the names of cities that have a and 900000 .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , District FROM city WHERE Population > ( SELECT avg( Population ) FROM city ) GROUP BY District",
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which language is spoken by the largest number of countries?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE IndepYear > 1950",
            "question": "Which language is spoken by the largest number of countries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which language is spoken largest by the number of countries?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which language is by largest of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "Which language is spoken by the largest number of countries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE SurfaceArea > ( SELECT min( SurfaceArea ) FROM country WHERE Continent = 'Europe' )",
            "question": "Which language is spoken by the largest number of countries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Which language is spoken by the largest number of countries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Which language is spoken by the largest number of countries?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give the language that is spoken in the most countries.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) asc limit 1",
            "question": "Give the language that is spoken in the most countries.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) asc limit 1",
            "question": "Give the language that is spoken in the most countries.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "Give the language that is spoken in the most countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give language the that is spoken in the most countries.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give the language is spoken in the most countries.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = 'Asia'",
            "question": "Give the language that is spoken in the most countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "select sum( population ) , avg( surfacearea ) from country where continent = 'north america' and surfacearea > 3000",
            "question": "Give the language that is spoken in the most countries.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN ( SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' )",
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What is language the spoken by the largest percentage of people in each country?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What is language by the of people in country?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( DISTINCT LANGUAGE ) FROM countrylanguage",
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , Region FROM country WHERE Name = 'Angola'",
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 'T'",
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( GNP ) , sum( population ) FROM country WHERE GovernmentForm = 'US Territory'",
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' GROUP BY T2.Language HAVING COUNT( * ) = 1",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What are the country codes of the countries, different are the and what languages spoken by the greatest percentage of people for each?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT LANGUAGE , CountryCode , max( Percentage ) FROM countrylanguage GROUP BY CountryCode",
            "question": "What are the country codes the countries, and are languages spoken the greatest percentage people for",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Africa' AND population < ( SELECT min( population ) FROM country WHERE Continent = 'Asia' )",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT COUNT( T2.Language ) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba'",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch'",
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Ngbaka' GROUP BY CountryCode",
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE != 'Ngbaka' GROUP BY CountryCode",
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( Population ) , avg( LifeExpectancy ) , Continent FROM country GROUP BY Continent HAVING avg( LifeExpectancy ) < 72",
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What is the total number Spanish of is where countries spoken by the largest percentage of people?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "is the countries where Spanish spoken by largest percentage of people?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Nkole' GROUP BY CountryCode",
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE != 'Spanish' GROUP BY CountryCode",
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "Count the number of countries for Spanish is which the predominantly spoken language.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "Count the number of which Spanish spoken language.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT count( * ) FROM country WHERE continent = 'Asia'",
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'",
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Kirundi' GROUP BY CountryCode",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE != 'Spanish' GROUP BY CountryCode",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE != 'Kirundi' GROUP BY CountryCode",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What codes of the are countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "What are the codes of countries where Spanish spoken by the percentage people?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "label": 1,
            "type": "original_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Moba' GROUP BY CountryCode",
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "Return the codes of countries for Spanish is which the predominantly spoken language.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "world_1"
        },
        {
            "query": "SELECT CountryCode , max( Percentage ) FROM countrylanguage WHERE LANGUAGE = 'Spanish' GROUP BY CountryCode",
            "question": "the codes of countries Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "world_1"
        },
        {
            "query": "SELECT sum( SurfaceArea ) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT avg( LifeExpectancy ) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        },
        {
            "query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' ORDER BY Percentage DESC LIMIT 1",
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "world_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "How many conductors are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "How many conductors are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "many How conductors are there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "many are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "How many conductors are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "How many conductors are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "How many conductors are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "How many conductors are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Count the number of conductors.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "Count the number of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Count number of the conductors.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Count number of conductors.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Count the number of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Count the number of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "Count the number of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "Count the number of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "List the names of conductors in ascending order of age.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age desc",
            "question": "List the names of conductors in ascending order of age.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age desc",
            "question": "List the names of conductors in ascending order of age.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "List the names of conductors in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "List names of the conductors in ascending order of age.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "List of conductors in ascending order of age.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "List the names of conductors in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "List the names of conductors in ascending order of age.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "What are the names of conductors, ordered by age?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age desc",
            "question": "What are the names of conductors, ordered by age?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What are the names of conductors, ordered by age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "What are the names ordered of conductors, by age?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "the of conductors, ordered by",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are the names of conductors, ordered by age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "What are the names of conductors, ordered by age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What are the names of conductors, ordered by age?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "What are the names of whose conductors nationalities are not \"USA\"?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "What are the names of conductors whose nationalities are \"USA\"?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality = 'USA'",
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "Return the names of conductors that do not nationality have the \"USA\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "the conductors that do not the \"USA\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are the record companies of orchestras in order of descending years in which they were founded?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are of in descending of years in they were founded?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded asc",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "Return companies of the record orchestras, sorted descending by the years in which they were founded.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "the companies of orchestras, descending by the years were founded.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What is the average attendance of shows?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "What is the average attendance of shows?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What average is the attendance of shows?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What is the average shows?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What is the average attendance of shows?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What is the average attendance of shows?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "What is the average attendance of shows?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "What is the average attendance of shows?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "Return the average attendance across all shows.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Return the average attendance across all shows.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "Return the average all attendance across shows.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "the average attendance across shows.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "Return the average attendance across all shows.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Return the average attendance across all shows.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "Return the average attendance across all shows.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "Return the average attendance across all shows.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Auditions 4'",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are the maximum and minimum share performances type of whose is not \"Live final\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are the and share of whose type is not \"Live final\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Auditions 4'",
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE = 'Live final'",
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "Return the maximum and minimum shares for performances do that not have the type \"Live final\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "Return the maximum and minimum shares performances that have the type final\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "How many different nationalities do conductors have?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "How many different nationalities do conductors have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "How many nationalities different do conductors have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "How many different nationalities do conductors",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "How many different nationalities do conductors have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "How many different nationalities do conductors have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "How many different nationalities do conductors have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "How many different nationalities do conductors have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "Count the number of different nationalities of conductors.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Count the number of different nationalities of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "Count the number of nationalities of different conductors.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "the number of of conductors.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "Count the number of different nationalities of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "Count the number of different nationalities of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Count the number of different nationalities of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Count the number of different nationalities of conductors.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "List names of conductors in descending order of years of work.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc",
            "question": "List names of conductors in descending order of years of work.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "List names of conductors in descending order of years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "of List names conductors in descending order of years of work.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "names of conductors in order of work.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "List names of conductors in descending order of years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "List names of conductors in descending order of years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "List names of conductors in descending order of years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "What are the names descending of sorted conductors, by the number of years they have worked?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "are the names of conductors, sorted the number of years they have worked?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "List the name of the conductor with the most years of work.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc limit 1",
            "question": "List the name of the conductor with the most years of work.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc limit 1",
            "question": "List the name of the conductor with the most years of work.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "List the name of the conductor with the most years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "List name the of the conductor with the most years of work.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "the of conductor with most years of work.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "List the name of the conductor with the most years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "List the name of the conductor with the most years of work.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work asc limit 1",
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "What is the name of the who conductor worked has the greatest number of years?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "What name the who has worked the greatest number of years?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "the Show names of conductors and the orchestras they have conducted.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "the of conductors orchestras they conducted.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "What of the are names conductors as well as the corresonding orchestras that they have conducted?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "names conductors as well as the corresonding they",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) < 1",
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) < 1",
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "Show the names of conductors have that conducted more than one orchestras.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "Show the names of conductors that have conducted more than",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 2",
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What are the names have of conductors who conducted at more than one orchestra?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What are of conductors who have at more than orchestra?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) asc limit 1",
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show the name of the conductor that has the most conducted number of orchestras.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show the of the conductor that has the number of orchestras.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the the name of conductor who has conducted the most orchestras?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What the name the conductor who has conducted",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2678",
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded < 2008",
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Please show the name of the conductor has conducted that orchestras founded after 2008.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Please show the name of that has orchestras after 2008.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2343",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded < 2008",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "What are the names of conductors conducted have orchestras who founded after the year 2008?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "What are names conductors who have conducted year 2008?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "Please show the different record companies and the of corresponding number orchestras.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "Please record companies and the corresponding number",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "How many orchestras does each record company manage?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Age ASC",
            "question": "How many orchestras does each record company manage?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "How many orchestras each does record company manage?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
            "question": "How many record manage?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "How many orchestras does each record company manage?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "How many orchestras does each record company manage?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "How many orchestras does each record company manage?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "How many orchestras does each record company manage?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Please record the show formats of orchestras in ascending order of count.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Please show formats orchestras in of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) desc",
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the major formats record of orchestras, sorted by their frequency?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "What are the record formats of orchestras, sorted by frequency?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the record company shared by the most number of orchestras.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) asc limit 1",
            "question": "List the record company shared by the most number of orchestras.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "List the record company shared by the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the record company shared by most number the of orchestras.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "List the company shared by the most number of orchestras.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "List the record company shared by the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "List the record company shared by the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "List the record company shared by the most number of orchestras.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the record company used by the greatest number of orchestras?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "What is the record company used by the greatest number of orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the record company by used the greatest number of orchestras?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the used by greatest number orchestras?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What is the record company used by the greatest number of orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "What is the record company used by the greatest number of orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What is the record company used by the greatest number of orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What is the record company used by the greatest number of orchestras?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "List the names of orchestras that have no performance.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID in ( SELECT Orchestra_ID FROM performance )",
            "question": "List the names of orchestras that have no performance.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "List the names of orchestras that have no performance.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "List the names of that have orchestras no performance.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "List the names of orchestras have",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "List the names of orchestras that have no performance.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "List the names of orchestras that have no performance.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "List the names of orchestras that have no performance.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "What are the orchestras that do not have any performances?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "question": "What are the orchestras that do not have any performances?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "What are the orchestras do that not have any performances?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "What are the orchestras that do any performances?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "What are the orchestras that do not have any performances?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 1",
            "question": "What are the orchestras that do not have any performances?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What are the orchestras that do not have any performances?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "What are the orchestras that do not have any performances?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2671 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2290",
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "Show the record by companies shared orchestras founded before 2003 and after 2003.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "the record by orchestras and after 2003.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 1803 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2226",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003 intersect SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 1803 except SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2226",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "What are the record companies that are used by both and 2003 orchestras founded before those founded after 2003?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "are the record companies are by both founded before 2003 founded after 2003?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format != 'CD' and Major_Record_Format = 'DVD'",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Find the number of whose orchestras record format is \"CD\" or \"DVD\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Find the number orchestras whose record format is or \"DVD\".",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT avg( Attendance ) FROM SHOW",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format != 'CD' or Major_Record_Format = 'DVD'",
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' and Major_Record_Format = 'DVD'",
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "Count the number of orchestras that have CD or their as record DVD format.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "question": "number orchestras CD or DVD as their format.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( DISTINCT Nationality ) FROM conductor",
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) < 1",
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) < 1",
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "Show the years in which orchestras that have given more performance one are than founded.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "Show the in which have than performance are founded.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT count( * ) FROM conductor",
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "label": 1,
            "type": "original_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 2",
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) < 1",
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) < 2",
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "What are years of founding that orchestras for have had more than a single performance?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
            "question": "What are years of for orchestras that have than a single",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "orchestra"
        },
        {
            "query": "SELECT max( SHARE ) , min( SHARE ) FROM performance WHERE TYPE != 'Live final'",
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "orchestra"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "How many high schoolers are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many high schoolers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "How many high are schoolers there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "How high schoolers are",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "How many high schoolers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "How many high schoolers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "How many high schoolers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "How many high schoolers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Count the number of high schoolers.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Count the number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Count number the of high schoolers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Count number high schoolers.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Count the number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Count the number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "Show the names and grades of each high schooler.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Show the names and grades of each high schooler.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "Show names the and grades of each high schooler.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "names grades of high",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the names and grades of each high schooler.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Show the names and grades of each high schooler.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the names and grades of each high schooler.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Show the names and grades of each high schooler.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "What are the names and grades for each high schooler?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What are the names and grades for each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "What are the names grades and for each high schooler?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "What are the names grades for each schooler?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and grades for each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and grades for each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are the names and grades for each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names and grades for each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show all the grades of the high schoolers.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show all the grades of the high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show all grades the of the high schoolers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "all grades of high schoolers.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show all the grades of the high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show all the grades of the high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show all the grades of the high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Show all the grades of the high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What is the grade of each high schooler?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "What is the grade of each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What the is grade of each high schooler?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What is the of schooler?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "What is the grade of each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the grade of each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the grade of each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "What is the grade of each high schooler?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "What grade is Kyle in?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Jessica'",
            "question": "What grade is Kyle in?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "What grade is Kyle in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "is grade What Kyle in?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "What grade Kyle",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "What grade is Kyle in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What grade is Kyle in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What grade is Kyle in?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "Return the grade for the high schooler named Kyle.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Haley'",
            "question": "Return the grade for the high schooler named Kyle.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name != 'Kyle'",
            "question": "Return the grade for the high schooler named Kyle.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name != 'Haley'",
            "question": "Return the grade for the high schooler named Kyle.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the grade for the high schooler named Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "Return the grade for the high named schooler Kyle.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "Return the for high schooler named Kyle.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Return the grade for the high schooler named Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Show the names of all high schoolers in grade 10.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 14",
            "question": "Show the names of all high schoolers in grade 10.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade != 10",
            "question": "Show the names of all high schoolers in grade 10.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade != 14",
            "question": "Show the names of all high schoolers in grade 10.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Show the names of all high schoolers in grade 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Show the all names of high schoolers in grade 10.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Show the names of all in grade",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the names of all high schoolers in grade 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "What are the names of all high schoolers in grade 10?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 13",
            "question": "What are the names of all high schoolers in grade 10?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade != 13",
            "question": "What are the names of all high schoolers in grade 10?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "What are the names of all high schoolers in grade 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "the What are names of all high schoolers in grade 10?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "are the names of all high in grade",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "What are the names of all high schoolers in grade 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of all high schoolers in grade 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show the ID of the high schooler named Kyle.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'John'",
            "question": "Show the ID of the high schooler named Kyle.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name != 'Kyle'",
            "question": "Show the ID of the high schooler named Kyle.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Show the ID of the high schooler named Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show the ID of the schooler high named Kyle.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show the ID of the high schooler Kyle.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show the ID of the high schooler named Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "Show the ID of the high schooler named Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "What is Kyle's id?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kris'",
            "question": "What is Kyle's id?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name != 'Kris'",
            "question": "What is Kyle's id?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is Kyle's id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "is What Kyle's id?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "What is id?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "What is Kyle's id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What is Kyle's id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "How many high schoolers are there in grade 9 or 10?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 12 OR grade = 11",
            "question": "How many high schoolers are there in grade 9 or 10?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 and grade = 10",
            "question": "How many high schoolers are there in grade 9 or 10?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 12 and grade = 11",
            "question": "How many high schoolers are there in grade 9 or 10?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many high schoolers are there in grade 9 or 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "How many high schoolers are grade in there 9 or 10?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "How many high schoolers there in grade 9 10?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "How many high schoolers are there in grade 9 or 10?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 8 OR grade = 8",
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 or grade != 10",
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 8 or grade != 8",
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Count the number of high schoolers in 9 or grades 10.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Count the number of schoolers in grades 9 or",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Show the number of high schoolers for each grade.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show the number of high schoolers for each grade.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Show the number high of schoolers for each grade.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "the number of schoolers for grade.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show the number of high schoolers for each grade.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Show the number of high schoolers for each grade.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the number of high schoolers for each grade.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the number of high schoolers for each grade.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "How many high schoolers are in each grade?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "How many high schoolers are in each grade?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "How schoolers high many are in each grade?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "How many high schoolers in each grade?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many high schoolers are in each grade?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many high schoolers are in each grade?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "How many high schoolers are in each grade?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many high schoolers are in each grade?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which grade has the most high schoolers?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) asc limit 1",
            "question": "Which grade has the most high schoolers?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Which grade has the most high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which grade has high most the schoolers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which grade has the most high",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Which grade has the most high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Which grade has the most high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "Which grade has the most high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the grade that has the greatest number of high schoolers.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Return the grade that has the greatest number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the grade that greatest the has number of high schoolers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the grade has the greatest of high schoolers.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Return the grade that has the greatest number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "Return the grade that has the greatest number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Return the grade that has the greatest number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Return the grade that has the greatest number of high schoolers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Show me all grades that have at least 4 students.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 5",
            "question": "Show me all grades that have at least 4 students.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show me all grades that have at least 4 students.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Show me all grades that have least at 4 students.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Show all grades at least students.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show me all grades that have at least 4 students.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show me all grades that have at least 4 students.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show me all grades that have at least 4 students.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Which grades have 4 or more high schoolers?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) <= 4",
            "question": "Which grades have 4 or more high schoolers?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) <= 4",
            "question": "Which grades have 4 or more high schoolers?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Which grades have 4 or more high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Which grades have more or 4 high schoolers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "Which grades 4 or more high schoolers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Which grades have 4 or more high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Which grades have 4 or more high schoolers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "Show the student IDs of numbers and friends corresponding to each.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "Show the student and numbers of to",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "How many friends does each student have?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "How many friends does each student have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "How friends many does each student have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "How many does each student have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "How many friends does each student have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "How many friends does each student have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "How many friends does each student have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "How many friends does each student have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the names of high school students and their corresponding number of friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show the names of high school students and their corresponding number of friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the names of high school students and their of corresponding number friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the of high school students and their number of friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Show the names of high school students and their corresponding number of friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show the names of high school students and their corresponding number of friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Show the names of high school students and their corresponding number of friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Show the names of high school students and their corresponding number of friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What are the names of and schoolers high the how many friends does each have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "are the of the high and how many does each have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the of name the high schooler who has the greatest number of friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the high number of friends?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the name of the high school student with the most friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Return the name of the high school student with the most friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the name of the school high student with the most friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return name of the high school student with the friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Return the name of the high school student with the most friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Return the name of the high school student with the most friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Return the name of the high school student with the most friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Return the name of the high school student with the most friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 4",
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) <= 3",
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) <= 4",
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "Show the names of high schoolers who at least have 3 friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "the of schoolers have 3",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) <= 3",
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "What are the names of high schoolers who have or more 3 friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "What are the names of high schoolers who have 3 more",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Alexis'",
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name != 'Kyle'",
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name != 'Alexis'",
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "the names Show of all of the high schooler Kyle's friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "Show the of of high Kyle's friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "Return the names of friends of the high school student Kyle.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Austin'",
            "question": "Return the names of friends of the high school student Kyle.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "Return the names of friends of the high school student Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "the Return names of friends of the high school student Kyle.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "the names friends of the school Kyle.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "Return the names of friends of the high school student Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Return the names of friends of the high school student Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Return the names of friends of the high school student Kyle.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many friends does the high school student Kyle have?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Haley'",
            "question": "How many friends does the high school student Kyle have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name != 'Haley'",
            "question": "How many friends does the high school student Kyle have?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "How many friends does the high school student Kyle have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many friends does the high student school Kyle have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many friends does high Kyle have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "How many friends does the high school student Kyle have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "How many friends does the high school student Kyle have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Count the number of friends Kyle has.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Gabriel'",
            "question": "Count the number of friends Kyle has.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name != 'Kyle'",
            "question": "Count the number of friends Kyle has.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name != 'Gabriel'",
            "question": "Count the number of friends Kyle has.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of friends Kyle has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Count the of number friends Kyle has.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Count number of friends Kyle",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Count the number of friends Kyle has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Show ids of all students who do not have any friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler intersect SELECT student_id FROM Friend",
            "question": "Show ids of all students who do not have any friends.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show ids of all students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Show ids of all students do who not have any friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Show ids students who do not have any friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Show ids of all students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "Show ids of all students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show ids of all students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "What are the ids of high school students who do not have friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler intersect SELECT student_id FROM Friend",
            "question": "What are the ids of high school students who do not have friends?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the ids of high school students who do not have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "What are ids of the high school students who do not have friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "What are ids high students who do not have friends?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What are the ids of high school students who do not have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
            "question": "What are the ids of high school students who do not have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "What are the ids of high school students who do not have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Show names of all high school students who do not have any friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show names of all high school students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Show names of all high school students who do have not any friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Show names of all high school students who do not friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Show names of all high school students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Show names of all high school students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show names of all high school students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Show names of all high school students who do not have any friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are the names of students who have no friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler union SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are the names of students who have no friends?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "What are the names of students who have no friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are the names students of who have no friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are names students who have friends?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "What are the names of students who have no friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What are the names of students who have no friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "What are the names of students who have no friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend union SELECT liked_id FROM Likes",
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "of Show ids the high schoolers who have friends and are also liked by someone else.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "Show the of high who friends and also someone else.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "What are the ids of students who both have friends and are liked?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend union SELECT liked_id FROM Likes",
            "question": "What are the ids of students who both have friends and are liked?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend except SELECT liked_id FROM Likes",
            "question": "What are the ids of students who both have friends and are liked?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "What are the ids of students who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "What are the ids of students who both have are friends and liked?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "What the ids of students who both have friends and liked?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the ids of students who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What are the ids of students who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "all Show name of students who have some friends and also are liked by someone else.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Show name all who have some friends are by someone else.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id union SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What are the names of high schoolers who both friends are and have liked?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "are the names of high schoolers have are liked?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Count the number of likes for each student id.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Count the number of likes for each student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Count the likes of number for each student id.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Count the likes for each",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Count the number of likes for each student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Count the number of likes for each student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of likes for each student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of likes for each student id.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "How many likes correspond to each student id?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "How many likes correspond to each student id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "likes many How correspond to each student id?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "likes correspond each student id?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "How many likes correspond to each student id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many likes correspond to each student id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "How many likes correspond to each student id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "How many likes correspond to each student id?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the names of high schoolers have likes, who and numbers of likes for each.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "Show the high schoolers who likes for each.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What are the names of high schoolers who have likes, and likes how many each does have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "question": "What are names of who likes, and how many each have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Highschooler",
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What name the is of the high schooler who has the greatest number of likes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the schooler has greatest of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Give the name of the student with the most likes.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Give the name of the student with the most likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "the Give name of the student with the most likes.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "name of the student the most likes.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Give the name of the student with the most likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Give the name of the student with the most likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "Give the name of the student with the most likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Give the name of the student with the most likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the names of students who have at least 2 likes.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "Show the names of students who have at least 2 likes.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) <= 3",
            "question": "Show the names of students who have at least 2 likes.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Show the names of students who have at least 2 likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the students of names who have at least 2 likes.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "names of students who have at least 2 likes.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Show the names of students who have at least 2 likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the names of students who have at least 2 likes.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What are the names of students who have 2 or more likes?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "What are the names of students who have 2 or more likes?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) <= 2",
            "question": "What are the names of students who have 2 or more likes?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) <= 3",
            "question": "What are the names of students who have 2 or more likes?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "question": "What are the names of students who have 2 or more likes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What the are names of students who have 2 or more likes?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What are the names of students who or likes?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "What are the names of students who have 2 or more likes?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) <= 2",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the names of students who have a grade higher than have 5 and at least 2 friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "names of students have a grade 5 and have at least 2 friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 6 GROUP BY T1.student_id HAVING count( * ) >= 3",
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) <= 2",
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler",
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What are the have who high schoolers names of a grade of over 5 and have 2 or more friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "high schoolers a of 5 and 2 or more friends?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many likes does Kyle have?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Haley'",
            "question": "How many likes does Kyle have?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name != 'Kyle'",
            "question": "How many likes does Kyle have?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "How many likes does Kyle have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How many likes Kyle does have?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "How does Kyle have?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count( * ) >= 4",
            "question": "How many likes does Kyle have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
            "question": "How many likes does Kyle have?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Haley'",
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name != 'Kyle'",
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name != 'Haley'",
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Return of the number likes that the high schooler named Kyle has.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "number of likes that the high schooler Kyle has.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Find the average grade of all students who have some friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id not in ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Find the average grade of all students who have some friends.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "Find the average grade of all students who have some friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Find the of average grade all students who have some friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "average grade all students who have some friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Find the average grade of all students who have some friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Kyle'",
            "question": "Find the average grade of all students who have some friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Find the average grade of all students who have some friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the average grade of students who have friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id not in ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the average grade of students who have friends?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
            "question": "What is the average grade of students who have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What the is average grade of students who have friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What the average grade of students have friends?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count( * ) >= 2",
            "question": "What is the average grade of students who have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "What is the average grade of students who have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the average grade of students who have friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Find the minimum grade of students who have no friends.",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "Find the minimum grade of students who have no friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Find the minimum grade of students no who have friends.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "Find the minimum grade of who have no friends.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "question": "Find the minimum grade of students who have no friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name FROM Highschooler WHERE grade = 10",
            "question": "Find the minimum grade of students who have no friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "question": "Find the minimum grade of students who have no friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "question": "Find the minimum grade of students who have no friends.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the lowest grade of students who do not have any friends?",
            "label": 1,
            "type": "original_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id in ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the lowest grade of students who do not have any friends?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id in ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the lowest grade of students who do not have any friends?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT name , grade FROM Highschooler",
            "question": "What is the lowest grade of students who do not have any friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "the is What lowest grade of students who do not have any friends?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "network_1"
        },
        {
            "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
            "question": "What is the lowest students who not",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "network_1"
        },
        {
            "query": "SELECT count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'",
            "question": "What is the lowest grade of students who do not have any friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        },
        {
            "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the lowest grade of students who do not have any friends?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "network_1"
        }
    ],
    [
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Which states have both owners and professionals living there?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "Which states have both owners and professionals living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Which states have both owners living professionals and there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "states have both professionals living there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "Which states have both owners and professionals living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which states have both owners and professionals living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which states have both owners and professionals living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Which states have both owners and professionals living there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Find the states where both owners and professionals live.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners union SELECT state FROM Professionals",
            "question": "Find the states where both owners and professionals live.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the states where both owners and professionals live.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Find the both states where owners and professionals live.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Find states where both and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Find the states where both owners and professionals live.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "Find the states where both owners and professionals live.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the states where both owners and professionals live.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id not in ( SELECT dog_id FROM Treatments )",
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id not in ( SELECT dog_id FROM Treatments )",
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "What is the average age of the dogs have who through gone any treatments?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "What is average of the who gone through treatments?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the average age of the dogs who went through treatments.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id not in ( SELECT dog_id FROM Treatments )",
            "question": "Find the average age of the dogs who went through treatments.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Find the average age of the dogs who went through treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the average age of who the dogs went through treatments.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "the average age of the dogs went through",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "Find the average age of the dogs who went through treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Find the average age of the dogs who went through treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "Find the average age of the dogs who went through treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Wisconsin' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 3",
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state != 'Indiana' union SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state != 'Wisconsin' union SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) < 3",
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Which professionals live in Indiana the have state or treatment done of on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Which professionals the state have treatment on more than 2 List or her name and cell phone.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Wisconsin' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state != 'Indiana' except SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) < 2",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state != 'Wisconsin' union SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) < 2",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Find the id, last name and cell phone of the professionals who live Indiana the of in or state have performed more than two treatments.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Find the and cell phone the professionals who live in the Indiana or have performed more than two treatments.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 875 )",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 875 )",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Which dogs have not cost their owner for more 1000 than treatment ? List the dog names .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Which dogs have cost their more 1000 ? List the dog .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 800 )",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) < 1000 )",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 800 )",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "What are the names of the dogs for which owner spend the has not more than 1000 for treatment ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "What the names of the for which has not spend 1000 for treatment ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals intersect SELECT first_name FROM Owners except SELECT name FROM Dogs",
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals except SELECT first_name FROM Owners union SELECT name FROM Dogs",
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Which first names are used for professionals or owners are but used not as dog names?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Which first are used for professionals owners but are not used dog names?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals union SELECT first_name FROM Owners intersect SELECT name FROM Dogs",
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals except SELECT first_name FROM Owners except SELECT name FROM Dogs",
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Find the first names that are used for are professionals or but owners not used as dog names.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Find first names used professionals owners but not as names.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals union SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals union SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which professional did not any treatment on operate dogs? List the professional's id, role and email.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which professional did any dogs? id, role and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals intersect SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Give me the id, role and email of the professionals not did who perform any treatment on dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Give me the id, role of the professionals who any treatment",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) asc limit 1",
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which owner owns the most dogs? List first id, owner the name and last name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which owner owns the dogs? List the owner id, first name and last name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) asc limit 1",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the owner id, first name and name last the of owner who has the most dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Return the owner id, name last name the owner who has the most dogs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) <= 2",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) <= 2",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which professionals have done least two treatments? at List the professional's id, role, and first name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "professionals done two List the id,",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) <= 2",
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "What are the id, role, and first professionals the name of who have performed two or more treatments?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "the id, role, professionals performed or more",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is the name of the breed with the most dogs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) asc limit 1",
            "question": "What is the name of the breed with the most dogs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "What is the name of the breed with the most dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What the is name of the breed with the most dogs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What is of the breed with the most",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "What is the name of the breed with the most dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "What is the name of the breed with the most dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "What is the name of the breed with the most dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which breed do the most dogs have? me Give the breed name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which breed do the most Give me the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Which owner treatments the for most has paid on his or her dogs? List the owner id and last name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "owner has paid for the most treatments his or dogs? List owner and last name.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) asc limit 1",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Tell me the owner id and last name of the owner who spent the on or of treatments most his her dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Tell me the owner id and name the owner who spent the most on treatments his her dogs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What is the description of the treatment type that costs the least money in total?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) desc limit 1",
            "question": "What is the description of the treatment type that costs the least money in total?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) desc limit 1",
            "question": "What is the description of the treatment type that costs the least money in total?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "What is the description of the treatment type that costs the least money in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What is the of the description treatment type that costs the least money in total?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What is the description of treatment type that the least in total?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What is the description of the treatment type that costs the least money in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "What is the description of the treatment type that costs the least money in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) desc limit 1",
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) desc limit 1",
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Give me the description type the treatment of whose total cost is the lowest.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "whose total lowest.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) asc limit 1",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) asc limit 1",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Which owner has paid the largest amount of in dogs? total for their money Show the owner id and zip code.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "has largest amount in their Show the owner id zip",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Find the owner id and zip code of the owner who the most spent in money total for his or her dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Find the owner id and of the who the most money in total for his her",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 3",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) <= 2",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) <= 3",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which professionals have done at least two types of treatments? List and the id cell professional phone.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which professionals have done at least two types of treatments? List the professional id and phone.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 3",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) <= 3",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Find the id and cell phone of the professionals who operate more types two of or treatments.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "the cell of the professionals operate types of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment > ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment > ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What are the first name and last name of done professionals the who have treatment with cost below average?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What the name and last of the professionals who treatment cost below average?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "Which professionals have operated a treatment that average? the than Give costs less me theor first names and last names.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "Which professionals have operated a treatment that less than average? Give theor first names and last names.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "List the date of each treatment, together with the first professional name the who of operated it.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "List date of each treatment, together with the first name of the professional who operated",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the date and the operating professional's first name of each treatment?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "What are the date and the operating professional's first name of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the date and the operating first professional's name of each treatment?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are date the first each treatment?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the date and the operating professional's first name of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "What are the date and the operating professional's first name of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What are the date and the operating professional's first name of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "What are the date and the operating professional's first name of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "List the cost of each treatment the and corresponding treatment type description.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "List the cost of and the corresponding type description.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "What are the cost and treatment type description of each treatment?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "What are the cost and treatment type description of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "What are the cost and description type treatment of each treatment?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "What are the cost and treatment type description treatment?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "What are the cost and treatment type description of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the cost and treatment type description of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "What are the cost and treatment type description of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "What are the cost and treatment type description of each treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List each owner's first and name, name, last the size of his for her dog.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List each owner's name, the his for her dog.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What are each last owner's name, first name, and the size of their dog?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What are each owner's first name, last the size their",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List pairs of the owner's first name and the dogs's name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "List pairs of the owner's first name and the dogs's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List pairs of first the owner's name and the dogs's name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "of the owner's first name and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "List pairs of the owner's first name and the dogs's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "List pairs of the owner's first name and the dogs's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "List pairs of the owner's first name and the dogs's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "List pairs of the owner's first name and the dogs's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What are each owner's first name and their dogs's name?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "What are each owner's first name and their dogs's name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "each are What owner's first name and their dogs's name?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What owner's first name dogs's",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "What are each owner's first name and their dogs's name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "What are each owner's first name and their dogs's name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are each owner's first name and their dogs's name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "What are each owner's first name and their dogs's name?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "List the names of the dogs of the the breed and rarest treatment dates of them.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "the names of the dogs of the rarest and the dates them.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) desc limit 1 )",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "dogs are Which of the rarest breed? Show their names and treatment dates.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Which dogs are of the breed? Show and dates.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'NewYork'",
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state != 'Virginia'",
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "Which dogs are owned by someone who lives in Virginia? List the name owner's first and the dog's name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "Which dogs are owned by someone who Virginia? List owner's first and the dog's",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Vermont'",
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state != 'Virginia'",
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state != 'Vermont'",
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "Find names first the of owners living in Virginia and the names of dogs they own.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "first names of living in and of dogs they own.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "What are the arriving date and the departing date of have who gone the dogs through a treatment?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "What are the arriving and departing date of the dogs who through a treatment?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Find the arriving date and the departing date of the dogs a that received treatment.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Find the arriving date the departing date that received a treatment.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "List the last name of the owner owning the youngest dog.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "List the last name of the owner owning the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "List name last the of the owner owning the youngest dog.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "List name of the owner owning the youngest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "List the last name of the owner owning the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "List the last name of the owner owning the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "List the last name of the owner owning the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "List the last name of the owner owning the youngest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "owns the Who youngest dog? Give me his or her last name.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "owns the youngest Give me his or her last",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Utah' OR state = 'Virginia'",
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state != 'Hawaii' or state != 'Wisconsin'",
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state != 'Utah' and state != 'Virginia'",
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "List the emails of the who the live professionals in state of Hawaii or the state of Wisconsin.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "List of the professionals live in state of Hawaii or the Wisconsin.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'NewMexico' OR state = 'Arkansas'",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' and state = 'Wisconsin'",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'NewMexico' or state != 'Arkansas'",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "What are the emails of the professionals living in either of state the Hawaii or the state of Wisconsin?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "What are emails the professionals living in either state of the state of Wisconsin?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "What are the arriving date and the departing date of all the dogs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "What are the arriving date and the departing date of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "What arriving the are date and the departing date of all the dogs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "What are the arriving date the departing date of all the dogs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the arriving date and the departing date of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "What are the arriving date and the departing date of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "What are the arriving date and the departing date of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "What are the arriving date and the departing date of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "List the arrival date and the departure date for all the dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "List the arrival date and the departure date for all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "List the arrival the date and departure date for all the dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "List arrival and the departure date for all the dogs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "List the arrival date and the departure date for all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "List the arrival date and the departure date for all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "List the arrival date and the departure date for all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "List the arrival date and the departure date for all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "How many dogs went through any treatments?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "How many dogs went through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "How many went through dogs any treatments?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "How many went through any treatments?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "How many dogs went through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "How many dogs went through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "How many dogs went through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "How many dogs went through any treatments?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "Count the number of dogs that went through a treatment.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "Count the number of dogs that went through a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "Count number the of dogs that went through a treatment.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "Count number dogs treatment.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "Count the number of dogs that went through a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Count the number of dogs that went through a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Count the number of dogs that went through a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "Count the number of dogs that went through a treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "How many professionals have performed any treatment to dogs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many professionals have performed any treatment to dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "How professionals many have performed any treatment to dogs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "How professionals have to dogs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "How many professionals have performed any treatment to dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many professionals have performed any treatment to dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many professionals have performed any treatment to dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "How many professionals have performed any treatment to dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "Find the number of professionals who have ever treated dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Find the number of professionals who have ever treated dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "Find the of number professionals who have ever treated dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "professionals have ever treated dogs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "Find the number of professionals who have ever treated dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the number of professionals who have ever treated dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Find the number of professionals who have ever treated dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Find the number of professionals who have ever treated dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city not like '%West%'",
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Which professionals live in containing city a the substring 'West'? List his or her role, street, city and state.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Which professionals live city containing the 'West'? his or her role, street, and state.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city not like '%West%'",
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Find the role, street, city and state of the professionals living that in city a contains the substring 'West'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Find the role, street, city state of the professionals city contains 'West'.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state not like '%North%'",
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Which owners live in the state substring name the contains whose 'North'? List his first name, last name and email.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Which owners live state name contains the 'North'? List his first name, last and email.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state not like '%North%'",
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Return name, first the last and name email of the owners living in a state whose name contains the substring 'North'.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "Return the first name, last email of owners living in state whose name",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "How many dogs have an age below the average?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age > ( SELECT avg( age ) FROM Dogs )",
            "question": "How many dogs have an age below the average?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "How many dogs have an age below the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "How many dogs age an have below the average?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "How many have an age the average?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many dogs have an age below the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "question": "How many dogs have an age below the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "How many dogs have an age below the average?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "Count the number of dogs of an age below the average.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age > ( SELECT avg( age ) FROM Dogs )",
            "question": "Count the number of dogs of an age below the average.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "Count the number of dogs of an age below the average.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "Count the number of dogs of an below the age average.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "the number dogs an",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Count the number of dogs of an age below the average.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "Count the number of dogs of an age below the average.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Count the number of dogs of an age below the average.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "How much does the most recent treatment cost?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment asc limit 1",
            "question": "How much does the most recent treatment cost?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "How much does the most recent treatment cost?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "How much does the treatment recent most cost?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "the recent treatment cost?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "How much does the most recent treatment cost?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "How much does the most recent treatment cost?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "How much does the most recent treatment cost?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "Show me the cost of the most recently performed treatment.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment asc limit 1",
            "question": "Show me the cost of the most recently performed treatment.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Show me the cost of the most recently performed treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "Show me the cost of the recently most performed treatment.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "me the the performed treatment.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "Show me the cost of the most recently performed treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Show me the cost of the most recently performed treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "Show me the cost of the most recently performed treatment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "How many dogs have not gone through any treatment?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id in ( SELECT dog_id FROM Treatments )",
            "question": "How many dogs have not gone through any treatment?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id in ( SELECT dog_id FROM Treatments )",
            "question": "How many dogs have not gone through any treatment?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
            "question": "How many dogs have not gone through any treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "How many dogs not gone have through any treatment?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "dogs not through any",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "How many dogs have not gone through any treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "How many dogs have not gone through any treatment?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "Tell me the number of dogs that have not received any treatment .",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id in ( select dog_id from treatments )",
            "question": "Tell me the number of dogs that have not received any treatment .",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id in ( select dog_id from treatments )",
            "question": "Tell me the number of dogs that have not received any treatment .",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "Tell me the number of dogs that have not received any treatment .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "Tell the number me of dogs that have not received any treatment .",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "Tell me the number of that not received any .",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "Tell me the number of dogs that have not received any treatment .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "Tell me the number of dogs that have not received any treatment .",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "How many owners temporarily do not have any dogs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "How many owners temporarily do not have any dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "How temporarily owners many do not have any dogs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "How many temporarily do not have any dogs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "How many owners temporarily do not have any dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "How many owners temporarily do not have any dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "How many owners temporarily do not have any dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "How many owners temporarily do not have any dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id in ( SELECT owner_id FROM Dogs )",
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "the number Find of owners who do not own any dogs at this moment.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "the number of owners who do not own any dogs at this",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "How many professionals did not operate any treatment on dogs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id in ( SELECT professional_id FROM Treatments )",
            "question": "How many professionals did not operate any treatment on dogs?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id in ( SELECT professional_id FROM Treatments )",
            "question": "How many professionals did not operate any treatment on dogs?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "How many professionals did not operate any treatment on dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "How many did professionals not operate any treatment on dogs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "many professionals did not operate any on",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "How many professionals did not operate any treatment on dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "How many professionals did not operate any treatment on dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "Find the number of professionals who have not treated any dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id in ( SELECT professional_id FROM Treatments )",
            "question": "Find the number of professionals who have not treated any dogs.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "Find the number of professionals who have not treated any dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "Find the number of professionals who have any treated not dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "Find the number of professionals who have not treated dogs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "Find the number of professionals who have not treated any dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Find the number of professionals who have not treated any dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "Find the number of professionals who have not treated any dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 0 and yes, stands for stands for no.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "List dog name, age and of dogs who have been stands for yes, 0 stands for",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 2",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn != 2",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "What are the dog name, age and weight were dogs that the of abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "question": "are name, age weight of dogs that abandoned? Note that 1 stands for and 0 stands for in the tables.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "What is the average age of all the dogs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
            "question": "What is the average age of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "What is average the age of all the dogs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "What is the average all the dogs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "What is the average age of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "What is the average age of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "What is the average age of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "What is the average age of all the dogs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Compute the average age of all the dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "Compute the average age of all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Compute the average of age all the dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "Compute average of all dogs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Compute the average age of all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "Compute the average age of all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "Compute the average age of all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "Compute the average age of all the dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "What is the age of the oldest dog?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "question": "What is the age of the oldest dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "What the age is of the oldest dog?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "What is the of the oldest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "question": "What is the age of the oldest dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "What is the age of the oldest dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
            "question": "What is the age of the oldest dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
            "question": "What is the age of the oldest dog?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Tell me the age of the oldest dog.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "question": "Tell me the age of the oldest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "Tell me of age the the oldest dog.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "me age oldest",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "Tell me the age of the oldest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "Tell me the age of the oldest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "Tell me the age of the oldest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Tell me the age of the oldest dog.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "How much does each charge type costs? List both charge type and amount.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "How much does each charge type costs? List both charge type and amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "How much does each charge type costs? List both type and charge amount.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "much does each charge type costs? List type and amount.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "How much does each charge type costs? List both charge type and amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "How much does each charge type costs? List both charge type and amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "How much does each charge type costs? List both charge type and amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "question": "How much does each charge type costs? List both charge type and amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "List each charge type and its amount.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "List each charge type and its amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "List each charge and its type amount.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "List charge and amount.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( age ) FROM Dogs",
            "question": "List each charge type and its amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "question": "List each charge type and its amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "List each charge type and its amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "List each charge type and its amount.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "How much does the most expensive charge type costs?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
            "question": "How much does the most expensive charge type costs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "does much How the most expensive charge type costs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "How much does the expensive charge type costs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "How much does the most expensive charge type costs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "question": "How much does the most expensive charge type costs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "How much does the most expensive charge type costs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "How much does the most expensive charge type costs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "What is the charge amount of the most expensive charge type?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "What is the charge amount of the most expensive charge type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "What is the of charge amount the most expensive charge type?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "What is the charge amount of the most charge type?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What is the charge amount of the most expensive charge type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "What is the charge amount of the most expensive charge type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
            "question": "What is the charge amount of the most expensive charge type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "What is the charge amount of the most expensive charge type?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "List the email, cell phone and home phone of all the professionals.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "List the email, cell phone and home phone of all the professionals.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "List the email, cell phone home and phone of all the professionals.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "the email, cell home phone of the professionals.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "List the email, cell phone and home phone of all the professionals.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "List the email, cell phone and home phone of all the professionals.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "List the email, cell phone and home phone of all the professionals.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "List the email, cell phone and home phone of all the professionals.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "What are the email, cell phone and home phone of each professional?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "question": "What are the email, cell phone and home phone of each professional?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "are What the email, cell phone and home phone of each professional?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address , cell_number , home_phone FROM professionals",
            "question": "What are the phone and phone of each",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
            "question": "What are the email, cell phone and home phone of each professional?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are the email, cell phone and home phone of each professional?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "question": "What are the email, cell phone and home phone of each professional?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "What are the email, cell phone and home phone of each professional?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "What are all the possible breed type and size type combinations?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "What are all the possible breed type and size type combinations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "are What all the possible breed type and size type combinations?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "What are all breed and type",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "What are all the possible breed type and size type combinations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT max( charge_amount ) FROM Charges",
            "question": "What are all the possible breed type and size type combinations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "What are all the possible breed type and size type combinations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT charge_type , charge_amount FROM Charges",
            "question": "What are all the possible breed type and size type combinations?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Find the distinct type breed and size type combinations for dogs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
            "question": "Find the distinct breed and size type for",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT date_arrived , date_departed FROM Dogs",
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "List the first of all the name professionals along with the description of the treatment they have done.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "List the name all the professionals along with description of the treatment they have",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum( cost_of_treatment ) > 1000 )",
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum( cost_of_treatment ) ASC LIMIT 1",
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "label": 1,
            "type": "original_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "What are each professional's first name and of the description treatment they have performed?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "question": "What are each professional's first and description of the treatment they have performed?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT avg( age ) FROM Dogs",
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        },
        {
            "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "dog_kennels"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many singers are there?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "How many singers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many are singers there?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "How many are there?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "How many singers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "How many singers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "How many singers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "How many singers are there?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the count of singers?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "What is the count of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is of count the singers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "the count of singers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What is the count of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the count of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "What is the count of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What is the count of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "List the name of singers in ascending order of net worth.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "List the name of singers in ascending order of net worth.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "List the name of singers in order ascending of net worth.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "List the name of singers in order net worth.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "List the name of singers in ascending order of net worth.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "List the name of singers in ascending order of net worth.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "List the name of singers in ascending order of net worth.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "List the name of singers in ascending order of net worth.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "What are the names of singers ordered by ascending net worth?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions desc",
            "question": "What are the names of singers ordered by ascending net worth?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the names of singers ordered by ascending net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "What are the names ordered singers of by ascending net worth?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "are the of singers ordered net worth?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What are the names of singers ordered by ascending net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are the names of singers ordered by ascending net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the names of singers ordered by ascending net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the birth year and citizenship of singers?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What are the birth year and citizenship of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the birth citizenship year and of singers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "are birth year and of singers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the birth year and citizenship of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "What are the birth year and citizenship of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are the birth year and citizenship of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What are the birth year and citizenship of singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the birth years and citizenships of the singers?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are the birth years and citizenships of the singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What birth are the years and citizenships of the singers?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the birth and citizenships of the singers?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What are the birth years and citizenships of the singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are the birth years and citizenships of the singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What are the birth years and citizenships of the singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What are the birth years and citizenships of the singers?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "List the name of singers whose citizenship is not \"France\".",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'United States'",
            "question": "List the name of singers whose citizenship is not \"France\".",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "List the name of singers whose citizenship is not \"France\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "List the name of singers is citizenship whose not \"France\".",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "List the name of singers whose citizenship not",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "List the name of singers whose citizenship is not \"France\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "List the name of singers whose citizenship is not \"France\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "List the name of singers whose citizenship is not \"France\".",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What are the names of the singers who are not French citizens?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'Chile'",
            "question": "What are the names of the singers who are not French citizens?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship = 'France'",
            "question": "What are the names of the singers who are not French citizens?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship = 'Chile'",
            "question": "What are the names of the singers who are not French citizens?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What are the names of the singers who are not French citizens?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What are the names singers of the who are not French citizens?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What names of the singers who are not French citizens?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What are the names of the singers who are not French citizens?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 974 OR Birth_Year = 975",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year != 1948 and Birth_Year != 1949",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 974 and Birth_Year = 975",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "Show the name of birth whose singers year is either 1948 or 1949?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "the name of singers year is 1948 or 1949?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 2338 OR Birth_Year = 2193",
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year != 1948 and Birth_Year = 1949",
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year != 2338 and Birth_Year = 2193",
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the names of whose birth singers the years are either 1948 or 1949?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the the whose birth are either",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the name of the singer with the largest net worth?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "What is the name of the singer with the largest net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the name of the singer the with largest net worth?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the of the with the net worth?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What is the name of the singer with the largest net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What is the name of the singer with the largest net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "What is the name of the singer with the largest net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "What is the name of the singer with the largest net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the name of the singer who is worth the most?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "What is the name of the singer who is worth the most?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the name singer of the who is worth the most?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What the name singer who the",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "What is the name of the singer who is worth the most?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What is the name of the singer who is worth the most?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What is the name of the singer who is worth the most?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What is the name of the singer who is worth the most?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "Show different citizenship of and singers the number of singers of each citizenship.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "Show and the number of of each",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, how many singers are from that country?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "For each citizenship, how many singers are from that country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, how many singers that are from country?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "For singers are from country?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "For each citizenship, how many singers are from that country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "For each citizenship, how many singers are from that country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "For each citizenship, how many singers are from that country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, how many singers are from that country?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Please show the most common citizenship of singers.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) asc limit 1",
            "question": "Please show the most common citizenship of singers.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "Please show the most common citizenship of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Please show most common the citizenship of singers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Please most common of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "Please show the most common citizenship of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "Please show the most common citizenship of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "Please show the most common citizenship of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "What is the most common singer citizenship ?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) asc limit 1",
            "question": "What is the most common singer citizenship ?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) asc limit 1",
            "question": "What is the most common singer citizenship ?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What is the most common singer citizenship ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "What is the most citizenship singer common ?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "What is the most common citizenship ?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "What is the most common singer citizenship ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "What is the most common singer citizenship ?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "Show different and the citizenships maximum net worth of singers of each citizenship.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "different citizenships and the net worth of singers of each",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, what is the maximum net worth?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "For each citizenship, what is the maximum net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, is what the maximum net worth?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, is worth?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "For each citizenship, what is the maximum net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "For each citizenship, what is the maximum net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "For each citizenship, what is the maximum net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "For each citizenship, what is the maximum net worth?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "Show titles of songs and names of singers.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "Show titles of songs and names of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "Show titles songs of and names of singers.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "Show titles of songs names of",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "Show titles of songs and names of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "Show titles of songs and names of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "Show titles of songs and names of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "Show titles of songs and names of singers.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are the song titles and singer names?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "What are the song titles and singer names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are the titles song and singer names?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "question": "What are song titles and",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What are the song titles and singer names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the song titles and singer names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What are the song titles and singer names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What are the song titles and singer names?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 240000",
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales < 300000",
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales < 240000",
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "Show distinct names of have that singers songs with sales more than 300000.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "Show distinct of singers have with than 300000.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "what are the different names of the singers that have sales more than 300000?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 225000",
            "question": "what are the different names of the singers that have sales more than 300000?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales < 300000",
            "question": "what are the different names of the singers that have sales more than 300000?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "question": "what are the different names of the singers that have sales more than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "what are the different names of the singers that than have more sales 300000?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "what are the names of have sales 300000?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "what are the different names of the singers that have sales more than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "what are the different names of the singers that have sales more than 300000?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "Show the names of singers that have more than one song.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) < 1",
            "question": "Show the names of singers that have more than one song.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "Show the names of singers that have more than one song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "Show the of singers names that have more than one song.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "Show the names singers that have more than one",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "Show the names of singers that have more than one song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "Show the names of singers that have more than one song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show the names of singers that have more than one song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "What are the names of the singers that have more than one songs?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "What are the names of the singers that have more than one songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "What are the names of the singers that more have than one songs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "What are the names of the singers more songs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What are the names of the singers that have more than one songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "What are the names of the singers that have more than one songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the names of the singers that have more than one songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "What are the names of the singers that have more than one songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "Show the names of singers and the total sales of their songs.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "Show the names of singers and the total sales of their songs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "the names Show of singers and the total sales of their songs.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "Show the names of and the total sales of their songs.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "Show the names of singers and the total sales of their songs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "question": "Show the names of singers and the total sales of their songs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "Show the names of singers and the total sales of their songs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "Show the names of singers and the total sales of their songs.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "For each singer name, what is the total sales for their songs?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "For each singer name, what is the total sales for their songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "For each singer name, what is total the sales for their songs?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "question": "For each is the sales for their songs?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "For each singer name, what is the total sales for their songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "For each singer name, what is the total sales for their songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
            "question": "For each singer name, what is the total sales for their songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "For each singer name, what is the total sales for their songs?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "List the name of singers that do not have any song.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID in ( SELECT Singer_ID FROM song )",
            "question": "List the name of singers that do not have any song.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "List the name of singers that do not have any song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "List the name of singers that not do have any song.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "the name singers that do have song.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "List the name of singers that do not have any song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "select citizenship from singer group by citizenship order by count( * ) desc limit 1",
            "question": "List the name of singers that do not have any song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "List the name of singers that do not have any song.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "What is the sname of every sing that does not have any song?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship , max( Net_Worth_Millions ) FROM singer GROUP BY Citizenship",
            "question": "What is the sname of every sing that does not have any song?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "What is the sname of every sing that have does not any song?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
            "question": "What the every sing that does not have any",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT count( * ) FROM singer",
            "question": "What is the sname of every sing that does not have any song?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer WHERE Citizenship != 'France'",
            "question": "What is the sname of every sing that does not have any song?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
            "question": "What is the sname of every sing that does not have any song?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "What is the sname of every sing that does not have any song?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 2432 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 2235",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year > 1945 intersect SELECT Citizenship FROM singer WHERE Birth_Year < 1955",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "Show the citizenship shared by singers with birth before 1945 and year after 1955.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "Show citizenship shared by singers year 1945 and after 1955.",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT Birth_Year , Citizenship FROM singer",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "label": 1,
            "type": "original_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 2223 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1564",
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year > 2223 union SELECT Citizenship FROM singer WHERE Birth_Year < 1564",
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What are the citizenships by that shared are singers with a birth year before 1945 and after 1955?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "question": "What are the citizenships that are shared by with a year 1945 after 1955?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "singer"
        },
        {
            "query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        },
        {
            "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "singer"
        }
    ],
    [
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "How many available features are there in total?",
            "label": 1,
            "type": "original_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "How many available features are there in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "How many features available are there in total?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "How many available features there in",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "How many available features are there in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "How many available features are there in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "How many available features are there in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "How many available features are there in total?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        }
    ],
    [
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "What is the feature type name of feature AirCon?",
            "label": 1,
            "type": "original_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'BurglarAlarm'",
            "question": "What is the feature type name of feature AirCon?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "What is the feature type name of feature AirCon?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "What is the feature name of type feature AirCon?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "is the feature name AirCon?",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'House' UNION SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' AND room_count > 1",
            "question": "What is the feature type name of feature AirCon?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'House' UNION SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' AND room_count > 1",
            "question": "What is the feature type name of feature AirCon?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "What is the feature type name of feature AirCon?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        }
    ],
    [
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "Show the property type descriptions of properties belonging to that code.",
            "label": 1,
            "type": "original_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "Show the property type descriptions of properties belonging to that code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "property Show the type descriptions of properties belonging to that code.",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "question": "Show the descriptions of properties belonging that",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "Show the property type descriptions of properties belonging to that code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "Show the property type descriptions of properties belonging to that code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "Show the property type descriptions of properties belonging to that code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "Show the property type descriptions of properties belonging to that code.",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        }
    ],
    [
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'House' UNION SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' AND room_count > 1",
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "label": 1,
            "type": "original_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'Field' UNION SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' AND room_count > 2",
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "label": 0,
            "type": "val_replaced_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code != 'House' union SELECT property_name FROM Properties WHERE property_type_code != 'Apartment' and room_count < 1",
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "label": 0,
            "type": "tok_replaced_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'Field' union SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' or room_count < 2",
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "label": 0,
            "type": "val_tok_replaced_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT count( * ) FROM Other_Available_Features",
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'House' UNION SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' AND room_count > 1",
            "question": "What are the names of properties either are that houses or apartments with more than 1 room?",
            "label": 0,
            "type": "shuffled_text",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT property_name FROM Properties WHERE property_type_code = 'House' UNION SELECT property_name FROM Properties WHERE property_type_code = 'Apartment' AND room_count > 1",
            "question": "are the names of properties either houses or more than 1",
            "label": 0,
            "type": "dropped_toks",
            "db_id": "real_estate_properties"
        },
        {
            "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'",
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "label": 0,
            "type": "same_db_query",
            "db_id": "real_estate_properties"
        }
    ]
]