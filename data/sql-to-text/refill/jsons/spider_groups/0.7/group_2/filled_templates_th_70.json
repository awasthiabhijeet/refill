[
    {
        "db_id": "pets_1",
        "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
        "proc_query": "( the average of ( <col> pet age </col> ) ) , ( the maximum of ( <col> pet age </col> ) ) , ( <col> pet type </col> ) that belongs to ( <tab> pets </tab> ) , grouped by ( <col> pet type </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the average, maximum, and pet type for each pet type?",
            "What is the average and maximum pet age for each pet type?",
            "Find the average and maximum age for pets with different pet type.",
            "What are the average and maximum age of pets in different pet type?",
            "Return the average and maximum age of pets in each pet type.",
            "What are the average and maximum ages of pets in each pet type?",
            "What are the average and maximum pet age for each pet type?",
            "What are the average and maximum ages of pets for each pet type?",
            "What are the average and maximum ages of pets grouped by pet type?",
            "What are the average and maximum pet age for each pet type?",
            "Find the average and maximum pet age for each pet type.",
            "What are the average and maximum pet age for each pet type?",
            "Find the average and maximum pet age for each pet type.",
            "How old are there and what is the total pet age for each pet type?",
            "Find the average and maximum pet age for each pet type.",
            "How many pets are there in each pet type and what are their average ages?",
            "Find the average, maximum, and pet type for each pet type.",
            "Find the average, maximum, and pet type for each pet type.",
            "What are the average, maximum, and pet type for each pet type?"
        ],
        "templates": [
            "",
            {
                "question": "What is the average and oldest age for each gender of student?",
                "masked_template": "What is the average and <mask> age for each <mask> of <mask>",
                "query": "SELECT avg( age ) , max( age ) , sex FROM student GROUP BY sex",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the average and oldest age for students with different sex.",
                "masked_template": "Find the average and <mask> age for <mask> with different <mask>",
                "query": "SELECT avg( age ) , max( age ) , sex FROM student GROUP BY sex",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the average and minimum age of captains in different class?",
                "masked_template": "What are the average and <mask> age of <mask> in different <mask>",
                "query": "SELECT avg( age ) , min( age ) , CLASS FROM captain GROUP BY CLASS",
                "ted": 0.045454545454545456,
                "db_id": "ship_1"
            },
            {
                "question": "Return the average and minimum age of captains in each class.",
                "masked_template": "Return the average and <mask> age of <mask> in each <mask>",
                "query": "SELECT avg( age ) , min( age ) , CLASS FROM captain GROUP BY CLASS",
                "ted": 0.045454545454545456,
                "db_id": "ship_1"
            },
            {
                "question": "What are the maximum price and score of wines in each year?",
                "masked_template": "What are the maximum <mask> and <mask> of <mask> in each <mask>",
                "query": "SELECT max( Price ) , max( Score ) , YEAR FROM WINE GROUP BY YEAR",
                "ted": 0.045454545454545456,
                "db_id": "wine_1"
            },
            {
                "question": "What are the maximum price and score of wines for each year?",
                "masked_template": "What are the maximum <mask> and <mask> of <mask> for each <mask>",
                "query": "SELECT max( Price ) , max( Score ) , YEAR FROM WINE GROUP BY YEAR",
                "ted": 0.045454545454545456,
                "db_id": "wine_1"
            },
            {
                "question": "What are the average price and score of wines for each appelation?",
                "masked_template": "What are the average <mask> and <mask> of <mask> for each <mask>",
                "query": "SELECT avg( Price ) , avg( Score ) , Appelation FROM WINE GROUP BY Appelation",
                "ted": 0.045454545454545456,
                "db_id": "wine_1"
            },
            {
                "question": "What are the average price and score of wines grouped by appelation?",
                "masked_template": "What are the average <mask> and <mask> of <mask> by <mask>",
                "query": "SELECT avg( Price ) , avg( Score ) , Appelation FROM WINE GROUP BY Appelation",
                "ted": 0.045454545454545456,
                "db_id": "wine_1"
            },
            {
                "question": "What are the average and minimum weights for people of each sex?",
                "masked_template": "What are the average and <mask> for <mask> of each <mask>",
                "query": "SELECT avg( weight ) , min( weight ) , sex FROM people GROUP BY sex",
                "ted": 0.045454545454545456,
                "db_id": "candidate_poll"
            },
            {
                "question": "Find the average and minimum weight for each gender.",
                "masked_template": "Find the average and <mask> for each <mask>",
                "query": "SELECT avg( weight ) , min( weight ) , sex FROM people GROUP BY sex",
                "ted": 0.045454545454545456,
                "db_id": "candidate_poll"
            },
            {
                "question": "What are the greatest and average capacity for rooms in each building?",
                "masked_template": "What are the <mask> and average <mask> for <mask> in each <mask>",
                "query": "SELECT max( capacity ) , avg( capacity ) , building FROM classroom GROUP BY building",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "Find the number of dorms and total capacity for each gender.",
                "masked_template": "Find the number of <mask> and total <mask> for each <mask>",
                "query": "SELECT count( * ) , sum( student_capacity ) , gender FROM dorm GROUP BY gender",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "How many dorms are there and what is the total capacity for each gender?",
                "masked_template": "How many <mask> are there and what is the total <mask> for each <mask>",
                "query": "SELECT count( * ) , sum( student_capacity ) , gender FROM dorm GROUP BY gender",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the number and average age of students living in each city.",
                "masked_template": "Find the number and average age of <mask> in each <mask>",
                "query": "SELECT count( * ) , avg( age ) , city_code FROM student GROUP BY city_code",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "How many students live in each city and what are their average ages?",
                "masked_template": "How many <mask> in each <mask> and what are their average <mask>",
                "query": "SELECT count( * ) , avg( age ) , city_code FROM student GROUP BY city_code",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the maximum and average capacity among rooms in each building.",
                "masked_template": "Find the maximum and average <mask> in each <mask>",
                "query": "SELECT max( capacity ) , avg( capacity ) , building FROM classroom GROUP BY building",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
                "masked_template": "Find the name and <mask> of the <mask> that <mask> the <mask> in each <mask>",
                "query": "SELECT name , max( revenue ) , Headquarter FROM manufacturers GROUP BY Headquarter",
                "ted": 0.09090909090909091,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
                "masked_template": "What are the names and <mask> of the <mask> with the <mask> in each <mask>",
                "query": "SELECT name , max( revenue ) , Headquarter FROM manufacturers GROUP BY Headquarter",
                "ted": 0.09090909090909091,
                "db_id": "manufactory_1"
            }
        ],
        "best_hyp": "Find the average and maximum pet age for each pet type.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average, maximum, and pet type for each pet type?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> owners </tab> ) , that have ( ( <col> owner id </col> ) not in ( ( <col> owner id </col> ) that belongs to ( <tab> dogs </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many owners do not have any dogs?",
            "How many owners did not have any dogs?",
            "How many owners do not have any dogs?",
            "Count the number of owners that do not have any dogs.",
            "Count the number of owners who do not have any dogs.",
            "Count the number of owners who did not have any dogs.",
            "How many owners have no dogs?",
            "List the number of owners that did not have any dogs.",
            "How many owners do not have a dog?",
            "What is the count of owners without any dogs?",
            "Find the number of owners who are not related to any dog.",
            "Show the number of all owners without an animal.",
            "How many owners are not involved in any dogs?",
            "How many owners do not have an animal in our record?",
            "How many owners do not have any dogs?",
            "Find the number of owners that did not have any dogs.",
            "How many owners do not have a dog?",
            "Count the number of owners who do not have a dog.",
            "Count the number of owners that are not involved in any dogs.",
            "How many owners do not have any dogs?",
            "Count the number of owners that do not have any dogs.",
            "Find the number of owners who did not have any dogs.",
            "Count the number of owners who did not have any dogs.",
            "How many owners do not have any dogs?",
            "How many owners are not owners of dogs?",
            "Count the number of owners who have not owned an animal.",
            "How many owners are not involved in any dogs?",
            "How many owners are not associated with the dogs listed?",
            "How many owners are not dogs?",
            "How many owners are not related to any dog?",
            "How many owners did not have any dogs?"
        ],
        "templates": [
            "",
            {
                "question": "How many students did not have any course enrollment?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many documents do not have any expense?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many customers have no payment histories?",
                "masked_template": "How many <mask> have no <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "How many games are free of injury accidents?",
                "masked_template": "How many <mask> are <mask> of <mask>",
                "query": "SELECT count( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "How many persons are not body builders?",
                "masked_template": "How many <mask> are not <mask>",
                "query": "SELECT count( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder )",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "masked_template": "How many <mask> are led by <mask> who are not <mask>",
                "query": "SELECT count( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            }
        ],
        "best_hyp": "How many owners do not have any dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many owners do not have any dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> dog id </col> of <tab> dogs </tab> ) equal to ( <col> dog id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> owners </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id and last name of the owner who has the most treatments?",
            "Find the id and last name of the owner who treats the most number of dogs.",
            "What are the ids and last names of all owners who specialized in the most treatments?",
            "Find the id and name of the owner who has the greatest number of treatments.",
            "What are the id and name of the owner who has the most treatments?",
            "For each owner id, what is the last name of the owner that is involved in the most number of treatments?",
            "Which owner has the most number of treatments related to dogs? List owner id and last name.",
            "Show the id and the id of the owner who has the most number of treatments.",
            "What is the id and last name of the owner in the company which was involved in most treatments?",
            "Return the owner id and last name of the dog that is undergoing most treatments.",
            "Find the name and last name of the owner with least number of treatments.",
            "What is the name and last name of the owner with the most number of treatments?",
            "What are the name and last name of the owner with the most ordered number of treatments?",
            "What is the owner id with the most number of treatments?",
            "Which owner has the most treatments?",
            "Find the id and last name of the owner who has the most treatments.",
            "What is the name and last name for the owner with most number of treatments in one pet?",
            "Which owner has the most treatments? Find the name of the owner.",
            "Find the name of the owner that has the greatest number of treatments.",
            "Show the name of the owner that has the most treatments.",
            "Which owner has the greatest number of treatments? Tell me the owner id and last name.",
            "Find the id and last name of the owner who has the most treatments.",
            "What is the name and last name for the owner that has the most treatments in record?",
            "Find the owner with the most number of treatments.",
            "Find the id and last name of the owner who has the most treatments.",
            "Find the id and last name of the owner who has the most treatments.",
            "Find the owner id and last name of the dog that has been used in most treatments.",
            "What is the id and last name of the owner who specialized in the most treatments?",
            "What are the id and last name of the owner with the most treatments?",
            "What is the id and last name of the owner that have treated the most number of dogs?",
            "What is the id and last name of the owner who was in the most treatments?"
        ],
        "templates": [
            "",
            {
                "question": "Find the id and surname of the driver who participated the most number of races?",
                "masked_template": "Find the id and <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "What are the ids and last names of all drivers who participated in the most races?",
                "masked_template": "What are the ids and <mask> names of all <mask> who <mask> in the most <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
                "masked_template": "Find the id and name of the <mask> the <mask> number of <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "What are the id and name of the stadium where the most injury accidents happened?",
                "masked_template": "What are the id and name of the <mask> the most <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
                "masked_template": "For each <mask> id, what is the <mask> of the <mask> that is <mask> with the most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Which part fault requires the most number of skills to fix? List part id and name.",
                "masked_template": "Which <mask> the most number of <mask> to <mask> List <mask> id and <mask>",
                "query": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
                "masked_template": "Show the <mask> and the id of the <mask> in most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
                "masked_template": "What is the <mask> and <mask> id of the <mask> in the <mask> which was <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Return the title and inventory id of the film that is rented most often.",
                "masked_template": "Return the <mask> and <mask> id of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the name and capacity of the dorm with least number of amenities.",
                "masked_template": "Find the name and <mask> of the <mask> with least number of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
                "masked_template": "What is the name and <mask> of the <mask> with the <mask> of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the name and phone of the customer with the most ordered product quantity?",
                "masked_template": "What are the name and <mask> of the <mask> with the most ordered <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum( T3.order_quantity ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "What is the city with the most number of flagship stores?",
                "masked_template": "What is the <mask> with the most number of <mask>",
                "query": "SELECT T3.headquartered_city FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id GROUP BY T3.headquartered_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Which city has the most customers living in?",
                "masked_template": "Which <mask> has the most <mask> in?",
                "query": "SELECT T3.city FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id GROUP BY T3.city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the city where the most customers live.",
                "masked_template": "Find the <mask> the most <mask>",
                "query": "SELECT T3.city FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id GROUP BY T3.city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> with most number of <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "Which institution has the most papers? Find the name of the institution.",
                "masked_template": "Which <mask> has the most <mask> Find the name of the <mask>",
                "query": "SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the name of the organization that has published the largest number of papers.",
                "masked_template": "Find the name of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Show the name of the building that has the most company offices.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "company_office"
            },
            {
                "question": "Which building has the largest number of company offices? Give me the building name.",
                "masked_template": "Which <mask> has the <mask> number of <mask> me the <mask>",
                "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "company_office"
            },
            {
                "question": "Retrieve the country that has published the most papers.",
                "masked_template": "<mask> the <mask> that has <mask> the most <mask>",
                "query": "SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the name and opening year for the branch that registered the most members in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> that <mask> the most <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "Find the city with the most number of stores.",
                "masked_template": "Find the <mask> with the most number of <mask>",
                "query": "SELECT T3.headquartered_city FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id GROUP BY T3.headquartered_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Find the names of stadiums that the most swimmers have been to.",
                "masked_template": "Find the names of <mask> that the most <mask> have <mask> to.",
                "query": "SELECT T3.name FROM record AS T1 JOIN event AS T2 ON T1.event_id = T2.id JOIN stadium AS T3 ON T3.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "swimming"
            },
            {
                "question": "Find the country that the most papers are affiliated with.",
                "masked_template": "Find the <mask> that the most <mask> are <mask>",
                "query": "SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the first name of the band mate that has performed in most songs.",
                "masked_template": "Find the <mask> name of the <mask> that has <mask> in most <mask>",
                "query": "SELECT T2.firstname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What is the first name of the band mate who perfomed in the most songs?",
                "masked_template": "What is the <mask> name of the <mask> who <mask> in the most <mask>",
                "query": "SELECT T2.firstname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What are the name and id of the team with the most victories in 2008 postseason?",
                "masked_template": "What are the name and id of the <mask> with the most <mask> in <mask>",
                "query": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "baseball_1"
            },
            {
                "question": "What is the last name of the musician that have produced the most number of songs?",
                "masked_template": "What is the <mask> name of the <mask> that have <mask> the most number of <mask>",
                "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What is the last name of the musician who was in the most songs?",
                "masked_template": "What is the <mask> name of the <mask> who was in the most <mask>",
                "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            }
        ],
        "best_hyp": "Which owner has the most treatments? Find the name of the owner.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id and last name of the owner who has the most treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> professionals </tab> ) , ( <col> treatment type description </col> of <tab> treatment types </tab> ) ) ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) , and ( ( <tab> treatment types </tab> ) satisfied that ( ( <col> treatment type code </col> of <tab> treatments </tab> ) equal to ( <col> treatment type code </col> of <tab> treatment types </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names and descriptions of all the different treatment types?",
            "What are the first names of all professionals who have used a treatment type and the description?",
            "Find the first names of all professionals who have used treatments and the treatment type description.",
            "Show the names of professionals and the description of the treatment type they are on.",
            "Show the first names and descriptions of all the different treatment types.",
            "Show the first name and description of each treatment type.",
            "Show the first names of professionals and the names of the treatment type descriptions.",
            "For each treatment type, return its first name and the name of its type description.",
            "What are the names of professionals and the treatment type descriptions?",
            "For all the treatments of different types, what are all the first names of the professionals trying to fix them? List the name of the treatments and the type description.",
            "What are the names of the professionals who performed the treatments and the treatment type descriptions?",
            "List the names of the professionals who performed the treatment of type code X and the description of the treatment type.",
            "Show the names of professionals and the description of the treatment type.",
            "For each treatment type, find the first name and the description.",
            "Show the names of professionals and the descriptions of treatment types for which they work on.",
            "Show names of professionals and descriptions of treatment types they are assigned to",
            "For each treatment type, show the name of the treatment type and name of its description.",
            "Show names of professionals and the descriptions of treatment types they have in their first names.",
            "Show the first name and description of the treatment type for all professionals.",
            "Show the names of professionals and descriptions of treatment types they have used.",
            "For each treatment type, return the first name and the name of the treatment type its type is described in.",
            "List the names of a professional with the name of a treatment type whose description is in the treatment type code",
            "Show the names of professionals and names of their treatment types.",
            "What are the names of professionals and what are the descriptions of the treatment types they are using?"
        ],
        "templates": [
            "",
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
                "ted": 0.05555555555555555,
                "db_id": "college_1"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course description.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
                "ted": 0.05555555555555555,
                "db_id": "college_1"
            },
            {
                "question": "Show the names of phones and the districts of markets they are on.",
                "masked_template": "Show the names of <mask> and the <mask> of <mask> are on.",
                "query": "SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID",
                "ted": 0.05555555555555555,
                "db_id": "phone_market"
            },
            {
                "question": "Show the names of companies and of employees.",
                "masked_template": "Show the names of <mask> and of <mask>",
                "query": "SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID",
                "ted": 0.05555555555555555,
                "db_id": "company_employee"
            },
            {
                "question": "show the train name and station name for each train.",
                "masked_template": "show the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id",
                "ted": 0.05555555555555555,
                "db_id": "train_station"
            },
            {
                "question": "Show the themes of parties and the names of the party hosts.",
                "masked_template": "Show the <mask> of <mask> and the names of the <mask>",
                "query": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
                "ted": 0.05555555555555555,
                "db_id": "party_host"
            },
            {
                "question": "For each party, return its theme and the name of its host.",
                "masked_template": "For each <mask> return its <mask> and the name of its <mask>",
                "query": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
                "ted": 0.05555555555555555,
                "db_id": "party_host"
            },
            {
                "question": "What are the names of technicians and the machine series that they repair?",
                "masked_template": "What are the names of <mask> and the <mask> that <mask>",
                "query": "SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
                "ted": 0.05555555555555555,
                "db_id": "machine_repair"
            },
            {
                "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
                "masked_template": "For all the <mask> of different <mask> what are all the <mask> of the <mask> to fix <mask> List the name of the <mask> and the <mask>",
                "query": "SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
                "ted": 0.05555555555555555,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
                "masked_template": "What are the names of the <mask> who <mask> the <mask> and the <mask> who <mask> the <mask>",
                "query": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
                "masked_template": "List the names of the <mask> who <mask> the <mask> of <mask> and the <mask> who <mask> the <mask>",
                "query": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the names of members and the location of the performances they attended.",
                "masked_template": "Show the names of <mask> and the <mask> of the <mask>",
                "query": "SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID",
                "ted": 0.05555555555555555,
                "db_id": "performance_attendance"
            },
            {
                "question": "For each journal_committee, find the editor name and the journal theme.",
                "masked_template": "For each <mask> find the <mask> name and the <mask>",
                "query": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
                "ted": 0.05555555555555555,
                "db_id": "journal_committee"
            },
            {
                "question": "Show the names of editors and the theme of journals for which they serve on committees.",
                "masked_template": "Show the names of <mask> and the <mask> of <mask> for which <mask> on <mask>",
                "query": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
                "ted": 0.05555555555555555,
                "db_id": "journal_committee"
            },
            {
                "question": "Show names of technicians and series of machines they are assigned to repair.",
                "masked_template": "Show names of <mask> and <mask> of <mask> are <mask> to <mask>",
                "query": "SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
                "ted": 0.05555555555555555,
                "db_id": "machine_repair"
            },
            {
                "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
                "masked_template": "For each <mask> show the name of the <mask> and name of the <mask> it is <mask>",
                "query": "SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID",
                "ted": 0.05555555555555555,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Show names of shops and the carriers of devices they have in stock.",
                "masked_template": "Show names of <mask> and the <mask> of <mask> have in <mask>",
                "query": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
                "ted": 0.05555555555555555,
                "db_id": "device"
            },
            {
                "question": "Show the school name and driver name for all school buses.",
                "masked_template": "Show the <mask> name and <mask> name for all <mask>",
                "query": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
                "ted": 0.05555555555555555,
                "db_id": "school_bus"
            },
            {
                "question": "Show the names of pilots and models of aircrafts they have flied with.",
                "masked_template": "Show the names of <mask> and <mask> of <mask> have <mask>",
                "query": "SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
                "ted": 0.05555555555555555,
                "db_id": "pilot_record"
            },
            {
                "question": "For each company, return the company name and the name of the building its office is located in.",
                "masked_template": "For each <mask> return the <mask> name and the name of the <mask> its <mask> is <mask> in.",
                "query": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
                "ted": 0.05555555555555555,
                "db_id": "company_office"
            },
            {
                "question": "List the name of a building along with the name of a company whose office is in the building.",
                "masked_template": "List the name of a <mask> with the name of a <mask> whose <mask> is in the <mask>",
                "query": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
                "ted": 0.05555555555555555,
                "db_id": "company_office"
            },
            {
                "question": "Show the names of players and names of their coaches.",
                "masked_template": "Show the names of <mask> and names of their <mask>",
                "query": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
                "ted": 0.05555555555555555,
                "db_id": "riding_club"
            },
            {
                "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
                "masked_template": "What are the names of <mask> and what are the <mask> that <mask> in <mask>",
                "query": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
                "ted": 0.05555555555555555,
                "db_id": "device"
            }
        ],
        "best_hyp": "For each treatment type, return the first name and the name of the treatment type its type is described in.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and descriptions of all the different treatment types?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg( age ) FROM Dogs",
        "proc_query": "( the average of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the average age of all dogs?",
            "What is the average age of dogs?",
            "Compute the average number of years for dogs.",
            "Compute the average age of dogs.",
            "What is the average age of all dogs?",
            "How many dogs do we have?",
            "What is the average age for dogs?",
            "What is the average number of dogs as a pet?",
            "What is the average age for all dogs in the database?",
            "What is the average age of dogs?",
            "Find the average age of dogs.",
            "What is the average age across all dogs?",
            "Find the average age of all dogs.",
            "What is the average age of all dogs?",
            "How many dogs are there?",
            "What is the average age of all dogs?",
            "Compute the average age of all the dogs.",
            "What is the average age of the dogs?",
            "What is the average age for a dog?",
            "What is the average age of dogs ordered in ascending order?",
            "What is the average age of all the dogs?",
            "Find the average age of dogs.",
            "Find the average age for a dog.",
            "Compute the average age of the dogs.",
            "Find the average age of all dogs.",
            "Show the average age of all dogs.",
            "What is the average age for all dogs?",
            "What is the average age of dogs?",
            "What is the average age of all dogs?",
            "What is the average age for all the dogs?",
            "What is the average age of dogs?"
        ],
        "templates": [
            "",
            {
                "question": "What is the average enrollment of schools?",
                "masked_template": "What is the average <mask> of <mask>",
                "query": "SELECT avg( Enrollment ) FROM school",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Compute the average number of hosts for parties.",
                "masked_template": "<mask> the average number of <mask> for <mask>",
                "query": "SELECT avg( Number_of_hosts ) FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Compute the average score of submissions.",
                "masked_template": "<mask> the average <mask> of <mask>",
                "query": "SELECT avg( Scores ) FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What is the average training hours of all players?",
                "masked_template": "What is the average <mask> of all <mask>",
                "query": "SELECT avg( HS ) FROM Player",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many hours do the players train on average?",
                "masked_template": "How many <mask> do the <mask> on <mask>",
                "query": "SELECT avg( HS ) FROM Player",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the average number of hosts for parties?",
                "masked_template": "What is the average number of <mask> for <mask>",
                "query": "SELECT avg( Number_of_hosts ) FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What is the average number of years spent working as a journalist?",
                "masked_template": "What is the average number of <mask> as a <mask>",
                "query": "SELECT avg( Years_working ) FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "What is the average age for all people in the table?",
                "masked_template": "What is the average age for all <mask> in the <mask>",
                "query": "SELECT avg( age ) FROM Person",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "What is the average balance in checking accounts?",
                "masked_template": "What is the average <mask> in <mask>",
                "query": "SELECT avg( balance ) FROM checking",
                "ted": 0.0,
                "db_id": "small_bank_1"
            },
            {
                "question": "Find the average checking balance.",
                "masked_template": "Find the average <mask>",
                "query": "SELECT avg( balance ) FROM checking",
                "ted": 0.0,
                "db_id": "small_bank_1"
            },
            {
                "question": "What is the average hours across all projects?",
                "masked_template": "What is the average <mask> all <mask>",
                "query": "SELECT avg( hours ) FROM projects",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the average hours of all projects.",
                "masked_template": "Find the average <mask> of all <mask>",
                "query": "SELECT avg( hours ) FROM projects",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "What is the average number of bank customers?",
                "masked_template": "What is the average number of <mask>",
                "query": "SELECT avg( no_of_customers ) FROM bank",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "How many students, on average, does each college have enrolled?",
                "masked_template": "How many <mask> on <mask> each <mask> have <mask>",
                "query": "SELECT avg( enr ) FROM College",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the average enrollment number?",
                "masked_template": "What is the average <mask>",
                "query": "SELECT avg( enr ) FROM College",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Compute the average price of all the products.",
                "masked_template": "<mask> the average <mask> of all the <mask>",
                "query": "SELECT avg( price ) FROM products",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What is the average length in feet of the bridges?",
                "masked_template": "What is the average <mask> in <mask> of the <mask>",
                "query": "SELECT avg( length_feet ) FROM bridge",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What is the average number of gold medals for a club?",
                "masked_template": "What is the average number of <mask> for a <mask>",
                "query": "SELECT avg( Gold ) FROM club_rank",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What is the average amount of items ordered in each order?",
                "masked_template": "What is the average <mask> of <mask> ordered in each <mask>",
                "query": "SELECT avg( order_quantity ) FROM order_items",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What is the average unit price of all the tracks?",
                "masked_template": "What is the average <mask> of all the <mask>",
                "query": "SELECT AVG( UnitPrice ) FROM TRACK",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Find the average order quantity per order.",
                "masked_template": "Find the average order <mask> per <mask>",
                "query": "SELECT avg( order_quantity ) FROM order_items",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the average unit price for a track.",
                "masked_template": "Find the average <mask> for a <mask>",
                "query": "SELECT AVG( UnitPrice ) FROM TRACK",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Take the average of the school enrollment.",
                "masked_template": "<mask> the average of the <mask>",
                "query": "SELECT avg( Enrollment ) FROM school",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Find the average number of customers cross all banks.",
                "masked_template": "Find the average number of <mask> all <mask>",
                "query": "SELECT avg( no_of_customers ) FROM bank",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Show the average population of all counties.",
                "masked_template": "Show the average <mask> of all <mask>",
                "query": "SELECT avg( Population ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the average number of international passengers for an airport?",
                "masked_template": "What is the average number of <mask> for an <mask>",
                "query": "SELECT avg( International_Passengers ) FROM airport",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the average pages per minute color?",
                "masked_template": "What is the average <mask> per <mask>",
                "query": "SELECT avg( pages_per_minute_color ) FROM product",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What is the average number of international passengers of all airports?",
                "masked_template": "What is the average number of <mask> of all <mask>",
                "query": "SELECT avg( International_Passengers ) FROM airport",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the average amount due for all the payments?",
                "masked_template": "What is the average <mask> due for all the <mask>",
                "query": "SELECT avg( amount_due ) FROM payments",
                "ted": 0.0,
                "db_id": "products_for_hire"
            },
            {
                "question": "What is the average number of pages per minute color?",
                "masked_template": "What is the average number of <mask> per <mask>",
                "query": "SELECT avg( pages_per_minute_color ) FROM product",
                "ted": 0.0,
                "db_id": "store_product"
            }
        ],
        "best_hyp": "What is the average age of all the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average age of all dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max( age ) FROM Dogs )",
        "proc_query": "( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) ) , that have ( ( <col> age </col> of <tab> dogs </tab> ) equal to ( the maximum of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the last name of the owner of the oldest dog?",
            "Which owner is the owner of the oldest dog?",
            "Which owner has the most dogs? Tell me the last name.",
            "Find the last name of the owner that has the oldest number of dogs.",
            "Find the last name of the owner who owns a pet most recently.",
            "Find the last names of owners whose dogs are older than the oldest dog.",
            "What are the last names of the owners who have the oldest dog?",
            "Find the last name of the owner whose oldest dog is the oldest dog.",
            "Find the last names of the owners whose dogs are older than the average age.",
            "What are the last names of owners with a dog older than the average age?",
            "Find the last names of owners whose oldest dog is older than the average age of all dogs.",
            "What are the names of owners that have a pet of average age?"
        ],
        "templates": [
            "",
            {
                "question": "Which customer is associated with the latest policy?",
                "masked_template": "Which <mask> is <mask> with the <mask>",
                "query": "SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.start_date = ( SELECT max( start_date ) FROM policies )",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Which paper has the most authors? Give me the paper title.",
                "masked_template": "Which <mask> has the most <mask> me the <mask>",
                "query": "SELECT T2.title FROM authorship AS T1 JOIN papers AS T2 ON T1.paperid = T2.paperid WHERE T1.authorder = ( SELECT max( authorder ) FROM authorship )",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Retrieve the title of the paper that has the largest number of authors.",
                "masked_template": "<mask> the <mask> of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T2.title FROM authorship AS T1 JOIN papers AS T2 ON T1.paperid = T2.paperid WHERE T1.authorder = ( SELECT max( authorder ) FROM authorship )",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the customer who started a policy most recently.",
                "masked_template": "Find the <mask> who <mask> a <mask> most <mask>",
                "query": "SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.start_date = ( SELECT max( start_date ) FROM policies )",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Find the names of furnitures whose prices are lower than the highest price.",
                "masked_template": "Find the names of <mask> whose <mask> are <mask> than the <mask>",
                "query": "SELECT T1.name FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID WHERE T2.Price_in_Dollar < ( SELECT max( Price_in_Dollar ) FROM furniture_manufacte )",
                "ted": 0.029411764705882353,
                "db_id": "manufacturer"
            },
            {
                "question": "What are the names of players who have the best dribbling?",
                "masked_template": "What are the names of <mask> who have the <mask>",
                "query": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = ( SELECT max( overall_rating ) FROM Player_Attributes )",
                "ted": 0.05555555555555555,
                "db_id": "soccer_1"
            },
            {
                "question": "Find the name of accounts whose checking balance is below the average checking balance.",
                "masked_template": "Find the name of <mask> whose <mask> is <mask> the average <mask>",
                "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg( balance ) FROM checking )",
                "ted": 0.058823529411764705,
                "db_id": "small_bank_1"
            },
            {
                "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
                "masked_template": "Find the <mask> names of the <mask> whose <mask> are <mask> than the average <mask>",
                "query": "SELECT T2.team_name FROM university AS T1 JOIN basketball_match AS T2 ON T1.school_id = T2.school_id WHERE enrollment < ( SELECT avg( enrollment ) FROM university )",
                "ted": 0.058823529411764705,
                "db_id": "university_basketball"
            },
            {
                "question": "What are the names of customers with checking balances lower than the average checking balance?",
                "masked_template": "What are the names of <mask> with <mask> than the average <mask>",
                "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT avg( balance ) FROM checking )",
                "ted": 0.058823529411764705,
                "db_id": "small_bank_1"
            },
            {
                "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
                "masked_template": "Find the <mask> of <mask> whose <mask> is <mask> than the average <mask> of all <mask>",
                "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > ( SELECT avg( rating ) FROM review )",
                "ted": 0.058823529411764705,
                "db_id": "epinions_1"
            },
            {
                "question": "What are the names of teams from universities that have a below average enrollment?",
                "masked_template": "What are the names of <mask> that have a <mask> average <mask>",
                "query": "SELECT T2.team_name FROM university AS T1 JOIN basketball_match AS T2 ON T1.school_id = T2.school_id WHERE enrollment < ( SELECT avg( enrollment ) FROM university )",
                "ted": 0.058823529411764705,
                "db_id": "university_basketball"
            }
        ],
        "best_hyp": "Find the last names of the owners whose dogs are older than the average age.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the last name of the owner of the oldest dog?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "select avg( age ) from student where stuid not in ( select stuid from has_pet )",
        "proc_query": "( the average of ( <col> age </col> ) ) that belongs to ( <tab> student </tab> ) , that have ( ( <col> student id </col> ) not in ( ( ( <col> student id </col> ) that belongs to ( <tab> has pet </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the average age of students who do not have a pet?",
            "What is the average age for students who have never had a pet?",
            "Find the average age of the students that are not followed by any pet.",
            "Find the average age for the students who do not have any pet.",
            "Find the average age of the students who do not have any pet.",
            "Find the average age of students that do not have any pet.",
            "How many students do not have a pet?",
            "What is the average age of students without any pet?",
            "Find the average age of the students who have no pet.",
            "How many students did not have a pet?",
            "How many students are not living in the city with any pet?",
            "How old are the students that do not have pets?",
            "Count the average age of students who did not have any pet.",
            "How many students did not have any pet?",
            "Find the average age for the students who had no pet.",
            "How many students do not have a pet?",
            "How many students do not have any pet?",
            "Find the average age of students who do not have a pet.",
            "Find the average age of students who do not have a pet.",
            "Find the average age of students who did not have any pet.",
            "Find the average age of students who do not have a pet.",
            "How old are the students who do not have a pet?",
            "Count the average age of students who do not have a pet.",
            "How old are the students who do not have a pet?",
            "Show the average age of all students without a pet.",
            "How old are the students who do not have a pet?",
            "Find the average age of students who do not have a pet.",
            "How many students do not have a pet in our record?",
            "How old are the students who do not have a pet?",
            "Find the average age of students who are not related to any pet.",
            "Find the average age of students who do not have a pet."
        ],
        "templates": [
            "",
            {
                "question": "What is the average credit score for customers who have never taken a loan?",
                "masked_template": "What is the average <mask> for <mask> who have <mask> a <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id NOT IN ( SELECT cust_id FROM loan )",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the average ram mib size of the chip models that are never used by any phone.",
                "masked_template": "Find the average ram mib <mask> of the <mask> that are <mask> by any <mask>",
                "query": "SELECT avg( RAM_MiB ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone )",
                "ted": 0.0,
                "db_id": "phone_1"
            },
            {
                "question": "Find the average number of followers for the users who do not have any tweet.",
                "masked_template": "Find the average number of <mask> for the <mask> who do not have any <mask>",
                "query": "SELECT avg( followers ) FROM user_profiles WHERE UID NOT IN ( SELECT UID FROM tweets )",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the average credit score of the customers who do not have any loan.",
                "masked_template": "Find the average <mask> of the <mask> who do not have any <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id NOT IN ( SELECT cust_id FROM loan )",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.045454545454545456,
                "db_id": "epinions_1"
            },
            {
                "question": "How many enzymes do not have any interactions?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.045454545454545456,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.045454545454545456,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find the average credit score of the customers who have some loan.",
                "masked_template": "Find the average <mask> of the <mask> who have <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan )",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "How many events did not have any participants?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM EVENTS WHERE event_id NOT IN ( SELECT event_id FROM Participants_in_Events )",
                "ted": 0.045454545454545456,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.045454545454545456,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.045454545454545456,
                "db_id": "college_2"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.045454545454545456,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.045454545454545456,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the average number of followers for the users who had some tweets.",
                "masked_template": "Find the average number of <mask> for the <mask> who had <mask>",
                "query": "SELECT avg( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets )",
                "ted": 0.045454545454545456,
                "db_id": "twitter_1"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.045454545454545456,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.045454545454545456,
                "db_id": "scientist_1"
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.045454545454545456,
                "db_id": "e_learning"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.045454545454545456,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.045454545454545456,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of items without any review.",
                "masked_template": "Find the number of <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.045454545454545456,
                "db_id": "epinions_1"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.045454545454545456,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.045454545454545456,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.045454545454545456,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.045454545454545456,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.045454545454545456,
                "db_id": "browser_web"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.045454545454545456,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.045454545454545456,
                "db_id": "protein_institute"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.045454545454545456,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.045454545454545456,
                "db_id": "scientist_1"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.045454545454545456,
                "db_id": "chinook_1"
            }
        ],
        "best_hyp": "What is the average age for students who have never had a pet?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average age of students who do not have a pet?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "proc_query": "( <col> weight </col> ) that belongs to ( <tab> pets </tab> ) , ordered by ( ( <col> pet age </col> ) ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the weight of the pet with the oldest age?",
            "What is the weight of the youngest pet?",
            "What is the weight of the youngest pet?",
            "Find the pet weight of the youngest pet.",
            "Which pet has the oldest age? Return the pet weight.",
            "What are the pet weights with top 3 oldest age? List their weights.",
            "What is the weight of the pet that has the oldest age?",
            "List the weight of pet with 3 oldest age.",
            "What is the weight of the youngest pet?",
            "What is the name of the 3 pet weights who get older than the youngest pet?",
            "What is the weight of the youngest pet?",
            "Show the 3 pet weights with the oldest age.",
            "What is the weight of the youngest pet?",
            "Show the weight of the pet with oldest age.",
            "Of all the pets, what was the weight of the youngest pet?",
            "Tell me the the weight of the youngest pet.",
            "What are the 3 pet weights that have the oldest pet? Tell me the weight.",
            "What is the weight of the youngest pet?",
            "Return the weight of the youngest pet.",
            "Return the weight of the pet with the oldest age.",
            "Which pet has the oldest age?",
            "Which pet has the least age?",
            "Find the weight of the pet that has the oldest age.",
            "What is the weight of the pet with the oldest age?",
            "Return the weight of the youngest pet.",
            "What is the weight of the youngest pet?",
            "Which pet is the pet that has the oldest age?",
            "Find the weight of the pet who is the oldest pet.",
            "What is the weight at which the pet with the oldest age was born?",
            "Show the weight of pet with oldest age.",
            "What is the weight of the pet with the oldest age?"
        ],
        "templates": [
            "",
            {
                "question": "What is the id of the shortest trip?",
                "masked_template": "What is the id of the <mask>",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What are the three most costly procedures?",
                "masked_template": "What are the <mask> most <mask>",
                "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the three most expensive procedures.",
                "masked_template": "Find the <mask> most <mask>",
                "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
                "masked_template": "Which <mask> has the <mask> Return the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
                "masked_template": "What are the <mask> with top 3 <mask> List their <mask>",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the id of the trip that has the shortest duration?",
                "masked_template": "What is the id of the <mask> that has the <mask>",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "List the publication dates of publications with 3 lowest prices.",
                "masked_template": "List the <mask> of <mask> with 3 <mask>",
                "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What is the joined year of the pilot of the highest rank?",
                "masked_template": "What is the <mask> of the <mask> of the <mask>",
                "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "What is the name of the 3 employees who get paid the least?",
                "masked_template": "What is the name of the 3 <mask> who get <mask> the <mask>",
                "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the name of the youngest captain?",
                "masked_template": "What is the name of the <mask>",
                "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show the 3 counties with the smallest population.",
                "masked_template": "Show the 3 <mask> with the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the numbers of the shortest flights?",
                "masked_template": "What are the numbers of the <mask>",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Show the flight number of flights with three lowest distances.",
                "masked_template": "Show the <mask> number of <mask> with <mask>",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Of all the claims, what was the earliest date when any claim was made?",
                "masked_template": "Of all the <mask> what was the <mask> any <mask> was <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Tell me the the date when the first claim was made.",
                "masked_template": "<mask> me the the <mask> the <mask> was <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "What are the 3 counties that have the smallest population? Give me the county names.",
                "masked_template": "What are the 3 <mask> that have the <mask> me the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the weight of the shortest person?",
                "masked_template": "What is the <mask> of the <mask>",
                "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Return the weight of the shortest person.",
                "masked_template": "Return the <mask> of the <mask>",
                "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Give the name of the department with the lowest budget.",
                "masked_template": "<mask> the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Which department has the lowest budget?",
                "masked_template": "Which <mask> has the <mask>",
                "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Which district has the least area?",
                "masked_template": "Which <mask> has the least <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Find the name of the product that has the smallest capacity.",
                "masked_template": "Find the name of the <mask> that has the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "What is the name of the district with the smallest area?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Return the name of the youngest captain.",
                "masked_template": "Return the name of the <mask>",
                "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "What was the date of the earliest payment?",
                "masked_template": "What was the <mask> of the <mask>",
                "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which winery is the wine that has the highest score from?",
                "masked_template": "Which <mask> is the <mask> that has the <mask>",
                "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Find the name of customer who has the lowest credit score.",
                "masked_template": "Find the name of <mask> who has the <mask>",
                "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What is the winery at which the wine with the highest score was made?",
                "masked_template": "What is the <mask> at which the <mask> with the <mask> was <mask>",
                "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Show the name of aircrafts with top three lowest distances.",
                "masked_template": "Show the name of <mask> with top <mask>",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the id of the candidate with the lowest oppose rate?",
                "masked_template": "What is the id of the <mask> with the <mask>",
                "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
                "ted": 0.0,
                "db_id": "candidate_poll"
            }
        ],
        "best_hyp": "What is the weight at which the pet with the oldest age was born?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the weight of the pet with the oldest age?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
        "proc_query": "( the number of ( distinct ( ( <col> dog id </col> ) ) ) ) that belongs to ( <tab> treatments </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many different dogs are involved in treatments?",
            "How many different dogs have had treatments?",
            "How many distinct dogs are involved in treatments?",
            "How many different kinds of dogs are involved in treatments?",
            "What are the ids of all dogs involved in the treatments?",
            "How many different dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "Count the number of distinct dogs involved in treatments.",
            "How many distinct dogs are there for all treatments?",
            "How many different dogs do we have?",
            "Find the number of different dogs used in treatments.",
            "How many different dog ids are involved in treatments?",
            "What is the number of distinct dogs the treatments are aimed at?",
            "How many different dogs have been involved in treatments?",
            "Count the number of different dogs involved in treatments.",
            "Find the number of distinct dogs involved in treatments",
            "Show the number of different dogs for treatments.",
            "Find the number of distinct dogs who are undergoing treatments.",
            "Count the number of dogs who have had treatments.",
            "How many different kinds of dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "How many distinct dogs are involved in treatments?",
            "Count the number of different dogs that are involved in treatments",
            "How many different dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "What is the count of distinct dogs with treatments?",
            "How many distinct dogs have been involved in treatments?",
            "How many distinct dogs are affected by treatments?",
            "How many different dogs are involved in treatments?",
            "Count the number of different dogs used in treatments."
        ],
        "templates": [
            "",
            {
                "question": "How many different teams have had eliminated wrestlers?",
                "masked_template": "How many different <mask> have had <mask>",
                "query": "SELECT COUNT( DISTINCT team ) FROM elimination",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "How many distinct governors are there?",
                "masked_template": "How many distinct <mask> are <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many different types of rooms are there?",
                "masked_template": "How many different <mask> of <mask> are <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the unique types of player positions in the tryout?",
                "masked_template": "What are the <mask> of <mask> in the <mask>",
                "query": "SELECT count( DISTINCT pPos ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many allergies are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( DISTINCT allergy ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different allergy types exist?",
                "masked_template": "How many different <mask>",
                "query": "SELECT count( DISTINCT allergytype ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different colleges were represented at tryouts?",
                "masked_template": "How many different <mask> at <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of distinct governors.",
                "masked_template": "Count the number of distinct <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many distinct currency codes are there for all drama workshop groups?",
                "masked_template": "How many distinct <mask> are there for all <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "How many different colleges do attend the tryout test?",
                "masked_template": "How many different <mask> do <mask> the <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "masked_template": "<mask> the <mask> find the number of <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different bike ids are there?",
                "masked_template": "How many different <mask> ids are <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "masked_template": "What is the number of distinct <mask> the <mask> are <mask> at?",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different cities have these stations?",
                "masked_template": "How many different <mask> have <mask>",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Count the number of different affected regions.",
                "masked_template": "Count the number of different <mask>",
                "query": "SELECT count( DISTINCT region_id ) FROM affected_region",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Find the number of distinct currency codes used in drama workshop groups.",
                "masked_template": "Find the number of distinct <mask> in <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show the number of transaction types.",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( DISTINCT transaction_type ) FROM Financial_Transactions",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the number of distinct room types available.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Count the number of artists who have had volumes.",
                "masked_template": "Count the number of <mask> who have had <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many different types of sports do we offer?",
                "masked_template": "How many different <mask> of <mask> do we <mask>",
                "query": "SELECT count( DISTINCT sportname ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many students play sports?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many distinct countries are the climbers from?",
                "masked_template": "How many distinct <mask> are the <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of different countries that climbers are from.",
                "masked_template": "Count the number of different <mask> that <mask> are <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "How many different students are involved in sports?",
                "masked_template": "How many different <mask> are <mask> in <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many different levels do members have?",
                "masked_template": "How many different <mask> do <mask>",
                "query": "SELECT count( DISTINCT LEVEL ) FROM member",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "masked_template": "What is the count of distinct <mask> with <mask>",
                "query": "SELECT count( DISTINCT eid ) FROM Certificate",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "How many distinct artists have volumes?",
                "masked_template": "How many distinct <mask> have <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many distinct payment methods are used by parties?",
                "masked_template": "How many distinct <mask> are <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "How many different countries are all the swimmers from?",
                "masked_template": "How many different <mask> are all the <mask>",
                "query": "SELECT count( DISTINCT nationality ) FROM swimmer",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Count the number of different payment method codes used by parties.",
                "masked_template": "Count the number of different <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            }
        ],
        "best_hyp": "How many different dogs have had treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many different dogs are involved in treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
        "proc_query": "( the number of ( all items ) ) , ( <col> student id </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> student </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many pet does each student have?",
            "For each student id which has pet, what are the number of pets and the student id?",
            "What are the names of the students and how many pets are each of them living on?",
            "Find the number of pets which each student is living on and has.",
            "How many pet students have?",
            "What are the names of students with pet and how many pets do each of them have?",
            "What are the ids of all the students and how many pets correspond to each of them?",
            "Find the number of pet students for each id.",
            "For each student id, how many pet does that student have?",
            "Find the number of pets for each student and the student id.",
            "How many pets are there for each student?",
            "How many pets are there for each student?",
            "Find number of pets for each student.",
            "How many pet does each student have? List the number and the student id.",
            "How many pet does each student have? List the count and the student id.",
            "For each student id, how many pet does he or she have?",
            "Find the number of pets for each student showing the name of each student.",
            "Find the number of pets possessed by each student as well as the student id.",
            "How many pet students are there?",
            "How many pets are there in each student?",
            "Find the number of pet students have.",
            "For each student id, how many pets are there?",
            "For each student with pet, list the count of pet and the student id.",
            "How many pet students have? List the student count and the student id.",
            "What is the number of pets for different students?",
            "How many different pet owners are there for each student?",
            "What is the number of pet students have?",
            "What are the total number of pets for each student?",
            "Find the average number of pets for each student and list each student id.",
            "What are the names of students with pet and what are the total ids for each student?",
            "Find the total number of pets for each student."
        ],
        "templates": [
            "",
            {
                "question": "For each product which has problems, what are the number of problems and the product id?",
                "masked_template": "For each <mask> which has <mask> what are the number of <mask> and the <mask> id?",
                "query": "SELECT count( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What are the names of the scientists, and how many projects are each of them working on?",
                "masked_template": "What are the names of the <mask> and how many <mask> are each of <mask> on?",
                "query": "SELECT count( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the number of projects which each scientist is working on and scientist's name.",
                "masked_template": "Find the number of <mask> which each <mask> is <mask> on and <mask>",
                "query": "SELECT count( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "How many movie reviews does each director get?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
                "masked_template": "What are the names of <mask> with <mask> and how many <mask> do each of <mask>",
                "query": "SELECT count( * ) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "small_bank_1"
            },
            {
                "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
                "masked_template": "What are the <mask> of all the <mask> and how many <mask> to each of <mask>",
                "query": "SELECT count( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the number of scientists involved for each project name.",
                "masked_template": "Find the number of <mask> for each <mask>",
                "query": "SELECT count( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "For each airport name, how many routes start at that airport?",
                "masked_template": "For each <mask> how many <mask> at that <mask>",
                "query": "SELECT count( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the number of routes for each source airport and the airport name.",
                "masked_template": "Find the number of <mask> for each <mask> and the <mask>",
                "query": "SELECT count( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many products are there for each manufacturer?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT count( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many medications are prescribed for each brand?",
                "masked_template": "How many <mask> are <mask> for each <mask>",
                "query": "SELECT count( * ) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find number of tracks in each genre?",
                "masked_template": "Find number of <mask> in each <mask>",
                "query": "SELECT count( * ) , T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
                "masked_template": "How many <mask> each <mask> List the number and the <mask> id.",
                "query": "SELECT count( * ) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "How many assets does each third party company supply? List the count and the company id.",
                "masked_template": "How many <mask> each <mask> List the count and the <mask> id.",
                "query": "SELECT count( * ) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "For each director, how many reviews have they received?",
                "masked_template": "For each <mask> how many <mask> have <mask>",
                "query": "SELECT count( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the number of products for each manufacturer, showing the name of each company.",
                "masked_template": "Find the number of <mask> for each <mask> showing the name of each <mask>",
                "query": "SELECT count( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
                "masked_template": "Find the number of <mask> by each <mask> as <mask> as the <mask>",
                "query": "SELECT count( * ) , T1.name FROM manufacturer AS T1 JOIN furniture_manufacte AS T2 ON T1.manufacturer_id = T2.manufacturer_id GROUP BY T1.manufacturer_id",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "How many tracks are in each genre?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT count( * ) , T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "How many classes are held in each department?",
                "masked_template": "How many <mask> are <mask> in each <mask>",
                "query": "SELECT count( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the number of classes in each department.",
                "masked_template": "Find the number of <mask> in each <mask>",
                "query": "SELECT count( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "For each project id, how many tasks are there?",
                "masked_template": "For each <mask> id, how many <mask> are <mask>",
                "query": "SELECT count( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "For each product with some problems, list the count of problems and the product id.",
                "masked_template": "For each <mask> with <mask> list the count of <mask> and the <mask> id.",
                "query": "SELECT count( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "How many tasks does each project have? List the task count and the project detail.",
                "masked_template": "How many <mask> each <mask> List the <mask> count and the <mask>",
                "query": "SELECT count( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What is the number of professors for different school?",
                "masked_template": "What is the number of <mask> for different <mask>",
                "query": "SELECT count( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many different professors are there for the different schools?",
                "masked_template": "How many different <mask> are there for the different <mask>",
                "query": "SELECT count( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is minimum hours of the students playing in different position?",
                "masked_template": "What is <mask> of the <mask> in different <mask>",
                "query": "SELECT min( T2.HS ) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
                "ted": 0.03571428571428571,
                "db_id": "soccer_2"
            },
            {
                "question": "What are the total number of credits offered by each department?",
                "masked_template": "What are the total number of <mask> by each <mask>",
                "query": "SELECT sum( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code",
                "ted": 0.03571428571428571,
                "db_id": "college_1"
            },
            {
                "question": "Find the average prices of all products from each manufacture, and list each company's name.",
                "masked_template": "Find the average <mask> of all <mask> each <mask> and list each <mask>",
                "query": "SELECT avg( T1.price ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
                "ted": 0.03571428571428571,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
                "masked_template": "What are the names of <mask> with <mask> and what are the total <mask> for <mask>",
                "query": "SELECT sum( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                "ted": 0.03571428571428571,
                "db_id": "small_bank_1"
            },
            {
                "question": "Find the total saving balance for each account name.",
                "masked_template": "Find the total <mask> for each <mask>",
                "query": "SELECT sum( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                "ted": 0.03571428571428571,
                "db_id": "small_bank_1"
            }
        ],
        "best_hyp": "For each student with pet, list the count of pet and the student id.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many pet does each student have?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
        "proc_query": "( <col> professional id </col> of <tab> professionals </tab> ) , ( <col> cell number </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> professional id </col> of <tab> professionals </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids and cell numbers of the professionals who have at least two treatments?",
            "Show the ids and cell numbers of the professionals who have at least two treatments.",
            "What are the ids and names of the professionals who have at least 3 treatments?",
            "Which professionals are involved in at least two treatments? Give me the professional ID and cell number.",
            "What are the ids and cell numbers of the professionals who have at least 3 treatments?",
            "What is the cmi id that is related to at least one tax treatment? List the ids and cell numbers",
            "What are the ids and names of the web technicians that are involved in two or more treatments?",
            "Which professionals are involved in at least two treatments? Give me their names and cell numbers.",
            "Find the id and cell number of the professionals with at least two treatments?",
            "Show the names and ids of professionals that are involved in at least two treatments.",
            "What are the names and cell numbers of the professionals who have at least two treatments?",
            "Which two or more professionals give me their ids and cell numbers?",
            "Find the ids and cell numbers of the professionals that have at least two treatments?",
            "What are the ids and names of the professionals that can provide two or more treatments?",
            "Please show the ids and ids of professionals who have at least two treatments.",
            "Show the name and id for all professionals with at least two treatments.",
            "What are the ids and cell numbers of the professionals that have at least two treatments?",
            "What are the ids and names of the professionals who have at least two treatments?",
            "What are the ids and ids for professionals who have two or more treatments?",
            "What are the ids and cell numbers of the professionals that can provide at least 3 treatments?",
            "For each id, what are the names of the professionals that can provide two or more treatments?",
            "What is the id and cell number of the professionals who can provide at least 3 treatments?",
            "Which professionals have used at least two treatments? List his or her name and cell number.",
            "Which professionals have more than 2 treatments? Show the professional ID and cell number.",
            "Show ids and cell numbers of professionals that are involved with more than one treatment.",
            "List the name and cell number of the professionals that have at least two treatments.",
            "Show the names and ids of professionals that are involved in at most two treatments.",
            "Return the ids and cell numbers for orderes with two or more treatments.",
            "Return the ids and names of the professionals that have more than two treatments in total.",
            "Find the name and cell number for the professionals who have more than one treatment.",
            "What are the ids and names of the professionals that have at least two treatments?"
        ],
        "templates": [
            "",
            {
                "question": "Show the account id and name with at least 4 transactions.",
                "masked_template": "Show the <mask> id and name with at least 4 <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and names of the architects who built at least 3 bridges ?",
                "masked_template": "What are the ids and names of the <mask> who <mask> at least 3 <mask> ?",
                "query": "SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
                "masked_template": "Which <mask> are <mask> in at least two <mask> me the <mask> ID and <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the id and details of the customers who have at least 3 events?",
                "masked_template": "What are the id and <mask> of the <mask> who have at least 3 <mask>",
                "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
                "masked_template": "What is the cmi <mask> id that is <mask> to at least one <mask> tax <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count( * ) >= 1",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "masked_template": "What are the ids and names of the web <mask> that are <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the student ID and personal name of the student with at least two enrollments.",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with at least two <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
                "masked_template": "Find the <mask> and <mask> IDs of the <mask> that <mask> at least two <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
                "masked_template": "What are the ids and names of the <mask> that can <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
                "masked_template": "<mask> show the <mask> names and ids of <mask> who <mask> at least 10 <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the id and name of the mountains that have at least 2 photos?",
                "masked_template": "What are the id and name of the <mask> that have at least 2 <mask>",
                "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the ids and names of accounts with 4 or more transactions?",
                "masked_template": "What are the ids and names of <mask> with 4 or more <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
                "masked_template": "What are the ids and <mask> names of the <mask> that can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
                "masked_template": "For <mask> id, what are the names of the <mask> that can <mask> with more than one <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
                "masked_template": "What is the id and <mask> name of the <mask> can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
                "masked_template": "Which <mask> a <mask> in more than 30 <mask> List his or her <mask> name and <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.027777777777777776,
                "db_id": "sakila_1"
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "railway"
            },
            {
                "question": "List first name and last name of customers that have more than 2 payments.",
                "masked_template": "List <mask> name and <mask> name of <mask> that have more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "driving_school"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at most once.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at most <mask>",
                "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) <= 1",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
                "masked_template": "Return the <mask> and names of the <mask> that have more than two <mask> in.",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "twitter_1"
            },
            {
                "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
                "masked_template": "What are the <mask> and names of the <mask> that have <mask> than 2?",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "What are the ids and cell numbers of the professionals who have at least 3 treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids and cell numbers of the professionals who have at least two treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( DISTINCT professional_id ) FROM Treatments",
        "proc_query": "( the number of ( distinct ( ( <col> professional id </col> ) ) ) ) that belongs to ( <tab> treatments </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many different physicians are involved in treatments?",
            "How many different physicians have had treatments?",
            "How many distinct physicians are involved in treatments?",
            "How many different types of physicians are involved in treatments?",
            "What are the ids of all physicians involved in the treatments?",
            "How many different physicians are involved in treatments?",
            "How many different physicians are involved in treatments?",
            "How many different physicians are involved in treatments?",
            "Count the number of distinct physicians involved in treatments.",
            "How many distinct professional ids are there for all treatments?",
            "How many different professional ids do we have?",
            "Find the number of different professional ids.",
            "How many different ids are involved in treatments?",
            "What is the number of distinct professional ids the treatments are provided at?",
            "How many different physicians have specialized in treatments?",
            "Count the number of different physicians involved in treatments.",
            "Find the number of distinct physicians involved in treatments.",
            "Show the number of different physicians involved in treatments.",
            "Find the number of distinct physicians involved in treatments.",
            "Count the number of physicians who have had treatments.",
            "How many different types of physicians do we have?",
            "How many different physicians are involved in treatments?",
            "How many distinct physicians are involved in treatments?",
            "Count the number of different professional ids that are involved in treatments",
            "How many different physicians are involved in treatments?",
            "How many different physicians do we have?",
            "What is the count of distinct physicians associated with treatments?",
            "How many distinct physicians have specialized in treatments?",
            "How many distinct professional ids are used by treatments?",
            "How many different physicians are involved in treatments?",
            "Count the number of different physicians involved in treatments."
        ],
        "templates": [
            "",
            {
                "question": "How many different teams have had eliminated wrestlers?",
                "masked_template": "How many different <mask> have had <mask>",
                "query": "SELECT COUNT( DISTINCT team ) FROM elimination",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "How many distinct governors are there?",
                "masked_template": "How many distinct <mask> are <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many different types of rooms are there?",
                "masked_template": "How many different <mask> of <mask> are <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the unique types of player positions in the tryout?",
                "masked_template": "What are the <mask> of <mask> in the <mask>",
                "query": "SELECT count( DISTINCT pPos ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many allergies are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( DISTINCT allergy ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different allergy types exist?",
                "masked_template": "How many different <mask>",
                "query": "SELECT count( DISTINCT allergytype ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different colleges were represented at tryouts?",
                "masked_template": "How many different <mask> at <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of distinct governors.",
                "masked_template": "Count the number of distinct <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many distinct currency codes are there for all drama workshop groups?",
                "masked_template": "How many distinct <mask> are there for all <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "How many different colleges do attend the tryout test?",
                "masked_template": "How many different <mask> do <mask> the <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "masked_template": "<mask> the <mask> find the number of <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different bike ids are there?",
                "masked_template": "How many different <mask> ids are <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "masked_template": "What is the number of distinct <mask> the <mask> are <mask> at?",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different cities have these stations?",
                "masked_template": "How many different <mask> have <mask>",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Count the number of different affected regions.",
                "masked_template": "Count the number of different <mask>",
                "query": "SELECT count( DISTINCT region_id ) FROM affected_region",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Find the number of distinct currency codes used in drama workshop groups.",
                "masked_template": "Find the number of distinct <mask> in <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show the number of transaction types.",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( DISTINCT transaction_type ) FROM Financial_Transactions",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the number of distinct room types available.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Count the number of artists who have had volumes.",
                "masked_template": "Count the number of <mask> who have had <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many different types of sports do we offer?",
                "masked_template": "How many different <mask> of <mask> do we <mask>",
                "query": "SELECT count( DISTINCT sportname ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many students play sports?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many distinct countries are the climbers from?",
                "masked_template": "How many distinct <mask> are the <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of different countries that climbers are from.",
                "masked_template": "Count the number of different <mask> that <mask> are <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "How many different students are involved in sports?",
                "masked_template": "How many different <mask> are <mask> in <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many different levels do members have?",
                "masked_template": "How many different <mask> do <mask>",
                "query": "SELECT count( DISTINCT LEVEL ) FROM member",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "masked_template": "What is the count of distinct <mask> with <mask>",
                "query": "SELECT count( DISTINCT eid ) FROM Certificate",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "How many distinct artists have volumes?",
                "masked_template": "How many distinct <mask> have <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many distinct payment methods are used by parties?",
                "masked_template": "How many distinct <mask> are <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "How many different countries are all the swimmers from?",
                "masked_template": "How many different <mask> are all the <mask>",
                "query": "SELECT count( DISTINCT nationality ) FROM swimmer",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Count the number of different payment method codes used by parties.",
                "masked_template": "Count the number of different <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            }
        ],
        "best_hyp": "How many different physicians have had treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many different physicians are involved in treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived , date_departed FROM Dogs",
        "proc_query": "( <col> date arrived </col> ) , ( <col> date departed </col> ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "When did the dogs depart and when did they depart?",
            "List all date arrived and departure dates for all dogs.",
            "Show the arrival date and departure date of all dogs.",
            "What are the arrival and departure dates for each dog?",
            "Show all dates arrived and day departed.",
            "What are all the dates arrived and day departed?",
            "Show the ids and dates of all the dogs.",
            "What are the arrival and departure dates of all dogs?",
            "What are all the arrival and departure dates?",
            "What are the ids and dates of departure of all dogs?",
            "What are the arrival and departure dates of the dogs?",
            "What are the arrival and departure dates of all dogs?",
            "Show all date arrived and departure count of dogs.",
            "What are the names and dates of departure of all dogs?",
            "Show the date arrived and departure for all dogs.",
            "What are the ids and dates of departure for each of the dogs?",
            "List all date arrived and departure for all dogs.",
            "What are the name and departure date of each dog?",
            "Show the arrival date and departure date of all dogs.",
            "Show all the arrival and departure dates of dogs.",
            "What are the dates of arrival and departure for all dogs?",
            "List the names and the dates that the dogs can leave an apartment.",
            "For each dog, show the departure date and their departure date.",
            "List the tax ids and their corresponding dates of departure of all the dogs.",
            "Tell me the arrival date and departure date of each dog.",
            "What are the low and high dates of departure for all dogs?",
            "Return the low and high dates for all dogs.",
            "Show all date arrived and departure for all dogs.",
            "Return the arrival date and departure date for each dog.",
            "Return the lot number and departure date for all the dogs.",
            "What are the names and dates of departure for all dogs?"
        ],
        "templates": [
            "",
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What are the ids and dates of departure for each of the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "When did the dogs depart and when did they depart?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max( charge_amount ) FROM Charges",
        "proc_query": "( the maximum of ( <col> charge amount </col> ) ) that belongs to ( <tab> charges </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the maximum charge amount?",
            "Find the maximum charge amount across all the charges.",
            "What is the maximum charge amount in Manhattan?",
            "What is the maximum charge amount in the record?",
            "What is the maximum charge amount on any charge?",
            "In which amount did the most recent charge amount reach?",
            "Return the maximum charge amount across all charges.",
            "Show the maximum charge amount.",
            "What is maximum charge amount of the charges?",
            "What is the maximum charge amount across all charges?",
            "What is the maximum charge amount?"
        ],
        "templates": [
            "",
            {
                "question": "Find the maximum age of all the students.",
                "masked_template": "Find the maximum age of all the <mask>",
                "query": "SELECT max( Age ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
                "masked_template": "What is the maximum <mask> in Man <mask> of the <mask>",
                "query": "SELECT max( OMIM ) FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the maximum OMIM value in the database?",
                "masked_template": "What is the maximum <mask> in the <mask>",
                "query": "SELECT max( OMIM ) FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "When is the last day any resident moved in?",
                "masked_template": "<mask> is the <mask> day any <mask> in?",
                "query": "SELECT max( date_moved_in ) FROM Residents",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "In which year did the most recent crime happen?",
                "masked_template": "In which <mask> did the most <mask>",
                "query": "SELECT max( YEAR ) FROM perpetrator",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "Return the maximum enrollment across all schools.",
                "masked_template": "Return the maximum <mask> all <mask>",
                "query": "SELECT max( Enrollment ) FROM university",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "Show the maximum amount of transaction.",
                "masked_template": "Show the maximum <mask> of <mask>",
                "query": "SELECT max( amount_of_transaction ) FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What is maximum group equity shareholding of the companies?",
                "masked_template": "What is maximum <mask> of the <mask>",
                "query": "SELECT max( group_equity_shareholding ) FROM operate_company",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What is the maximum enrollment across all schools?",
                "masked_template": "What is the maximum <mask> all <mask>",
                "query": "SELECT max( Enrollment ) FROM university",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "What is the oldest age among the students?",
                "masked_template": "What is the <mask> age <mask> the <mask>",
                "query": "SELECT max( Age ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            }
        ],
        "best_hyp": "What is the maximum charge amount across all charges?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the maximum charge amount?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
        "proc_query": "( the number of ( all items ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> has pet </tab> ) equal to ( <col> pet id </col> of <tab> pets </tab> ) ) ) ) , that have ( ( ( <col> sex </col> of <tab> student </tab> ) equal to ( <val> F </val> ) ) and ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many female students have a pet of type F?",
            "Count the number of female students that have a pet of the type F.",
            "What is the number of students who are female and have a pet of type F?",
            "Find the number of female students who have a pet of type F.",
            "For how many female students (sex is F) have a pet?",
            "How many female students have a pet of type F?",
            "How many female students have a pet?",
            "Find the number of female students who have a pet of type F.",
            "How many female students have a pet of type F?",
            "Find the number of female students with pet type F (sex is F).",
            "How many female students have a pet of type F?",
            "How many female students have a pet of type F?",
            "How many female students have a pet of type F?",
            "Count the number of students for which the female student named F is a pet.",
            "How many female students have a pet of type F?",
            "What are the names of the students who are female and have a pet of type F?",
            "Show all student names with pet type F.",
            "What are the names of all female students who are female and have a pet of type F?",
            "What are the names of all female students who have a pet of type F?",
            "How many female students have a pet as a pet?",
            "Show the names of all the female students who have a pet of type F.",
            "What are the numbers of students that the female student with the pet name F has in the pet shop \"A Bar in the Park\"?",
            "What is the total number of female students (sex is F) who have a pet of their choice?",
            "Find the number of female students who have a pet of type F.",
            "What are the names of the female students who have a pet of type F?",
            "Find the total number of female students (sex is F) who have a pet of their choice.",
            "What are the number of female students who have a pet of type F?",
            "Find the number of female students who have a pet of type F.",
            "Find the number of female students who have a pet of type F.",
            "What is the number of female students who have a pet of type F?",
            "How many female students have a pet?"
        ],
        "templates": [
            "",
            {
                "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.",
                "masked_template": "Count the number of <mask> that <mask> in the <mask> of the <mask>",
                "query": "SELECT count( * ) FROM region AS T1 JOIN party AS T2 ON T1.region_id = T2.region_id JOIN party_events AS T3 ON T2.party_id = T3.party_id WHERE T1.region_name = 'United Kingdom' AND T3.Event_Name = 'Annaual Meeting'",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
                "masked_template": "What is the number of <mask> by the <mask> whose <mask> are in <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
                "masked_template": "Find the number of <mask> is a <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Tracy' AND T3.lname = 'Kim'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "For how many clubs is \"Tracy Kim\" a member?",
                "masked_template": "For how many <mask> is <mask> a <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Tracy' AND T3.lname = 'Kim'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "How many clubs does \"Linda Smith\" belong to?",
                "masked_template": "How many <mask> to?",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "How many papers have \"Atsushi Ohori\" published?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Atsushi' AND T1.lname = 'Ohori'",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of female students (with F sex) living in Smith Hall",
                "masked_template": "Find the number of <mask> F <mask> in <mask>",
                "query": "SELECT count( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "How many female students live in Smith Hall?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
                "masked_template": "Return the number of <mask> with <mask> in <mask> by the <mask> with name <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many papers are \"Atsushi Ohori\" the author of?",
                "masked_template": "How many <mask> are <mask> the <mask> of?",
                "query": "SELECT count( * ) FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Atsushi' AND T1.lname = 'Ohori'",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "How many Annual Meeting events happened in the United Kingdom region?",
                "masked_template": "How many <mask> in the <mask>",
                "query": "SELECT count( * ) FROM region AS T1 JOIN party AS T2 ON T1.region_id = T2.region_id JOIN party_events AS T3 ON T2.party_id = T3.party_id WHERE T1.region_name = 'United Kingdom' AND T3.Event_Name = 'Annaual Meeting'",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "How many clubs does the student named \"Eric Tai\" belong to?",
                "masked_template": "How many <mask> the <mask> named <mask> to?",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.037037037037037035,
                "db_id": "club_1"
            },
            {
                "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
                "masked_template": "Count the number of <mask> for which the <mask> named <mask> is a <mask>",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.037037037037037035,
                "db_id": "club_1"
            },
            {
                "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
                "masked_template": "What is the <mask> name of <mask> in <mask> and got <mask> C?",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
                "ted": 0.038461538461538464,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
                "masked_template": "What are the names of the <mask> of the <mask> that have the <mask>",
                "query": "SELECT T3.characteristic_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id JOIN CHARACTERISTICS AS T3 ON T2.characteristic_id = T3.characteristic_id WHERE T1.product_name = 'sesame' AND T3.characteristic_type_code = 'Grade'",
                "ted": 0.038461538461538464,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Show all game names played by Linda Smith",
                "masked_template": "Show all <mask> names <mask> by <mask>",
                "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
                "ted": 0.038461538461538464,
                "db_id": "game_1"
            },
            {
                "question": "What are the first names of all students who took ACCT-211 and received a C?",
                "masked_template": "What are the <mask> names of all <mask> who <mask> and <mask> a C?",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
                "ted": 0.038461538461538464,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all games played by Linda Smith?",
                "masked_template": "What are the names of all <mask> by <mask>",
                "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
                "ted": 0.038461538461538464,
                "db_id": "game_1"
            },
            {
                "question": "Which papers have \"Stephanie Weirich\" as an author?",
                "masked_template": "Which <mask> have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            },
            {
                "question": "Show the names of all the activities Mark Giuliano participates in.",
                "masked_template": "Show the names of all the <mask> in.",
                "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
                "ted": 0.038461538461538464,
                "db_id": "activity_1"
            },
            {
                "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
                "masked_template": "What are the <mask> of <mask> that the <mask> with the <mask> name <mask> in the <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.038461538461538464,
                "db_id": "music_2"
            },
            {
                "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
                "masked_template": "What is the sum of <mask> for <mask> that <mask> with the name <mask> or <mask> are <mask> to?",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
                "masked_template": "Find the <mask> of the <mask> the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of the activities Mark Giuliano is involved in",
                "masked_template": "What are the names of the <mask> is <mask> in",
                "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
                "ted": 0.038461538461538464,
                "db_id": "activity_1"
            },
            {
                "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
                "masked_template": "Find the total <mask> of the <mask> that <mask> named <mask> or <mask> are <mask> to.",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
                "masked_template": "What are the <mask> of <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Jeremy' AND T1.lname = 'Gibbons'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the titles of all the papers written by \"Jeremy Gibbons\"",
                "masked_template": "Find the <mask> of all the <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Jeremy' AND T1.lname = 'Gibbons'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            },
            {
                "question": "Find all the papers published by \"Aaron Turon\".",
                "masked_template": "Find all the <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Aaron' AND T1.lname = 'Turon'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
                "masked_template": "What is the name of the <mask> that <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            },
            {
                "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
                "masked_template": "Which <mask> is the <mask> to? <mask> me the name of the <mask>",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.038461538461538464,
                "db_id": "icfp_1"
            }
        ],
        "best_hyp": "Count the number of students for which the female student named F is a pet.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many female students have a pet of type F?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> dogs </tab> ) , ( <col> first name </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> dogs </tab> ) , and ( ( <tab> owners </tab> ) satisfied that ( ( <col> owner id </col> of <tab> dogs </tab> ) equal to ( <col> owner id </col> of <tab> owners </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> dogs </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id, first name and last name of the owner who has the most dogs?",
            "Return the id and last name of the owner who has the greatest number of dogs.",
            "What are the ids, first names and last names of the owners with the greatest number of dogs?",
            "Which owner has the most number of dogs or cats? List the owner id and last name.",
            "What is the id, name and last name of the owner who owns the most dogs?",
            "What are the owner id, first name and last name who has the most dogs?",
            "Which owner has the most dogs? Tell me the owner id and id.",
            "Which 3 owners have the most dogs? List their first name and id.",
            "Find the owner id, first name and id for the most dogs.",
            "Find the id and last name of the owner that owns the most dogs.",
            "What are the ids and full names of the owners who have the most dogs?",
            "Which owner owns the most dogs? List his or her first name and last name.",
            "Which owner owns the most number of dogs? List the owner id, first name and last name.",
            "Find the name and first name of the owner who is the owner for the most number of dogs.",
            "What are the id, first name and last name of the owner who owns the greatest number of dogs?",
            "Return the id, first name and last name for the owner with the most dogs.",
            "What is the id and first name of the owner with most number of dogs?",
            "Return the id and full name of the owner with the most dogs.",
            "What is the owner id, first name and last name with most number of dogs?",
            "What is the id, name and last name of the owner that had most number of dogs?",
            "Find the name and first name of the owner who is the owner of the most number of dogs.",
            "What is the name and first name of the owner that the most dogs end at?",
            "What are the ids and full names of the owners with the most dogs?",
            "Return the id and id of the owner or owner who owns the greatest number of dogs.",
            "What is the name and first name of the owner who owns most of the dogs?",
            "Which owner owns the most number of dogs? List the owner id, first name and last name.",
            "Show the owner id, first name and last name.",
            "Return the id and full name of the owner who has the most dogs.",
            "Which owner owns least number of dogs? List the owner name and the id.",
            "What is the owner id, first name and last name with least number of dogs?",
            "Find the owner id, first name and last name of the dog with the most owners."
        ],
        "templates": [
            "",
            {
                "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
                "masked_template": "Return the <mask> id and <mask> number of the <mask> who has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the title, id, and description of the movie with the greatest number of actors?",
                "masked_template": "What are the <mask> id, and <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
                "masked_template": "Which <mask> has the most number of <mask> or <mask> List the <mask> id and <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the id, name and nationality of the architect who built most mills?",
                "masked_template": "What is the id, name and <mask> of the <mask> who <mask> most <mask>",
                "query": "SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What are the manager's first name, last name and id who won the most manager award?",
                "masked_template": "What are the <mask> name and id who won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
                "masked_template": "Which <mask> won the most <mask> me the <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which 3 players won the most player awards? List their full name and id.",
                "masked_template": "Which 3 <mask> won the most <mask> List their <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the first name, last name and id for the top three players won the most player awards.",
                "masked_template": "Find the <mask> name and id for the top <mask> won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
                "masked_template": "Find the <mask> and <mask> ID of the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
                "masked_template": "What are the <mask> and <mask> ID of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
                "masked_template": "Which <mask> the most <mask> List his or her <mask> name and <mask> id.",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
                "masked_template": "Which <mask> the most number of <mask> List the <mask> id, <mask> and <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the name and city of the airport which is the source for the most number of flight routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> for the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
                "masked_template": "What are the <mask> number and <mask> of the <mask> who <mask> the <mask> number of <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Return the name, phone number and email address for the customer with the most orders.",
                "masked_template": "Return the <mask> number and <mask> for the <mask> with the most <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What is the customer last name, id and phone number with most number of orders?",
                "masked_template": "What is the <mask> id and <mask> number with most number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the id and full name of the customer with the most accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the customer id, first and last name with most number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with most number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the id, name and IATA code of the airport that had most number of flights?",
                "masked_template": "What is the id, name and <mask> of the <mask> that had most number of <mask>",
                "query": "SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Find the name and city of the airport which is the destination of the most number of routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> of the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and city of the airport that the most routes end at?",
                "masked_template": "What is the name and <mask> of the <mask> that the most <mask> end at?",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the ids, types, and details of the organization with the most research staff?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the most <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
                "masked_template": "Return the <mask> name and id of the <mask> or <mask> who <mask> in the <mask> number of <mask>",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the name and city of the airport from most of the routes start?",
                "masked_template": "What is the name and <mask> of the <mask> most of the <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
                "masked_template": "Which <mask> log <mask> the most number of <mask> List the <mask> log id, <mask> and <mask>",
                "query": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
                "masked_template": "<mask> who have <mask> which <mask> the least number of <mask> List the <mask> id, <mask> name and <mask>",
                "query": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Return the id and full name of the customer who has the fewest accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> who has the <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Which staff handled least number of payments? List the full name and the id.",
                "masked_template": "Which <mask> least number of <mask> List the <mask> name and the id.",
                "query": "SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the customer id, first and last name with least number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with least number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Give the full name and customer id of the customer with the fewest accounts.",
                "masked_template": "<mask> the <mask> name and <mask> id of the <mask> with the <mask>",
                "query": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            }
        ],
        "best_hyp": "What is the id, name and last name of the owner that had most number of dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id, first name and last name of the owner who has the most dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "proc_query": "( <col> cost of treatment </col> of <tab> treatments </tab> ) , ( <col> treatment type description </col> of <tab> treatment types </tab> ) that belongs to ( ( <tab> treatments </tab> ) , and ( ( <tab> treatment types </tab> ) satisfied that ( ( <col> treatment type code </col> of <tab> treatments </tab> ) equal to ( <col> treatment type code </col> of <tab> treatment types </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the cost of treatment and description of the treatment type?",
            "List all cost of treatments and description of treatment type.",
            "Find the names of all treatments who have cost and the description of the treatment type.",
            "What are the names of all patients who have received a treatment and the treatment type description?",
            "What are the names of all patients who have received a treatment as well as the treatment type description?",
            "What are the ids of all treatments and what are the names of their types?",
            "Find the names of all treatments who have cost and the description of the treatment type.",
            "Please show the names and the descriptions of treatments.",
            "Show cost of treatments and description of treatment type.",
            "What are the cost and description of all the treatments?",
            "what are the cost of treatment and description of all treatments?",
            "What are the names and descriptions of all the treatments?",
            "Tell me the names and descriptions of treatments which are expensive?",
            "Find the cost of treatment and description of each treatment type.",
            "What are the cost of treatment and description of all treatments?",
            "What are the names of treatments and their type descriptions?",
            "Return the day Number and description for all the treatments.",
            "What is the day Number and description of all the treatments?",
            "Show the cost of treatments and the description of their treatment types",
            "What are the cost of treatments and the description of the treatment type they correspond to?",
            "Show cost of treatments and the description of the treatment type they are in.",
            "Tell me all the cost of treatment and description of the treatment type.",
            "What are the names of treatments as well as the descriptions of the treatment types they correspond to?",
            "What are the cost and description of treatments in which type codes are used?",
            "Tell me the cost and description for each treatment type.",
            "What are the cost and description of each treatment type?",
            "Show the cost of treatment and the treatment type description.",
            "What are the names and descriptions of the treatments that have been described as a treatment type?",
            "Show the cost of treatment and description for all treatments.",
            "What are all the cost of treatments and the description of all the treatments in the database?",
            "For each treatment type, find the names of the treatments they are part of."
        ],
        "templates": [
            "",
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            }
        ],
        "best_hyp": "What are the names and descriptions of all the treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the cost of treatment and description of the treatment type?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) FROM pets WHERE weight > 11",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> pets </tab> ) , that have ( ( <col> weight </col> ) greater than ( <val> 11 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many pets have a weight higher than 11?",
            "How many pets are bigger than 11?",
            "How many pets have more than 2 pounds?",
            "Count the number of pets with more than 2 pounds.",
            "How many pets have a weight greater than 15 mm?",
            "How many pets have a weight greater than 11?",
            "What is the total number of pets that has more than 3 pounds?",
            "How many pets have more than 3 pounds?",
            "How many different pets have weight above 11?",
            "How many pets has more than 11 pounds?",
            "What is the number of pets with a weight greater than 11?",
            "How many pets have weight above 11?",
            "Count the number of pets in which at least one weight is greater than 11.",
            "How many pets are bigger than 11?",
            "How many pets have more than 11 pounds of weight?",
            "Count the number of pets that have a number of weights higher than 11.",
            "How many pets are over 11 pounds?",
            "Count the number of pets that have weight above 11.",
            "How many pets are bigger than 11?",
            "Count the number of pets that are over 11 pounds.",
            "How many pets have weight above 11?",
            "How many pets have weight above 11?",
            "How many pets are over 11 pounds?",
            "How many pets whose weight is at least 5 pounds?",
            "Count the number of pets that are either in or under 11 pounds.",
            "How many pets are there with weight above 11 or above 11?",
            "How many pets are bigger than 11?",
            "How many pets are there with weight above 11?",
            "How many pets have weight of at least 11?",
            "How many pets have weight above 11?",
            "How many pets has a weight greater than 11?"
        ],
        "templates": [
            "",
            {
                "question": "How many heads of the departments are older than 56 ?",
                "masked_template": "How many <mask> of the <mask> are <mask> than 56 ?",
                "query": "SELECT count( * ) FROM head WHERE age > 56",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many courses have more than 2 credits?",
                "masked_template": "How many <mask> have more than 2 <mask>",
                "query": "SELECT count( * ) FROM COURSE WHERE Credits > 2",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Count the number of courses with more than 2 credits.",
                "masked_template": "Count the number of <mask> with more than 2 <mask>",
                "query": "SELECT count( * ) FROM COURSE WHERE Credits > 2",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "How many camera lenses have a focal length longer than 15 mm?",
                "masked_template": "How many <mask> have a <mask> than 15 mm?",
                "query": "SELECT count( * ) FROM camera_lens WHERE focal_length_mm > 15",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many flights have a velocity larger than 200?",
                "masked_template": "How many <mask> have a <mask> than <mask>",
                "query": "SELECT count( * ) FROM flight WHERE velocity > 200",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What is the total number of ratings that has more than 3 stars?",
                "masked_template": "What is the total number of <mask> that has more than 3 <mask>",
                "query": "SELECT count( * ) FROM Rating WHERE stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "How many movie ratings have more than 3 stars?",
                "masked_template": "How many <mask> have more than 3 <mask>",
                "query": "SELECT count( * ) FROM Rating WHERE stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "How many different players trained for more than 1000 hours?",
                "masked_template": "How many different <mask> for more than <mask>",
                "query": "SELECT count( * ) FROM Player WHERE HS > 1000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many colleges has more than 15000 students?",
                "masked_template": "How many <mask> has more than <mask>",
                "query": "SELECT count( * ) FROM College WHERE enr > 15000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the number of colleges with a student population greater than 15000?",
                "masked_template": "What is the number of <mask> with a <mask> than <mask>",
                "query": "SELECT count( * ) FROM College WHERE enr > 15000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many storms had death records?",
                "masked_template": "How many <mask> had <mask>",
                "query": "SELECT count( * ) FROM storm WHERE Number_Deaths > 0",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Count the number of storms in which at least 1 person died.",
                "masked_template": "Count the number of <mask> in which at least 1 <mask>",
                "query": "SELECT count( * ) FROM storm WHERE Number_Deaths > 0",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "How many games are held after season 2007?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM game WHERE season > 2007",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "How many players have more than 1000 hours of training?",
                "masked_template": "How many <mask> have more than <mask> of <mask>",
                "query": "SELECT count( * ) FROM Player WHERE HS > 1000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of markets that have a number of cities lower than 300.",
                "masked_template": "Count the number of <mask> that have a number of <mask> than <mask>",
                "query": "SELECT count( * ) FROM market WHERE Number_cities < 300",
                "ted": 0.0625,
                "db_id": "film_rank"
            },
            {
                "question": "How many students are 18 years old?",
                "masked_template": "How many <mask> are 18 <mask>",
                "query": "SELECT count( * ) FROM Student WHERE age = 18",
                "ted": 0.0625,
                "db_id": "allergy_1"
            },
            {
                "question": "Count the number of items store 1 has in stock.",
                "masked_template": "Count the number of <mask> 1 has in <mask>",
                "query": "SELECT count( * ) FROM inventory WHERE store_id = 1",
                "ted": 0.0625,
                "db_id": "sakila_1"
            },
            {
                "question": "How many users are logged in?",
                "masked_template": "How many <mask> are <mask> in?",
                "query": "SELECT count( * ) FROM users WHERE user_login = 1",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "Count the number of users that are logged in.",
                "masked_template": "Count the number of <mask> that are <mask> in.",
                "query": "SELECT count( * ) FROM users WHERE user_login = 1",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "How many items in inventory does store 1 have?",
                "masked_template": "How many <mask> in <mask> 1 <mask>",
                "query": "SELECT count( * ) FROM inventory WHERE store_id = 1",
                "ted": 0.0625,
                "db_id": "sakila_1"
            },
            {
                "question": "Advisor 1121 has how many students?",
                "masked_template": "<mask> has how many <mask>",
                "query": "SELECT count( * ) FROM Student WHERE Advisor = 1121",
                "ted": 0.0625,
                "db_id": "restaurant_1"
            },
            {
                "question": "How many students are age 18?",
                "masked_template": "How many <mask> are age 18?",
                "query": "SELECT count( * ) FROM Student WHERE age = 18",
                "ted": 0.0625,
                "db_id": "allergy_1"
            },
            {
                "question": "How many main stream browsers whose market share is at least 5 exist?",
                "masked_template": "How many <mask> whose <mask> is at least 5 <mask>",
                "query": "SELECT count( * ) FROM browser WHERE market_share >= 5",
                "ted": 0.0625,
                "db_id": "browser_web"
            },
            {
                "question": "Count the number of exhibitions that happened in or after 2005.",
                "masked_template": "Count the number of <mask> that <mask> in or <mask>",
                "query": "SELECT count( * ) FROM exhibition WHERE YEAR >= 2005",
                "ted": 0.0625,
                "db_id": "theme_gallery"
            },
            {
                "question": "How many exhibition are there in year 2005 or after?",
                "masked_template": "How many <mask> are there in <mask> or <mask>",
                "query": "SELECT count( * ) FROM exhibition WHERE YEAR >= 2005",
                "ted": 0.0625,
                "db_id": "theme_gallery"
            },
            {
                "question": "How many movies were made before 2000?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Movie WHERE YEAR < 2000",
                "ted": 0.0625,
                "db_id": "movie_1"
            },
            {
                "question": "How many weddings are there in year 2016?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM wedding WHERE YEAR = 2016",
                "ted": 0.0625,
                "db_id": "wedding"
            },
            {
                "question": "How many products have prices of at least 180?",
                "masked_template": "How many <mask> have <mask> of at least <mask>",
                "query": "SELECT count( * ) FROM products WHERE price >= 180",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many patients stay in room 112?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( patient ) FROM stay WHERE room = 112",
                "ted": 0.0625,
                "db_id": "hospital_1"
            },
            {
                "question": "How many budget record has a budget amount smaller than the invested amount?",
                "masked_template": "How many <mask> has a <mask> than the <mask>",
                "query": "SELECT count( * ) FROM budget WHERE budgeted < invested",
                "ted": 0.0625,
                "db_id": "school_finance"
            }
        ],
        "best_hyp": "How many pets have more than 11 pounds of weight?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many pets have a weight higher than 11?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT major , age FROM student WHERE stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' )",
        "proc_query": "( <col> major </col> ) , ( <col> age </col> ) that belongs to ( <tab> student </tab> ) , that have ( ( <col> student id </col> ) not in ( ( <col> student id </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the major and age of the students who do not have a pet?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What is the major and age of the students who do not have a pet?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the major and age of the students who do not have a pet?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' OR T3.pettype = 'dog'",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> student </tab> ) ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) or ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of all the students who have a pet of type 'dog' or 'cumin'?",
            "Find the first names of the students who are either a dog or cat.",
            "Which students are either male or female? Tell me their first names.",
            "What is the first name of the students who have either a pet of type 'dog' or a cat?",
            "Which student is the pet owner? Tell me the name of the student.",
            "What are the first names of all students who have a pet of type 'dog' or 'cat'?",
            "What is the first name of the student who has either a pet of type 'dog' or a cat?",
            "What are the first names of the students that have pet as a pet?",
            "List the first names of students having pet as a pet.",
            "What is the total first names for students that have pet with the name dog or cat are related to?",
            "What are the names of all students that belong to the pet type and whose pet type is dog?",
            "Find the first names of students who are either a pet or a dog.",
            "Find the names of students who have either the pet type of a dog or the cat type.",
            "Which students are students with pet type or pet type? Tell me their first names.",
            "Which students have either the pet named a dog or a cat? Tell me the first names of these students.",
            "List the name of students who have either pet type or pet type is dog.",
            "Find the first names of the students that are either named dog or cat are related to.",
            "What are the first names of all the students who have either a pet of type 'dog' or a cat?",
            "Count the number of students for which the pet type is a dog.",
            "Find the first names of the students who have a pet of type 'dog' or 'cat'.",
            "Find the number of students whose pet type is a dog.",
            "What are the first names of all students who have either a pet of type 'dog' or a cat?",
            "What are the first names of all students who have either a pet of type 'dog' or a cat?",
            "Which students have pets? Give me their first names.",
            "What is the first name of the students whose pet type is either dog or cat?",
            "Find the first names of the students who have either a dog or cat.",
            "Which students have pet as an pet?",
            "What are the first names of all students that have either a dog or cat?",
            "What are the first names of all students who have either a pet of type 'dog' or a cat?",
            "Which students have either a pet or a pet of type 'dog'? Give me their first names.",
            "Find the first names of students who have either a pet type or a dog."
        ],
        "templates": [
            "",
            {
                "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
                "masked_template": "Find the <mask> names of the <mask> who are <mask> or <mask>",
                "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
                "masked_template": "Which <mask> are <mask> or <mask> me their <mask>",
                "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
                "masked_template": "What is the name of the <mask> that <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
                "masked_template": "Which <mask> is the <mask> to? <mask> me the name of the <mask>",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
                "masked_template": "Which <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Katsuhiro' AND T1.lname = 'Ueno'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
                "masked_template": "What is the name of the <mask> the <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Katsuhiro' AND T1.lname = 'Ueno'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of the clubs that have \"Davis Steven\" as a member?",
                "masked_template": "What are the names of the <mask> that have <mask> as a <mask>",
                "query": "SELECT DISTINCT T1.clubname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Davis' AND T3.lname = 'Steven'",
                "ted": 0.019230769230769232,
                "db_id": "club_1"
            },
            {
                "question": "List the clubs having \"Davis Steven\" as a member.",
                "masked_template": "List the <mask> having <mask> as a <mask>",
                "query": "SELECT DISTINCT T1.clubname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Davis' AND T3.lname = 'Steven'",
                "ted": 0.019230769230769232,
                "db_id": "club_1"
            },
            {
                "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
                "masked_template": "What is the sum of <mask> for <mask> that <mask> with the name <mask> or <mask> are <mask> to?",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
                "masked_template": "What are the names of all <mask> that <mask> to the <mask> and whose <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.038461538461538464,
                "db_id": "store_1"
            },
            {
                "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
                "masked_template": "Find the name of <mask> who are <mask> with <mask> or <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
                "ted": 0.038461538461538464,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
                "masked_template": "Find the names of <mask> who have <mask> the <mask> a <mask> or the <mask> a <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' OR T3.service_name = 'Upgrade a policy'",
                "ted": 0.038461538461538464,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
                "masked_template": "Which <mask> are <mask> with <mask> or <mask> me their <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
                "ted": 0.038461538461538464,
                "db_id": "hospital_1"
            },
            {
                "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
                "masked_template": "Which <mask> have <mask> the <mask> named <mask> a <mask> or <mask> a <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' OR T3.service_name = 'Upgrade a policy'",
                "ted": 0.038461538461538464,
                "db_id": "insurance_fnol"
            },
            {
                "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> or <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.038461538461538464,
                "db_id": "store_1"
            },
            {
                "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
                "masked_template": "Find the total <mask> of the <mask> that <mask> named <mask> or <mask> are <mask> to.",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "How many clubs does the student named \"Eric Tai\" belong to?",
                "masked_template": "How many <mask> the <mask> named <mask> to?",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.05555555555555555,
                "db_id": "club_1"
            },
            {
                "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
                "masked_template": "Count the number of <mask> for which the <mask> named <mask> is a <mask>",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.05555555555555555,
                "db_id": "club_1"
            },
            {
                "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
                "masked_template": "Find the <mask> of the <mask> Cup <mask> which was <mask> by <mask> ( <mask> )\".",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.057692307692307696,
                "db_id": "city_record"
            },
            {
                "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
                "masked_template": "Find the number of <mask> is a <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Tracy' AND T3.lname = 'Kim'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "How many female students live in Smith Hall?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
                "ted": 0.057692307692307696,
                "db_id": "dorm_1"
            },
            {
                "question": "How many clubs does \"Linda Smith\" have membership for?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.057692307692307696,
                "db_id": "music_2"
            },
            {
                "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
                "masked_template": "What is the number of <mask> by the <mask> whose <mask> are in <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
                "ted": 0.057692307692307696,
                "db_id": "flight_4"
            },
            {
                "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
                "masked_template": "Find the <mask> of the <mask> the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "Which papers have \"Stephanie Weirich\" as an author?",
                "masked_template": "Which <mask> have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
                "masked_template": "What are the names of all <mask> that <mask> or <mask> by <mask>",
                "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
                "ted": 0.057692307692307696,
                "db_id": "movie_1"
            },
            {
                "question": "How many clubs does \"Linda Smith\" belong to?",
                "masked_template": "How many <mask> to?",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
                "masked_template": "Which <mask> did the <mask> me the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the papers which have \"Olin Shivers\" as an author.",
                "masked_template": "Find the <mask> which have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            }
        ],
        "best_hyp": "What are the names of all students that belong to the pet type and whose pet type is dog?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of all the students who have a pet of type 'dog' or 'cumin'?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "proc_query": "( distinct ( ( <col> breed code </col> ) , ( <col> size code </col> ) ) ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the different breed codes and sizes of dogs?",
            "What are the breed codes and sizes of each dog in the database?",
            "What are the distinct breed codes and the sizes of dogs?",
            "What are the breed codes and sizes of all the dogs?",
            "Return the breed code and size code of all the dogs.",
            "Show each breed code and size code.",
            "Show the distinct breed codes and the sizes.",
            "List all the distinct breed codes and the sizes of dogs.",
            "For each breed code, return the code that is used in it. Also return the breed number and the size."
        ],
        "templates": [
            "",
            {
                "question": "What are the grade number and classroom number of each class in the list?",
                "masked_template": "What are the <mask> number and <mask> number of each <mask> in the <mask>",
                "query": "SELECT DISTINCT classroom , grade FROM list",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "What are the distinct registration dates and the election cycles?",
                "masked_template": "What are the distinct <mask> and the <mask>",
                "query": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What are the first name and last name of all the teachers?",
                "masked_template": "What are the <mask> name and <mask> name of all the <mask>",
                "query": "SELECT DISTINCT firstname , lastname FROM teachers",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "Report the first name and last name of all the students.",
                "masked_template": "<mask> the <mask> name and <mask> name of all the <mask>",
                "query": "SELECT DISTINCT firstname , lastname FROM list",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "Show each student's first name and last name.",
                "masked_template": "Show each <mask> name and <mask>",
                "query": "SELECT DISTINCT firstname , lastname FROM list",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "Report the distinct registration date and the election cycle.",
                "masked_template": "<mask> the distinct <mask> and the <mask>",
                "query": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "List all the distinct president votes and the vice president votes.",
                "masked_template": "List all the distinct <mask> and the <mask>",
                "query": "SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
                "masked_template": "For each <mask> the <mask> that is <mask> in it. <mask> the <mask> number and the <mask>",
                "query": "SELECT DISTINCT classroom , grade FROM list",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "What are the breed codes and sizes of all the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the different breed codes and sizes of dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 3",
        "proc_query": "( <col> professional id </col> of <tab> professionals </tab> ) , ( <col> role code </col> of <tab> professionals </tab> ) , ( <col> first name </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> professional id </col> of <tab> professionals </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 3 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids, role codes, and first names of the professionals who have at least 3 treatments?",
            "Show ids, role codes and first names for all professionals with at least two treatments.",
            "What are the ids and role codes of the professionals who have used at least three treatments?",
            "What are the ids and role codes of the professionals which have at least two treatments?",
            "List the ids of the professionals whose role was the same as it was and the first name for all the treatments which had at least one treatment",
            "Find the id, role code and first name of professionals that have more than one treatment.",
            "What is the id, role code and first name for the professionals with more than one treatment?",
            "Which professionals had at least one treatment? For me the the ids the role code was the code it was and the first name was",
            "Which professional has more than one treatment at a time? List the id, name and the number of treatments.",
            "Please show the ids and ids of professionals who have at least three treatments?",
            "Which professionals are involved in at least three treatments? Give me their names and first names.",
            "What are the ids and names of the professionals that can provide three or more treatments?",
            "What are the ids, role codes and first names of the professionals who have at least 3 treatments?",
            "Show the names and ids of professionals that are involved in at least two treatments?",
            "What are the ids, role codes, and first names of the professionals who have at least three treatments?",
            "Show ids, role codes, first names for all professionals with at least two treatments.",
            "Find the id, role code and first name of the professionals with at least two treatments?",
            "Which professionals are involved in at least two treatments? Give me the ids and role codes.",
            "What are the ids and names of the web ids of the professionals that are involved with two or more treatments?",
            "Which two or more professionals give me their ids and role codes?",
            "For each id, what are the names of the professionals that can provide more than one treatment?",
            "Show the ids, role codes, first names of all the professionals who have at least 3 treatments.",
            "What are the ids and names of the professionals with 3 or more treatments?",
            "What are the ids, role codes, and first names of the professionals who have at least 3 treatments?",
            "What is the id and role code of the professionals who can provide at least 3 treatments?",
            "What are the ids and names of the professionals that have at least two treatments?",
            "What are the ids and full names of the professionals that can provide at least 3 treatments?",
            "What are the ids and names of the professionals who have at least 3 treatments?",
            "Find the ids and role codes of the professionals that have at least two treatments?",
            "What is the cmi id that is related to at least one tax treatment? List the ids and role codes."
        ],
        "templates": [
            "",
            {
                "question": "Show id, first and last names for all customers with at least two cards.",
                "masked_template": "Show id, <mask> and <mask> names for all <mask> with at least two <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the ids and full names of customers who hold two or more cards?",
                "masked_template": "What are the ids and <mask> names of <mask> who <mask> two or more <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
                "masked_template": "What are the <mask> and <mask> of the <mask> which <mask> at least two <mask>",
                "query": "SELECT T1.id , T1.score , T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
                "masked_template": "List the <mask> the <mask> was <mask> the <mask> it was <mask> and the <mask> for all the <mask> which had <mask> one <mask>",
                "query": "SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count( * ) = 1",
                "ted": 0.025,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
                "masked_template": "Find the <mask> and <mask> name of <mask> that have more than one <mask>",
                "query": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count( * ) > 1",
                "ted": 0.025,
                "db_id": "college_2"
            },
            {
                "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
                "masked_template": "What is the <mask> and <mask> name for <mask> with more than one <mask>",
                "query": "SELECT T1.title , T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count( * ) > 1",
                "ted": 0.025,
                "db_id": "college_2"
            },
            {
                "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
                "masked_template": "Which <mask> had <mask> one <mask> For <mask> me the the <mask> the <mask> was <mask> the <mask> it was <mask> and the <mask>",
                "query": "SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count( * ) = 1",
                "ted": 0.025,
                "db_id": "insurance_policies"
            },
            {
                "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
                "masked_template": "Which <mask> has more than 1 <mask> at a <mask> List the id, name and the number of <mask>",
                "query": "SELECT T1.department_id , T1.name , count( * ) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count( * ) > 1",
                "ted": 0.07142857142857142,
                "db_id": "department_management"
            },
            {
                "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
                "masked_template": "<mask> show the <mask> names and ids of <mask> who <mask> at least 10 <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.1,
                "db_id": "chinook_1"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
                "masked_template": "What are the ids and names of the <mask> that can <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.1,
                "db_id": "chinook_1"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the student ID and personal name of the student with at least two enrollments.",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with at least two <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.1,
                "db_id": "e_learning"
            },
            {
                "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
                "masked_template": "Which <mask> are <mask> in at least two <mask> me the <mask> ID and <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.1,
                "db_id": "e_learning"
            },
            {
                "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "masked_template": "What are the ids and names of the web <mask> that are <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "browser_web"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.1,
                "db_id": "e_learning"
            },
            {
                "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
                "masked_template": "For <mask> id, what are the names of the <mask> that can <mask> with more than one <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Show the account id and name with at least 4 transactions.",
                "masked_template": "Show the <mask> id and name with at least 4 <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.1,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and names of accounts with 4 or more transactions?",
                "masked_template": "What are the ids and names of <mask> with 4 or more <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.1,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the id and details of the customers who have at least 3 events?",
                "masked_template": "What are the id and <mask> of the <mask> who have at least 3 <mask>",
                "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 3",
                "ted": 0.1,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
                "masked_template": "What is the id and <mask> name of the <mask> can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.1,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the id and name of the mountains that have at least 2 photos?",
                "masked_template": "What are the id and name of the <mask> that have at least 2 <mask>",
                "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.1,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
                "masked_template": "What are the ids and <mask> names of the <mask> that can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.1,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the ids and names of the architects who built at least 3 bridges ?",
                "masked_template": "What are the ids and names of the <mask> who <mask> at least 3 <mask> ?",
                "query": "SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count( * ) >= 3",
                "ted": 0.1,
                "db_id": "architecture"
            },
            {
                "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
                "masked_template": "Find the <mask> and <mask> IDs of the <mask> that <mask> at least two <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.1,
                "db_id": "e_learning"
            },
            {
                "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
                "masked_template": "What is the cmi <mask> id that is <mask> to at least one <mask> tax <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count( * ) >= 1",
                "ted": 0.1,
                "db_id": "local_govt_mdm"
            }
        ],
        "best_hyp": "Which professional has more than one treatment at a time? List the id, name and the number of treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids, role codes, and first names of the professionals who have at least 3 treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "proc_query": "( <col> first name </col> of <tab> owners </tab> ) , ( <col> name </col> of <tab> dogs </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names and names of the owners of the dogs?",
            "List all first names and last names of all dogs.",
            "Find the first names of all owners who have a dog and the name of the owner.",
            "What are the first names of all owners who have a dog and the name of the owner?",
            "What are the names of all owners who have a dog as well as the owner id?",
            "What are the ids of all owners for their dogs and what are the names of their dogs?",
            "Find the names of all owners who have a dog and the owner's first name.",
            "Show the first names and the names of all the dogs.",
            "Show first names and last names of owners.",
            "What are the first names and last names of all the dogs?",
            "what are the first name and last name of all the dogs?",
            "What are the first names and names of all the dogs?",
            "Tell me the names and names of owners which dogs are owned by",
            "What are the first name and last name for each owner?",
            "What are the first name and last name of all the dogs?",
            "What are the first names and names of all the dogs owned by each owner?",
            "Return the first name and last name for all the dogs.",
            "What is the first name and name of all the dogs?",
            "Show the first names of owners and the names of their dogs.",
            "What are the first names of owners and the names of the dogs they are related to?",
            "Show first names of owners and the names of dogs they are in.",
            "Tell me all the first names and names of the dogs they are owned.",
            "What are the first names of owners as well as the names of the dogs they are related to?",
            "What are the first names and names of owners in which dogs are owned?",
            "Tell me the first name and name of the owner of each dog.",
            "What are the first names and names of all the dogs?",
            "Show the first name and the last name of the owner.",
            "What are the names and names of the owners that have a dog?",
            "Show the first name and last name for all dogs.",
            "What are all the first names and the names of all the dogs in the family?",
            "For each owner, find the names of the dogs they are in charge of."
        ],
        "templates": [
            "",
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            }
        ],
        "best_hyp": "What are all the first names and the names of all the dogs in the family?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and names of the owners of the dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 2",
        "proc_query": "( <col> first name </col> of <tab> student </tab> ) , ( <col> sex </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> student </tab> ) , that have ( ( the number of ( all items ) ) greater than ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names and genders of all students who have at least two pet?",
            "Return the ids and genders corresponding to students for which there are more than two pets.",
            "List first name and gender name of students that have more than 2 pet.",
            "What are the ids and genders of students that have more than one pet?",
            "Who are the students that had more than one pet? List the student first name and gender.",
            "Find the the first name and gender for the students who had more than one pet.",
            "Find the first name and gender for the students who have more than one pet.",
            "What are the ids and names of the students that have more than one pet?",
            "what are name and gender of students who had more than one pet?",
            "Which students have more than 2 pet? Show the student first name and id.",
            "What are the first names and genders of all students with more than 2 pet?",
            "What is the first name and gender for the students with at least two pet?",
            "What are the first names and genders of the students that live as a pet more than two times?",
            "Which students have pets as well as more than two? Return me their first names and genders.",
            "Return the order ids and genders for orderes with two or more pets.",
            "What is the first name and gender for the students who have more than two pet?",
            "Show first names and genders of students that are with more than one pet.",
            "What are the first names and genders of students who had at least two pets?",
            "What are the first names and genders of the students that have two or more pets?",
            "Which students have more than one pet? Tell me the name and gender of these students.",
            "Return the first names and genders of the students that have more than two pet in their record.",
            "Which students have a pet in more than 30 days? List his or her first name and gender.",
            "Find the name and gender of the students who have pets with a total pet value of more than 2.",
            "What are the first names and ids for students who have two or more pets?",
            "What are the first names and gender rep ids for students with two or more pets?",
            "Show first name and id for all students with at least two pet.",
            "Which students have two or more pets? Tell me their first names and genders.",
            "What are the names and genders of students that have had at least one pet?",
            "What are the names and genders for students who have a total pet of more than 2 in their record?",
            "Show the first names and ids of students that are female and have at least two pet.",
            "Which students are female at least twice? Tell me their names and genders."
        ],
        "templates": [
            "",
            {
                "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
                "masked_template": "Return the ids and <mask> to <mask> for which there are more than two <mask>",
                "query": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List first name and last name of customers that have more than 2 payments.",
                "masked_template": "List <mask> name and <mask> name of <mask> that have more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the ids and details of events that have more than one participants?",
                "masked_template": "What are the ids and <mask> of <mask> that have more than one <mask>",
                "query": "SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
                "masked_template": "Who are the <mask> that had more than 1 <mask> List the <mask> and id.",
                "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the the customer details and id for the customers who had more than one policy.",
                "masked_template": "Find the the <mask> and id for the <mask> who had more than one <mask>",
                "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "What are the ids and names of the companies that operated more than one flight?",
                "masked_template": "What are the ids and names of the <mask> that <mask> more than one <mask>",
                "query": "SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "what are name and phone number of patients who had more than one appointment?",
                "masked_template": "what are name and <mask> number of <mask> who had more than one <mask>",
                "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the first and last names of all customers with more than 2 payments?",
                "masked_template": "What are the <mask> and <mask> names of all <mask> with more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the project id and detail for the project with at least two documents?",
                "masked_template": "What is the <mask> id and <mask> for the <mask> with at least two <mask>",
                "query": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the GDP and population of the city that already served as a host more than once?",
                "masked_template": "What are the GDP and <mask> of the <mask> that <mask> as a <mask> more than <mask>",
                "query": "SELECT T1.gdp , T1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.Host_City HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
                "masked_template": "Which <mask> have <mask> as <mask> more than <mask> Return me their GDP and <mask>",
                "query": "SELECT T1.gdp , T1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.Host_City HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the order id and order details for the order more than two invoices.",
                "masked_template": "What is the order id and order <mask> for the order more than two <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "What are the full names of actors who had roles in more than 30 films?",
                "masked_template": "What are the <mask> names of <mask> who had <mask> in more than 30 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
                "masked_template": "What are the <mask> and names of the <mask> that have <mask> than 2?",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
                "masked_template": "Which <mask> more than one <mask> me the name and <mask> number of <mask>",
                "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
                "masked_template": "Return the <mask> and names of the <mask> that have more than two <mask> in.",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
                "masked_template": "Which <mask> a <mask> in more than 30 <mask> List his or her <mask> name and <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
                "masked_template": "Find the name and <mask> of the <mask> who have <mask> with a total <mask> of more than <mask>",
                "query": "SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum( T2.amount ) > 5000",
                "ted": 0.027777777777777776,
                "db_id": "loan_1"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.027777777777777776,
                "db_id": "chinook_1"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names and locations of tracks that have had exactly 1 race?",
                "masked_template": "What are the names and <mask> of <mask> that have had <mask> 1 <mask>",
                "query": "SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count( * ) = 1",
                "ted": 0.027777777777777776,
                "db_id": "race_track"
            },
            {
                "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
                "masked_template": "What are the names and <mask> for <mask> who have <mask> a total <mask> of more than <mask> in <mask>",
                "query": "SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum( T2.amount ) > 5000",
                "ted": 0.027777777777777776,
                "db_id": "loan_1"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            }
        ],
        "best_hyp": "What are the ids and names of the students that have more than one pet?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and genders of all students who have at least two pet?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "proc_query": "( <col> role code </col> ) , ( <col> street </col> ) , ( <col> city </col> ) , ( <col> state </col> ) that belongs to ( <tab> professionals </tab> ) , that have ( ( <col> city </col> ) like ( <val> %West% </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the role code, street, city, and state of the professionals whose city name starts with the letter W?",
            "What is the role code, street, and state for professionals living in the city of New York?",
            "Find the role code, street, and state of the professionals living in the city of New York."
        ],
        "templates": [
            "",
            {
                "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
                "masked_template": "What is the <mask> and <mask> for <mask> in the <mask> of New <mask>",
                "query": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            },
            {
                "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
                "masked_template": "Find the <mask> and <mask> (or <mask> of the <mask> in the <mask> of New <mask>",
                "query": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            }
        ],
        "best_hyp": "What is the role code, street, and state for professionals living in the city of New York?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the role code, street, city, and state of the professionals whose city name starts with the letter W?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' )",
        "proc_query": "( <col> first name </col> of <tab> student </tab> ) , ( <col> age </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) and ( ( t1.stuid ) not in ( ( <col> student id </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names and ages of all students who do not have a cat?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the first names and ages of all students who do not have a cat?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and ages of all students who do not have a cat?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
        "proc_query": "( <col> first name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ), and intersect with ( ( <col> first name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of all students who have both cat and dog as pet types?",
            "What are the names of the students that have both the cat type and the dog type pet?",
            "Show names for all students who have pets of cat type and pet type.",
            "What are the names of any students who are cats or dogs?",
            "Find the name of the students who have pets of cat type and a pet of dog type.",
            "Find the name of students have pets whose type is cat and type is dog.",
            "What are the names of the students that have both cat and dog as pet types?",
            "For students that have pet types of cat and dog, what are their first names?",
            "What are the names of the students that have pets with a type both cat and dog?",
            "Which students do the cat and dog types have? Tell me the names of the students.",
            "What are the names of all students who can fly both the cat and the dog types?",
            "Find the name of the students that have both cat and dog as pet types.",
            "Show the names of students that are friends with both an animal named cat and an animal type named dog.",
            "What are the names of all students that are pets with both cat and dog types?",
            "Find the name of students who have both cat and dog as pet types.",
            "What is the name of the student with both a cat and a dog listed as pets?",
            "Find the name of students who have both cat and dog as pet types.",
            "What are the names of all the students that are in both the cat and dog types?",
            "What are the names of the students who have both cat and dog as pet types?",
            "Find the names of students who have both cat and dog pets.",
            "List the names of the students that are cats and dogs.",
            "What are the first names of the students who have both cat and dog as pets?",
            "For students with both cat as type and dog as type, list its first names.",
            "What are the first names of the students who have cat and dog types?",
            "List the name of the students who have both the cat and the dog types.",
            "List the first names of students that have both a pet of type cat and a pet with type dog.",
            "Find the first names of the students who have cat and dog types.",
            "What are the first names for both cat and dog students?",
            "List the first names of students who have both the cat type and the dog type.",
            "Find the first names of students that have pets of both the cat and dog types.",
            "Which students have both the cat type and the dog type? Give me their first names."
        ],
        "templates": [
            "",
            {
                "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
                "masked_template": "What are the names of the <mask> that <mask> both the <mask> of <mask> and <mask>",
                "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
                "masked_template": "Show names for all <mask> who have <mask> on both <mask> and <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
                "masked_template": "What are the names of any <mask> who <mask> on <mask> named <mask> of <mask> and 'A <mask>",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
                "masked_template": "Find the name of the <mask> who <mask> on both a <mask> named <mask> of <mask> and a <mask> named 'A <mask>",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
                "masked_template": "Find the name of <mask> have <mask> whose <mask> is in <mask> and <mask> in <mask>",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the names of the districts that have both mall and village store style shops?",
                "masked_template": "What are the names of the <mask> that have both <mask> and <mask>",
                "query": "SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'City Mall' INTERSECT SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'Village Store'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
                "masked_template": "For <mask> that have <mask> of <mask> and <mask> what are their <mask>",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
                "masked_template": "What are the names of the <mask> that have <mask> with a <mask> in <mask> and <mask>",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
                "masked_template": "Which <mask> do the <mask> and <mask> me the names of the <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
                "masked_template": "What are the names of all <mask> who can fly both the <mask> and the <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
                "masked_template": "Find the name of the <mask> that <mask> both <mask> and <mask>",
                "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
                "masked_template": "Show the names of <mask> that are <mask> with both an <mask> named <mask> and an <mask> named <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
                "masked_template": "What are the names of all <mask> that are <mask> with both <mask> and <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
                "masked_template": "Find the name of <mask> which have both TV <mask> and <mask> as <mask>",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
                "masked_template": "What is the name of the <mask> with both a TV <mask> and <mask> listed as <mask>",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the name of tracks which are in both Movies and music playlists.",
                "masked_template": "Find the name of <mask> which are in both <mask> and <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
                "masked_template": "What are the names of all the <mask> that are in both the <mask> and <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
                "masked_template": "What are the names of the <mask> which <mask> both <mask> and <mask>",
                "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Guruvayur Express'",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the names of districts where have both city mall and village store type stores.",
                "masked_template": "Find the names of <mask> have both <mask> and <mask>",
                "query": "SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'City Mall' INTERSECT SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'Village Store'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
                "masked_template": "List the names of the <mask> that are <mask> with both <mask> and <mask>",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?",
                "masked_template": "What are the <mask> names of the <mask> both <mask> and <mask>",
                "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
                "masked_template": "For <mask> with both <mask> as <mask> and <mask> as <mask> list its <mask>",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
                "masked_template": "What are the names of the <mask> and <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
                "masked_template": "List the name of the <mask> both the <mask> and the <mask> got <mask>",
                "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
                "masked_template": "List the <mask> of <mask> that <mask> both a <mask> of <mask> with <mask> and a <mask> of <mask> with <mask>",
                "query": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
                "masked_template": "Find the <mask> names of the <mask> who <mask> in <mask> and <mask>",
                "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
                "masked_template": "What are the <mask> for <mask> both <mask> and <mask>",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
                "masked_template": "List the <mask> both the <mask> of <mask> and the <mask> of <mask>",
                "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
                "masked_template": "Find the <mask> of <mask> that <mask> of both the <mask> and <mask>",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
                "masked_template": "Which <mask> have <mask> both the <mask> named <mask> a <mask> and the <mask> named <mask> a <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'New policy application'",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            }
        ],
        "best_hyp": "What is the name of the student with both a cat and a dog listed as pets?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of all students who have both cat and dog as pet types?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 4 AND T3.pettype = 'dog'",
        "proc_query": "( <col> last name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( ( <col> pet age </col> of <tab> pets </tab> ) equal to ( <val> 4 </val> ) ) and ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the last names of all the students who are 4 years old and have a pet of type 'dog'?",
            "What are the last names of students with pet age 4 whose pet count is bigger than 100 and whose type is dog?",
            "Which students have a pet of age 4 or 5? Give me their last names.",
            "Find the last name of the students who are 4 years old and have a pet of type 'dog'.",
            "What are the last names of all students who are 4 years old and have a pet of type 4?",
            "What is the last name of the student who is 4 years old and has a pet of type 4?",
            "Find the last name of the student whose pet is 4 years old and has type \"dog\".",
            "Show all student last names with pet type 4.",
            "What are the last names of all students who are 4 years old and have a pet of type 'dog'?",
            "What are the last names of the students who are 4 years old and have a pet of type 'dog'?",
            "List all last names of students named with pet age 4",
            "What is the last name of the student who is 4 years old and has a pet of type \"dog\"?",
            "Find the last names of students who are 4 years old and have a pet of type 'dog'.",
            "Find the last names of all the students who are 4 years old and have a pet of type 'dog'.",
            "Find all the last names of students who are 4 years old and have a pet of type 'dog'.",
            "List the last name of students who are 4 years old and have a pet of type 'dog'.",
            "What are the last names of all students that are 4 years old and have a pet of type 'dog'?",
            "Which students have a pet with age 4 and type 5? Give me their last names.",
            "What are the last names of students who are 4 years old and have a pet of type 4?",
            "What is the last name of student for the oldest student named 4 and the youngest student named 5?",
            "Which student does the student with pet name 4 live in the apartment with pet type \"A Bar in the Park\"?",
            "What is the last name of the student named 4 and the pet type is 'dog'?",
            "What are the last names of students that the pet with the age of 4 and pet type is a dog?",
            "What is the last name of the student who has a pet of age 4 and pet type is a dog?",
            "Show the last names of all the students who are 4 years old and have a pet of type 'dog'.",
            "What are the last names of the students who are 4 years old and have a pet of type 'dog'?",
            "What are the last names of students in the fourth grade named with pet type 4 that can serve as an aide?",
            "Which student has a pet of age 4? Give me the last name of the student.",
            "What are the last names of the students in the fourth grade that have pet as age 4?",
            "What are the last names of students that the pet with the age 4 name is in?",
            "List the last name of students who are 4 years old and have a pet of type 'dog'."
        ],
        "templates": [
            "",
            {
                "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
                "masked_template": "What are the lot <mask> of <mask> with <mask> whose <mask> count is <mask> than 100 and whose <mask> is <mask>",
                "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = 'PUR'",
                "ted": 0.020833333333333332,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Which papers have \"Stephanie Weirich\" as an author?",
                "masked_template": "Which <mask> have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
                "masked_template": "Find the <mask> of the <mask> the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the first names of all students who took ACCT-211 and received a C?",
                "masked_template": "What are the <mask> names of all <mask> who <mask> and <mask> a C?",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
                "ted": 0.04,
                "db_id": "college_1"
            },
            {
                "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
                "masked_template": "What is the <mask> name of <mask> in <mask> and got <mask> C?",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
                "ted": 0.04,
                "db_id": "college_1"
            },
            {
                "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
                "masked_template": "Find the <mask> of the <mask> Cup <mask> which was <mask> by <mask> ( <mask> )\".",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.04,
                "db_id": "city_record"
            },
            {
                "question": "Show all game names played by Linda Smith",
                "masked_template": "Show all <mask> names <mask> by <mask>",
                "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
                "ted": 0.04,
                "db_id": "game_1"
            },
            {
                "question": "What are the names of all games played by Linda Smith?",
                "masked_template": "What are the names of all <mask> by <mask>",
                "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
                "ted": 0.04,
                "db_id": "game_1"
            },
            {
                "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
                "masked_template": "What are the names of the <mask> of the <mask> that have the <mask>",
                "query": "SELECT T3.characteristic_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id JOIN CHARACTERISTICS AS T3 ON T2.characteristic_id = T3.characteristic_id WHERE T1.product_name = 'sesame' AND T3.characteristic_type_code = 'Grade'",
                "ted": 0.04,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
                "masked_template": "List all <mask> of <mask> named <mask> with <mask>",
                "query": "SELECT T3.characteristic_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id JOIN CHARACTERISTICS AS T3 ON T2.characteristic_id = T3.characteristic_id WHERE T1.product_name = 'sesame' AND T3.characteristic_type_code = 'Grade'",
                "ted": 0.04,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
                "masked_template": "What is the <mask> of the <mask> Cup <mask> by <mask> ( <mask> )\"?",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.04,
                "db_id": "city_record"
            },
            {
                "question": "Find the papers which have \"Olin Shivers\" as an author.",
                "masked_template": "Find the <mask> which have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the titles of all the papers written by \"Aaron Turon\".",
                "masked_template": "Find the <mask> of all the <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Aaron' AND T1.lname = 'Turon'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "Find all the papers published by \"Aaron Turon\".",
                "masked_template": "Find all the <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Aaron' AND T1.lname = 'Turon'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> and whose <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file'",
                "ted": 0.04,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
                "masked_template": "What are the names of all <mask> that are <mask> on <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file'",
                "ted": 0.04,
                "db_id": "store_1"
            },
            {
                "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
                "masked_template": "Which <mask> did the <mask> me the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
                "masked_template": "What are the <mask> of <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Jeremy' AND T1.lname = 'Gibbons'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
                "masked_template": "What is the <mask> of <mask> for the <mask> named <mask> and the <mask> named <mask>",
                "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
                "masked_template": "What is the <mask> of the <mask> named <mask> and the <mask> named <mask>",
                "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
                "masked_template": "What are the <mask> of <mask> that the <mask> with the <mask> name <mask> in the <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
                "masked_template": "<mask> did the web <mask> and <mask>",
                "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'",
                "ted": 0.04,
                "db_id": "browser_web"
            },
            {
                "question": "Show the names of all the activities Mark Giuliano participates in.",
                "masked_template": "Show the names of all the <mask> in.",
                "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
                "ted": 0.04,
                "db_id": "activity_1"
            },
            {
                "question": "What are the names of the activities Mark Giuliano is involved in",
                "masked_template": "What are the names of the <mask> is <mask> in",
                "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
                "ted": 0.04,
                "db_id": "activity_1"
            },
            {
                "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
                "masked_template": "What are the names of <mask> in the <mask> named <mask> that can <mask> as an <mask>",
                "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = 'Heilo' AND T2.title = 'Der Kapitan'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
                "masked_template": "What are the names of the <mask> in the <mask> that <mask> as <mask>",
                "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
                "masked_template": "What are the <mask> of <mask> that the <mask> with the <mask> name <mask> in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = 'Heilo' AND T2.title = 'Der Kapitan'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> or <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.06,
                "db_id": "store_1"
            }
        ],
        "best_hyp": "What are the last names of all students who are 4 years old and have a pet of type 4?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the last names of all the students who are 4 years old and have a pet of type 'dog'?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "proc_query": "( <col> first name </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) , ( <col> size code </col> of <tab> dogs </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first name, last name, and size of the dogs owned by each owner?",
            "Show first and last names of owners and names of their dogs.",
            "Show the first name, last name, and the name of the dogs that they belong to.",
            "For each owner, what are their first and last names, and what are the sizes of their dogs?",
            "Who are the different owners, what kind of pets do they have, and what is the name of the pet they are on?",
            "Show the first name and last name and the size of all dogs.",
            "Show the name and size for each owner and its pet.",
            "What is the full name and size code of the owner of each pet?",
            "What are the full names and sizes of the dogs owned by each owner?",
            "Show the first name, last name, and size of all the dogs.",
            "What are the full names and sizes of the dogs owned by each owner?",
            "What are the full names and sizes of the dogs owned by each owner?",
            "Show the first name and last name for each owner.",
            "What is each owner's first name, last name, and the size of their dogs?",
            "List the first and last name of each owner and the size of the dogs that they have.",
            "What are the names and sizes of owners and the names of the dogs they have?",
            "Return the full names and sizes of dogs for each owner.",
            "What is the first name and the last name and size for all the dogs?",
            "Return the first name and last name ids for owners with dogs.",
            "Show first name and order id and size for all dogs.",
            "What are the full names and sizes of all dogs?",
            "Show first name, last name, and size for all dogs.",
            "What are the full names and order codes for all dogs?",
            "Show the full name and size code for all dogs with any owner.",
            "What are the distinct first names and last names for owners with dogs?"
        ],
        "templates": [
            "",
            {
                "question": "Show codes and fates of missions, and names of ships involved.",
                "masked_template": "Show <mask> and <mask> of <mask> and names of <mask>",
                "query": "SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show the season, the player, and the name of the country that player belongs to.",
                "masked_template": "Show the <mask> the <mask> and the name of the <mask> that <mask> to.",
                "query": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "For each player, what are their name, season, and country that they belong to?",
                "masked_template": "For each <mask> what are their <mask> and <mask> that <mask> to?",
                "query": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
                "masked_template": "Who are the different <mask> what <mask> do <mask> in, and what is the name of the <mask> are on?",
                "query": "SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the budget type code and description and the corresponding document id.",
                "masked_template": "Show the <mask> and <mask> and the <mask> id.",
                "query": "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show the name and date for each race and its track name.",
                "masked_template": "Show the name and <mask> for each <mask> and its <mask>",
                "query": "SELECT T1.name , T1.date , T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
                "masked_template": "Wat is the tax <mask> and <mask> id of the <mask> to each <mask> id?",
                "query": "SELECT T1.source_system_code , T1.master_customer_id , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the guest first name, start date, and end date of each apartment booking?",
                "masked_template": "What are the <mask> and end <mask> of each <mask>",
                "query": "SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.",
                "masked_template": "Show the <mask> and end <mask> of all the <mask>",
                "query": "SELECT T2.guest_first_name , T1.booking_start_date , T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are the department names, cities, and state provinces for each department?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the mission codes, fates, and names of the ships involved?",
                "masked_template": "What are the <mask> and names of the <mask>",
                "query": "SELECT T1.Code , T1.Fate , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "display the department name, city, and state province for each department.",
                "masked_template": "<mask> the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.department_name , T2.city , T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What is each customer's move in date, and the corresponding customer id and details?",
                "masked_template": "What is each <mask> in <mask> and the <mask> id and <mask>",
                "query": "SELECT T2.date_moved_in , T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "List the id and type of each thing, and the details of the organization that owns it.",
                "masked_template": "List the id and <mask> of each <mask> and the <mask> of the <mask> that <mask> it.",
                "query": "SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What are the names and dates of races, and the names of the tracks where they are held?",
                "masked_template": "What are the names and <mask> of <mask> and the names of the <mask> are <mask>",
                "query": "SELECT T1.name , T1.date , T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Return the type name, type description, and date of creation for each document.",
                "masked_template": "Return the <mask> and <mask> of <mask> for each <mask>",
                "query": "SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What is the document type name and the document type description and creation date for all the documents?",
                "masked_template": "What is the <mask> name and the <mask> and <mask> for all the <mask>",
                "query": "SELECT T1.document_type_name , T1.document_type_description , T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
                "masked_template": "Return the <mask> and <mask> ids for <mask> with <mask>",
                "query": "SELECT T2.budget_type_code , T2.budget_type_description , T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show invoice dates and order id and details for all invoices.",
                "masked_template": "Show <mask> and order id and <mask> for all <mask>",
                "query": "SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the statement ids, statement details, and account details, for all accounts?",
                "masked_template": "What are the <mask> and <mask> for all <mask>",
                "query": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show statement id, statement detail, account detail for accounts.",
                "masked_template": "Show <mask> id, <mask> for <mask>",
                "query": "SELECT T1.statement_id , T2.statement_details , T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the invoice dates, order ids, and order details for all invoices?",
                "masked_template": "What are the <mask> order <mask> and order <mask> for all <mask>",
                "query": "SELECT T1.invoice_date , T1.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
                "masked_template": "Show the <mask> and <mask> numbers for all <mask> with any <mask>",
                "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.07142857142857142,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
                "masked_template": "What are the distinct <mask> and <mask> numbers for <mask> with <mask>",
                "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name , T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.07142857142857142,
                "db_id": "customers_and_invoices"
            }
        ],
        "best_hyp": "What is the first name and the last name and size for all the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first name, last name, and size of the dogs owned by each owner?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum( T3.cost_of_treatment ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> owners </tab> ) , ( <col> zip code </col> of <tab> owners </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> dog id </col> of <tab> dogs </tab> ) equal to ( <col> dog id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> owners </tab> ) , ordered by ( ( the sum of ( <col> cost of treatment </col> of <tab> treatments </tab> ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id and zip code of the owner who has the most expensive treatments?",
            "What are the name and zip code of the owner with the most expensive treatment?",
            "Show the id and the zip code of the owner who has the most number of treatments.",
            "Find the id and name of the owner who paid the greatest number of treatments?",
            "Which owner paid the most number of times to treat his or her dog? List owner id and zip code.",
            "Find the id and zip code of the owner who treats the most number of dogs.",
            "What are the ids and zip codes of all owners who are involved in the most expensive treatments?",
            "Return the id and zip code of the owner that is in charge of the most expensive treatment.",
            "What are the id and name of the owner who has the most expensive treatments?",
            "What is the id and zip code of the owner in the country which was involved in the most expensive treatment?",
            "For each owner id, what is the zip code of the city that is associated with the most number of treatments?",
            "What is the name and zip code of the owner with the highest cost of treatments?",
            "Find the name and zip code of the owner with least number of treatments.",
            "Which owner has the most expensive treatment of all dogs?",
            "What is the name of the owner that has the most expensive treatments?",
            "Tell me the name of the owner who ordered the most expensive treatment in record.",
            "Find the name of the owner that provided the greatest number of treatments of all dogs."
        ],
        "templates": [
            "",
            {
                "question": "What are the name and phone of the customer with the most ordered product quantity?",
                "masked_template": "What are the name and <mask> of the <mask> with the most ordered <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum( T3.order_quantity ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
                "masked_template": "Show the <mask> and the id of the <mask> in most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
                "masked_template": "Find the id and name of the <mask> the <mask> number of <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "game_injury"
            },
            {
                "question": "Which part fault requires the most number of skills to fix? List part id and name.",
                "masked_template": "Which <mask> the most number of <mask> to <mask> List <mask> id and <mask>",
                "query": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Find the id and surname of the driver who participated the most number of races?",
                "masked_template": "Find the id and <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "formula_1"
            },
            {
                "question": "What are the ids and last names of all drivers who participated in the most races?",
                "masked_template": "What are the ids and <mask> names of all <mask> who <mask> in the most <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "formula_1"
            },
            {
                "question": "Return the title and inventory id of the film that is rented most often.",
                "masked_template": "Return the <mask> and <mask> id of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "sakila_1"
            },
            {
                "question": "What are the id and name of the stadium where the most injury accidents happened?",
                "masked_template": "What are the id and name of the <mask> the most <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "game_injury"
            },
            {
                "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
                "masked_template": "What is the <mask> and <mask> id of the <mask> in the <mask> which was <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "sakila_1"
            },
            {
                "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
                "masked_template": "For each <mask> id, what is the <mask> of the <mask> that is <mask> with the most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
                "masked_template": "What is the name and <mask> of the <mask> with the <mask> of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.041666666666666664,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the name and capacity of the dorm with least number of amenities.",
                "masked_template": "Find the name and <mask> of the <mask> with least number of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.041666666666666664,
                "db_id": "dorm_1"
            },
            {
                "question": "Which department offers the most credits all together?",
                "masked_template": "Which <mask> the most <mask> all <mask>",
                "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum( T1.crs_credit ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "college_1"
            },
            {
                "question": "What is the name of the customer that has purchased the most items?",
                "masked_template": "What is the name of the <mask> that has <mask> the most <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_name ORDER BY sum( T3.order_quantity ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Give me the name of the customer who ordered the most items in total.",
                "masked_template": "<mask> me the name of the <mask> who ordered the most <mask> in <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_name ORDER BY sum( T3.order_quantity ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the name of the department that offers the largest number of credits of all classes.",
                "masked_template": "Find the name of the <mask> that <mask> the <mask> number of <mask> of all <mask>",
                "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY sum( T1.crs_credit ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "college_1"
            }
        ],
        "best_hyp": "Find the name and zip code of the owner with least number of treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id and zip code of the owner who has the most expensive treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( DISTINCT pettype ) FROM pets",
        "proc_query": "( the number of ( distinct ( ( <col> pet type </col> ) ) ) ) that belongs to ( <tab> pets </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many different pet types exist?",
            "How many different pet types have had pets?",
            "How many distinct pet types are there?",
            "How many different types of pets are there?",
            "What are the types of pets in the database?",
            "How many pet types are there?",
            "How many different pet types exist?",
            "How many different pet types exist?",
            "Count the number of distinct pet types.",
            "How many distinct pet types are there for all pets?",
            "How many different pet types do we have?",
            "Find the pet types.",
            "How many different pet types are there?",
            "What is the number of distinct pet types the pets are at?",
            "How many different pet types exist?",
            "Count the number of different pet types.",
            "Find the number of distinct pet types in our record.",
            "Show the number of pet types.",
            "Find the number of distinct pet types.",
            "Count the number of pet types who have had pets.",
            "How many different types of pet do we have?",
            "How many different pet types exist?",
            "How many distinct pet types are there?",
            "Count the number of different pet types that are there.",
            "How many different pet types are there?",
            "How many different pet types do we have?",
            "What is the count of distinct pet types?",
            "How many distinct pet types exist?",
            "How many distinct pet types are there?",
            "How many different pet types are there?",
            "Count the number of different pet types."
        ],
        "templates": [
            "",
            {
                "question": "How many different teams have had eliminated wrestlers?",
                "masked_template": "How many different <mask> have had <mask>",
                "query": "SELECT COUNT( DISTINCT team ) FROM elimination",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "How many distinct governors are there?",
                "masked_template": "How many distinct <mask> are <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many different types of rooms are there?",
                "masked_template": "How many different <mask> of <mask> are <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the unique types of player positions in the tryout?",
                "masked_template": "What are the <mask> of <mask> in the <mask>",
                "query": "SELECT count( DISTINCT pPos ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many allergies are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( DISTINCT allergy ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different allergy types exist?",
                "masked_template": "How many different <mask>",
                "query": "SELECT count( DISTINCT allergytype ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different colleges were represented at tryouts?",
                "masked_template": "How many different <mask> at <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of distinct governors.",
                "masked_template": "Count the number of distinct <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many distinct currency codes are there for all drama workshop groups?",
                "masked_template": "How many distinct <mask> are there for all <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "How many different colleges do attend the tryout test?",
                "masked_template": "How many different <mask> do <mask> the <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "masked_template": "<mask> the <mask> find the number of <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different bike ids are there?",
                "masked_template": "How many different <mask> ids are <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "masked_template": "What is the number of distinct <mask> the <mask> are <mask> at?",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different cities have these stations?",
                "masked_template": "How many different <mask> have <mask>",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Count the number of different affected regions.",
                "masked_template": "Count the number of different <mask>",
                "query": "SELECT count( DISTINCT region_id ) FROM affected_region",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Find the number of distinct currency codes used in drama workshop groups.",
                "masked_template": "Find the number of distinct <mask> in <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show the number of transaction types.",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( DISTINCT transaction_type ) FROM Financial_Transactions",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the number of distinct room types available.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Count the number of artists who have had volumes.",
                "masked_template": "Count the number of <mask> who have had <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many different types of sports do we offer?",
                "masked_template": "How many different <mask> of <mask> do we <mask>",
                "query": "SELECT count( DISTINCT sportname ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many students play sports?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many distinct countries are the climbers from?",
                "masked_template": "How many distinct <mask> are the <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of different countries that climbers are from.",
                "masked_template": "Count the number of different <mask> that <mask> are <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "How many different students are involved in sports?",
                "masked_template": "How many different <mask> are <mask> in <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many different levels do members have?",
                "masked_template": "How many different <mask> do <mask>",
                "query": "SELECT count( DISTINCT LEVEL ) FROM member",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "masked_template": "What is the count of distinct <mask> with <mask>",
                "query": "SELECT count( DISTINCT eid ) FROM Certificate",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "How many distinct artists have volumes?",
                "masked_template": "How many distinct <mask> have <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many distinct payment methods are used by parties?",
                "masked_template": "How many distinct <mask> are <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "How many different countries are all the swimmers from?",
                "masked_template": "How many different <mask> are all the <mask>",
                "query": "SELECT count( DISTINCT nationality ) FROM swimmer",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Count the number of different payment method codes used by parties.",
                "masked_template": "Count the number of different <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            }
        ],
        "best_hyp": "How many different pet types do we have?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many different pet types exist?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 19",
        "proc_query": "( the number of ( all items ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> age </col> of <tab> student </tab> ) greater than ( <val> 19 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many students are older than 19?",
            "What are the total pet numbers for students aged above 6?",
            "How many pets does the student with id 171 have?",
            "How many pet do the students whose id is 171 have?",
            "What is the total number of pet for students with age above 6?",
            "What is the total number of pets of the students with age more than 19?",
            "Count the total number of pet owned by students who are older than 19",
            "What is the total number of pets owned by students with age more than 19?",
            "What is the average total number of pet owners for students older than 19?",
            "What is the average number of pets of students with low age than 19?",
            "Count the number of students that had a pet younger than 19.",
            "How many distinct students have pet of age above 19?",
            "How many distinct students are older than 19?",
            "Count the number of distinct students who are older than 19",
            "Show the number of students with more than 4 pet.",
            "What are the numbers of students at age 19 related to pets that are more than 2 years old on average?",
            "Show the number of pets of the students that are older than 2 on average",
            "What are the names of students that are older than 19?",
            "Count the number of students who have a pet of age above 19.",
            "What are the numbers of students who are older than 19?",
            "Find the the name of the students who have a pet with age more than 19",
            "Show the number of students with pet having age greater than 19",
            "What are the numbers of students that have pet with age above 19?",
            "What are the names of students who have a pet of more than 19 years old?",
            "Which students have pet that have more than two years old? Tell me the count of the students.",
            "Show number of all students if any student with pet count greater than 19",
            "What are the names of students whose total pet ownership is older than 19?",
            "What are the numbers of students with pet older than 19?",
            "What are the names of students with more than 19 years old pet?",
            "What are the names of the students with more than 19 years old pet?",
            "Find the number of pets for the students with age above 19"
        ],
        "templates": [
            "",
            {
                "question": "What are the total purchases for members rated at level 6?",
                "masked_template": "What are the total <mask> for <mask> at <mask> 6?",
                "query": "SELECT count( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6",
                "ted": 0.03571428571428571,
                "db_id": "shop_membership"
            },
            {
                "question": "How many courses does the student with id 171 actually attend?",
                "masked_template": "How many <mask> the <mask> with id 171 <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
                "ted": 0.03571428571428571,
                "db_id": "student_assessment"
            },
            {
                "question": "How many courses do the student whose id is 171 attend?",
                "masked_template": "How many <mask> do the <mask> whose id is 171 <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
                "ted": 0.03571428571428571,
                "db_id": "student_assessment"
            },
            {
                "question": "What is the total number of purchases for members with level 6?",
                "masked_template": "What is the total number of <mask> for <mask> with <mask> 6?",
                "query": "SELECT count( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6",
                "ted": 0.03571428571428571,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the total kills of the perpetrators with height more than 1.84.",
                "masked_template": "What is the total <mask> of the <mask> with <mask> more than <mask>",
                "query": "SELECT sum( T2.Killed ) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
                "ted": 0.03571428571428571,
                "db_id": "perpetrator"
            },
            {
                "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
                "masked_template": "<mask> the total <mask> by <mask> who are <mask> than <mask>",
                "query": "SELECT sum( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
                "ted": 0.03571428571428571,
                "db_id": "entrepreneur"
            },
            {
                "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
                "masked_template": "What is the total <mask> by <mask> with <mask> more than <mask>",
                "query": "SELECT sum( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
                "ted": 0.03571428571428571,
                "db_id": "entrepreneur"
            },
            {
                "question": "What is the average total score of body builders with height bigger than 200?",
                "masked_template": "What is the average total <mask> of <mask> with <mask> than <mask>",
                "query": "SELECT avg( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
                "ted": 0.03571428571428571,
                "db_id": "body_builder"
            },
            {
                "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
                "masked_template": "What is the average number of <mask> of <mask> with low <mask> than <mask>",
                "query": "SELECT avg( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
                "ted": 0.03571428571428571,
                "db_id": "film_rank"
            },
            {
                "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
                "masked_template": "<mask> the average number of <mask> that had a low <mask> than <mask>",
                "query": "SELECT avg( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
                "ted": 0.03571428571428571,
                "db_id": "film_rank"
            },
            {
                "question": "How many distinct kinds of injuries happened after season 2010?",
                "masked_template": "How many distinct <mask> of <mask>",
                "query": "SELECT count( DISTINCT T1.injury ) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
                "ted": 0.06666666666666667,
                "db_id": "game_injury"
            },
            {
                "question": "How many distinct delegates are from counties with population larger than 50000?",
                "masked_template": "How many distinct <mask> are <mask> with <mask> than <mask>",
                "query": "SELECT count( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
                "ted": 0.06666666666666667,
                "db_id": "election"
            },
            {
                "question": "Count the number of distinct delegates who are from counties with population above 50000.",
                "masked_template": "Count the number of distinct <mask> who are <mask> with <mask>",
                "query": "SELECT count( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
                "ted": 0.06666666666666667,
                "db_id": "election"
            },
            {
                "question": "Show the facility codes of apartments with more than 4 bedrooms.",
                "masked_template": "Show the <mask> of <mask> with more than 4 <mask>",
                "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
                "masked_template": "What are the <mask> of <mask> at <mask> to <mask> that <mask> more than 2 <mask> on <mask>",
                "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.07142857142857142,
                "db_id": "music_4"
            },
            {
                "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
                "masked_template": "<mask> show the <mask> of <mask> of the <mask> that <mask> more than 2 <mask> on <mask>",
                "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.07142857142857142,
                "db_id": "music_4"
            },
            {
                "question": "What are the names of ships that were involved in a mission launched after 1928?",
                "masked_template": "What are the names of <mask> that <mask> in a <mask>",
                "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
                "ted": 0.07142857142857142,
                "db_id": "ship_mission"
            },
            {
                "question": "Show names of ships involved in a mission launched after 1928.",
                "masked_template": "Show names of <mask> in a <mask>",
                "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
                "ted": 0.07142857142857142,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the star rating descriptions of the hotels with price above 10000?",
                "masked_template": "What are the <mask> of the <mask> with <mask>",
                "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
                "ted": 0.07142857142857142,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the the name of the customers who have a loan with amount more than 3000.",
                "masked_template": "Find the the name of the <mask> who have a <mask> with <mask> more than <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
                "ted": 0.07142857142857142,
                "db_id": "loan_1"
            },
            {
                "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
                "masked_template": "<mask> show the <mask> of <mask> with <mask> having <mask> than <mask>",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
                "ted": 0.07142857142857142,
                "db_id": "farm"
            },
            {
                "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
                "masked_template": "What are the <mask> of <mask> that have <mask> with more than <mask>",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
                "ted": 0.07142857142857142,
                "db_id": "farm"
            },
            {
                "question": "What are the names of customers who have a loan of more than 3000 in amount?",
                "masked_template": "What are the names of <mask> who have a <mask> of more than <mask> in <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
                "ted": 0.07142857142857142,
                "db_id": "loan_1"
            },
            {
                "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
                "masked_template": "Which <mask> have <mask> that have more than two <mask> me the <mask> of the <mask>",
                "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show details of all investors if they make any transaction with share count greater than 100.",
                "masked_template": "Show <mask> of all <mask> if <mask> any <mask> with <mask> count <mask> than <mask>",
                "query": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100",
                "ted": 0.07142857142857142,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names of body builders whose total score is higher than 300?",
                "masked_template": "What are the names of <mask> whose total <mask> is <mask> than <mask>",
                "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
                "ted": 0.07142857142857142,
                "db_id": "body_builder"
            },
            {
                "question": "What are the purchase details of transactions with amount bigger than 10000?",
                "masked_template": "What are the <mask> of <mask> with <mask> than <mask>",
                "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
                "ted": 0.07142857142857142,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names of representatives with more than 10000 votes in election?",
                "masked_template": "What are the names of <mask> with more than <mask> in <mask>",
                "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
                "ted": 0.07142857142857142,
                "db_id": "election_representative"
            },
            {
                "question": "What are the facility codes of the apartments with more than four bedrooms?",
                "masked_template": "What are the <mask> of the <mask> with more than <mask>",
                "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Find the order detail for the products with price above 2000.",
                "masked_template": "Find the order <mask> for the <mask> with <mask>",
                "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000",
                "ted": 0.07142857142857142,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "Find the the name of the students who have a pet with age more than 19",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many students are older than 19?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "proc_query": "( <col> state </col> ) that belongs to ( <tab> owners </tab> ), and intersect with ( ( <col> state </col> ) that belongs to ( <tab> professionals </tab> ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show the states that have both owners and professionals.",
            "Find the name of states where both owners and professionals live.",
            "What are ids of the states that not only have an owner but also a manager?",
            "Show the ids of all the states where owners live in an apartment and professionals live in a building",
            "Show ids of states where owners and professionals live.",
            "What are the ids of all states that have both owners and professionals?",
            "What are the states that are shared by owners and professionals?",
            "Which states are both shared by owners and by professionals?",
            "What are the states that have both owners and professionals?",
            "What are the names of all states that have both owners and professionals?",
            "Which states do not have any owners? Tell me their states.",
            "Show the ids of the states that have both owners and professionals.",
            "What are the ids of states that have both owners and professionals?",
            "Which states do not have any owners? Find their states.",
            "Find the id of states that have both owners and professionals.",
            "Find the name of all the states that have both owners and professionals.",
            "Show states that have both owners and professionals.",
            "What are the ids of all states that have both owners and professionals?",
            "What are the ids of all states that have both owners and professionals?",
            "Show the ids of all states that have both owners and professionals.",
            "Which states do not have any professionals? Find their states.",
            "Show the ids of all states who have either a owner or an employee to do business",
            "Which states have either a company or an owner to do so? Return their states.",
            "Find the id of the states that do not have any professionals.",
            "What are the names of all the states that have both owners and professionals?",
            "Show the ids of the states that have both owners and professionals.",
            "What are the names of all states that have both owners and professionals?",
            "What are the ids of the states that have both owners and professionals?",
            "What are the ids of states that have both owners and professionals?",
            "Show ids for all states that have both owners and professionals.",
            "Return all owners names and corresponding state names in a single state"
        ],
        "templates": [
            "",
            {
                "question": "Find the common personal name of course authors and students.",
                "masked_template": "Find the <mask> name of <mask> and <mask>",
                "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
                "masked_template": "What are ids of the <mask> who not <mask> in an <mask> but <mask> a <mask>",
                "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
                "masked_template": "Show the ids of all the <mask> who <mask> in an <mask> and <mask> a <mask>",
                "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show ids of students who play video game and play sports.",
                "masked_template": "Show ids of <mask> who <mask> and <mask>",
                "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who played video games and sports?",
                "masked_template": "What are the ids of all <mask> who <mask> and <mask>",
                "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the last names that are used by customers and staff?",
                "masked_template": "What are the <mask> names that are <mask> by <mask> and <mask>",
                "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Which last names are both used by customers and by staff?",
                "masked_template": "Which <mask> names are both <mask> by <mask> and by <mask>",
                "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the personal names used both by some course authors and some students?",
                "masked_template": "What are the <mask> names <mask> both by <mask> and <mask>",
                "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names of all cities and states?",
                "masked_template": "What are the names of all <mask> and <mask>",
                "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
                "masked_template": "Which <mask> do not <mask> for any <mask> me their <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids of the employees who don't authorize destruction for any document.",
                "masked_template": "Show the ids of the <mask> who <mask> for any <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids of instructors who didnt' teach?",
                "masked_template": "What are the ids of <mask> who <mask>",
                "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Which faculty do not participate in any activity? Find their faculty ids.",
                "masked_template": "Which <mask> do not <mask> in any <mask> Find their <mask>",
                "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "Find the id of instructors who didn't teach any courses?",
                "masked_template": "Find the id of <mask> who <mask> any <mask>",
                "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Find the name of all the cities and states.",
                "masked_template": "Find the name of all the <mask> and <mask>",
                "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "Show ids of students who don't play video game.",
                "masked_template": "Show ids of <mask> who <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who don't play sports?",
                "masked_template": "What are the ids of all <mask> who <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who are not video game players?",
                "masked_template": "What are the ids of all <mask> who are not <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "Show the ids of all employees who don't destroy any document.",
                "masked_template": "Show the ids of all <mask> who <mask> any <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which employees do not destroy any document? Find their employee ids.",
                "masked_template": "Which <mask> do not <mask> any <mask> Find their <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
                "masked_template": "Show the ids of all <mask> who have <mask> a <mask> or <mask> an <mask> to do <mask>",
                "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
                "masked_template": "Which <mask> have <mask> a <mask> or <mask> an <mask> to do so? Return their <mask>",
                "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Find the id of the courses that do not have any prerequisite?",
                "masked_template": "Find the id of the <mask> that do not have any <mask>",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of all the reviewers and movie names?",
                "masked_template": "What are the names of all the <mask> and <mask>",
                "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                "ted": 0.05555555555555555,
                "db_id": "movie_1"
            },
            {
                "question": "Show the ids of the students who don't participate in any activity.",
                "masked_template": "Show the ids of the <mask> who <mask> in any <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "What are the names of all people who do not have friends?",
                "masked_template": "What are the names of all <mask> who do not have <mask>",
                "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                "ted": 0.05555555555555555,
                "db_id": "network_2"
            },
            {
                "question": "What are the ids of the students who are not involved in any activity",
                "masked_template": "What are the ids of the <mask> who are not <mask> in any <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "What are the ids of courses without prerequisites?",
                "masked_template": "What are the ids of <mask>",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Show ids for all employees who don't have a certificate.",
                "masked_template": "Show ids for all <mask> who <mask> have a <mask>",
                "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "Return all reviewer names and movie names together in a single list.",
                "masked_template": "Return all <mask> names and <mask> names <mask> in a <mask>",
                "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                "ted": 0.05555555555555555,
                "db_id": "movie_1"
            }
        ],
        "best_hyp": "What are the states that are shared by owners and professionals?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show the states that have both owners and professionals.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
        "proc_query": "( <col> pet type </col> ) , ( <col> weight </col> ) that belongs to ( <tab> pets </tab> ) , ordered by ( ( <col> pet age </col> ) ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the pet type and weight of the youngest pet?",
            "Find the pet type and weight of the youngest pet.",
            "What are the pet type and weight for the pet which was born the oldest?",
            "Show the pet type and weight of the youngest pet.",
            "what are the pet type and weight of the youngest pet?",
            "Find the pet type and weight for the pet with the oldest age.",
            "What is the pet type and weight for the pet with the oldest age?",
            "Tell me the pet type and end weight for the pet with the oldest id.",
            "Find the id and weight of the pet with the oldest age.",
            "Show the pet type and weight of the smallest pet.",
            "What are the pet type and weight of the youngest pet?",
            "What are the pet type and weight of the pet with the oldest age?",
            "What is the pet type and weight of the youngest pet?",
            "What is the pet type and its weight?",
            "Find the pet type and its weight.",
            "Among all the pet types, what is the pet type in the pet with the least age? List both the type and weight.",
            "Find the name and weight of the pet with the least number of years old.",
            "Find the pet type in the pet with the least age. Show both the type and weight.",
            "Which pet type has the oldest pet? List the pet type name and the weight.",
            "What are the pet type and weight of the pet with the oldest age?",
            "Which pet type has the oldest pet? List the pet type name and its weight.",
            "Which pet type has the least amount of age? List the pet type name and the weight of the pet.",
            "Which pet type has the least age? List the pet type id and weight.",
            "What are the pet type and weight of the pet with the oldest age?",
            "What are the pet type and weight of the pet with the oldest age?",
            "List top 10 pet types in the pet record List pet type and weight",
            "Find the pet type and weight of the youngest pet.",
            "What is the pet type and weight of the youngest pet?",
            "What is the pet type with the oldest age? Return the pet types and its weight.",
            "What is the id and name of the pet type that can reach the maximum age?",
            "Show the id and name of the pet type with the maximum age."
        ],
        "templates": [
            "",
            {
                "question": "Select the name and price of the cheapest product.",
                "masked_template": "<mask> the name and <mask> of the <mask>",
                "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
                "masked_template": "What are the <mask> and <mask> for the <mask> which was <mask> the <mask>",
                "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "Show the enrollment and primary_conference of the oldest college.",
                "masked_template": "Show the <mask> and <mask> of the <mask>",
                "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "what are the order id and customer id of the oldest order?",
                "masked_template": "what are the order id and <mask> id of the <mask>",
                "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the order id and customer id associated with the oldest order.",
                "masked_template": "Find the order id and <mask> id <mask> with the <mask>",
                "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "What is the station station and end station for the trips with the three smallest ids?",
                "masked_template": "What is the <mask> and end <mask> for the <mask> with the <mask>",
                "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Give me the start station and end station for the trips with the three oldest id.",
                "masked_template": "<mask> me the <mask> and end <mask> for the <mask> with the <mask> id.",
                "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Give the id and product type of the product with the lowest price.",
                "masked_template": "<mask> the id and <mask> of the <mask> with the <mask>",
                "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Show the details and star ratings of the 3 least expensive hotels.",
                "masked_template": "Show the <mask> and <mask> of the 3 least <mask>",
                "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the product id and product type of the cheapest product?",
                "masked_template": "What are the <mask> id and <mask> of the <mask>",
                "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the room name and base price of the room with the lowest base price?",
                "masked_template": "What are the <mask> name and <mask> of the <mask> with the <mask>",
                "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What is the name and price of the cheapest product?",
                "masked_template": "What is the name and <mask> of the <mask>",
                "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What is the oldest log id and its corresponding problem id?",
                "masked_template": "What is the <mask> log id and its <mask> id?",
                "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "Find the oldest log id and its corresponding problem id.",
                "masked_template": "Find the <mask> log id and its <mask> id.",
                "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
                "masked_template": "<mask> all the <mask> what is the <mask> in the <mask> with the least <mask> List both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the name and email of the user followed by the least number of people.",
                "masked_template": "Find the name and <mask> of the <mask> by the least number of <mask>",
                "query": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
                "masked_template": "Find the <mask> in the <mask> with the least <mask> Show both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Which room has cheapest base price? List the room's name and the base price.",
                "masked_template": "Which <mask> has <mask> List the <mask> name and the <mask>",
                "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the <mask>",
                "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
                "masked_template": "Which <mask> has the <mask> list the <mask> name and its <mask>",
                "query": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
                "masked_template": "Which <mask> has the least <mask> of <mask> List the <mask> name and the <mask> of <mask>",
                "query": "SELECT Model_name , RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_1"
            },
            {
                "question": "Which part has the least chargeable amount? List the part id and amount.",
                "masked_template": "Which <mask> has the least <mask> List the <mask> id and <mask>",
                "query": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the first and last names of the employee with the earliest date of birth?",
                "masked_template": "What are the <mask> and <mask> names of the <mask> with the <mask> of <mask>",
                "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first and last names of the top 10 longest-serving employees?",
                "masked_template": "What are the <mask> and <mask> names of the top 10 <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "List top 10 employee work longest in the company. List employee's first and last name.",
                "masked_template": "List top 10 <mask> in the <mask> List <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name and component amount of the least popular furniture.",
                "masked_template": "Find the name and <mask> of the least <mask>",
                "query": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "What is the first and last name of the oldest employee?",
                "masked_template": "What is the <mask> and <mask> name of the <mask>",
                "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the city with the smallest GDP? Return the city and its GDP.",
                "masked_template": "What is the <mask> with the <mask> Return the <mask> and its <mask>",
                "query": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What is the id and name of the aircraft that can cover the maximum distance?",
                "masked_template": "What is the id and name of the <mask> that can <mask> the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "Show the id and name of the aircraft with the maximum distance.",
                "masked_template": "Show the id and name of the <mask> with the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What is the pet type and weight for the pet with the oldest age?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the pet type and weight of the youngest pet?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT name , age , weight FROM Dogs WHERE abandoned_yn = 2",
        "proc_query": "( <col> name </col> ) , ( <col> age </col> ) , ( <col> weight </col> ) that belongs to ( <tab> dogs </tab> ) , that have ( ( <col> abandoned yes or no </col> ) equal to ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names, ages, and weights of the dogs that are abandoned?",
            "What are the names and ages for dogs who have 0 or 2 abandoned lives?",
            "Find the name and age of the dogs whose number of abandoned pets is 0.",
            "What are the names and ages for dogs that had 1 or more abandoned lives?",
            "What are the names and ages for the dogs that were abandoned at least twice?",
            "List the name and age and weight for dogs who are abandoned.",
            "List name and age for all dogs with at least one abandonment record.",
            "What are the names and ages of the two dogs that are abandoned?",
            "Show the name and age of the dogs with abandoned status.",
            "Which dogs are abandoned? List the Id, the age and the weight.",
            "Tell me the name, the age and the weight for all the dogs with abandoned status.",
            "What is the name and age of the dogs that are abandoned at least twice?",
            "What are the names and ages of all the dogs that are abandoned?",
            "Show the name and age for all dogs that are abandoned.",
            "Return the names and ages of dogs with abandoned status.",
            "What is the name and age corresponding to the dogs which were abandoned at the latest?",
            "Show name and age for all dogs that are abandoned. Their sex is F.",
            "What are the name and age and weight for all dogs who did not have any abandonment for two years?",
            "What are the names and ages for all dogs whose sex is F?"
        ],
        "templates": [
            "",
            {
                "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
                "masked_template": "What are the <mask> and <mask> for <mask> who have 0 <mask>",
                "query": "SELECT state , acc_type , credit_score FROM customer WHERE no_of_loans = 0",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
                "masked_template": "Find the <mask> and <mask> of the <mask> whose number of <mask> is 0.",
                "query": "SELECT state , acc_type , credit_score FROM customer WHERE no_of_loans = 0",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
                "masked_template": "What are the <mask> and number of <mask> for <mask> that had 1 or more <mask>",
                "query": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
                "ted": 0.045454545454545456,
                "db_id": "storm_record"
            },
            {
                "question": "What are the full names and salaries for any employees earning less than 6000?",
                "masked_template": "What are the <mask> names and <mask> for any <mask> than <mask>",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE salary < 6000",
                "ted": 0.045454545454545456,
                "db_id": "hr_1"
            },
            {
                "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
                "masked_template": "List the <mask> name <mask> and <mask> and <mask> for <mask> who <mask>",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE salary < 6000",
                "ted": 0.045454545454545456,
                "db_id": "hr_1"
            },
            {
                "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
                "masked_template": "List <mask> and number of <mask> for all <mask> with at least 1 <mask>",
                "query": "SELECT name , dates_active , number_deaths FROM storm WHERE number_deaths >= 1",
                "ted": 0.045454545454545456,
                "db_id": "storm_record"
            },
            {
                "question": "What are the name, role code, and date of birth of the employee named 'Armani'?",
                "masked_template": "What are the <mask> and <mask> of <mask> of the <mask> named <mask>",
                "query": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
                "ted": 0.08333333333333333,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
                "masked_template": "Show the <mask> and <mask> of <mask> for the <mask> with name <mask>",
                "query": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
                "ted": 0.08333333333333333,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
                "masked_template": "Which <mask> with <mask> List the <mask> Id, the <mask> and the <mask>",
                "query": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
                "ted": 0.08333333333333333,
                "db_id": "insurance_policies"
            },
            {
                "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
                "masked_template": "<mask> me the <mask> Id, the <mask> and the <mask> for all the <mask> with <mask>",
                "query": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
                "ted": 0.08333333333333333,
                "db_id": "insurance_policies"
            },
            {
                "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
                "masked_template": "What is the <mask> and <mask> of the <mask> at <mask>",
                "query": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
                "ted": 0.08333333333333333,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the first name, last name, and phone number of all the female faculty members?",
                "masked_template": "What are the <mask> and <mask> number of all the <mask>",
                "query": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "activity_1"
            },
            {
                "question": "Show the first name, last name, and phone number for all female faculty members.",
                "masked_template": "Show the <mask> and <mask> number for all <mask>",
                "query": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "activity_1"
            },
            {
                "question": "Return the full names and salaries of employees with null commissions.",
                "masked_template": "Return the <mask> names and <mask> of <mask> with <mask>",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = 'null'",
                "ted": 0.08333333333333333,
                "db_id": "hr_1"
            },
            {
                "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
                "masked_template": "What is the <mask> and <mask> to the <mask> which <mask> at the <mask>",
                "query": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
                "ted": 0.08333333333333333,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Show first name, last name, age for all female students. Their sex is F.",
                "masked_template": "Show <mask> age for all <mask> Their sex is F.",
                "query": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
                "masked_template": "What are the <mask> name <mask> and <mask> and <mask> for all <mask> who <mask> not have any <mask> for <mask>",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = 'null'",
                "ted": 0.08333333333333333,
                "db_id": "hr_1"
            },
            {
                "question": "What are the full names and ages for all female students whose sex is F?",
                "masked_template": "What are the <mask> names and <mask> for all <mask> whose sex is F?",
                "query": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "allergy_1"
            }
        ],
        "best_hyp": "What are the names and ages for all dogs whose sex is F?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names, ages, and weights of the dogs that are abandoned?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT max( weight ) , petType FROM pets GROUP BY petType",
        "proc_query": "( the maximum of ( <col> weight </col> ) ) , ( <col> pet type </col> ) that belongs to ( <tab> pets </tab> ) , grouped by ( <col> pet type </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the maximum weight for each pet type?",
            "What are the maximum weight for different pet type?",
            "For each pet type id, how many pounds are there?",
            "Return the maximum weight of pets that have each type.",
            "For each pet type, count the maximum weight.",
            "Find the maximum weight for different pet type.",
            "What is the maximum weight of pets grouped by pet type?",
            "Compute the maximum weight of each pet type showing the pet type.",
            "Find the maximum weight of pets of each pet type.",
            "What are the maximum weights of pets grouped by pet type?",
            "How many pounds are there for each pet type?",
            "Find the maximum weight for each pet type.",
            "What is the maximum weight of pets by each pet type? List the pet type id.",
            "What are the different pet weights for different pet types and how many pets have each type?",
            "Count the maximum weight for each pet type.",
            "What is the maximum weight of pets belonging to each pet type and what is its id?",
            "How many pounds are there for each pet type? List the number and pet type id.",
            "How old is the average pet weight for each pet type?",
            "Find the maximum weight of all pets for each pet type.",
            "For each pet type, what is the maximum weight of that pet type?",
            "What is the maximum weight for different pet type?",
            "What are the maximum weight for each pet type?",
            "For each pet type, how many different weights are there?",
            "How many pounds are there for each pet type?",
            "Find the maximum weight for each pet type.",
            "What is the maximum weight for each pet type?",
            "How many pet weights are there and how many are different types?",
            "What is the maximum weight for each pet type?",
            "What is the maximum weight for each pet type?",
            "What is the maximum weight of each pet type?",
            "Find the maximum weight for each pet type."
        ],
        "templates": [
            "",
            {
                "question": "What are the numbers of wines for different grapes?",
                "masked_template": "What are the numbers of <mask> for different <mask>",
                "query": "SELECT count( * ) , Grape FROM WINE GROUP BY Grape",
                "ted": 0.0625,
                "db_id": "wine_1"
            },
            {
                "question": "For each constructor id, how many races are there?",
                "masked_template": "For each <mask> id, how many <mask> are <mask>",
                "query": "SELECT count( * ) , constructorid FROM constructorStandings GROUP BY constructorid",
                "ted": 0.0625,
                "db_id": "formula_1"
            },
            {
                "question": "Return the average price of products that have each category code.",
                "masked_template": "Return the average <mask> of <mask> that have each <mask>",
                "query": "SELECT avg( product_price ) , product_category_code FROM products GROUP BY product_category_code",
                "ted": 0.0625,
                "db_id": "customer_complaints"
            },
            {
                "question": "For each competition, count the number of matches.",
                "masked_template": "For each <mask> count the number of <mask>",
                "query": "SELECT count( * ) , Competition FROM MATCH GROUP BY Competition",
                "ted": 0.0625,
                "db_id": "city_record"
            },
            {
                "question": "Find the number of matches in different competitions.",
                "masked_template": "Find the number of <mask> in different <mask>",
                "query": "SELECT count( * ) , Competition FROM MATCH GROUP BY Competition",
                "ted": 0.0625,
                "db_id": "city_record"
            },
            {
                "question": "What is the total revenue of companies started by founder?",
                "masked_template": "What is the total <mask> of <mask> by <mask>",
                "query": "SELECT sum( revenue ) , founder FROM manufacturers GROUP BY founder",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "Select the average price of each manufacturer's products, showing only the manufacturer's code.",
                "masked_template": "<mask> the average <mask> of each <mask> showing <mask> the <mask>",
                "query": "SELECT AVG( Price ) , Manufacturer FROM Products GROUP BY Manufacturer",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "Find the total revenue of companies of each founder.",
                "masked_template": "Find the total <mask> of <mask> of each <mask>",
                "query": "SELECT sum( revenue ) , founder FROM manufacturers GROUP BY founder",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the average prices of products, grouped by manufacturer code?",
                "masked_template": "What are the average <mask> of <mask> by <mask>",
                "query": "SELECT AVG( Price ) , Manufacturer FROM Products GROUP BY Manufacturer",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many songs were released for each format?",
                "masked_template": "How many <mask> for each <mask>",
                "query": "SELECT count( * ) , formats FROM files GROUP BY formats",
                "ted": 0.0625,
                "db_id": "music_1"
            },
            {
                "question": "Find the number of users in each role.",
                "masked_template": "Find the number of <mask> in each <mask>",
                "query": "SELECT count( * ) , role_code FROM users GROUP BY role_code",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "What is the total amount of grants given by each organisations? Also list the organisation id.",
                "masked_template": "What is the total <mask> of <mask> by each <mask> list the <mask> id.",
                "query": "SELECT sum( grant_amount ) , organisation_id FROM Grants GROUP BY organisation_id",
                "ted": 0.0625,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the different role codes for users, and how many users have each?",
                "masked_template": "What are the different <mask> for <mask> and how many <mask> have <mask>",
                "query": "SELECT count( * ) , role_code FROM users GROUP BY role_code",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "Count the number of accounts corresponding to each customer id.",
                "masked_template": "Count the number of <mask> to each <mask> id.",
                "query": "SELECT count( * ) , customer_id FROM Accounts GROUP BY customer_id",
                "ted": 0.0625,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the total amount of grant money given to each organization and what is its id?",
                "masked_template": "What is the total <mask> of <mask> to each <mask> and what is its id?",
                "query": "SELECT sum( grant_amount ) , organisation_id FROM Grants GROUP BY organisation_id",
                "ted": 0.0625,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "How many accounts does each customer have? List the number and customer id.",
                "masked_template": "How many <mask> each <mask> List the number and <mask> id.",
                "query": "SELECT count( * ) , customer_id FROM Accounts GROUP BY customer_id",
                "ted": 0.0625,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How old is the average person for each job?",
                "masked_template": "How old is the average <mask> for each <mask>",
                "query": "SELECT avg( age ) , job FROM Person GROUP BY job",
                "ted": 0.0625,
                "db_id": "network_2"
            },
            {
                "question": "Find the average elevation of all airports for each country.",
                "masked_template": "Find the average <mask> of all <mask> for each <mask>",
                "query": "SELECT avg( elevation ) , country FROM airports GROUP BY country",
                "ted": 0.0625,
                "db_id": "flight_4"
            },
            {
                "question": "For each country, what is the average elevation of that country's airports?",
                "masked_template": "For each <mask> what is the average <mask> of that <mask>",
                "query": "SELECT avg( elevation ) , country FROM airports GROUP BY country",
                "ted": 0.0625,
                "db_id": "flight_4"
            },
            {
                "question": "What is minimum age for different job title?",
                "masked_template": "What is <mask> age for different job <mask>",
                "query": "SELECT min( age ) , job FROM Person GROUP BY job",
                "ted": 0.0625,
                "db_id": "network_2"
            },
            {
                "question": "What are the numbers of races for each constructor id?",
                "masked_template": "What are the numbers of <mask> for each <mask> id?",
                "query": "SELECT count( * ) , constructorid FROM constructorStandings GROUP BY constructorid",
                "ted": 0.0625,
                "db_id": "formula_1"
            },
            {
                "question": "For each nationality, how many different constructors are there?",
                "masked_template": "For each <mask> how many different <mask> are <mask>",
                "query": "SELECT count( * ) , nationality FROM constructors GROUP BY nationality",
                "ted": 0.0625,
                "db_id": "formula_1"
            },
            {
                "question": "How many students does one classroom have?",
                "masked_template": "How many <mask> one <mask>",
                "query": "SELECT count( * ) , classroom FROM list GROUP BY classroom",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "Find the number of students in one classroom.",
                "masked_template": "Find the number of <mask> in one <mask>",
                "query": "SELECT count( * ) , classroom FROM list GROUP BY classroom",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "What is the number of artists for each gender?",
                "masked_template": "What is the number of <mask> for each <mask>",
                "query": "SELECT count( * ) , gender FROM artist GROUP BY gender",
                "ted": 0.0625,
                "db_id": "music_1"
            },
            {
                "question": "How many artists are male and how many are female?",
                "masked_template": "How many <mask> are <mask> and how many are <mask>",
                "query": "SELECT count( * ) , gender FROM artist GROUP BY gender",
                "ted": 0.0625,
                "db_id": "music_1"
            },
            {
                "question": "What is the average rating of songs for each language?",
                "masked_template": "What is the average <mask> of <mask> for each <mask>",
                "query": "SELECT avg( rating ) , languages FROM song GROUP BY languages",
                "ted": 0.0625,
                "db_id": "music_1"
            },
            {
                "question": "What is the average song rating for each language?",
                "masked_template": "What is the average <mask> for each <mask>",
                "query": "SELECT avg( rating ) , languages FROM song GROUP BY languages",
                "ted": 0.0625,
                "db_id": "music_1"
            },
            {
                "question": "What is the total revenue of each manufacturer?",
                "masked_template": "What is the total <mask> of each <mask>",
                "query": "SELECT sum( revenue ) , name FROM manufacturers GROUP BY name",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "Find the total revenue for each manufacturer.",
                "masked_template": "Find the total <mask> for each <mask>",
                "query": "SELECT sum( revenue ) , name FROM manufacturers GROUP BY name",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            }
        ],
        "best_hyp": "What is the maximum weight for each pet type?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the maximum weight for each pet type?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> student </tab> ) , ( <col> age </col> of <tab> student </tab> ) ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names and ages of all students who have a pet?",
            "Show distinct first names and ages for all students with a pet.",
            "What are the first names and ages of all students who have pet?",
            "What are the distinct names and ages of the students who have a pet?",
            "What are the different names and ages of students who have a pet?",
            "Find the first name and age of the students who have pet.",
            "What are the names and ages of the students that have a pet?",
            "What are the names of students and the ages of students that have pet?",
            "Show the first names and ages of all students who have pet.",
            "Show the first names and ages of all students who have a pet.",
            "Show the first names and ages of all students who have pet.",
            "What are the names of students and the ages of the students that have pet?",
            "What are the ids of all students for pet and what are the names of their ages?",
            "For each student, return their first name and age.",
            "What are the first names and ages of all the students who have pet?",
            "What are the first names and ages of all the students who have pet?",
            "what are the first name and age of all students who have pet?",
            "Please list the first names and ages of all students who have a pet.",
            "For each student, find the names of the students they are friends with.",
            "Show the first names and ages of all students who have a pet.",
            "What is the first name and age of the students who have pet?",
            "What are the first names and ages of students who have pet?",
            "Which students are old enough to tell me their first names and how we can get them to pet them?",
            "Show the first names and the ages of students who have pet.",
            "Show the first names and ages of all students who have a pet.",
            "Tell me the first name and age for each student.",
            "For each student, find its first name and age.",
            "What are the first names and ages of all students who have a pet?",
            "Show all student first names and their ages.",
            "Show the first names and ages of all students who have pet.",
            "Show the first names and ages of all students who have a pet."
        ],
        "templates": [
            "",
            {
                "question": "Show distinct first and last names for all customers with an account.",
                "masked_template": "Show distinct <mask> and <mask> names for all <mask> with an <mask>",
                "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the full names of customers who have accounts?",
                "masked_template": "What are the <mask> names of <mask> who have <mask>",
                "query": "SELECT DISTINCT T1.customer_first_name , T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
                "masked_template": "What are the distinct names and <mask> of the <mask> who have <mask> a <mask>",
                "query": "SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What are the different names and credit scores of customers who have taken a loan?",
                "masked_template": "What are the different names and <mask> of <mask> who have <mask> a <mask>",
                "query": "SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the name and credit score of the customers who have some loans.",
                "masked_template": "Find the name and <mask> of the <mask> who have <mask>",
                "query": "SELECT DISTINCT T1.cust_name , T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.08333333333333333,
                "db_id": "flight_company"
            },
            {
                "question": "What are the names of climbers and the corresponding names of mountains that they climb?",
                "masked_template": "What are the names of <mask> and the <mask> names of <mask> that <mask>",
                "query": "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
                "ted": 0.08333333333333333,
                "db_id": "climbing"
            },
            {
                "question": "Show the names of roller coasters and names of country they are in.",
                "masked_template": "Show the names of <mask> and names of <mask> are in.",
                "query": "SELECT T2.Name , T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID",
                "ted": 0.08333333333333333,
                "db_id": "roller_coaster"
            },
            {
                "question": "Show the names of climbers and the heights of mountains they climb.",
                "masked_template": "Show the names of <mask> and the <mask> of <mask>",
                "query": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
                "ted": 0.08333333333333333,
                "db_id": "climbing"
            },
            {
                "question": "Show names of cities and names of counties they are in.",
                "masked_template": "Show names of <mask> and names of <mask> are in.",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.08333333333333333,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?",
                "masked_template": "What are the names of <mask> and the <mask> of the <mask> that <mask>",
                "query": "SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
                "ted": 0.08333333333333333,
                "db_id": "climbing"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.08333333333333333,
                "db_id": "student_assessment"
            },
            {
                "question": "For each trip, return its ending station's installation date.",
                "masked_template": "For each <mask> return its <mask>",
                "query": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id",
                "ted": 0.08333333333333333,
                "db_id": "bike_1"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.08333333333333333,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.08333333333333333,
                "db_id": "student_assessment"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.08333333333333333,
                "db_id": "student_assessment"
            },
            {
                "question": "Please list the location and the winning aircraft name.",
                "masked_template": "<mask> list the <mask> and the <mask>",
                "query": "SELECT T2.Location , T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft",
                "ted": 0.08333333333333333,
                "db_id": "aircraft"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.08333333333333333,
                "db_id": "election"
            },
            {
                "question": "Show the delegates and the names of the party they belong to.",
                "masked_template": "Show the <mask> and the names of the <mask> to.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.08333333333333333,
                "db_id": "election"
            },
            {
                "question": "What is the location and name of the winning aircraft?",
                "masked_template": "What is the <mask> and name of the <mask>",
                "query": "SELECT T2.Location , T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft",
                "ted": 0.08333333333333333,
                "db_id": "aircraft"
            },
            {
                "question": "What are the details and ways to get to tourist attractions related to royal family?",
                "masked_template": "What are the <mask> and <mask> to get to <mask> to <mask>",
                "query": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
                "ted": 0.08333333333333333,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
                "masked_template": "Which <mask> are <mask> to <mask> me their <mask> and how we can get <mask>",
                "query": "SELECT T1.Royal_Family_Details , T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID",
                "ted": 0.08333333333333333,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.08333333333333333,
                "db_id": "sports_competition"
            },
            {
                "question": "Show names of climbers and the names of mountains they climb.",
                "masked_template": "Show names of <mask> and the names of <mask>",
                "query": "SELECT T1.Name , T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID",
                "ted": 0.08333333333333333,
                "db_id": "climbing"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.08333333333333333,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "For each submission, find its author and acceptance result.",
                "masked_template": "For each <mask> find its <mask> and <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.08333333333333333,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the names of parties and their respective regions?",
                "masked_template": "What are the names of <mask> and their <mask>",
                "query": "SELECT T1.party_name , T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id",
                "ted": 0.08333333333333333,
                "db_id": "party_people"
            },
            {
                "question": "Show all party names and their region names.",
                "masked_template": "Show all <mask> names and their <mask>",
                "query": "SELECT T1.party_name , T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id",
                "ted": 0.08333333333333333,
                "db_id": "party_people"
            },
            {
                "question": "Show the names of members and names of colleges they go to.",
                "masked_template": "Show the names of <mask> and names of <mask> go to.",
                "query": "SELECT T2.Name , T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID",
                "ted": 0.08333333333333333,
                "db_id": "decoration_competition"
            },
            {
                "question": "Show the names of members and the decoration themes they have.",
                "masked_template": "Show the names of <mask> and the <mask>",
                "query": "SELECT T1.Name , T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID",
                "ted": 0.08333333333333333,
                "db_id": "decoration_competition"
            }
        ],
        "best_hyp": "What are the distinct names and ages of the students who have a pet?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and ages of all students who have a pet?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Pennsylvania' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) > 2",
        "proc_query": "( <col> professional id </col> ) , ( <col> last name </col> ) , ( <col> cell number </col> ) that belongs to ( <tab> professionals </tab> ) , that have ( ( <col> state </col> ) equal to ( <val> Pennsylvania </val> ) ) and ( <col> professional id </col> of <tab> professionals </tab> ) , ( <col> last name </col> of <tab> professionals </tab> ) , ( <col> cell number </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> professional id </col> of <tab> professionals </tab> ) , that have ( ( the number of ( all items ) ) greater than ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids, last names and cell numbers of the professionals who have used more than two treatments?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the ids, last names and cell numbers of the professionals who have used more than two treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids, last names and cell numbers of the professionals who have used more than two treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> professionals </tab> ) , that have ( ( <col> professional id </col> ) not in ( ( <col> professional id </col> ) that belongs to ( <tab> treatments </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many physicians do not have any treatments?",
            "How many professionals did not have any treatments?",
            "How many professionals do not have any treatments?",
            "Count the number of professionals that do not have any treatments.",
            "Count the number of professionals without any treatments.",
            "Count the number of professionals who did not participate in any treatments.",
            "How many professionals have no treatments?",
            "List the number of professionals that did not have any treatments.",
            "How many physicians do not have any treatments?",
            "What is the count of professionals without any treatments?",
            "Find the number of professionals who are not involved in any treatments.",
            "Show the number of all professionals without any treatment.",
            "How many professionals are not involved in any treatments?",
            "How many physicians do not have an ids in our records?",
            "How many professionals do not have any treatments?",
            "Find the number of professionals that did not provide any treatments.",
            "How many professionals do not have any treatments?",
            "Count the number of professionals who do not have any treatments.",
            "Count the number of professionals that are not involved in any treatments.",
            "How many professionals are not involved in any treatments?",
            "Count the number of professionals that do not have any treatments.",
            "Find the number of professionals who did not provide any treatments.",
            "Count the number of professionals who did not provide any treatments.",
            "How many professionals that do not have any treatments?",
            "How many physicians are not involved in any treatments?",
            "Count the number of professionals who have not provided an treatment.",
            "How many professionals are not involved in any treatments?",
            "How many physicians are not involved in the treatments listed?",
            "How many physicians are not involved in treatments?",
            "How many treatments are led by professionals who are not using treatments?",
            "How many professionals did not provide any treatments?"
        ],
        "templates": [
            "",
            {
                "question": "How many students did not have any course enrollment?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many documents do not have any expense?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many customers have no payment histories?",
                "masked_template": "How many <mask> have no <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "How many games are free of injury accidents?",
                "masked_template": "How many <mask> are <mask> of <mask>",
                "query": "SELECT count( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "How many persons are not body builders?",
                "masked_template": "How many <mask> are not <mask>",
                "query": "SELECT count( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder )",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "masked_template": "How many <mask> are led by <mask> who are not <mask>",
                "query": "SELECT count( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            }
        ],
        "best_hyp": "Count the number of professionals that are not involved in any treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many physicians do not have any treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> professionals </tab> ) , ( <col> last name </col> of <tab> professionals </tab> ) ) ) that belongs to ( ( <tab> professionals </tab> ) join ( ( <tab> treatments </tab> ) ) ) , that have ( ( <col> cost of treatment </col> ) less than ( the average of ( <col> cost of treatment </col> ) ) that belongs to ( <tab> treatments </tab> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the distinct first names and last names of the professionals who are involved in treatments that cost less than the average?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the distinct first names and last names of the professionals who are involved in treatments that cost less than the average?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the distinct first names and last names of the professionals who are involved in treatments that cost less than the average?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "proc_query": "( <col> first name </col> ) that belongs to ( <tab> professionals </tab> ) and ( <col> first name </col> ) that belongs to ( <tab> owners </tab> ), and except that ( ( <col> name </col> ) that belongs to ( <tab> dogs </tab> ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of the professionals and the dogs?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the first names of the professionals and the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of the professionals and the dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address , cell_number , home_phone FROM professionals",
        "proc_query": "( <col> email address </col> ) , ( <col> cell number </col> ) , ( <col> home phone </col> ) that belongs to ( <tab> professionals </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the email address, cell number, and home phone number of all professionals?",
            "Show the email address and cell number in that location for all the professionals",
            "What are the email addresses and phone numbers of all professionals?",
            "What are the email address and cell number for all professionals?",
            "What are the email address and phone number of the professionals?",
            "List the email address, cell number, and home phone of all the professionals.",
            "Show all email addresses, cell numbers, and home phones of all professionals.",
            "What are the email address, cell number and home phone number of all professionals?",
            "List the email address, cell number and home phone of all professionals.",
            "What are each employee's email and cell number and home phone number?",
            "What are the email addresses and phone numbers of all the professionals?",
            "Show the email address and phone number for all the professionals.",
            "Show the email address and cell number for all professionals.",
            "List the email address, cell number and the home phone number of all professionals.",
            "What are all the the email addresses and phone numbers of all the professionals?",
            "Show email address and cell number for each professionals.",
            "List the email address, cell number and home phone number of all professionals.",
            "List the email address, cell number and home phone number for all professionals.",
            "List the email address, cell number and name for all the professionals.",
            "Show the email address and number of phones for all professionals.",
            "Find the email address and cell number of all professionals.",
            "Show email address and cell number for all professionals.",
            "What are the email addresses and phone numbers of all professionals?",
            "List the email address, cell number and home phone number of all professionals.",
            "What are all the email addresses and phone numbers of professionals?",
            "Show email address, cell number and home phone for all professionals.",
            "List all email addresses and phone numbers of professionals.",
            "List the email address, cell number and home phone number of all professionals.",
            "Show the email address and phone number for all professionals.",
            "What are the email address and phone number for all the professionals?"
        ],
        "templates": [
            "",
            {
                "question": "Show the location code, the starting date and ending data in that location for all the documents.",
                "masked_template": "Show the <mask> the <mask> and <mask> in that <mask> for all the <mask>",
                "query": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the names, classes, and ranks of all captains?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT name , CLASS , rank FROM captain",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "What are the names, classes, and dates for all races?",
                "masked_template": "What are the <mask> and <mask> for all <mask>",
                "query": "SELECT name , CLASS , date FROM race",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the rank, first name, and last name of the faculty members?",
                "masked_template": "What are the <mask> and <mask> name of the <mask>",
                "query": "SELECT rank , Fname , Lname FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "List the season, home team, away team of all the games.",
                "masked_template": "List the <mask> of all the <mask>",
                "query": "SELECT season , home_team , away_team FROM game",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "Show all document type codes, document type names, document type descriptions.",
                "masked_template": "Show all <mask>",
                "query": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name, origin and owner of each program?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT name , origin , OWNER FROM program",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "List the name, origin and owner of each program.",
                "masked_template": "List the <mask> and <mask> of each <mask>",
                "query": "SELECT name , origin , OWNER FROM program",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are each document's location code, and starting date and ending data in that location?",
                "masked_template": "What are each <mask> and <mask> and <mask> in that <mask>",
                "query": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the codes, names, and descriptions of the different document types?",
                "masked_template": "What are the <mask> and <mask> of the different <mask>",
                "query": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show the rank, first name, and last name for all the faculty.",
                "masked_template": "Show the <mask> and <mask> name for all the <mask>",
                "query": "SELECT rank , Fname , Lname FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the name, open date, and organizer for all churches.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT name , open_date , organized_by FROM Church",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "List the customer event id and the corresponding move in date and property id.",
                "masked_template": "List the <mask> id and the <mask> in <mask> and <mask> id.",
                "query": "SELECT customer_event_id , date_moved_in , property_id FROM customer_events",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What are all the the participant ids, type code and details?",
                "masked_template": "What are all the the <mask> and <mask>",
                "query": "SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Show name, opening year, and capacity for each cinema.",
                "masked_template": "Show <mask> and <mask> for each <mask>",
                "query": "SELECT name , openning_year , capacity FROM cinema",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "List the ids, names and market shares of all browsers.",
                "masked_template": "List the <mask> names and <mask> of all <mask>",
                "query": "SELECT id , name , market_share FROM browser",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "List the name, location, mascot for all schools.",
                "masked_template": "List the <mask> for all <mask>",
                "query": "SELECT school_name , LOCATION , mascot FROM school",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "List the id, color scheme, and name for all the photos.",
                "masked_template": "List the id, <mask> and name for all the <mask>",
                "query": "SELECT id , color , name FROM photos",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "Show the name, location, and number of platforms for all stations.",
                "masked_template": "Show the <mask> and number of <mask> for all <mask>",
                "query": "SELECT name , LOCATION , number_of_platforms FROM station",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the name, class and rank of all captains.",
                "masked_template": "Find the <mask> and <mask> of all <mask>",
                "query": "SELECT name , CLASS , rank FROM captain",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show name, class, and date for all races.",
                "masked_template": "Show <mask> and <mask> for all <mask>",
                "query": "SELECT name , CLASS , date FROM race",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the first, middle, and last names of all staff?",
                "masked_template": "What are the <mask> and <mask> names of all <mask>",
                "query": "SELECT first_name , middle_name , last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "List the first name middle name and last name of all staff.",
                "masked_template": "List the <mask> name <mask> name and <mask> name of all <mask>",
                "query": "SELECT first_name , middle_name , last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are all the role codes, role names, and role descriptions?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT role_code , role_name , role_description FROM ROLES",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show ids, customer ids, names for all accounts.",
                "masked_template": "Show <mask> names for all <mask>",
                "query": "SELECT account_id , customer_id , account_name FROM Accounts",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "List all role codes, role names, and role descriptions.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT role_code , role_name , role_description FROM ROLES",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "List the creation year, name and budget of each department.",
                "masked_template": "List the <mask> name and <mask> of each <mask>",
                "query": "SELECT creation , name , budget_in_billions FROM department",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "Show the name, home city, and age for all drivers.",
                "masked_template": "Show the <mask> and age for all <mask>",
                "query": "SELECT name , home_city , age FROM driver",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "What are the account ids, customer ids, and account names for all the accounts?",
                "masked_template": "What are the <mask> and <mask> names for all the <mask>",
                "query": "SELECT account_id , customer_id , account_name FROM Accounts",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            }
        ],
        "best_hyp": "List the email address, cell number and name for all the professionals.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the email address, cell number, and home phone number of all professionals?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "proc_query": "( the average of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> ) , that have ( ( <col> dog id </col> ) in ( ( <col> dog id </col> ) that belongs to ( <tab> treatments </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the average age of the dogs who are undergoing treatments?",
            "What is the average age for dogs who have been given a treatment?",
            "Find the average age of the dogs who have treatments.",
            "Find the average age for the dogs who had treatments.",
            "Find the average age for the dogs who do not have any treatments.",
            "Find the average age of the dogs that are treated by any treatment.",
            "Find the average age of the dogs who do not have any treatments.",
            "How many dogs do not have any treatments?",
            "How many dogs did not have any treatments?",
            "What is the average age of dogs undergoing any treatment?",
            "Count the average age of dogs that are not involved in any treatments.",
            "How many dogs are affected by any treatment?",
            "Find the average age of dogs who are undergoing treatments.",
            "How old are the dogs that do not have treatments?",
            "How many dogs do not receive treatments in the past?",
            "Count the average age of dogs that are not involved in any treatments.",
            "How many dogs do not have any treatments?",
            "Find the average age of dogs who are not subjected to any treatments.",
            "Count the average age of dogs who did not receive any treatments.",
            "Count the average age of dogs that do not have treatments.",
            "How old are the dogs who are undergoing treatments?",
            "Count the average age of dogs who do not have any treatments.",
            "How many dogs did not receive any treatments?",
            "How many dogs are not involved in any treatments?",
            "Count the average age of dogs that are undergoing treatments.",
            "Compute the average age of dogs who have not received an treatment.",
            "Find the average age of dogs that did not receive any treatment.",
            "How many dogs do not have an treatment in our record?",
            "Find the average age of dogs who did not receive any treatment.",
            "Find the average age of dogs who are undergoing any treatment.",
            "List the average age of dogs that did not have any treatments."
        ],
        "templates": [
            "",
            {
                "question": "What is the average credit score for customers who have taken a loan?",
                "masked_template": "What is the average <mask> for <mask> who have <mask> a <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan )",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the average credit score of the customers who have some loan.",
                "masked_template": "Find the average <mask> of the <mask> who have <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan )",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the average number of followers for the users who had some tweets.",
                "masked_template": "Find the average number of <mask> for the <mask> who had <mask>",
                "query": "SELECT avg( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets )",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the average number of followers for the users who do not have any tweet.",
                "masked_template": "Find the average number of <mask> for the <mask> who do not have any <mask>",
                "query": "SELECT avg( followers ) FROM user_profiles WHERE UID NOT IN ( SELECT UID FROM tweets )",
                "ted": 0.045454545454545456,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the average ram mib size of the chip models that are never used by any phone.",
                "masked_template": "Find the average ram mib <mask> of the <mask> that are <mask> by any <mask>",
                "query": "SELECT avg( RAM_MiB ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone )",
                "ted": 0.045454545454545456,
                "db_id": "phone_1"
            },
            {
                "question": "Find the average credit score of the customers who do not have any loan.",
                "masked_template": "Find the average <mask> of the <mask> who do not have any <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id NOT IN ( SELECT cust_id FROM loan )",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.09090909090909091,
                "db_id": "scientist_1"
            },
            {
                "question": "How many customers did not have any event?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
                "ted": 0.09090909090909091,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.09090909090909091,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.09090909090909091,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many colors are never used by any product?",
                "masked_template": "How many <mask> are <mask> by any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.09090909090909091,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "How many schools do not participate in the basketball match?",
                "masked_template": "How many <mask> do not <mask> in the <mask>",
                "query": "SELECT count( * ) FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match )",
                "ted": 0.09090909090909091,
                "db_id": "university_basketball"
            },
            {
                "question": "Count the number of universities that do not participate in the baketball match.",
                "masked_template": "Count the number of <mask> that do not <mask> in the <mask>",
                "query": "SELECT count( * ) FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match )",
                "ted": 0.09090909090909091,
                "db_id": "university_basketball"
            },
            {
                "question": "How many enzymes do not have any interactions?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.09090909090909091,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.09090909090909091,
                "db_id": "scientist_1"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.09090909090909091,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.09090909090909091,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.09090909090909091,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.09090909090909091,
                "db_id": "chinook_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.09090909090909091,
                "db_id": "epinions_1"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.09090909090909091,
                "db_id": "protein_institute"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.09090909090909091,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of items without any review.",
                "masked_template": "Find the number of <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.09090909090909091,
                "db_id": "epinions_1"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.09090909090909091,
                "db_id": "driving_school"
            }
        ],
        "best_hyp": "Find the average age of the dogs who do not have any treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average age of the dogs who are undergoing treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    }
]