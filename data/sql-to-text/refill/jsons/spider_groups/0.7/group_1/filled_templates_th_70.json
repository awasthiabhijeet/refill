[
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> singer </tab> ) , ordered by ( ( <col> net worth millions </col> ) in ascending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "List the names of singers in ascending order of net worth.",
            "List the names of singers in ascending order of net worth.",
            "What are the names of the singers in ascending order of net worth?",
            "List the names of all the singers in ascending order of net worth.",
            "List the names of singers in ascending order of net worth.",
            "What are the names of the singers in ascending order of the net worth?",
            "Find the names of all singers sorted by their 100 highest earning years in ascending order.",
            "List singers ordered by net worth in ascending order.",
            "List the names of singers in ascending order of net worth.",
            "List the names of singers in ascending order of net worth.",
            "Show the names of singers ordered by their net worth in ascending order.",
            "List the names of singers in ascending order of net worth.",
            "What are the names of singers in ascending order of net worth?",
            "List all the name of singers in ascending order of the net worth.",
            "What are the names of singers ordered by their net worth in ascending order?",
            "What are the names of singers in ascending order of their net worth?",
            "What are the names of the singers in ascending order of net worth?",
            "Find the names of all the singers ordered in ascending order of net worth.",
            "List the names of singers in ascending order of net worth.",
            "List the names of the singers in ascending order of net worth.",
            "List the names of singers in ascending order of the net worth.",
            "List the singers' names in ascending order of net worth.",
            "What are all the singers in ascending order of net worth?",
            "Please list all singers in ascending order of net worth.",
            "What are the names of the singers in ascending order of net worth?",
            "Return all the singer names sorted by the net worth count in ascending order.",
            "What are the different singers' names in ascending order of net worth?",
            "List in ascending order all the singers' names.",
            "Give me a list of all the names of singers in ascending order of net worth.",
            "What are the names of singers in ascending order of net worth?",
            "List the names of singers in ascending order of net worth."
        ],
        "templates": [
            "",
            {
                "question": "List the carriers of devices in ascending alphabetical order.",
                "masked_template": "List the <mask> of <mask> in <mask>",
                "query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the first names of the people in alphabetical order?",
                "masked_template": "What are the <mask> names of the <mask> in <mask>",
                "query": "SELECT first_name FROM people ORDER BY first_name",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "List the names of all the customers in alphabetical order.",
                "masked_template": "List the names of all the <mask> in <mask>",
                "query": "SELECT customer_details FROM customers ORDER BY customer_details",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Sort the customer names in alphabetical order.",
                "masked_template": "<mask> the <mask> names in <mask>",
                "query": "SELECT customer_details FROM customers ORDER BY customer_details",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
                "masked_template": "What are the names of the <mask> of <mask> in <mask> order of the <mask>",
                "query": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
                "masked_template": "Find the names of all <mask> by their 100 <mask> in <mask>",
                "query": "SELECT name FROM swimmer ORDER BY meter_100",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "List every album ordered by album title in ascending order.",
                "masked_template": "List <mask> ordered by <mask> in <mask>",
                "query": "SELECT title FROM albums ORDER BY title",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "List the first names of people in alphabetical order?",
                "masked_template": "List the <mask> names of <mask> in <mask>",
                "query": "SELECT first_name FROM people ORDER BY first_name",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "List the names of roller coasters by ascending order of length.",
                "masked_template": "List the names of <mask> by <mask> order of <mask>",
                "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Show the shop addresses ordered by their opening year.",
                "masked_template": "Show the <mask> ordered by their <mask>",
                "query": "SELECT address FROM shop ORDER BY open_year",
                "ted": 0.0,
                "db_id": "coffee_shop"
            },
            {
                "question": "List the names of members in ascending alphabetical order.",
                "masked_template": "List the names of <mask> in <mask>",
                "query": "SELECT Name FROM member ORDER BY Name ASC",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "What are the names of managers in ascending order of level?",
                "masked_template": "What are the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Name FROM manager ORDER BY LEVEL ASC",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "List all the name of organizations in order of the date formed.",
                "masked_template": "List all the name of <mask> in order of the <mask>",
                "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
                "masked_template": "What are the names of <mask> ordered by the <mask>",
                "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the titles of all the albums alphabetically ascending?",
                "masked_template": "What are the <mask> of all the <mask>",
                "query": "SELECT title FROM albums ORDER BY title",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of the courses in alphabetical order?",
                "masked_template": "What are the names of the <mask> in <mask>",
                "query": "SELECT course_name FROM courses ORDER BY course_name",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the first names of all the authors ordered in alphabetical order.",
                "masked_template": "Find the <mask> names of all the <mask> ordered in <mask>",
                "query": "SELECT fname FROM authors ORDER BY fname",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "List the names of pilots in ascending order of rank.",
                "masked_template": "List the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "List the titles of the books in ascending order of issues.",
                "masked_template": "List the <mask> of the <mask> in <mask> order of <mask>",
                "query": "SELECT Title FROM book ORDER BY Issues ASC",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
                "masked_template": "<mask> the <mask> and <mask> in <mask> order of the <mask>",
                "query": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Sort the apartment numbers in ascending order of room count.",
                "masked_template": "<mask> the <mask> numbers in <mask> order of <mask>",
                "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are all the album titles, in alphabetical order?",
                "masked_template": "What are all the <mask> in <mask>",
                "query": "SELECT Title FROM ALBUM ORDER BY Title",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Please list all album titles in alphabetical order.",
                "masked_template": "<mask> list all <mask> in <mask>",
                "query": "SELECT Title FROM ALBUM ORDER BY Title",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the names of the technicians by ascending order of age?",
                "masked_template": "What are the names of the <mask> by <mask> order of <mask>",
                "query": "SELECT Name FROM technician ORDER BY Age ASC",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Return all the apartment numbers sorted by the room count in ascending order.",
                "masked_template": "Return all the <mask> numbers <mask> by the <mask> count in <mask>",
                "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are the different dorm amenity names in alphabetical order?",
                "masked_template": "What are the different <mask> names in <mask>",
                "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "List in alphabetic order all different amenities.",
                "masked_template": "List in <mask> order all different <mask>",
                "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Give me a list of all the last names of authors sorted in alphabetical order",
                "masked_template": "<mask> me a list of all the <mask> names of <mask> in <mask> order",
                "query": "SELECT lname FROM authors ORDER BY lname",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of mountains in ascending alphabetical order?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT Name FROM mountain ORDER BY Name ASC",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Give the names of mountains in alphabetical order.",
                "masked_template": "<mask> the names of <mask> in <mask>",
                "query": "SELECT Name FROM mountain ORDER BY Name ASC",
                "ted": 0.0,
                "db_id": "climbing"
            }
        ],
        "best_hyp": "What are the names of singers in ascending order of net worth?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "List the names of singers in ascending order of net worth.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Birth_Year = 1968 OR Birth_Year = 1960",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( ( <col> birth year </col> ) equal to ( <val> 1968 </val> ) ) or ( ( <col> birth year </col> ) equal to ( <val> 1960 </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of singers born in either 1968 or 1960?",
            "Show the names of singers born in either 1968 or 1960.",
            "Which singers had a birth year in either 1968 or 1960?",
            "Show all singers' names who have a birth year in the year 1968 or 1960.",
            "What are the names of the singers born either in 1968 or 1960?",
            "Show the names of singers born in either 1968 or 1960.",
            "Show the names of singers of age either 24 or 25.",
            "Show the names of singers born between 1968 or 1960.",
            "Find the ids of the singers who are on birthdays in year 1968 or 1960.",
            "What are the names of singers born in either 1968 or 1960? Tell me their birth year.",
            "What are the names of singers with at least 100 songs in year 1968 or 1960?",
            "Show the names of singers if the birth year is 1968 or the birthday is 1960",
            "Show the names of singers that have a birth year of either 1968 or 1960.",
            "Show the names of singers with birth year either 1968 or 1960.",
            "Show all singers with a birth year in either 1968 or 1960 and a birthday in 1960.",
            "What are the names of singers that were born in either 1968 or 1960?",
            "What are the names of singers that have a birth year of either 1968 or a birthday of 1960?",
            "What are the names of singers who have a birth year of either 1968 or 1960?",
            "find the names of singers who are born between 1968 or 1960.",
            "What are the names that have a singer that was born in 1968 or a singer with more than 100 records?",
            "Who are the singers who were born in 1968 or 1960?",
            "Find the names of singers with birth year either 1968 or 1960",
            "Show the names of singers born after 1968 or 1960.",
            "Find the name all singers with birth year either 1968 or 1960.",
            "Which singers were born in either 1968 or 1960? Find their names.",
            "What are the names of all singers who were born in either 1968 or 1960?",
            "Find the names of the singers who were born in either 1968 or 1960.",
            "Show the names of singers who were born in 1968 or 1960."
        ],
        "templates": [
            "",
            {
                "question": "Show the number of audience in year 2008 or 2010.",
                "masked_template": "Show the number of <mask> in <mask> or <mask>",
                "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Which directors had a movie in either 1999 or 2000?",
                "masked_template": "Which <mask> had a <mask> in <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.0,
                "db_id": "culture_company"
            },
            {
                "question": "Show all director names who have a movie in the year 1999 or 2000.",
                "masked_template": "Show all <mask> names who have a <mask> in the <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.0,
                "db_id": "culture_company"
            },
            {
                "question": "What are the names of the technicians aged either 36 or 37?",
                "masked_template": "What are the names of the <mask> 36 or 37?",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the name of technicians aged either 36 or 37",
                "masked_template": "Show the name of <mask> 36 or 37",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the names of editors of age either 24 or 25.",
                "masked_template": "Show the names of <mask> of age <mask> 24 or 25.",
                "query": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "Show the names of people aged either 35 or 36.",
                "masked_template": "Show the names of <mask> 35 or 36.",
                "query": "SELECT Name FROM people WHERE Age = 35 OR Age = 36",
                "ted": 0.0,
                "db_id": "debate"
            },
            {
                "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
                "masked_template": "Find the ids of the <mask> who are on <mask> in <mask> 1 and <mask> 1.",
                "query": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
                "ted": 0.045454545454545456,
                "db_id": "hospital_1"
            },
            {
                "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
                "masked_template": "What <mask> are on <mask> with <mask> 1 and <mask> 1? <mask> me their <mask>",
                "query": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
                "ted": 0.045454545454545456,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
                "masked_template": "What are the <mask> of <mask> with at least 100 <mask> count or <mask> than <mask>",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100",
                "ted": 0.09090909090909091,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
                "masked_template": "Show the <mask> of <mask> if the <mask> count is <mask> than 100 or the <mask> is <mask> than <mask>",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000",
                "ted": 0.09090909090909091,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Show the countries that have managers of age above 50 or below 46.",
                "masked_template": "Show the <mask> that have <mask> of age <mask> 50 or <mask> 46.",
                "query": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46",
                "ted": 0.09090909090909091,
                "db_id": "railway"
            },
            {
                "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
                "masked_template": "Show the names of <mask> with <mask> more than <mask> or <mask> more than <mask>",
                "query": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
                "ted": 0.09090909090909091,
                "db_id": "climbing"
            },
            {
                "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
                "masked_template": "Show all <mask> with a <mask> in <mask> and a <mask> with more than 100 <mask>",
                "query": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100",
                "ted": 0.09090909090909091,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the official names of cities that have population over 1500 or less than 500?",
                "masked_template": "What are the <mask> names of <mask> that have <mask> or <mask> than <mask>",
                "query": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
                "ted": 0.09090909090909091,
                "db_id": "farm"
            },
            {
                "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
                "masked_template": "What are the names of <mask> that have a <mask> of <mask> or a <mask> of <mask>",
                "query": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
                "ted": 0.09090909090909091,
                "db_id": "climbing"
            },
            {
                "question": "What are the names of people who have a height greater than 200 or less than 190?",
                "masked_template": "What are the names of <mask> who have a <mask> than 200 or <mask> than <mask>",
                "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
                "ted": 0.09090909090909091,
                "db_id": "candidate_poll"
            },
            {
                "question": "find the names of people who are taller than 200 or lower than 190.",
                "masked_template": "find the names of <mask> who are <mask> than 200 or <mask> than <mask>",
                "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
                "ted": 0.09090909090909091,
                "db_id": "candidate_poll"
            },
            {
                "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
                "masked_template": "What are the <mask> that have a <mask> that <mask> in <mask> and a <mask> with more than 100 <mask>",
                "query": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100",
                "ted": 0.09090909090909091,
                "db_id": "shop_membership"
            },
            {
                "question": "Who are the ministers who took office after 1961 or before 1959?",
                "masked_template": "Who are the <mask> who <mask> or <mask>",
                "query": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
                "ted": 0.09090909090909091,
                "db_id": "party_people"
            },
            {
                "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
                "masked_template": "Find the <mask> names of <mask> with <mask> than <mask> or <mask> than <mask>",
                "query": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
                "ted": 0.09090909090909091,
                "db_id": "farm"
            },
            {
                "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
                "masked_template": "Show the <mask> of <mask> than <mask> or <mask> than <mask>",
                "query": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100",
                "ted": 0.09090909090909091,
                "db_id": "roller_coaster"
            },
            {
                "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
                "masked_template": "Find the name all <mask> with <mask> than 10 or <mask> than <mask>",
                "query": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
                "ted": 0.09090909090909091,
                "db_id": "store_product"
            },
            {
                "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
                "masked_template": "Which <mask> have <mask> 3 or <mask> 5? Find the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
                "ted": 0.09090909090909091,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
                "masked_template": "What are the names of all <mask> with a <mask> than 10 or have more than <mask>",
                "query": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
                "ted": 0.09090909090909091,
                "db_id": "store_product"
            },
            {
                "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
                "masked_template": "Find the names of the <mask> with <mask> than 3 or <mask> than 5.",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
                "ted": 0.09090909090909091,
                "db_id": "product_catalog"
            },
            {
                "question": "Show the minister who took office after 1961 or before 1959.",
                "masked_template": "Show the <mask> who <mask> or <mask>",
                "query": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
                "ted": 0.09090909090909091,
                "db_id": "party_people"
            }
        ],
        "best_hyp": "Show the names of singers of age either 24 or 25.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of singers born in either 1968 or 1960?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country , count( * ) FROM singer GROUP BY country",
        "proc_query": "( <col> country </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> singer </tab> ) , grouped by ( <col> country </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "For each country, how many singers are from that country?",
            "For each country, return the country and the count of singers from that country.",
            "Show the country id and count of singers in each country",
            "Show each country and the number of singers from that country.",
            "How many singers are from each country? List the country and the number.",
            "Show the different countries and the number of singers from each country.",
            "List all countries along with the number of singers from each country.",
            "Show different countries along with the number of singers of each country.",
            "For each country, how many singers are from there?",
            "Show different countries of singers and the number of singers of each country",
            "What are the countries and how many singers belong to each country?",
            "Show all countries and the number of singers in each country.",
            "What are the countries and the number of singers from each country?",
            "Find the number of singers for each country.",
            "What are the different countries and how many singers are there for each country?",
            "Show countries and the number of singers in each country.",
            "Show different countries of singers along with the number of singers from each country.",
            "find the number of singers from each country.",
            "How many singers are from each country?",
            "How many singers belong to each country?",
            "Please show the countries and the number of singers from each country.",
            "List all countries and the number of singers in each country",
            "For each country, what are the countries and how many singers are from there?",
            "Show the country ID and number of singers for each country",
            "For each country, report the total number of singers from that country.",
            "Show all countries and corresponding number of singers.",
            "Find all countries of singers and number of singers from each country.",
            "Show the countries and number of singers in each country.",
            "What are the different countries of singers and how many singers belong to each country?",
            "Show the different countries and number of singers from each country.",
            "For each country, show the country number and find how many singers are from it."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "How many singers are from each country?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "For each country, how many singers are from that country?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> conductor </tab> ) , ordered by ( ( <col> year of work </col> ) in descending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all the conductor in descending order of year of work?",
            "List all conductor names by their years of work from old to young",
            "Return the names of all the conductor ordered by age descending.",
            "Show the names of all the conductor in descending order of year of work.",
            "What are the names of all the conductor in the descending order of year of work?",
            "List names of all conductor in the descending order by all years of work.",
            "What are the names of all the conductor by age in descending order?",
            "Find the names of all conductor in the descending order of year of work.",
            "What are the names of all the conductor ordered in descending year of work?",
            "What are the names of all the conductor in descending order of year of work?",
            "List all conductor names in descending order of year of work.",
            "What are the names of the conductor in descending order of year of work?",
            "List the names of all the conductor in descending order of year of work.",
            "List the names of all the conductor in descending order of year of work.",
            "What are the names of all the conductor in the descending order of year of work?",
            "List names of all conductor in the order of their year of work in the most recent year.",
            "What are the names of all the conductor by age?",
            "Find all conductor names sorted by year of work in descending order.",
            "What are the names of all the conductor in descending order of year of work?",
            "List the names of all conductor in descending order of year of work.",
            "Give me a list of all the conductor names ordered by the year of work in descending order.",
            "Show the names of all the conductor in descending order of their year of work.",
            "Show the names of all conductor in descending order of year of work.",
            "What are the names of all the conductor ordered by year of work?",
            "What are the names of the conductor ordered by year of work?",
            "List all the conductor names by the most recent year of work.",
            "List the names of all the conductor in descending order of year of work.",
            "List all conductor names ordered by their years of work in descending order.",
            "List the conductor names in descending order of the year of work.",
            "Find the name of conductor in the descending order of year of work.",
            "What are the names of all the conductor in descending order of year of work?"
        ],
        "templates": [
            "",
            {
                "question": "Sort all captain names by their ages from old to young.",
                "masked_template": "<mask> all <mask> names by their <mask> old to <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Return the characters for actors, ordered by age descending.",
                "masked_template": "Return the <mask> for <mask> ordered by age <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show the name of drivers in descending order of age.",
                "masked_template": "Show the name of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM driver ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
                "masked_template": "What are the names of all the <mask> in the <mask> by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
                "masked_template": "List names of all <mask> in the <mask> ordered by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "What are the names of everybody sorted by age in descending order?",
                "masked_template": "What are the names of <mask> by age in <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "Find the names of all person sorted in the descending order using age.",
                "masked_template": "Find the names of all <mask> in the <mask> order <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "What are the names of all the clubs ordered in descending alphabetical order?",
                "masked_template": "What are the names of all the <mask> ordered in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the characters of actors in descending order of age?",
                "masked_template": "What are the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "List all club names in descending alphabetical order.",
                "masked_template": "List all <mask> names in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the names of the counties of public safety, ordered by population descending?",
                "masked_template": "What are the names of the <mask> of <mask> ordered by <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the names of counties in descending order of population.",
                "masked_template": "List the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the name of enzymes in descending lexicographical order.",
                "masked_template": "List the name of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
                "masked_template": "What are the <mask> of all the <mask> in the <mask> order of <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "List venues of all matches in the order of their dates starting from the most recent one.",
                "masked_template": "List <mask> of all <mask> in the order of their <mask> the most <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What are the names of captains, sorted by age descending?",
                "masked_template": "What are the names of <mask> by age <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
                "masked_template": "Find all <mask> and <mask> by <mask> in <mask>",
                "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What are the names of enzymes in descending order?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Sort the names of all counties in descending alphabetical order.",
                "masked_template": "<mask> the names of all <mask> in <mask>",
                "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
                "masked_template": "<mask> me a list of all the <mask> names <mask> by the <mask> in <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Show the working years of managers in descending order of their level.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of their <mask>",
                "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "Show the case burden of counties in descending order of population.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the case burdens of counties, ordered descending by population?",
                "masked_template": "What are the <mask> of <mask> ordered <mask> by <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the names of the wrestlers, ordered descending by days held?",
                "masked_template": "What are the names of the <mask> ordered <mask> by <mask>",
                "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "List all the event names by year from the most recent to the oldest.",
                "masked_template": "List all the <mask> names by <mask> the most <mask> to the <mask>",
                "query": "SELECT name FROM event ORDER BY YEAR DESC",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "List the votes of elections in descending order.",
                "masked_template": "List the <mask> of <mask> in <mask>",
                "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "List all channel names ordered by their rating in percent from big to small.",
                "masked_template": "List all <mask> names ordered by their <mask> in <mask> big to <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Sort the company names in descending order of the company's market value.",
                "masked_template": "<mask> the <mask> names in <mask> order of the <mask>",
                "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the first name of students in the descending order of age.",
                "masked_template": "Find the <mask> name of <mask> in the <mask> order of <mask>",
                "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the names of buildings sorted in descending order of building height?",
                "masked_template": "What are the names of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM buildings ORDER BY Height DESC",
                "ted": 0.0,
                "db_id": "company_office"
            }
        ],
        "best_hyp": "What are the names of all the conductor in the descending order of year of work?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all the conductor in descending order of year of work?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "select avg( capacity ) , max( capacity ) from stadium",
        "proc_query": "( the <col> average </col> of ( <col> capacity </col> ) ) , ( the maximum of ( <col> capacity </col> ) ) that belongs to ( <tab> stadium </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the average and maximum capacity of stadiums?",
            "Find the average and maximum capacity of all stadiums.",
            "what are the average and maximum capacity of all stadiums?",
            "What is average and maximum capacity of all stadiums?",
            "What is the average and maximum capacity of all stadiums?",
            "What is the average and maximum number of capacity of all the stadiums?",
            "Return the average and maximum capacity across all stadiums",
            "Show the average low capacity and maximum capacity in stadiums per capacity",
            "What is the average and maximum capacity of stadiums?",
            "Return the average capacity as well as the maximum capacity of all stadiums",
            "What are the average and maximum capacity of all stadiums?",
            "What are the average and maximum capacity of stadiums?",
            "Tell me the average and maximum capacity count across all the stadiums",
            "Tell me the average and maximum capacity of stadiums.",
            "What are the average and maximum capacity of stadiums?"
        ],
        "templates": [
            "",
            {
                "question": "Find the average and maximum rating of all reviews.",
                "masked_template": "Find the average and maximum <mask> of all <mask>",
                "query": "SELECT avg( rating ) , max( rating ) FROM review",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "what are the average and maximum attendances of all events?",
                "masked_template": "what are the average and maximum <mask> of all <mask>",
                "query": "SELECT avg( Event_Attendance ) , max( Event_Attendance ) FROM event",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "What is average and maximum salary of all employees.",
                "masked_template": "What is average and maximum <mask> of all <mask>",
                "query": "SELECT avg( salary ) , max( salary ) FROM Employee",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the average and largest salary of all employees?",
                "masked_template": "What is the average and <mask> of all <mask>",
                "query": "SELECT avg( salary ) , max( salary ) FROM Employee",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the minimum and maximum number of bathrooms of all the apartments?",
                "masked_template": "What is the <mask> and maximum number of <mask> of all the <mask>",
                "query": "SELECT min( bathroom_count ) , max( bathroom_count ) FROM Apartments",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Return the minimum and maximum crime rates across all counties.",
                "masked_template": "Return the <mask> and maximum <mask> all <mask>",
                "query": "SELECT min( Crime_rate ) , max( Crime_rate ) FROM county_public_safety",
                "ted": 0.07142857142857142,
                "db_id": "county_public_safety"
            },
            {
                "question": "show the lowest low temperature and highest wind speed in miles per hour.",
                "masked_template": "show the <mask> low <mask> and <mask> in <mask> per <mask>",
                "query": "SELECT min( low_temperature ) , max( wind_speed_mph ) FROM weekly_weather",
                "ted": 0.07142857142857142,
                "db_id": "station_weather"
            },
            {
                "question": "What is the average and total transaction amount?",
                "masked_template": "What is the average and total <mask>",
                "query": "SELECT avg( transaction_amount ) , sum( transaction_amount ) FROM Financial_transactions",
                "ted": 0.07142857142857142,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Return the average transaction amount, as well as the total amount of all transactions.",
                "masked_template": "Return the average <mask> as <mask> as the total <mask> of all <mask>",
                "query": "SELECT avg( transaction_amount ) , sum( transaction_amount ) FROM Financial_transactions",
                "ted": 0.07142857142857142,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the average score and average staff number of all shops?",
                "masked_template": "What are the average <mask> and average <mask> number of all <mask>",
                "query": "SELECT avg( num_of_staff ) , avg( score ) FROM shop",
                "ted": 0.07142857142857142,
                "db_id": "coffee_shop"
            },
            {
                "question": "What are the minimum and maximum crime rate of counties?",
                "masked_template": "What are the <mask> and maximum <mask> of <mask>",
                "query": "SELECT min( Crime_rate ) , max( Crime_rate ) FROM county_public_safety",
                "ted": 0.07142857142857142,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give me the minimum and maximum bathroom count among all the apartments.",
                "masked_template": "<mask> me the <mask> and maximum <mask> count <mask> all the <mask>",
                "query": "SELECT min( bathroom_count ) , max( bathroom_count ) FROM Apartments",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Give me the average and minimum price (in Euro) of the products.",
                "masked_template": "<mask> me the average and <mask> (in <mask> of the <mask>",
                "query": "SELECT avg( price_in_euros ) , min( price_in_euros ) FROM catalog_contents",
                "ted": 0.07142857142857142,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the average and minimum price (in Euro) of all products?",
                "masked_template": "What are the average and <mask> (in <mask> of all <mask>",
                "query": "SELECT avg( price_in_euros ) , min( price_in_euros ) FROM catalog_contents",
                "ted": 0.07142857142857142,
                "db_id": "product_catalog"
            }
        ],
        "best_hyp": "What are the average and maximum capacity of stadiums?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average and maximum capacity of stadiums?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "proc_query": "( <col> location </col> ) , ( <col> name </col> ) that belongs to ( <tab> stadium </tab> ) , that have ( ( <col> capacity </col> ) between ( <val> 5000 </val> ) and ( <val> 10000 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the locations and names of stadiums with capacity between 5000 and 10000?",
            "Return the names and ids of all stadiums whose capacity is between 600 and 10000",
            "Find the location and name of the stadiums which can sit 50 to 100 people and their capacity is between 5000 and 10000",
            "What are the location and name for stadiums which can seat between 5000 to 100 people?",
            "Find the location and name of stadiums with capacity between 5000 and 10000.",
            "Show the location and name for stadiums that can seat between 5000 and 10000 people",
            "What are the location and name of stadiums with capacity between 5000 and 10000?",
            "List the location and name of stadiums that have the capacity of between 5000 and 10000",
            "What are the locations and names of stadiums with capacity between 5000 and 10000?",
            "What are the location and name of all stadiums with capacity between 5000 and 10000?",
            "What are the location and name for all stadiums that can seat between 5000 and 10000 people?",
            "Find the location and name of stadiums with capacity between 5000 and 10000",
            "Find the location and name of stadiums with capacity between 5000 and 10000.",
            "What are the location and name of stadiums for stadiums with maximum capacity between 5000 and 10000",
            "Which stadium has capacity between 5000 and 10000? List each location and name.",
            "Find all the stadiums that have a capacity bigger than 160 and can accommodate more than 2,000 people. Show location and name.",
            "What are the location and name of all the stadiums that can seat more than 160 and can accommodate more than two people?"
        ],
        "templates": [
            "",
            {
                "question": "Return the names and ids of all products whose price is between 600 and 700.",
                "masked_template": "Return the names and ids of all <mask> whose <mask> is <mask> 600 and <mask>",
                "query": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
                "masked_template": "Find the <mask> number of the <mask> which can sit 50 to 100 <mask> and their <mask>",
                "query": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
                "masked_template": "What are the <mask> numbers and <mask> for <mask> which can <mask> 50 to 100 <mask>",
                "query": "SELECT building , room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Find the name and level of catalog structure with level between 5 and 10.",
                "masked_template": "Find the name and <mask> of <mask> with <mask> 5 and 10.",
                "query": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
                "masked_template": "Show the <mask> and name for <mask> that <mask> and <mask>",
                "query": "SELECT organized_by , name FROM church WHERE open_date BETWEEN 1830 AND 1840",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "What are the name and level of catalog structure with level number between 5 and 10",
                "masked_template": "What are the name and <mask> of <mask> with <mask> number <mask> 5 and 10",
                "query": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.",
                "masked_template": "List the <mask> name and <mask> name of <mask> have the <mask> of <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the names and ids of products costing between 600 and 700?",
                "masked_template": "What are the names and ids of <mask> 600 and <mask>",
                "query": "SELECT product_name , product_id FROM products WHERE product_price BETWEEN 600 AND 700",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?",
                "masked_template": "What are the <mask> and <mask> names of all <mask> with <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
                "masked_template": "What are the <mask> names and <mask> for all <mask> that <mask> and <mask>",
                "query": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Find the name and population of district with population between 200000 and 2000000",
                "masked_template": "Find the name and <mask> of <mask> with <mask> and <mask>",
                "query": "SELECT District_name , City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
                "masked_template": "<mask> job <mask> the difference <mask> and maximum <mask> for <mask> which max <mask> the <mask> to <mask>",
                "query": "SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
                "ted": 0.07142857142857142,
                "db_id": "hr_1"
            },
            {
                "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
                "masked_template": "What are the job <mask> and <mask> of <mask> for <mask> with maximum <mask> and <mask>",
                "query": "SELECT job_title , max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
                "ted": 0.07142857142857142,
                "db_id": "hr_1"
            },
            {
                "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
                "masked_template": "Which <mask> age is <mask> than 18 and is <mask> in <mask> List each <mask> and <mask>",
                "query": "SELECT Fname , Lname FROM Student WHERE Age > 18 AND Major = 600",
                "ted": 0.07692307692307693,
                "db_id": "restaurant_1"
            },
            {
                "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
                "masked_template": "Find all the <mask> that have a <mask> than 160 and can <mask> more than 2 <mask> names and <mask>",
                "query": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2",
                "ted": 0.07692307692307693,
                "db_id": "inn_1"
            },
            {
                "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
                "masked_template": "What are the <mask> names and ids of all the <mask> that <mask> more than 160 and can <mask> more than two <mask>",
                "query": "SELECT roomName , RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2",
                "ted": 0.07692307692307693,
                "db_id": "inn_1"
            }
        ],
        "best_hyp": "Find the location and name of stadiums with capacity between 5000 and 10000.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the locations and names of stadiums with capacity between 5000 and 10000?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2038 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2026",
        "proc_query": "( <col> record company </col> ) that belongs to ( <tab> orchestra </tab> ) , that have ( ( <col> year of founded </col> ) less than ( <val> 2038 </val> ) ), and intersect with ( ( <col> record company </col> ) that belongs to ( <tab> orchestra </tab> ) , that have ( ( <col> year of founded </col> ) greater than ( <val> 2026 </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show the record companies that have both an orchestra that was founded before 2038 and an orchestra founded after 2026.",
            "What are the record companies owned by both musicians founded before 2038 and musicians founded after 2026?",
            "Show the record companies owned by both musicians founded before 2038 and musicians founded after 2026",
            "Show the record companies that have both musicians founded before 2038 and musicians founded after 2026.",
            "Show the record companies that have both an orchestra with founded year than 2038 and an orchestra founded before 2026.",
            "Which record company has both musicians founded before 2038 and musicians founded after 2026?",
            "Show the record companies that have both an orchestra founded before 2038 and one that was founded after 2026.",
            "List all of the record companies with a history of at least 20 years and an orchestra founded after 2026.",
            "Show the record companies shared by musicians with founded year before 2038 and musicians with founding year after 2026",
            "Show the record companies owned by artists with founded year before 2038 and artists founded after 2026",
            "Which record companies correspond to both musicians that have a founded year before 2038 and musicians that are founded after 2026?",
            "Show the record companies that have both musicians with founded year before 2038 and musicians with founding year after 2026",
            "Show the names of record companies that have both musicians with founded year before 2038 and musicians with founding year after 2026",
            "What are the names of the record companies that have both musicians with founded year before 2038 and musicians with founding year after 2026?",
            "What are the record companies that have both musicians that are founded before 2038 and musicians that were founded after 2026?",
            "What are the record companies with both an orchestra having more than 20 years of founded and an orchestra founded before 2026?",
            "What are the names of both record companies that have more than 20 20 years of history and more than 10 years of existence?",
            "Show the names which are in both the record companies with id 3 and the record company with id 1.",
            "Which record companies are both associated with the orchestra that was founded before 2038 and the music companies that were founded after 2026?",
            "Find the record companies that have both musicians with more than 20 years of founded and musicians with less than 2026.",
            "Show the record companies that have both musicians with more than 10 years of founded and musicians with less than 3 years of founding",
            "What are the record companies that have both musicians with more than 20 years of founded and musicians with less than 2026?",
            "Show the record companies that have both artists of age 50 and musicians of age 46.",
            "Show the record companies owned by musicians founded before 2038 and musicians founded after 2026.",
            "Which record companies did both musicians founded before 2038 and musicians founded after 2026?",
            "Show all the record companies in both year 2038 and year 2026",
            "Which record company has both an orchestra with founded year than 2038 and an orchestra founded before 2026?",
            "Which record companies have both artists of age 45 and musicians of age 35?",
            "Show the record companies that have both musicians founded before 2038 and musicians founded after 2026.",
            "Show the record companies that have albums with founded year more than 2038 and albums with founding year than 2026",
            "Which record companies have both an orchestra founded before 2038 and an orchestra that was founded after 2026?"
        ],
        "templates": [
            "",
            {
                "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
                "masked_template": "What are the <mask> by both <mask> and <mask>",
                "query": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
                "masked_template": "Show the <mask> by <mask> and <mask>",
                "query": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
                "masked_template": "Show the <mask> that have both <mask> and <mask>",
                "query": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than 32 and <mask> with <mask> than 64.",
                "query": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "Which address has both members younger than 30 and members older than 40?",
                "masked_template": "Which <mask> has both <mask> than 30 and <mask> than 40?",
                "query": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
                "ted": 0.0,
                "db_id": "coffee_shop"
            },
            {
                "question": "Show the country where people older than 30 and younger than 25 are from.",
                "masked_template": "Show the <mask> than 30 and <mask> than 25 are <mask>",
                "query": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
                "masked_template": "List all of the <mask> ids with a <mask> of at least <mask> and an <mask> than 85.",
                "query": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85",
                "ted": 0.029411764705882353,
                "db_id": "soccer_1"
            },
            {
                "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
                "masked_template": "Show the <mask> by <mask> with <mask> than <mask> and <mask> with <mask>",
                "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
                "ted": 0.058823529411764705,
                "db_id": "device"
            },
            {
                "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
                "masked_template": "Show the <mask> by <mask> with <mask> than <mask> and <mask> than <mask>",
                "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
                "ted": 0.058823529411764705,
                "db_id": "farm"
            },
            {
                "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
                "masked_template": "Which <mask> to both <mask> that have a <mask> and <mask> that have a <mask> than <mask>",
                "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
                "ted": 0.058823529411764705,
                "db_id": "farm"
            },
            {
                "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
                "ted": 0.058823529411764705,
                "db_id": "solvency_ii"
            },
            {
                "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
                "masked_template": "Show the <mask> of <mask> that have both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "ted": 0.058823529411764705,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
                "masked_template": "What are the <mask> of the <mask> that have both <mask> with <mask> more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "ted": 0.058823529411764705,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
                "masked_template": "What are the <mask> that have both <mask> that are <mask> than <mask> and <mask> than <mask>",
                "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
                "ted": 0.058823529411764705,
                "db_id": "climbing"
            },
            {
                "question": "What are the positions with both players having more than 20 points and less than 10 points.",
                "masked_template": "What are the <mask> with both <mask> having more than 20 <mask> and <mask> than 10 <mask>",
                "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
                "ted": 0.058823529411764705,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
                "masked_template": "What are the <mask> of both <mask> that have more than 20 20 <mask> and <mask> than 10 <mask>",
                "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
                "ted": 0.058823529411764705,
                "db_id": "sports_competition"
            },
            {
                "question": "Show the member names which are in both the party with id 3 and the party with id 1.",
                "masked_template": "Show the <mask> names which are in both the <mask> with id 3 and the <mask> with id 1.",
                "query": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
                "ted": 0.058823529411764705,
                "db_id": "party_people"
            },
            {
                "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
                "masked_template": "Which <mask> both <mask> that <mask> the <mask> and <mask> that <mask>",
                "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
                "ted": 0.058823529411764705,
                "db_id": "device"
            },
            {
                "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
                "masked_template": "Find the <mask> have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
                "ted": 0.058823529411764705,
                "db_id": "race_track"
            },
            {
                "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
                "masked_template": "Show the <mask> that have both <mask> with more than 10 <mask> of <mask> and <mask> with <mask> than 3 <mask> of <mask>",
                "query": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
                "ted": 0.058823529411764705,
                "db_id": "news_report"
            },
            {
                "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
                "masked_template": "What are the <mask> that have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
                "ted": 0.058823529411764705,
                "db_id": "race_track"
            },
            {
                "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
                "masked_template": "Show the <mask> that have both <mask> of age <mask> 50 and <mask> of age <mask> 46.",
                "query": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
                "ted": 0.058823529411764705,
                "db_id": "railway"
            },
            {
                "question": "Show the hometowns shared by people older than 23 and younger than 20.",
                "masked_template": "Show the <mask> by <mask> than 23 and <mask> than 20.",
                "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
                "ted": 0.058823529411764705,
                "db_id": "gymnast"
            },
            {
                "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
                "masked_template": "<mask> which <mask> did both <mask> than 23 and <mask> than 20 <mask>",
                "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
                "ted": 0.058823529411764705,
                "db_id": "gymnast"
            },
            {
                "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
                "masked_template": "Show all the <mask> in both <mask> and <mask>",
                "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
                "ted": 0.058823529411764705,
                "db_id": "cinema"
            },
            {
                "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
                "masked_template": "Which <mask> has both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
                "ted": 0.058823529411764705,
                "db_id": "swimming"
            },
            {
                "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
                "masked_template": "Which <mask> have both <mask> of age <mask> 45 and <mask> of age <mask> 35?",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "ted": 0.058823529411764705,
                "db_id": "party_host"
            },
            {
                "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
                "masked_template": "Show the <mask> that have both <mask> than 45 and <mask> than 35.",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "ted": 0.058823529411764705,
                "db_id": "party_host"
            },
            {
                "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
                "masked_template": "Show the <mask> that have <mask> with <mask> more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
                "ted": 0.058823529411764705,
                "db_id": "climbing"
            },
            {
                "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
                "masked_template": "Which <mask> names are <mask> in the <mask> with the id 3 and the <mask> with the id 1?",
                "query": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
                "ted": 0.058823529411764705,
                "db_id": "party_people"
            }
        ],
        "best_hyp": "What are the record companies that have both musicians with more than 20 years of founded and musicians with less than 2026?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show the record companies that have both an orchestra that was founded before 2038 and an orchestra founded after 2026.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT count( * ) FROM singer",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> singer </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many singers are there?",
            "Count the number of singers.",
            "How many singers are there?",
            "How many singers are there?",
            "How many singers do we have?",
            "Count the number of singers.",
            "What is the total number of singers?",
            "How many singers are there?",
            "How many singers do we have?",
            "Show the number of singers.",
            "Find the number of singers in total",
            "What is the number of singers?",
            "How many singers are there?",
            "How many singers are there?",
            "Find the total number of singers.",
            "How many singers are there?",
            "How many CSU singers are there?",
            "Return the total number of distinct singers.",
            "Count the number of singers.",
            "How many singers are there?",
            "Count how many singers have appeared in our record.",
            "How many singers are there?",
            "How many singers are there?",
            "Find the number of singers.",
            "Find the number of distinct singers.",
            "How many singers are there?",
            "What is the total number of singers?",
            "Count the number of singers.",
            "How many singers are there?",
            "How many singers are there?",
            "How many distinct singers are listed in the database?"
        ],
        "templates": [
            "",
            {
                "question": "Count the number of budget codes.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM Ref_budget_codes",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many schools are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM school",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "How many counties are there in total?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many statements do we have?",
                "masked_template": "How many <mask> do we <mask>",
                "query": "SELECT count( * ) FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the total number of counties.",
                "masked_template": "Count the total number of <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the total number of faculty members?",
                "masked_template": "What is the total number of <mask>",
                "query": "SELECT count( * ) FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many video games exist?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many video games do you have?",
                "masked_template": "How many <mask> do you <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show the number of trains",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( * ) FROM train",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the number of students in total.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the number of technicians?",
                "masked_template": "What is the number of <mask>",
                "query": "SELECT count( * ) FROM technician",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "how many ships are there?",
                "masked_template": "how many <mask> are <mask>",
                "query": "SELECT count( * ) FROM ship",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "How many aircrafts exist in the database?",
                "masked_template": "How many <mask> in the <mask>",
                "query": "SELECT count( * ) FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the total number of catalog contents.",
                "masked_template": "Find the total number of <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many products are there in the records?",
                "masked_template": "How many <mask> are there in the <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many CSU campuses are there?",
                "masked_template": "How many CSU <mask> are <mask>",
                "query": "SELECT count( * ) FROM campuses",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "Return the total number of distinct customers.",
                "masked_template": "Return the total number of distinct <mask>",
                "query": "SELECT count( * ) FROM customers",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Count the number of total papers.",
                "masked_template": "Count the number of total <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "How many staff in total?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Count how many appointments have been made in total.",
                "masked_template": "Count how many <mask> have <mask> in <mask>",
                "query": "SELECT count( * ) FROM appointment",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many followers does each user have?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) FROM follows",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many papers are published in total?",
                "masked_template": "How many <mask> are <mask> in <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of reviews.",
                "masked_template": "Find the number of <mask>",
                "query": "SELECT count( * ) FROM review",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of distinct amenities.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( * ) FROM dorm_amenity",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "How many dorms are in the database?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM dorm",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the total number of rooms available in this inn?",
                "masked_template": "What is the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM Rooms",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Count the number of documents with expenses.",
                "masked_template": "Count the number of <mask> with <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many documents have expenses?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many council taxes are collected for renting arrears ?",
                "masked_template": "How many <mask> are <mask> for <mask> ?",
                "query": "SELECT count( * ) FROM rent_arrears",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "How many distinct courses are enrolled in by students?",
                "masked_template": "How many distinct <mask> are <mask> in by <mask>",
                "query": "SELECT count( course_id ) FROM Student_Course_Enrolment",
                "ted": 0.0,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "How many singers are there?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many singers are there?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name , count( * ) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
        "proc_query": "( <col> name </col> of <tab> stadium </tab> ) , ( the number of ( all items ) ) that belongs to ( ( <tab> concert </tab> ) , and ( ( <tab> stadium </tab> ) satisfied that ( ( <col> stadium id </col> of <tab> concert </tab> ) equal to ( <col> stadium id </col> of <tab> stadium </tab> ) ) ) ) , grouped by ( <col> stadium id </col> of <tab> concert </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show the names of stadiums and the number of concerts in each stadium.",
            "List the id of stadiums where artists have been to and the number of their performances.",
            "How many concerts are held in each stadium?",
            "List the name of all stadiums along with the number of concerts that have taken place there",
            "How many concerts do each stadium have? List their names and number of performances.",
            "Show the id of each stadium along with the number of times he or she visited there",
            "What are the stadium names and the number of concerts in each stadium?",
            "Show all the stadiums and the number of concerts held in each stadium",
            "How many concerts are held at each stadium? List the stadium name and the number of concerts.",
            "Find the number of concerts each stadium belongs to. Show the stadium name along with the stadium id.",
            "For each stadium, find their name and the number of concerts held there.",
            "Show stadium names and the number of concerts for each stadium.",
            "How many concerts are there for each stadium?",
            "Show all the stadium names and the number of concerts in each stadium.",
            "How many concerts happened in each stadium? Return the stadium names and the number of concerts.",
            "For each stadium, show the name of the stadium and the number of concerts in it.",
            "Show the names of stadiums and the number of concerts they have.",
            "Show the name of stadiums and the number of concerts in each stadium.",
            "Return the name of each stadium and the number of times he or she visited there.",
            "How many concerts has each stadium held?",
            "Show all stadium names and the number of concerts in each stadium.",
            "What are all the different stadiums and how many concerts has each stadium held?",
            "Show stadium names along with the number of concerts for each stadium.",
            "Show the name and number of concerts in each stadium",
            "What are the different stadiums and how many concerts have taken place there?",
            "Find the name of each stadium and number of concerts held there.",
            "How many concerts are there in each stadium? Return both the stadium name and the number.",
            "For each stadium, show the name of the stadium and the number of concerts there.",
            "Show the stadium name with the number of gas stations.",
            "How many concerts each stadium correspond to? List the stadium id and the number of concerts.",
            "Show all stadium names along with the number of concerts in each stadium."
        ],
        "templates": [
            "",
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "masked_template": "List the id of <mask> who <mask> and the number of their <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many members are in each party?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "List the name of all products along with the number of complaints that they have received.",
                "masked_template": "List the name of all <mask> with the number of <mask> that <mask> have <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
                "masked_template": "How many <mask> do each <mask> of? List their names and number of <mask> of.",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
                "masked_template": "Show the <mask> id of each <mask> with the number of <mask> he or she <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty id and the number of students each faculty has?",
                "masked_template": "What are the <mask> id and the number of <mask> each <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show all the faculty ranks and the number of students advised by each rank.",
                "masked_template": "Show all the <mask> and the number of <mask> by each <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
                "masked_template": "How many <mask> are <mask> by each <mask> of <mask> List the <mask> and the number of <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
                "masked_template": "Find the number of <mask> each <mask> to. Show the number <mask> with the <mask> id.",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "For each user, find their name and the number of reviews written by them.",
                "masked_template": "For each <mask> find their name and the number of <mask> by <mask>",
                "query": "SELECT T1.name , count( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Show party names and the number of events for each party.",
                "masked_template": "Show <mask> names and the number of <mask> for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "How many events are there for each party?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all the activity names and the number of faculty involved in each activity.",
                "masked_template": "Show all the <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
                "masked_template": "How many <mask> in each <mask> Return the <mask> names and the number of <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For each building, show the name of the building and the number of institutions in it.",
                "masked_template": "For each <mask> show the name of the <mask> and the number of <mask> in it.",
                "query": "SELECT T1.name , count( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the names of pilots and the number of records they have.",
                "masked_template": "Show the names of <mask> and the number of <mask>",
                "query": "SELECT T2.Pilot_name , COUNT( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the name of track and the number of races in each track.",
                "masked_template": "Show the name of <mask> and the number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Return the name of each physician and the number of patients he or she treats.",
                "masked_template": "Return the name of each <mask> and the number of <mask> he or she <mask>",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many exhibitions has each artist had?",
                "masked_template": "How many <mask> has each <mask>",
                "query": "SELECT T2.name , count( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all party names and the number of members in each party.",
                "masked_template": "Show all <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are all the different product names, and how many complains has each received?",
                "masked_template": "What are all the different <mask> and how many <mask> has each <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "Show institution names along with the number of proteins for each institution.",
                "masked_template": "Show <mask> names <mask> with the number of <mask> for each <mask>",
                "query": "SELECT T1.institution , count( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the station name and number of trains in each station.",
                "masked_template": "Show the <mask> name and number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the different card types, and how many transactions have been made with each?",
                "masked_template": "What are the different <mask> and how many <mask> have <mask> with <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the name of each user and number of tweets tweeted by each of them.",
                "masked_template": "Find the name of each <mask> and number of <mask> by each of <mask>",
                "query": "SELECT T1.name , count( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
                "masked_template": "How many <mask> are there in each <mask> Return both the <mask> and the <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "For every student who is registered for some course, how many courses are they registered for?",
                "masked_template": "For <mask> who is <mask> for <mask> how many <mask> are <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Show the company name with the number of gas station.",
                "masked_template": "Show the <mask> name with the number of gas <mask>",
                "query": "SELECT T2.company , count( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
                "masked_template": "How many <mask> each <mask> to? List the <mask> id and the number of <mask>",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show all cities along with the number of drama workshop groups in each city.",
                "masked_template": "Show all <mask> with the number of <mask> in each <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "For each stadium, show the name of the stadium and the number of concerts in it.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show the names of stadiums and the number of concerts in each stadium.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Name FROM singer WHERE Singer_ID NOT IN ( SELECT Singer_ID FROM song )",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> singer id </col> ) not in ( ( <col> singer id </col> ) that belongs to ( <tab> song </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of singers who have never sung a song?",
            "List the names of singers that do not have any song.",
            "List the names of singers that are not in any song",
            "List the names of singers that are not in any song.",
            "Find the name of the singers that do not have any song.",
            "What are the names of singers who have never sung songs?",
            "What are the names of singers who have never sung songs?",
            "Find the names of singers who did not appear in any song.",
            "what are the names of singers who did not appear in any song?",
            "Find the name of singers who are not in any song",
            "What are the names of all singers that are not in any song?",
            "List the names of singers who did not win any song",
            "What are the names of all singers that have never won any song?",
            "List the names of singers that do not have any song.",
            "Which singers do not have any song? Tell me the singers' names.",
            "List the names of singers that are not in any song",
            "What are the names of singers who do not have any song?",
            "Find the names of singers that do not have any song.",
            "List the names of singers that have no songs.",
            "What are all names of singers who sang songs but not produced any songs?",
            "What are the names of singers who have never sung songs?",
            "List the names of singers that are not produced by any song.",
            "What are the names of singers that do not have a song?",
            "What are the names of singers that do not have any song?",
            "Which singers have no songs? List the singers' names.",
            "What are the names of the singers with no songs?",
            "What are the names of all singers that have not sung songs?",
            "Find the names of all singers that have no songs.",
            "List the names of singers who did not appear in any song",
            "Find all the name of singers without any song.",
            "What are the names of singers that do not have any song?"
        ],
        "templates": [
            "",
            {
                "question": "List the names of mountains that do not have any climber.",
                "masked_template": "List the names of <mask> that do not have any <mask>",
                "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN ( SELECT Mountain_ID FROM climber )",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "List the names of products that are not in any event.",
                "masked_template": "List the names of <mask> that are not in any <mask>",
                "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN ( SELECT Product_ID FROM Products_in_Events )",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "List the name of artworks that are not nominated.",
                "masked_template": "List the name of <mask> that are not <mask>",
                "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN ( SELECT Artwork_ID FROM nomination )",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Find the name of the courses that do not have any prerequisite?",
                "masked_template": "Find the name of the <mask> that do not have any <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of courses without prerequisites?",
                "masked_template": "What are the names of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of instructors who didn't teach?",
                "masked_template": "What are the names of <mask> who <mask>",
                "query": "SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Give the names of people who did not participate in the candidate election.",
                "masked_template": "<mask> the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "what are the names of people who did not participate in the candidate election.",
                "masked_template": "what are the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "Find the first name of students not enrolled in any course.",
                "masked_template": "Find the <mask> name of <mask> not <mask> in any <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the first names of all students that are not enrolled in courses?",
                "masked_template": "What are the <mask> names of all <mask> that are not <mask> in <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "List the names of aircrafts and that did not win any match.",
                "masked_template": "List the names of <mask> and that did not win any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aicrafts that have never won any match?",
                "masked_template": "What are the names of all <mask> that have <mask> won any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "List the locations of schools that do not have any player.",
                "masked_template": "List the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Which schools do not have any player? Give me the school locations.",
                "masked_template": "Which <mask> do not have any <mask> me the <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "List the names of people that are not perpetrators.",
                "masked_template": "List the names of <mask> that are not <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM perpetrator )",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "What are the famous titles of artists who do not have any volumes?",
                "masked_template": "What are the <mask> of <mask> who do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Find the famous titles of artists that do not have any volume.",
                "masked_template": "Find the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "List the names of buildings that have no company office.",
                "masked_template": "List the names of <mask> that have no <mask>",
                "query": "SELECT name FROM buildings WHERE id NOT IN ( SELECT building_id FROM Office_locations )",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What are all info of students who registered courses but not attended courses?",
                "masked_template": "What are all <mask> of <mask> who <mask> but not <mask>",
                "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance )",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the titles of courses without prerequisites?",
                "masked_template": "What are the <mask> of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "List the names of people that are not employed by any company",
                "masked_template": "List the names of <mask> that are not <mask> by any <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM employment )",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "What are the titles of films that do not have a film market estimation?",
                "masked_template": "What are the <mask> of <mask> that do not have a <mask>",
                "query": "SELECT Title FROM film WHERE Film_ID NOT IN ( SELECT Film_ID FROM film_market_estimation )",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are the names of counties that do not contain any cities?",
                "masked_template": "What are the names of <mask> that do not <mask> any <mask>",
                "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN ( SELECT County_ID FROM city )",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Which projects have no outcome? List the project details.",
                "masked_template": "Which <mask> have no <mask> List the <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the details of the project with no outcomes?",
                "masked_template": "What are the <mask> of the <mask> with no <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the titles of all movies that have not been rated?",
                "masked_template": "What are the <mask> of all <mask> that have not <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies that have no ratings.",
                "masked_template": "Find the <mask> of all <mask> that have no <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "List the names of members who did not participate in any round.",
                "masked_template": "List the names of <mask> who did not <mask> in any <mask>",
                "query": "SELECT Name FROM member WHERE Member_ID NOT IN ( SELECT Member_ID FROM round )",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "Find all the name of documents without any sections.",
                "masked_template": "Find all the name of <mask> any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "What are the names of documents that do not have any sections?",
                "masked_template": "What are the names of <mask> that do not have any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            }
        ],
        "best_hyp": "What are the names of singers that do not have a song?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of singers who have never sung a song?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Age ASC",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> conductor </tab> ) , ordered by ( ( <col> age </col> ) in ascending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all the conductor in ascending order of age?",
            "List the names of all conductor in ascending order of age.",
            "What are the names of the conductor in ascending order of age?",
            "List the names of all the conductor in ascending order of age.",
            "List all the conductor names in ascending order of age.",
            "What are the names of the conductor in ascending order of the age?",
            "Find the names of all conductor by their 100th birthday in ascending order.",
            "List all conductor names ordered by age in ascending order.",
            "List the names of all the conductor in ascending order of age.",
            "List the names of all the conductor in ascending order of age.",
            "Show the names of all the conductor in ascending order of age.",
            "List the names of all the conductor in ascending order of age.",
            "What are the names of all the conductor in ascending order of age?",
            "List all the names of the conductor in ascending order of age.",
            "What are the names of all the conductor ordered by age ascending?",
            "What are the names of all the conductor?",
            "What are the names of the conductor in ascending order of age?",
            "Find the names of all the conductor ordered in ascending order of age.",
            "List the names of all the conductor in ascending order of age.",
            "List the names of the conductor in ascending order of age.",
            "List the names of the conductor and their age in ascending order of the age.",
            "List the conductor names in ascending order of age.",
            "What are all the conductor names in ascending order of age?",
            "Please list all conductor names in ascending order of age.",
            "What are the names of the conductor in ascending order of age?",
            "Return all the conductor numbers sorted by the age count in ascending order.",
            "What are the different conductor names in ascending order of age?",
            "List in ascending order all different conductor names.",
            "Give me a list of all the names of the conductor in ascending order.",
            "What are the names of all the conductor in ascending order of age?",
            "List the names of all the conductor in ascending order of age."
        ],
        "templates": [
            "",
            {
                "question": "List the carriers of devices in ascending alphabetical order.",
                "masked_template": "List the <mask> of <mask> in <mask>",
                "query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the first names of the people in alphabetical order?",
                "masked_template": "What are the <mask> names of the <mask> in <mask>",
                "query": "SELECT first_name FROM people ORDER BY first_name",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "List the names of all the customers in alphabetical order.",
                "masked_template": "List the names of all the <mask> in <mask>",
                "query": "SELECT customer_details FROM customers ORDER BY customer_details",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Sort the customer names in alphabetical order.",
                "masked_template": "<mask> the <mask> names in <mask>",
                "query": "SELECT customer_details FROM customers ORDER BY customer_details",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
                "masked_template": "What are the names of the <mask> of <mask> in <mask> order of the <mask>",
                "query": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
                "masked_template": "Find the names of all <mask> by their 100 <mask> in <mask>",
                "query": "SELECT name FROM swimmer ORDER BY meter_100",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "List every album ordered by album title in ascending order.",
                "masked_template": "List <mask> ordered by <mask> in <mask>",
                "query": "SELECT title FROM albums ORDER BY title",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "List the first names of people in alphabetical order?",
                "masked_template": "List the <mask> names of <mask> in <mask>",
                "query": "SELECT first_name FROM people ORDER BY first_name",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "List the names of roller coasters by ascending order of length.",
                "masked_template": "List the names of <mask> by <mask> order of <mask>",
                "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Show the shop addresses ordered by their opening year.",
                "masked_template": "Show the <mask> ordered by their <mask>",
                "query": "SELECT address FROM shop ORDER BY open_year",
                "ted": 0.0,
                "db_id": "coffee_shop"
            },
            {
                "question": "List the names of members in ascending alphabetical order.",
                "masked_template": "List the names of <mask> in <mask>",
                "query": "SELECT Name FROM member ORDER BY Name ASC",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "What are the names of managers in ascending order of level?",
                "masked_template": "What are the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Name FROM manager ORDER BY LEVEL ASC",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "List all the name of organizations in order of the date formed.",
                "masked_template": "List all the name of <mask> in order of the <mask>",
                "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
                "masked_template": "What are the names of <mask> ordered by the <mask>",
                "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the titles of all the albums alphabetically ascending?",
                "masked_template": "What are the <mask> of all the <mask>",
                "query": "SELECT title FROM albums ORDER BY title",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of the courses in alphabetical order?",
                "masked_template": "What are the names of the <mask> in <mask>",
                "query": "SELECT course_name FROM courses ORDER BY course_name",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the first names of all the authors ordered in alphabetical order.",
                "masked_template": "Find the <mask> names of all the <mask> ordered in <mask>",
                "query": "SELECT fname FROM authors ORDER BY fname",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "List the names of pilots in ascending order of rank.",
                "masked_template": "List the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "List the titles of the books in ascending order of issues.",
                "masked_template": "List the <mask> of the <mask> in <mask> order of <mask>",
                "query": "SELECT Title FROM book ORDER BY Issues ASC",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
                "masked_template": "<mask> the <mask> and <mask> in <mask> order of the <mask>",
                "query": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Sort the apartment numbers in ascending order of room count.",
                "masked_template": "<mask> the <mask> numbers in <mask> order of <mask>",
                "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are all the album titles, in alphabetical order?",
                "masked_template": "What are all the <mask> in <mask>",
                "query": "SELECT Title FROM ALBUM ORDER BY Title",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Please list all album titles in alphabetical order.",
                "masked_template": "<mask> list all <mask> in <mask>",
                "query": "SELECT Title FROM ALBUM ORDER BY Title",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the names of the technicians by ascending order of age?",
                "masked_template": "What are the names of the <mask> by <mask> order of <mask>",
                "query": "SELECT Name FROM technician ORDER BY Age ASC",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Return all the apartment numbers sorted by the room count in ascending order.",
                "masked_template": "Return all the <mask> numbers <mask> by the <mask> count in <mask>",
                "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are the different dorm amenity names in alphabetical order?",
                "masked_template": "What are the different <mask> names in <mask>",
                "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "List in alphabetic order all different amenities.",
                "masked_template": "List in <mask> order all different <mask>",
                "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Give me a list of all the last names of authors sorted in alphabetical order",
                "masked_template": "<mask> me a list of all the <mask> names of <mask> in <mask> order",
                "query": "SELECT lname FROM authors ORDER BY lname",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of mountains in ascending alphabetical order?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT Name FROM mountain ORDER BY Name ASC",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Give the names of mountains in alphabetical order.",
                "masked_template": "<mask> the names of <mask> in <mask>",
                "query": "SELECT Name FROM mountain ORDER BY Name ASC",
                "ted": 0.0,
                "db_id": "climbing"
            }
        ],
        "best_hyp": "What are the different conductor names in ascending order of age?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all the conductor in ascending order of age?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> year </col> ) that belongs to ( <tab> concert </tab> ) , grouped by ( <col> year </col> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the year that has the most number of concerts?",
            "Find the year that is the most common in all the years. Tell me its year.",
            "Which year has most number of concerts?",
            "Which year has most number of concerts?",
            "List the year when the most concerts happened.",
            "What is the id of the year with the most concerts?",
            "Which year has the most concerts?",
            "Find the year that is most common for concerts.",
            "What is the year that has the most concerts?",
            "What are the years in which the most concerts are held?",
            "Show the top 3 most common years of concerts in all years",
            "What is the year that is most common in music festivals?",
            "Show the years that have the most concerts.",
            "Show the most common year of concerts in.",
            "List the name of years that have the most number of concerts.",
            "Find the year that has the most concerts.",
            "Show the year with the most number of concerts.",
            "Show the most common year of the concerts",
            "List the year by the number of concerts.",
            "What is the most common year for concerts?",
            "List the most common year of concerts",
            "What year is the largest number of concerts?",
            "What is the name of teh year that has the most concerts?",
            "Find the names of the top 3 years that had the greatest number of concerts.",
            "Return the year for which there are the greatest number of concerts.",
            "Which year has the most concerts?",
            "What is the name of the year with the most concerts?",
            "What is the year of the concert with the most number of performances?",
            "What is the year that has the most concerts?",
            "Return the year of the concert that is most common.",
            "Find the year of most of concerts are held in."
        ],
        "templates": [
            "",
            {
                "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
                "masked_template": "Find the <mask> that is <mask> the most <mask> in all the <mask> me its <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Which allergy type is most common?",
                "masked_template": "Which <mask> is most <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Which allergy type has most number of allergies?",
                "masked_template": "Which <mask> has most number of <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "List the industry shared by the most companies.",
                "masked_template": "List the <mask> by the most <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the id of the event with the most participants?",
                "masked_template": "What is the id of the <mask> with the most <mask>",
                "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Which people severed as governor most frequently?",
                "masked_template": "Which <mask> as <mask> most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the payment method that is used most frequently.",
                "masked_template": "Find the <mask> that is <mask> most <mask>",
                "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customer_deliveries"
            },
            {
                "question": "What is the payment method code used by the most orders?",
                "masked_template": "What is the <mask> by the most <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the three colleges from which the most players are from?",
                "masked_template": "What are the <mask> which the most <mask> are <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the top 3 most common colleges of players in match seasons.",
                "masked_template": "Show the top 3 most <mask> of <mask> in <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "What is the position that is most common among players in match seasons?",
                "masked_template": "What is the <mask> that is most <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the people that have been governor the most times.",
                "masked_template": "Show the <mask> that have <mask> the most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the most common position of players in match seasons.",
                "masked_template": "Show the most <mask> of <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "List the name of film studio that have the most number of films.",
                "masked_template": "List the name of <mask> that have the most number of <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the country that has the most stadiums.",
                "masked_template": "Find the <mask> that has the most <mask>",
                "query": "SELECT country FROM stadium GROUP BY country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Show the home city with the most number of drivers.",
                "masked_template": "Show the <mask> with the most number of <mask>",
                "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "Show the most frequently used carrier of the phones.",
                "masked_template": "Show the most <mask> of the <mask>",
                "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "List the software platform shared by the greatest number of devices.",
                "masked_template": "List the <mask> by the <mask> number of <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What is the most common participant type?",
                "masked_template": "What is the most <mask>",
                "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "List the most common type of competition.",
                "masked_template": "List the most <mask> of <mask>",
                "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What instrument is used the most?",
                "masked_template": "What <mask> is <mask> the <mask>",
                "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What is the name of teh studio that created the most films?",
                "masked_template": "What is the name of teh <mask> that <mask> the most <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
                "masked_template": "Find the names of the top 3 <mask> that <mask> the <mask> of <mask>",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Return the rank for which there are the fewest captains.",
                "masked_template": "Return the <mask> for which there are the <mask>",
                "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Which location has the most corresponding counties?",
                "masked_template": "Which <mask> has the most <mask>",
                "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What is the name of the deparment with the highest enrollment?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the code of the city with the most students?",
                "masked_template": "What is the <mask> of the <mask> with the most <mask>",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the largest major?",
                "masked_template": "What is the <mask>",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Return the code of the document type that is most common.",
                "masked_template": "Return the <mask> of the <mask> that is most <mask>",
                "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Find the code of city where most of students are living in.",
                "masked_template": "Find the <mask> of <mask> most of <mask> are <mask> in.",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            }
        ],
        "best_hyp": "Which year has most number of concerts?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the year that has the most number of concerts?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT COUNT( * ) FROM orchestra WHERE Major_Record_Format = 'DVD' OR Major_Record_Format = 'CD'",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> orchestra </tab> ) , that have ( ( ( <col> major record format </col> ) equal to ( <val> DVD </val> ) ) or ( ( <col> major record format </col> ) equal to ( <val> CD </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many musicians have either DVD or CD as their major record format?",
            "Find the number of musicians whose major record format is DVD or CD.",
            "How many orchestras are in DVD format or CD format?",
            "Find the number of musicians that are either in DVD format or CD format.",
            "Show the number of orchestras with major record format either DVD or BK.",
            "How many orchestras are in either DVD format or CD format?",
            "Count the number of musicians in either DVD format or CD format.",
            "How many musicians who has a DVD or MAU record?",
            "How many orchestra albums are either DVD or CD?",
            "How many orchestras have either DVD or BK?",
            "How many musicians have major record format DVD or CD?",
            "How many musicians ROY has released a DVD or CD?",
            "Return the total number of musicians with major record format either DVD or CD.",
            "Count the number of orchestras that have either DVD or CD format.",
            "How many orchestras are in DVD format or CD format?",
            "Find the number of orchestras that have either DVD or CD format.",
            "What are the total number of musicians in either DVD format or CD format?",
            "How many orchestras are either in DVD format or CD format?",
            "Count the number of musicians who have major record format DVD or CD.",
            "Find the number of musicians ROY has released a DVD or CD.",
            "Count the number of orchestras that are either in DVD format or CD format.",
            "How many musicians do we have in DVD format or CD format?",
            "Find the number of orchestras that have either DVD or CD format.",
            "Find the number of orchestras that have either DVD or CD format.",
            "How many orchestras are in DVD format or CD format?",
            "How many orchestras in USA are either DVD or CD players?",
            "What is the total number of orchestras that are either in DVD format or CD format?",
            "What is the total number of musicians whose major record format is DVD or CD?",
            "Show the number of musicians whose major record format is DVD or CD.",
            "Show the number of musicians whose major record format is DVD or CD.",
            "Find the number of musicians whose major record format is DVD or CD."
        ],
        "templates": [
            "",
            {
                "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
                "masked_template": "Find the number of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT count( * ) FROM Companies WHERE Industry = 'Banking' OR Industry = 'Conglomerate'",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
                "masked_template": "How many <mask> are in <mask> or <mask>",
                "query": "SELECT count( * ) FROM Companies WHERE Industry = 'Banking' OR Industry = 'Conglomerate'",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the number of manufactures that are based in Tokyo or Beijing.",
                "masked_template": "Find the number of <mask> that are <mask> in <mask> or <mask>",
                "query": "SELECT count( * ) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "Show the number of documents with document type code CV or BK.",
                "masked_template": "Show the number of <mask> with <mask> CV or BK.",
                "query": "SELECT count( * ) FROM All_documents WHERE document_type_code = 'CV' OR document_type_code = 'BK'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "How many students live in HKG or CHI?",
                "masked_template": "How many <mask> in HKG or <mask>",
                "query": "SELECT count( * ) FROM Student WHERE city_code = 'HKG' OR city_code = 'CHI'",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Give the number of students living in either HKG or CHI.",
                "masked_template": "<mask> the number of <mask> in <mask> HKG or <mask>",
                "query": "SELECT count( * ) FROM Student WHERE city_code = 'HKG' OR city_code = 'CHI'",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many professors who has a either Ph.D. or MA degree?",
                "masked_template": "How many <mask> who has a <mask> or MA <mask>",
                "query": "SELECT count( * ) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many professors attained either Ph.D. or Masters degrees?",
                "masked_template": "How many <mask> or <mask>",
                "query": "SELECT count( * ) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many documents have document type code CV or BK?",
                "masked_template": "How many <mask> have <mask> CV or BK?",
                "query": "SELECT count( * ) FROM All_documents WHERE document_type_code = 'CV' OR document_type_code = 'BK'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "How many manufacturers have headquarters in either Tokyo or Beijing?",
                "masked_template": "How many <mask> have <mask> in <mask> or <mask>",
                "query": "SELECT count( * ) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing'",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many times does ROY SWEAZY has reserved a room.",
                "masked_template": "How many <mask> ROY <mask> has <mask> a <mask>",
                "query": "SELECT count( * ) FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'",
                "ted": 0.03571428571428571,
                "db_id": "inn_1"
            },
            {
                "question": "Return the total revenue of companies with headquarters in Tokyo or Taiwan.",
                "masked_template": "Return the total <mask> of <mask> with <mask> in <mask> or <mask>",
                "query": "SELECT sum( revenue ) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'",
                "ted": 0.03571428571428571,
                "db_id": "manufactory_1"
            },
            {
                "question": "Count the number of female Professors we have.",
                "masked_template": "Count the number of <mask> we <mask>",
                "query": "SELECT count( * ) FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor'",
                "ted": 0.03571428571428571,
                "db_id": "activity_1"
            },
            {
                "question": "How many Professors are in building NEB?",
                "masked_template": "How many <mask> are in <mask>",
                "query": "SELECT count( * ) FROM Faculty WHERE Rank = 'Professor' AND building = 'NEB'",
                "ted": 0.03571428571428571,
                "db_id": "activity_1"
            },
            {
                "question": "Find the total account balance of each customer from Utah or Texas.",
                "masked_template": "Find the total <mask> of each <mask> or <mask>",
                "query": "SELECT sum( acc_bal ) FROM customer WHERE state = 'Utah' OR state = 'Texas'",
                "ted": 0.03571428571428571,
                "db_id": "loan_1"
            },
            {
                "question": "What are the total account balances for each customer from Utah or Texas?",
                "masked_template": "What are the total <mask> for each <mask> or <mask>",
                "query": "SELECT sum( acc_bal ) FROM customer WHERE state = 'Utah' OR state = 'Texas'",
                "ted": 0.03571428571428571,
                "db_id": "loan_1"
            },
            {
                "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
                "masked_template": "How many <mask> as <mask> or <mask>",
                "query": "SELECT count( * ) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54'",
                "ted": 0.03571428571428571,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Count the number of Professors who have office in building NEB.",
                "masked_template": "Count the number of <mask> who have <mask> in <mask>",
                "query": "SELECT count( * ) FROM Faculty WHERE Rank = 'Professor' AND building = 'NEB'",
                "ted": 0.03571428571428571,
                "db_id": "activity_1"
            },
            {
                "question": "Find the number of times ROY SWEAZY has reserved a room.",
                "masked_template": "Find the number of <mask> ROY <mask> has <mask> a <mask>",
                "query": "SELECT count( * ) FROM Reservations WHERE FirstName = 'ROY' AND LastName = 'SWEAZY'",
                "ted": 0.03571428571428571,
                "db_id": "inn_1"
            },
            {
                "question": "Count the number of players who were born in USA and have bats information 'R'.",
                "masked_template": "Count the number of <mask> who <mask> in USA and have <mask>",
                "query": "SELECT count( * ) FROM player WHERE birth_country = 'USA' AND bats = 'R'",
                "ted": 0.03571428571428571,
                "db_id": "baseball_1"
            },
            {
                "question": "How many female Professors do we have?",
                "masked_template": "How many <mask> do we <mask>",
                "query": "SELECT count( * ) FROM Faculty WHERE Sex = 'F' AND Rank = 'Professor'",
                "ted": 0.03571428571428571,
                "db_id": "activity_1"
            },
            {
                "question": "Find the total budgets of the Marketing or Finance department.",
                "masked_template": "Find the total <mask> of the <mask> or <mask>",
                "query": "SELECT sum( budget ) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
                "ted": 0.03571428571428571,
                "db_id": "college_2"
            },
            {
                "question": "List the number of invoices from Chicago, IL.",
                "masked_template": "List the number of <mask> IL.",
                "query": "SELECT COUNT( * ) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'",
                "ted": 0.03571428571428571,
                "db_id": "store_1"
            },
            {
                "question": "How many invoices were billed from Chicago, IL?",
                "masked_template": "How many <mask> IL?",
                "query": "SELECT COUNT( * ) FROM invoices WHERE billing_city = 'Chicago' AND billing_state = 'IL'",
                "ted": 0.03571428571428571,
                "db_id": "store_1"
            },
            {
                "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
                "masked_template": "How many <mask> in USA are <mask> That is, have the <mask>",
                "query": "SELECT count( * ) FROM player WHERE birth_country = 'USA' AND bats = 'R'",
                "ted": 0.03571428571428571,
                "db_id": "baseball_1"
            },
            {
                "question": "What is the sum of budgets of the Marketing and Finance departments?",
                "masked_template": "What is the sum of <mask> of the <mask> and <mask>",
                "query": "SELECT sum( budget ) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance'",
                "ted": 0.03571428571428571,
                "db_id": "college_2"
            },
            {
                "question": "What is the total revenue of all companies whose main office is at Tokyo or Taiwan?",
                "masked_template": "What is the total <mask> of all <mask> whose <mask> is at <mask> or <mask>",
                "query": "SELECT sum( revenue ) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan'",
                "ted": 0.03571428571428571,
                "db_id": "manufactory_1"
            },
            {
                "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
                "masked_template": "Show the <mask> of the <mask> at <mask> \"TD <mask> or <mask>",
                "query": "SELECT Attendance FROM performance WHERE LOCATION = 'TD Garden' OR LOCATION = 'Bell Centre'",
                "ted": 0.07142857142857142,
                "db_id": "performance_attendance"
            },
            {
                "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
                "masked_template": "Show the names of <mask> or <mask>",
                "query": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'",
                "ted": 0.07142857142857142,
                "db_id": "workshop_paper"
            },
            {
                "question": "Find the name of the airports located in Cuba or Argentina.",
                "masked_template": "Find the name of the <mask> in <mask> or <mask>",
                "query": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            }
        ],
        "best_hyp": "Find the number of musicians whose major record format is DVD or CD.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many musicians have either DVD or CD as their major record format?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT( * ) > 1",
        "proc_query": "( <col> year of founded </col> ) that belongs to ( ( <tab> orchestra </tab> ) , and ( ( <tab> performance </tab> ) satisfied that ( ( <col> orchestra id </col> of <tab> orchestra </tab> ) equal to ( <col> orchestra id </col> of <tab> performance </tab> ) ) ) ) , grouped by ( <col> orchestra id </col> of <tab> performance </tab> ) , that have ( ( the number of ( all items ) ) greater than ( <val> 1 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the year of founded for the orchestra that has performed more than one performance?",
            "What are the years of founded for orchestras that are in performances in more than a single year?",
            "List years of musicians who have the number of performances bigger than 10.",
            "Find the year of founded for the orchestra that has performed more than one performance.",
            "What are the names of musicians who have given out more than one performance?",
            "Which orchestras have more than one performance? Tell me the year they were founded.",
            "Show the years of founded in performances at more than one orchestra",
            "What are the names of the years that have more than a single performance of orchestra in one year?",
            "List the year of founded for the orchestra that has performed more than one performance.",
            "What are the names of the years that have more than 10 performances?",
            "What are the names of the years when the orchestra was founded for more than one performance?",
            "Show the year of founded for the orchestra that has performed more than one performance.",
            "What are the years of founded for the orchestras that have performed more than one performance?",
            "Which musicians are in charge of more than one performance? Tell me their years of founded.",
            "Find the year of founded for the orchestra that has performed at least one performance.",
            "What are the names of the years that have had more than one performance?",
            "Show the names of musicians that have more than one performance.",
            "Find the year of founded for the orchestra that has performed more than one performance.",
            "Show names of orchestras that have more than one performance of some kind in the past.",
            "List the year of founded for the orchestra which has performed more than one performance.",
            "Show the year of founded for orchestras that have performed more than one performance.",
            "Find the year of founded for the orchestra that has performed more than one performance.",
            "What are the names of all the years that have more than 100 performances?",
            "Find the year of founded for the orchestra that has performed more than one performance.",
            "Which orchestras have performed more than one performance in year of founded? Return the year.",
            "Find the names of years that have been founded for more than 60 performances.",
            "What are the years of founded for all the orchestras that have performed more than one performance?",
            "What are the names of the years when more than one orchestra was founded?",
            "Find the year of founded for the orchestra that has performed more than one performance.",
            "What are the names of the years when the orchestra was founded more than once?",
            "What are the names of the years when the orchestra was founded for more than one performance?"
        ],
        "templates": [
            "",
            {
                "question": "What are the carriers of devices that are in stock in more than a single shop?",
                "masked_template": "What are the <mask> of <mask> that are in <mask> in more than a <mask>",
                "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List title of albums have the number of tracks greater than 10.",
                "masked_template": "List <mask> of <mask> have the number of <mask> than 10.",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count( T1.id ) > 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name of customers who have more than one loan.",
                "masked_template": "Find the name of <mask> who have more than one <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names of customers who have taken out more than one loan?",
                "masked_template": "What are the names of <mask> who have <mask> out more than one <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Which schools have more than 1 player? Give me the school locations.",
                "masked_template": "Which <mask> have more than 1 <mask> me the <mask>",
                "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the carriers of devices in stock at more than one shop.",
                "masked_template": "Show the <mask> of <mask> in <mask> at more than one <mask>",
                "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the names of shops that have more than a single kind of device in stock?",
                "masked_template": "What are the names of <mask> that have more than a <mask> of <mask> in <mask>",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List the name of staff who has been assigned multiple jobs.",
                "masked_template": "List the name of <mask> who has <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the names of the albums that have more than 10 tracks?",
                "masked_template": "What are the names of the <mask> that have more than 10 <mask>",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count( T1.id ) > 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of staff who have been assigned multiple jobs?",
                "masked_template": "What are the names of <mask> who have <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Show the official names of the cities that have hosted more than one competition.",
                "masked_template": "Show the <mask> names of the <mask> that have <mask> more than one <mask>",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the official names of cities that have hosted more than one competition?",
                "masked_template": "What are the <mask> names of <mask> that have <mask> more than one <mask>",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Which physicians are in charge of more than one patient? Give me their names.",
                "masked_template": "Which <mask> are in <mask> of more than one <mask> me their <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the name of physicians who are in charge of more than one patient.",
                "masked_template": "Find the name of <mask> who are in <mask> of more than one <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the names of ships that have more than one captain?",
                "masked_template": "What are the names of <mask> that have more than one <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id GROUP BY T2.ship_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show the names of countries that have more than one roller coaster.",
                "masked_template": "Show the names of <mask> that have more than one <mask>",
                "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Find the name of the ships that have more than one captain.",
                "masked_template": "Find the name of the <mask> that have more than one <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id GROUP BY T2.ship_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show names of shops that have more than one kind of device in stock.",
                "masked_template": "Show names of <mask> that have more than one <mask> of <mask> in <mask>",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List the name of playlist which has number of tracks greater than 100.",
                "masked_template": "List the name of <mask> which has number of <mask> than <mask>",
                "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count( T1.track_id ) > 100",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Show the locations of schools that have more than 1 player.",
                "masked_template": "Show the <mask> of <mask> that have more than 1 <mask>",
                "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Find the name of instructors who are advising more than one student.",
                "masked_template": "Find the name of <mask> who are <mask> more than one <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of all playlists that have more than 100 tracks?",
                "masked_template": "What are the names of all <mask> that have more than 100 <mask>",
                "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count( T1.track_id ) > 100",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the names of users who have more than one tweet.",
                "masked_template": "Find the names of <mask> who have more than one <mask>",
                "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
                "masked_template": "Which <mask> have <mask> more than <mask> in <mask> of <mask> Return the <mask>",
                "query": "SELECT T2.service_name FROM first_notification_of_loss AS T1 JOIN services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Find the names of rooms that have been reserved for more than 60 times.",
                "masked_template": "Find the names of <mask> that have <mask> for more than 60 <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count( * ) > 60",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the first names of all professors who teach more than one class?",
                "masked_template": "What are the <mask> names of all <mask> who <mask> more than one <mask>",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of instructors who advise more than one student?",
                "masked_template": "What are the names of <mask> who <mask> more than one <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Find the first names of professors who are teaching more than one class.",
                "masked_template": "Find the <mask> names of <mask> who are <mask> more than one <mask>",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
                "masked_template": "What are the names of <mask> whose <mask> 60 <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count( * ) > 60",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the names of students who have more than one advisor?",
                "masked_template": "What are the names of <mask> who have more than one <mask>",
                "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            }
        ],
        "best_hyp": "What are the names of musicians who have given out more than one performance?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the year of founded for the orchestra that has performed more than one performance?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer WHERE Birth_Year < 1948 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1967",
        "proc_query": "( <col> citizenship </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> birth year </col> ) less than ( <val> 1948 </val> ) ), and intersect with ( ( <col> citizenship </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> birth year </col> ) greater than ( <val> 1967 </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the nations shared by singers who were born before 1948 and singers that were born after 1967?",
            "What are the nations shared by singers born before 1948 and singers born after 1967?",
            "Show the citizenship shared by singers born before 1948 and singers born after 1967",
            "Show the nations that have both singers born before 1948 and singers born after 1967.",
            "Show the nations that have both singers with birth year less than 1948 and singers older than 64.",
            "Which country has both singers born before 1948 and singers born after 1967?",
            "Show the nations where singers younger than 30 and singers older than 25 are from.",
            "List all of the ids with a birth year of at least 1948 and an age greater than 85.",
            "Show the citizenship shared by singers with birth year before 1948 and singers with birthday after 1967",
            "Show the citizenship shared by singers with birth year before 1948 and singers older than 1967",
            "Which countries correspond to both singers that are born before 1948 and singers that have a birth year greater than 1967?",
            "Show the nations that have both singers with birth year before 1948 and singers with birthday after 1967",
            "Show the citizenship of singers that have both birth year before 1948 and singers with birth year after 1967",
            "What are the nationalities of the singers that have both birth years before 1948 and singers with birth year after 1967?",
            "What are the nations that have both singers that are born before 1948 and singers that were born after 1967?",
            "What are the nations with both singers having more than 20 years old and singers older than 10?",
            "What are the nationalities of both singers that were born before 1948 and singers who were born after 1967?",
            "Show the country names which are shared by singers born before 1948 and singers born after 1967.",
            "Which countries have both singers that were born before the year of 1948 and singers that was born after 1967?",
            "Find the nations have both singers with more than one birth year and singers with less than one birthday.",
            "Show the nations that have both singers with more than 10 years of birth and singers with less than 3 years of age.",
            "What are the nations that have both singers with more than one birth year and singers with birth year before 1967?",
            "Show the nationalities that have both singers of age 50 and singers older than 46.",
            "Show the citizenship shared by singers younger than 23 and singers older than 20.",
            "Which countries did both singers younger than 23 and singers older than 20 originate from?",
            "Show all the nations shared by singers born before 1948 and singers born after 1967.",
            "Which country has both singers born before 1948 and singers with birth year after 1967?",
            "Which countries have both singers born before 1948 and singers born after 1967?",
            "Show the nations that have both singers younger than 45 and singers older than 35.",
            "Show the nations that have singers with birth year more than 1948 and singers with birthday more than 1967",
            "Which countries have both singers born before 1948 and singers born after 1967?"
        ],
        "templates": [
            "",
            {
                "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
                "masked_template": "What are the <mask> by both <mask> and <mask>",
                "query": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
                "masked_template": "Show the <mask> by <mask> and <mask>",
                "query": "SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
                "masked_template": "Show the <mask> that have both <mask> and <mask>",
                "query": "SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than 32 and <mask> with <mask> than 64.",
                "query": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "Which address has both members younger than 30 and members older than 40?",
                "masked_template": "Which <mask> has both <mask> than 30 and <mask> than 40?",
                "query": "SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40",
                "ted": 0.0,
                "db_id": "coffee_shop"
            },
            {
                "question": "Show the country where people older than 30 and younger than 25 are from.",
                "masked_template": "Show the <mask> than 30 and <mask> than 25 are <mask>",
                "query": "SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
                "masked_template": "List all of the <mask> ids with a <mask> of at least <mask> and an <mask> than 85.",
                "query": "SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85",
                "ted": 0.029411764705882353,
                "db_id": "soccer_1"
            },
            {
                "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
                "masked_template": "Show the <mask> by <mask> with <mask> than <mask> and <mask> with <mask>",
                "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
                "ted": 0.058823529411764705,
                "db_id": "device"
            },
            {
                "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
                "masked_template": "Show the <mask> by <mask> with <mask> than <mask> and <mask> than <mask>",
                "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
                "ted": 0.058823529411764705,
                "db_id": "farm"
            },
            {
                "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
                "masked_template": "Which <mask> to both <mask> that have a <mask> and <mask> that have a <mask> than <mask>",
                "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
                "ted": 0.058823529411764705,
                "db_id": "farm"
            },
            {
                "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
                "ted": 0.058823529411764705,
                "db_id": "solvency_ii"
            },
            {
                "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
                "masked_template": "Show the <mask> of <mask> that have both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "ted": 0.058823529411764705,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
                "masked_template": "What are the <mask> of the <mask> that have both <mask> with <mask> more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "ted": 0.058823529411764705,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
                "masked_template": "What are the <mask> that have both <mask> that are <mask> than <mask> and <mask> than <mask>",
                "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
                "ted": 0.058823529411764705,
                "db_id": "climbing"
            },
            {
                "question": "What are the positions with both players having more than 20 points and less than 10 points.",
                "masked_template": "What are the <mask> with both <mask> having more than 20 <mask> and <mask> than 10 <mask>",
                "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
                "ted": 0.058823529411764705,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
                "masked_template": "What are the <mask> of both <mask> that have more than 20 20 <mask> and <mask> than 10 <mask>",
                "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
                "ted": 0.058823529411764705,
                "db_id": "sports_competition"
            },
            {
                "question": "Show the member names which are in both the party with id 3 and the party with id 1.",
                "masked_template": "Show the <mask> names which are in both the <mask> with id 3 and the <mask> with id 1.",
                "query": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
                "ted": 0.058823529411764705,
                "db_id": "party_people"
            },
            {
                "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
                "masked_template": "Which <mask> both <mask> that <mask> the <mask> and <mask> that <mask>",
                "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
                "ted": 0.058823529411764705,
                "db_id": "device"
            },
            {
                "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
                "masked_template": "Find the <mask> have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
                "ted": 0.058823529411764705,
                "db_id": "race_track"
            },
            {
                "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
                "masked_template": "Show the <mask> that have both <mask> with more than 10 <mask> of <mask> and <mask> with <mask> than 3 <mask> of <mask>",
                "query": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
                "ted": 0.058823529411764705,
                "db_id": "news_report"
            },
            {
                "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
                "masked_template": "What are the <mask> that have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
                "ted": 0.058823529411764705,
                "db_id": "race_track"
            },
            {
                "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
                "masked_template": "Show the <mask> that have both <mask> of age <mask> 50 and <mask> of age <mask> 46.",
                "query": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
                "ted": 0.058823529411764705,
                "db_id": "railway"
            },
            {
                "question": "Show the hometowns shared by people older than 23 and younger than 20.",
                "masked_template": "Show the <mask> by <mask> than 23 and <mask> than 20.",
                "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
                "ted": 0.058823529411764705,
                "db_id": "gymnast"
            },
            {
                "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
                "masked_template": "<mask> which <mask> did both <mask> than 23 and <mask> than 20 <mask>",
                "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
                "ted": 0.058823529411764705,
                "db_id": "gymnast"
            },
            {
                "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
                "masked_template": "Show all the <mask> in both <mask> and <mask>",
                "query": "SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011",
                "ted": 0.058823529411764705,
                "db_id": "cinema"
            },
            {
                "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
                "masked_template": "Which <mask> has both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
                "ted": 0.058823529411764705,
                "db_id": "swimming"
            },
            {
                "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
                "masked_template": "Which <mask> have both <mask> of age <mask> 45 and <mask> of age <mask> 35?",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "ted": 0.058823529411764705,
                "db_id": "party_host"
            },
            {
                "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
                "masked_template": "Show the <mask> that have both <mask> than 45 and <mask> than 35.",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "ted": 0.058823529411764705,
                "db_id": "party_host"
            },
            {
                "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
                "masked_template": "Show the <mask> that have <mask> with <mask> more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
                "ted": 0.058823529411764705,
                "db_id": "climbing"
            },
            {
                "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
                "masked_template": "Which <mask> names are <mask> in the <mask> with the id 3 and the <mask> with the id 1?",
                "query": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1",
                "ted": 0.058823529411764705,
                "db_id": "party_people"
            }
        ],
        "best_hyp": "What are the nations that have both singers that are born before 1948 and singers that were born after 1967?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the nations shared by singers who were born before 1948 and singers that were born after 1967?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
        "proc_query": "( <col> name </col> of <tab> conductor </tab> ) , ( <tab> orchestra </tab> of <tab> orchestra </tab> ) that belongs to ( ( <tab> conductor </tab> ) , and ( ( <tab> orchestra </tab> ) satisfied that ( ( <col> conductor id </col> of <tab> conductor </tab> ) equal to ( <col> conductor id </col> of <tab> orchestra </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all the music directors and the orchestras they are in?",
            "List all the names of the conductor and the orchestra.",
            "Find the names of all the musicians who have been in charge of an orchestra and the orchestra names.",
            "What are the names of all the musicians who have been a conductor and the orchestra?",
            "What are the names of all the musicians who have been a conductor as well as the orchestra id?",
            "What are the ids of all the musicians for the orchestra and what are the names of the musicians?",
            "Find the names of all the musicians who have been in charge of an orchestra and the orchestra names.",
            "Please show the names and the orchestras of all the musicians.",
            "Show names and orchestras of all the musicians.",
            "What are the names and orchestras of all the musicians?",
            "what are the name and orchestra name of all the music directors?",
            "What are the names and orchestras of all the musicians?",
            "Tell me the names and orchestras of all the musicians who are in charge of an orchestra.",
            "Find the name and orchestra name for each conductor.",
            "What are the name and orchestra name of all the music directors?",
            "What are the names of all the music directors and their orchestras?",
            "Return the name and orchestra for all the musicians.",
            "What is the name and orchestra of each conductor?",
            "Show the names of all the music directors and the orchestra of their works.",
            "What are the names of all the music directors and the orchestras they are in?",
            "Show names of all the musicians and the names of the orchestra they are in.",
            "Tell me all the conductor names and the names of the orchestra they are in.",
            "What are the names of all the music directors as well as all the orchestras they are in?",
            "What are the names and orchestras of all the musicians in which they are in charge?",
            "Tell me the name and orchestra for each conductor.",
            "What are the names and orchestras of each conductor?",
            "Show the name of the conductor and the orchestra.",
            "What are the names and orchestras of the musicians that have been a conductor?",
            "Show the names and orchestras for all the music directors.",
            "What are all the names and the orchestras of all the musicians in the orchestra?",
            "For each conductor, find the names of the orchestra they are in charge of."
        ],
        "templates": [
            "",
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            }
        ],
        "best_hyp": "For each conductor, find the names of the orchestra they are in charge of.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all the music directors and the orchestras they are in?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name , country FROM singer WHERE song_name LIKE '%Hey%'",
        "proc_query": "( <col> name </col> ) , ( <col> country </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> song name </col> ) like ( <val> %Hey% </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names and countries of singers whose song name contains the word \"Hey\"?",
            "What are the names and countries of countries that have produced songs by a singer whose name contains \"Hey\"?",
            "Find the name and country of the singers that are famous for songs that contain the word \"Hey\".",
            "Find the name and country of the singers whose name contains the word \"Hey\".",
            "Find all singers that have \"Hey\" in their names. List the name and country.",
            "What are the names and countries of singers whose songs contain the word \"Hey\"?",
            "Return the names and countries of singers who have TN in their names.",
            "Which song name has the substring \"Hey\"? List the id and country.",
            "What are the names and countries of singers with the letter a in their names?",
            "What is the name and country of origin for the singers whose name as the letter \"Hey\" appears in it?",
            "What are the names and countries of all the singers that have songs with 4.\\",
            "Find the name and country of origin of all singers with song name with 4.",
            "Find the name and country of origin of the singers whose name has the substring \"Hey\".",
            "List names and countries of singers whose song name starts with the word \"Hey\".",
            "What are the names and countries of origin for all singers who have a name of Hey?",
            "What is the name and country of origin of the singers with name \"Hey\"?",
            "Return the names and countries of singers whose song name contains the word \"Hey\".",
            "Return the name and country of origin for singers in the song \"Hey\".",
            "What is the name and country of origin of singers whose song name contains the word \"Hey\"?",
            "Who are the singers who sang the song \"Hey\"?",
            "What are the names and countries of the singers whose song name contains the word \"Hey\"?",
            "Find all 200 and 300 names of singers with song name \"Hey\".",
            "What are the names and countries of origin for singers that do not have the word \"Hey\"?",
            "Show all singers' names and the countries they are from.",
            "Show the names and countries for all singers not in song \"Hey\".",
            "List the names and countries of singers who sang songs that contain the word \"Hey\".",
            "List the name and country for singers whose song name is not \"Hey\".",
            "Show the names and countries of singers whose song name contains the string \"Hey\".",
            "What is the id and country of origin of the singers whose song contains the word \"Hey\"?",
            "Show the names and countries of singers whose song name contains the word \"Hey\".",
            "What are the names and countries of singers whose song name contains the word \"Hey\"?"
        ],
        "templates": [
            "",
            {
                "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
                "masked_template": "What are the <mask> and <mask> of <mask> that have <mask> by a <mask> whose name <mask>",
                "query": "SELECT title , Studio FROM film WHERE Studio LIKE '%Universal%'",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
                "masked_template": "Find the <mask> and <mask> of the <mask> that are <mask> by <mask> that <mask> the <mask>",
                "query": "SELECT title , Studio FROM film WHERE Studio LIKE '%Universal%'",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
                "masked_template": "Find the name and <mask> of the <mask> whose name <mask> the <mask>",
                "query": "SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%'",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
                "masked_template": "Find all <mask> that have <mask> in their <mask> List the <mask> name and <mask>",
                "query": "SELECT Hardware_Model_name , Company_name FROM phone WHERE Accreditation_type LIKE 'Full'",
                "ted": 0.0,
                "db_id": "phone_1"
            },
            {
                "question": "What are the names and ids of customers whose address contains TN?",
                "masked_template": "What are the names and ids of <mask> whose <mask> TN?",
                "query": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE '%TN%'",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Return the names and ids of customers who have TN in their address.",
                "masked_template": "Return the names and ids of <mask> who have TN in their <mask>",
                "query": "SELECT customer_name , customer_id FROM customers WHERE customer_address LIKE '%TN%'",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Which head's name has the substring 'Ha'? List the id and name.",
                "masked_template": "Which <mask> name has the <mask> List the id and <mask>",
                "query": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "What are the names and account balances of customers with the letter a in their names?",
                "masked_template": "What are the names and <mask> of <mask> with the <mask> a in their <mask>",
                "query": "SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
                "masked_template": "What is the <mask> and <mask> of <mask> for the <mask> whose name as the <mask> in it?",
                "query": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the state and country of all the cities that have post codes starting with 4.\\",
                "masked_template": "What are the <mask> and <mask> of all the <mask> that have <mask> with 4.\\",
                "query": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE '4%'",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the state and country of all cities with post code starting with 4.",
                "masked_template": "Find the <mask> and <mask> of all <mask> with <mask> with 4.",
                "query": "SELECT state_province_county , country FROM addresses WHERE zip_postcode LIKE '4%'",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
                "masked_template": "Find the <mask> and <mask> of the <mask> whose name has <mask>",
                "query": "SELECT student_capacity , gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "List email address and birthday of customer whose first name as Carole.",
                "masked_template": "List <mask> and <mask> of <mask> whose <mask> name as <mask>",
                "query": "SELECT email_address , date_of_birth FROM Customers WHERE first_name = 'Carole'",
                "ted": 0.1,
                "db_id": "driving_school"
            },
            {
                "question": "What are the email addresses and date of births for all customers who have a first name of Carole?",
                "masked_template": "What are the <mask> and <mask> of <mask> for all <mask> who have a <mask> name of <mask>",
                "query": "SELECT email_address , date_of_birth FROM Customers WHERE first_name = 'Carole'",
                "ted": 0.1,
                "db_id": "driving_school"
            },
            {
                "question": "What is the category and typical buying price  of the product with name \"cumin\"?",
                "masked_template": "What is the <mask> and <mask> of the <mask> with name <mask>",
                "query": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = 'cumin'",
                "ted": 0.1,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Return the category code and typical price of 'cumin'.",
                "masked_template": "Return the <mask> and <mask> of <mask>",
                "query": "SELECT product_category_code , typical_buying_price FROM products WHERE product_name = 'cumin'",
                "ted": 0.1,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Return the description and unit of measurement for products in the 'Herbs' category.",
                "masked_template": "Return the <mask> and <mask> of <mask> for <mask> in the <mask>",
                "query": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'",
                "ted": 0.1,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "What is the product category description and unit of measurement of category \"Herbs\"?",
                "masked_template": "What is the <mask> and <mask> of <mask> of <mask>",
                "query": "SELECT product_category_description , unit_of_measure FROM ref_product_categories WHERE product_category_code = 'Herbs'",
                "ted": 0.1,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Who are the lieutenant governor and comptroller from the democratic party?",
                "masked_template": "Who are the <mask> and <mask> the <mask>",
                "query": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = 'Democratic'",
                "ted": 0.1,
                "db_id": "election"
            },
            {
                "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
                "masked_template": "What are the names and <mask> names of the <mask> which has <mask> in the FDA <mask>",
                "query": "SELECT name , trade_name FROM medicine WHERE FDA_approved = 'Yes'",
                "ted": 0.1,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
                "masked_template": "Find all 200 <mask> and 300 <mask> of <mask> with <mask>",
                "query": "SELECT meter_200 , meter_300 FROM swimmer WHERE nationality = 'Australia'",
                "ted": 0.1,
                "db_id": "swimming"
            },
            {
                "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
                "masked_template": "What are the names and <mask> of <mask> for <mask> that do not have the <mask>",
                "query": "SELECT name , year_join FROM artist WHERE country != 'United States'",
                "ted": 0.1,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all artist names and the year joined who are not from United States.",
                "masked_template": "Show all <mask> names and the <mask> who are not <mask>",
                "query": "SELECT name , year_join FROM artist WHERE country != 'United States'",
                "ted": 0.1,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show the names and total passengers for all train stations not in London.",
                "masked_template": "Show the names and total <mask> for all <mask> not in <mask>",
                "query": "SELECT name , total_passengers FROM station WHERE LOCATION != 'London'",
                "ted": 0.1,
                "db_id": "train_station"
            },
            {
                "question": "List the names and emails of customers who payed by Visa card.",
                "masked_template": "List the names and <mask> of <mask> who <mask> by <mask>",
                "query": "SELECT customer_email , customer_name FROM customers WHERE payment_method = 'Visa'",
                "ted": 0.1,
                "db_id": "customer_deliveries"
            },
            {
                "question": "List the name and residence for players whose occupation is not \"Researcher\".",
                "masked_template": "List the name and <mask> for <mask> whose <mask> is not <mask>",
                "query": "SELECT Player_name , residence FROM player WHERE Occupation != 'Researcher'",
                "ted": 0.1,
                "db_id": "riding_club"
            },
            {
                "question": "Show the lieutenant governor and comptroller from the democratic party.",
                "masked_template": "Show the <mask> and <mask> the <mask>",
                "query": "SELECT Lieutenant_Governor , Comptroller FROM party WHERE Party = 'Democratic'",
                "ted": 0.1,
                "db_id": "election"
            },
            {
                "question": "What is the id and market share of the browser Safari?",
                "masked_template": "What is the id and <mask> of the <mask>",
                "query": "SELECT id , market_share FROM browser WHERE name = 'Safari'",
                "ted": 0.1,
                "db_id": "browser_web"
            },
            {
                "question": "Show the id and salary of Mark Young.",
                "masked_template": "Show the id and <mask> of <mask>",
                "query": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young'",
                "ted": 0.1,
                "db_id": "flight_1"
            },
            {
                "question": "What are the phone and email for customer Harold?",
                "masked_template": "What are the <mask> and <mask> for <mask>",
                "query": "SELECT Customer_Phone , Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = 'Harold'",
                "ted": 0.1,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "Return the names and countries of singers who have TN in their names.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names and countries of singers whose song name contains the word \"Hey\"?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "proc_query": "( <col> record company </col> ) that belongs to ( <tab> orchestra </tab> ) , ordered by ( ( <col> year of founded </col> ) in descending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the record companies of the orchestra in descending order of founded year?",
            "List all orchestra names by their founding year from oldest to youngest.",
            "Return the record company for orchestra ordered by age.",
            "Show the name of record companies in descending order of founded year.",
            "What are the names of all the record companies in the order of founded year?",
            "List names of all music record companies in the descending order of the year of founded.",
            "What are the names of all the music companies in descending order of the year they were founded?",
            "Find the names of all record companies in the descending order of founded year.",
            "What are the names of all the record companies ordered in descending order of founded year?",
            "What are the record companies of the orchestra in descending order of founded year?",
            "List all orchestra names in descending order of founded year.",
            "What are the names of the record companies of the orchestra ordered by year of founded?",
            "List the names of record companies in descending order of founded year.",
            "List the name of record companies in descending order of founded year.",
            "What are the record companies of all the orchestras in the descending order of founded year?",
            "List the record companies of all music artists in the order of their founded year in the most recent year.",
            "What are the names of all the record companies in descending order of the year they were founded?",
            "Find all music record companies founded in descending order of year of founded.",
            "What are the names of the record companies in descending order of founded year?",
            "List the names of all record companies in descending order of founded year.",
            "Give me a list of all the record company names founded by the orchestra in descending order.",
            "Show the record companies of orchestras in descending order of their founded year.",
            "Show the record companies of orchestra in descending order of founded year.",
            "What are the names of record companies ordered by year of founded?",
            "What are the names of the record companies ordered by year of founded?",
            "List all the orchestra names by the most recent year of founded.",
            "List the record company of the orchestra in descending order of founded year.",
            "List all orchestra names ordered by their founded year in descending order.",
            "List the record company names in descending order of the year founded.",
            "Find the name of the record company in the descending order of founded year.",
            "What are the names of the record companies in descending order of founded year?"
        ],
        "templates": [
            "",
            {
                "question": "Sort all captain names by their ages from old to young.",
                "masked_template": "<mask> all <mask> names by their <mask> old to <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Return the characters for actors, ordered by age descending.",
                "masked_template": "Return the <mask> for <mask> ordered by age <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show the name of drivers in descending order of age.",
                "masked_template": "Show the name of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM driver ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
                "masked_template": "What are the names of all the <mask> in the <mask> by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
                "masked_template": "List names of all <mask> in the <mask> ordered by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "What are the names of everybody sorted by age in descending order?",
                "masked_template": "What are the names of <mask> by age in <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "Find the names of all person sorted in the descending order using age.",
                "masked_template": "Find the names of all <mask> in the <mask> order <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "What are the names of all the clubs ordered in descending alphabetical order?",
                "masked_template": "What are the names of all the <mask> ordered in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the characters of actors in descending order of age?",
                "masked_template": "What are the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "List all club names in descending alphabetical order.",
                "masked_template": "List all <mask> names in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the names of the counties of public safety, ordered by population descending?",
                "masked_template": "What are the names of the <mask> of <mask> ordered by <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the names of counties in descending order of population.",
                "masked_template": "List the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the name of enzymes in descending lexicographical order.",
                "masked_template": "List the name of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
                "masked_template": "What are the <mask> of all the <mask> in the <mask> order of <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "List venues of all matches in the order of their dates starting from the most recent one.",
                "masked_template": "List <mask> of all <mask> in the order of their <mask> the most <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What are the names of captains, sorted by age descending?",
                "masked_template": "What are the names of <mask> by age <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
                "masked_template": "Find all <mask> and <mask> by <mask> in <mask>",
                "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What are the names of enzymes in descending order?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Sort the names of all counties in descending alphabetical order.",
                "masked_template": "<mask> the names of all <mask> in <mask>",
                "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
                "masked_template": "<mask> me a list of all the <mask> names <mask> by the <mask> in <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Show the working years of managers in descending order of their level.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of their <mask>",
                "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "Show the case burden of counties in descending order of population.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the case burdens of counties, ordered descending by population?",
                "masked_template": "What are the <mask> of <mask> ordered <mask> by <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the names of the wrestlers, ordered descending by days held?",
                "masked_template": "What are the names of the <mask> ordered <mask> by <mask>",
                "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "List all the event names by year from the most recent to the oldest.",
                "masked_template": "List all the <mask> names by <mask> the most <mask> to the <mask>",
                "query": "SELECT name FROM event ORDER BY YEAR DESC",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "List the votes of elections in descending order.",
                "masked_template": "List the <mask> of <mask> in <mask>",
                "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "List all channel names ordered by their rating in percent from big to small.",
                "masked_template": "List all <mask> names ordered by their <mask> in <mask> big to <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Sort the company names in descending order of the company's market value.",
                "masked_template": "<mask> the <mask> names in <mask> order of the <mask>",
                "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the first name of students in the descending order of age.",
                "masked_template": "Find the <mask> name of <mask> in the <mask> order of <mask>",
                "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the names of buildings sorted in descending order of building height?",
                "masked_template": "What are the names of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM buildings ORDER BY Height DESC",
                "ted": 0.0,
                "db_id": "company_office"
            }
        ],
        "best_hyp": "What are the names of the record companies ordered by year of founded?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the record companies of the orchestra in descending order of founded year?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor WHERE Nationality != 'France'",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> conductor </tab> ) , that have ( ( <col> nationality </col> ) not equal to ( <val> France </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all the conductor who are not from France?",
            "List the name of conductor whose nationality is not France.",
            "Which conductor are not from France?",
            "Show all conductor names who do not belong to France",
            "What are the names of the conductor who are not from France?",
            "Find the name of the conductor who did not pay with France dollars.",
            "What is the name of the conductor whose nationality is not France?",
            "Return the names of the conductor that do not have France as their nationality.",
            "What are the names of all the musicians whose nationality is not France?",
            "Show names for all music conductor from France.",
            "Return the names of all conductor who are not from France.",
            "What are the names of the conductor whose nationality is not France?",
            "Show the names of conductor whose nationality are not France.",
            "Find the names of the conductor whose nationality are not France.",
            "What are the names of the conductor that do not have the nationality France?",
            "Find the names of conductor that are not from France.",
            "Which conductor are not from France? Tell me the name.",
            "find the names of the conductor whose nationality is not France.",
            "Which conductor are not from France? Tell me their names.",
            "What are the names of the conductor whose nationality is not France?",
            "Show the names of conductor that are not from France.",
            "What are the names of the conductor whose nationality is not France?",
            "List the names of conductor whose nationality is not France.",
            "List the names for each conductor that does not have nationality as France",
            "What are the names of the conductor whose nationality is not France?",
            "What are the names of the conductor that are not from France?",
            "What are the names of all the musicians who are not from France?",
            "What are the names of the conductor whose nationality is not France?",
            "What is the name of the conductor who do not have nationality as France?",
            "Return the names of conductor for which the nationality is not France.",
            "What are the names of the conductor who are not from France?"
        ],
        "templates": [
            "",
            {
                "question": "List the name of technicians whose team is not \"NYY\".",
                "masked_template": "List the name of <mask> whose <mask> is not <mask>",
                "query": "SELECT Name FROM technician WHERE Team != 'NYY'",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Which ministers are not a part of the Progress Party?",
                "masked_template": "Which <mask> are not a <mask> of the <mask>",
                "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all ministers who do not belong to Progress Party.",
                "masked_template": "Show all <mask> who do not <mask> to <mask>",
                "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are the names of the airports which are not in the country 'Iceland'?",
                "masked_template": "What are the names of the <mask> which are not in the <mask>",
                "query": "SELECT name FROM airport WHERE country != 'Iceland'",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Find the name of customers who did not pay with Cash.",
                "masked_template": "Find the name of <mask> who did not pay with <mask>",
                "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What is the name of the technician whose team is not 'NYY'?",
                "masked_template": "What is the name of the <mask> whose <mask> is not <mask>",
                "query": "SELECT Name FROM technician WHERE Team != 'NYY'",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Return the device carriers that do not have Android as their software platform.",
                "masked_template": "Return the <mask> that do not have <mask> as their <mask>",
                "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
                "masked_template": "What are the <mask> of <mask> whose <mask> are not <mask>",
                "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "Show names for all regions except for Denmark.",
                "masked_template": "Show names for all <mask> for <mask>",
                "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Return the names of all regions other than Denmark.",
                "masked_template": "Return the names of all <mask> than <mask>",
                "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What are the names of enzymes whose product is not 'Heme'?",
                "masked_template": "What are the names of <mask> whose <mask> is not <mask>",
                "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Show the census ranking of cities whose status are not \"Village\".",
                "masked_template": "Show the <mask> of <mask> whose <mask> are not <mask>",
                "query": "SELECT Census_Ranking FROM city WHERE Status != 'Village'",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
                "masked_template": "Find the names of the <mask> whose <mask> are not <mask> in <mask>",
                "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What are the census rankings of cities that do not have the status \"Village\"?",
                "masked_template": "What are the <mask> of <mask> that do not have the <mask>",
                "query": "SELECT Census_Ranking FROM city WHERE Status != 'Village'",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Find the names of channels that are not owned by CCTV.",
                "masked_template": "Find the names of <mask> that are not <mask> by <mask>",
                "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Which channels are not owned by CCTV? Give me the channel names.",
                "masked_template": "Which <mask> are not <mask> by <mask> me the <mask>",
                "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "find the names of programs whose origin is not in Beijing.",
                "masked_template": "find the names of <mask> whose <mask> is not in <mask>",
                "query": "SELECT name FROM program WHERE origin != 'Beijing'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
                "masked_template": "Which <mask> are not <mask> me the <mask>",
                "query": "SELECT name FROM program WHERE origin != 'Beijing'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are the nicknames of schools whose division is not 1?",
                "masked_template": "What are the <mask> of <mask> whose <mask> is not 1?",
                "query": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the nicknames of schools that are not in division 1.",
                "masked_template": "Show the <mask> of <mask> that are not in <mask> 1.",
                "query": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
                "masked_template": "What are the <mask> of the <mask> whose <mask> is not <mask>",
                "query": "SELECT Title FROM book WHERE Writer != 'Elaine Lee'",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "List the names of countries whose language is not \"German\".",
                "masked_template": "List the names of <mask> whose <mask> is not <mask>",
                "query": "SELECT Name FROM country WHERE Languages != 'German'",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
                "masked_template": "List the <mask> for each <mask> that <mask> not have <mask> as <mask>",
                "query": "SELECT Enrollment FROM school WHERE Denomination != 'Catholic'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
                "masked_template": "What are the <mask> of <mask> whose <mask> is not <mask>",
                "query": "SELECT Enrollment FROM school WHERE Denomination != 'Catholic'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the names of the ships that are not from the United States?",
                "masked_template": "What are the names of the <mask> that are not <mask> the <mask>",
                "query": "SELECT Name FROM ship WHERE Nationality != 'United States'",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the names of enzymes who does not produce 'Heme'?",
                "masked_template": "What are the names of <mask> who <mask> not <mask>",
                "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the names of companies whose headquarters are not \"USA\"?",
                "masked_template": "What are the names of <mask> whose <mask> are not <mask>",
                "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the name of customers who do not use Cash as payment method.",
                "masked_template": "What is the name of <mask> who do not use <mask> as <mask>",
                "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Return the hosts of competitions for which the theme is not Aliens?",
                "masked_template": "Return the <mask> of <mask> for which the <mask> is not <mask>",
                "query": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the names of the mills which are not located in 'Donceel'?",
                "masked_template": "What are the names of the <mask> which are not <mask> in <mask>",
                "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
                "ted": 0.0,
                "db_id": "architecture"
            }
        ],
        "best_hyp": "What is the name of the conductor whose nationality is not France?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all the conductor who are not from France?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
        "proc_query": "( <col> song name </col> ) , ( <col> song release year </col> ) that belongs to ( <tab> singer </tab> ) , ordered by ( ( <col> age </col> ) ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name and release year of the youngest singer?",
            "Find the name and release year of the youngest singer.",
            "What are the name and release year for the song which was sung by the youngest singer?",
            "Show the name and release year of the youngest singer.",
            "what are the name and release year of the youngest singer?",
            "Find the name and release year of the youngest singer.",
            "What is the name and release year for the artist with the oldest age?",
            "Tell me the name and release year for the song with the youngest id.",
            "Find the id and release year of the song with the oldest age.",
            "Show the name and release year of the 3 least common singers.",
            "What are the names and release years of the youngest singers?",
            "What are the names and release years of the singers with the oldest age?",
            "What is the name and release year of the youngest singer?",
            "What is the song name and release year for the youngest singer?",
            "Find the song name and release year for the youngest singer.",
            "List all the song names and what is the release year for the song with the least age. List both the song name and release year.",
            "Find the name and release year of the song sung by the least number of singers.",
            "Find the song name and release year for the youngest singer.",
            "Which song has the youngest singer? List the song name and the release year.",
            "What are the names and release years of the singers with the oldest age?",
            "Which song has the youngest singer? List the song name and its release year.",
            "Which song has the least number of songs? List the song name and the release year.",
            "Which song has the least age? List the song name and release year.",
            "What are the name and release year of the song with the youngest age of singers?",
            "What are the names and release years of the top 10 oldest singers?",
            "List top 10 oldest singers in the list. List name and release year.",
            "Find the name and release year of the youngest singer.",
            "What is the name and release year of the youngest singer?",
            "What is the name of the youngest singer? Return the song name and its release year.",
            "What is the id and name of the song that is sung by the youngest singer?",
            "Show the id and name of the song with the maximum age."
        ],
        "templates": [
            "",
            {
                "question": "Select the name and price of the cheapest product.",
                "masked_template": "<mask> the name and <mask> of the <mask>",
                "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
                "masked_template": "What are the <mask> and <mask> for the <mask> which was <mask> the <mask>",
                "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "Show the enrollment and primary_conference of the oldest college.",
                "masked_template": "Show the <mask> and <mask> of the <mask>",
                "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "what are the order id and customer id of the oldest order?",
                "masked_template": "what are the order id and <mask> id of the <mask>",
                "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the order id and customer id associated with the oldest order.",
                "masked_template": "Find the order id and <mask> id <mask> with the <mask>",
                "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "What is the station station and end station for the trips with the three smallest ids?",
                "masked_template": "What is the <mask> and end <mask> for the <mask> with the <mask>",
                "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Give me the start station and end station for the trips with the three oldest id.",
                "masked_template": "<mask> me the <mask> and end <mask> for the <mask> with the <mask> id.",
                "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Give the id and product type of the product with the lowest price.",
                "masked_template": "<mask> the id and <mask> of the <mask> with the <mask>",
                "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Show the details and star ratings of the 3 least expensive hotels.",
                "masked_template": "Show the <mask> and <mask> of the 3 least <mask>",
                "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the product id and product type of the cheapest product?",
                "masked_template": "What are the <mask> id and <mask> of the <mask>",
                "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the room name and base price of the room with the lowest base price?",
                "masked_template": "What are the <mask> name and <mask> of the <mask> with the <mask>",
                "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What is the name and price of the cheapest product?",
                "masked_template": "What is the name and <mask> of the <mask>",
                "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What is the oldest log id and its corresponding problem id?",
                "masked_template": "What is the <mask> log id and its <mask> id?",
                "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "Find the oldest log id and its corresponding problem id.",
                "masked_template": "Find the <mask> log id and its <mask> id.",
                "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
                "masked_template": "<mask> all the <mask> what is the <mask> in the <mask> with the least <mask> List both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the name and email of the user followed by the least number of people.",
                "masked_template": "Find the name and <mask> of the <mask> by the least number of <mask>",
                "query": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
                "masked_template": "Find the <mask> in the <mask> with the least <mask> Show both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Which room has cheapest base price? List the room's name and the base price.",
                "masked_template": "Which <mask> has <mask> List the <mask> name and the <mask>",
                "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the <mask>",
                "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
                "masked_template": "Which <mask> has the <mask> list the <mask> name and its <mask>",
                "query": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
                "masked_template": "Which <mask> has the least <mask> of <mask> List the <mask> name and the <mask> of <mask>",
                "query": "SELECT Model_name , RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_1"
            },
            {
                "question": "Which part has the least chargeable amount? List the part id and amount.",
                "masked_template": "Which <mask> has the least <mask> List the <mask> id and <mask>",
                "query": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the first and last names of the employee with the earliest date of birth?",
                "masked_template": "What are the <mask> and <mask> names of the <mask> with the <mask> of <mask>",
                "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first and last names of the top 10 longest-serving employees?",
                "masked_template": "What are the <mask> and <mask> names of the top 10 <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "List top 10 employee work longest in the company. List employee's first and last name.",
                "masked_template": "List top 10 <mask> in the <mask> List <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name and component amount of the least popular furniture.",
                "masked_template": "Find the name and <mask> of the least <mask>",
                "query": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "What is the first and last name of the oldest employee?",
                "masked_template": "What is the <mask> and <mask> name of the <mask>",
                "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the city with the smallest GDP? Return the city and its GDP.",
                "masked_template": "What is the <mask> with the <mask> Return the <mask> and its <mask>",
                "query": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What is the id and name of the aircraft that can cover the maximum distance?",
                "masked_template": "What is the id and name of the <mask> that can <mask> the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "Show the id and name of the aircraft with the maximum distance.",
                "masked_template": "Show the id and name of the <mask> with the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What is the name and release year of the youngest singer?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name and release year of the youngest singer?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT( * ) DESC LIMIT 1",
        "proc_query": "( <col> record company </col> ) that belongs to ( <tab> orchestra </tab> ) , grouped by ( <col> record company </col> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the record company that has the most number of orchestras?",
            "Find the record company that is the most common in all the orchestras. Tell me its name.",
            "Which record company is most common?",
            "Which record company has most number of orchestras?",
            "List the record company owned by the most musicians.",
            "What is the id of the record company with the most musicians?",
            "Which record company has the most orchestra records?",
            "Find the record company that is associated with most number of orchestras.",
            "What is the record company owned by the most musicians?",
            "What are the companies which the most musicians are associated with?",
            "Show the top 3 most common record companies of orchestras in total",
            "What is the record company that is most common in orchestras?",
            "Show the record company that have produced the most number of orchestra albums.",
            "Show the most common record company of all the orchestras.",
            "List the name of record company that have the most number of orchestras.",
            "Find the record company that has the most number of orchestras.",
            "Show the record company with the most number of orchestras.",
            "Show the most common record company of the orchestra.",
            "List the record company by the number of orchestra records.",
            "What is the most common record company?",
            "List the most common record company of orchestras.",
            "What is the record company that has the largest number of orchestras?",
            "What is the name of teh record company that produces the most number of orchestra albums?",
            "Find the names of the top 3 record companies that have the largest number of orchestras.",
            "Return the record company for which there are the fewest orchestra records.",
            "Which record company has the most orchestra records?",
            "What is the name of the record company with the largest number of orchestras?",
            "What is the name of the record company with the most musicians?",
            "What is the record company that has the most number of orchestras?",
            "Return the name of the record company that is most common among all music publishers.",
            "Find the name of the record company most of the musicians are in."
        ],
        "templates": [
            "",
            {
                "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
                "masked_template": "Find the <mask> that is <mask> the most <mask> in all the <mask> me its <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Which allergy type is most common?",
                "masked_template": "Which <mask> is most <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Which allergy type has most number of allergies?",
                "masked_template": "Which <mask> has most number of <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "List the industry shared by the most companies.",
                "masked_template": "List the <mask> by the most <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the id of the event with the most participants?",
                "masked_template": "What is the id of the <mask> with the most <mask>",
                "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Which people severed as governor most frequently?",
                "masked_template": "Which <mask> as <mask> most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the payment method that is used most frequently.",
                "masked_template": "Find the <mask> that is <mask> most <mask>",
                "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customer_deliveries"
            },
            {
                "question": "What is the payment method code used by the most orders?",
                "masked_template": "What is the <mask> by the most <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the three colleges from which the most players are from?",
                "masked_template": "What are the <mask> which the most <mask> are <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the top 3 most common colleges of players in match seasons.",
                "masked_template": "Show the top 3 most <mask> of <mask> in <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "What is the position that is most common among players in match seasons?",
                "masked_template": "What is the <mask> that is most <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the people that have been governor the most times.",
                "masked_template": "Show the <mask> that have <mask> the most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the most common position of players in match seasons.",
                "masked_template": "Show the most <mask> of <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "List the name of film studio that have the most number of films.",
                "masked_template": "List the name of <mask> that have the most number of <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the country that has the most stadiums.",
                "masked_template": "Find the <mask> that has the most <mask>",
                "query": "SELECT country FROM stadium GROUP BY country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Show the home city with the most number of drivers.",
                "masked_template": "Show the <mask> with the most number of <mask>",
                "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "Show the most frequently used carrier of the phones.",
                "masked_template": "Show the most <mask> of the <mask>",
                "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "List the software platform shared by the greatest number of devices.",
                "masked_template": "List the <mask> by the <mask> number of <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What is the most common participant type?",
                "masked_template": "What is the most <mask>",
                "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "List the most common type of competition.",
                "masked_template": "List the most <mask> of <mask>",
                "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What instrument is used the most?",
                "masked_template": "What <mask> is <mask> the <mask>",
                "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What is the name of teh studio that created the most films?",
                "masked_template": "What is the name of teh <mask> that <mask> the most <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
                "masked_template": "Find the names of the top 3 <mask> that <mask> the <mask> of <mask>",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Return the rank for which there are the fewest captains.",
                "masked_template": "Return the <mask> for which there are the <mask>",
                "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Which location has the most corresponding counties?",
                "masked_template": "Which <mask> has the most <mask>",
                "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What is the name of the deparment with the highest enrollment?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the code of the city with the most students?",
                "masked_template": "What is the <mask> of the <mask> with the most <mask>",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the largest major?",
                "masked_template": "What is the <mask>",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Return the code of the document type that is most common.",
                "masked_template": "Return the <mask> of the <mask> that is most <mask>",
                "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Find the code of city where most of students are living in.",
                "masked_template": "Find the <mask> of <mask> most of <mask> are <mask> in.",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            }
        ],
        "best_hyp": "What is the most common record company?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the record company that has the most number of orchestras?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "select T2.concert_name , T2.theme , count( * ) from singer_in_concert as T1 join concert as T2 on T1.concert_id = T2.concert_id group by T2.concert_id",
        "proc_query": "( <col> concert name </col> of <tab> concert </tab> ) , ( <col> theme </col> of <tab> concert </tab> ) , ( the number of ( all items ) ) that belongs to ( ( <tab> singer in concert </tab> ) , and ( ( <tab> concert </tab> ) satisfied that ( ( <col> concert id </col> of <tab> singer in concert </tab> ) equal to ( <col> concert id </col> of <tab> concert </tab> ) ) ) ) , grouped by ( <col> concert id </col> of <tab> concert </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names, themes, and number of singers in each concert?",
            "What is the name and theme of each concert?",
            "Show the name, theme of each concert and the number of singers are on.",
            "How many singers have each concert? List the concert name, theme and the number of singers.",
            "How many singers are there in each concert? List the concert name, theme and the count.",
            "Show the name, theme and the number of singers for each concert.",
            "Return the names and ids of each concert as well as the number of singers.",
            "What are the names and ids of the different artists and how many singers are in each concert?",
            "How many singers are in each concert? List concert name, theme and number of singers.",
            "Find the name, theme and the corresponding number of singers for each concert.",
            "How many singers are in each concert? List the concert name, theme and the number of singers.",
            "How many singers are in each cmi concert? List concert name, theme and the n",
            "What are the names, themes and the number of singers for each concert?",
            "What are the names, themes, and number of singers for each concert?",
            "List the name and theme of each concert and the number of singers in each concert.",
            "Show different concert names and the corresponding number of singers.",
            "What are the names and ids of the different music genres and how many singers are on each?",
            "How many singers did each concert have? List the concert name, theme and the count.",
            "Show the name, theme and the number of singers for each concert.",
            "For each end id, what is its name and theme for each concert?",
            "What is the name of each concert? List the theme and the number of singers.",
            "For each concert id, what is the name and sex of the artist with the theme for their concert?",
            "Find the name of the concert whose theme is the same for each genre.",
            "For each concert, find its name and the theme of the concert that it was at.",
            "For each concert id, what is its name, theme and average number of singers?",
            "For each concert, return its name and the average number of singers that appeared in the concert.",
            "For each concert id, return the name, theme and the number of singers in the concert."
        ],
        "templates": [
            "",
            {
                "question": "What is the description, code and the corresponding count of each service type?",
                "masked_template": "What is the <mask> and the <mask> count of each <mask>",
                "query": "SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show the id, name of each editor and the number of journal committees they are on.",
                "masked_template": "Show the id, name of each <mask> and the number of <mask> are on.",
                "query": "SELECT T1.editor_id , T1.Name , COUNT( * ) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "How many events have each participants attended? List the participant id, type and the number.",
                "masked_template": "How many <mask> have each <mask> List the <mask> id, <mask> and the <mask>",
                "query": "SELECT T1.Participant_ID , T1.Participant_Type_Code , count( * ) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "How many films are there in each category? List the genre name, genre id and the count.",
                "masked_template": "How many <mask> are there in each <mask> List the <mask> id and the <mask>",
                "query": "SELECT T2.name , T1.category_id , count( * ) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Show the account name, id and the number of transactions for each account.",
                "masked_template": "Show the <mask> id and the number of <mask> for each <mask>",
                "query": "SELECT T2.account_name , T1.account_id , count( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the names and ids of each account, as well as the number of transactions.",
                "masked_template": "Return the names and ids of each <mask> as <mask> as the number of <mask>",
                "query": "SELECT T2.account_name , T1.account_id , count( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the names and ids of the different categories, and how many films are in each?",
                "masked_template": "What are the names and ids of the different <mask> and how many <mask> are in <mask>",
                "query": "SELECT T2.name , T1.category_id , count( * ) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "How many employees does each role have? List role description, id and number of employees.",
                "masked_template": "How many <mask> each <mask> List <mask> id and number of <mask>",
                "query": "SELECT T1.role_description , T2.role_code , count( * ) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "Find the subject ID, subject name, and the corresponding number of available courses for each subject.",
                "masked_template": "Find the <mask> ID, <mask> and the <mask> number of <mask> for each <mask>",
                "query": "SELECT T1.subject_id , T2.subject_name , COUNT( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many coaches does each club has? List the club id, name and the number of coaches.",
                "masked_template": "How many <mask> each <mask> List the <mask> id, name and the number of <mask>",
                "query": "SELECT T1.club_id , T1.club_name, count( * ) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id",
                "ted": 0.0,
                "db_id": "riding_club"
            },
            {
                "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
                "masked_template": "How many <mask> are <mask> to each cmi <mask> List <mask> id, <mask> id and the n",
                "query": "SELECT T2.cmi_cross_ref_id , T2.master_customer_id , count( * ) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the subject ID, subject name, and the number of available courses for each subject?",
                "masked_template": "What are the <mask> ID, <mask> and the number of <mask> for each <mask>",
                "query": "SELECT T1.subject_id , T2.subject_name , COUNT( * ) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?",
                "masked_template": "What are the <mask> id and the <mask> number of <mask> for each <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "List the description, code and the number of services for each service type.",
                "masked_template": "List the <mask> and the number of <mask> for each <mask>",
                "query": "SELECT T1.Service_Type_Description , T2.Service_Type_Code , COUNT( * ) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
                "masked_template": "Show different <mask> and the <mask> number of <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID , COUNT( * ) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names and ids of the different albums, and how many tracks are on each?",
                "masked_template": "What are the names and ids of the different <mask> and how many <mask> are on <mask>",
                "query": "SELECT T1.Title , T2.AlbumID , COUNT( * ) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
                "masked_template": "How many <mask> did each <mask> List the <mask> id, <mask> and the <mask>",
                "query": "SELECT T1.customer_id , T1.first_name , count( * ) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
                "ted": 0.0,
                "db_id": "products_for_hire"
            },
            {
                "question": "Show the album names, ids and the number of tracks for each album.",
                "masked_template": "Show the <mask> ids and the number of <mask> for each <mask>",
                "query": "SELECT T1.Title , T2.AlbumID , COUNT( * ) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
                "masked_template": "For each end <mask> id, what is its <mask> and <mask> for <mask>",
                "query": "SELECT T1.name , T1.lat , min( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
                "ted": 0.03125,
                "db_id": "bike_1"
            },
            {
                "question": "What is the highest salary among each team? List the team name, id and maximum salary.",
                "masked_template": "What is the <mask> each <mask> List the <mask> id and maximum <mask>",
                "query": "SELECT T1.name , T1.team_id , max( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id",
                "ted": 0.03125,
                "db_id": "baseball_1"
            },
            {
                "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
                "masked_template": "For each <mask> what is the name and sex of the <mask> with the <mask> for their <mask>",
                "query": "SELECT T1.name , T1.sex , min( oppose_rate ) FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id GROUP BY T1.sex",
                "ted": 0.03125,
                "db_id": "candidate_poll"
            },
            {
                "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
                "masked_template": "Find the name of the <mask> whose <mask> is the <mask> for each <mask>",
                "query": "SELECT T1.name , T1.sex , min( oppose_rate ) FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id GROUP BY T1.sex",
                "ted": 0.03125,
                "db_id": "candidate_poll"
            },
            {
                "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
                "masked_template": "For each <mask> find its <mask> and the <mask> of <mask> that <mask> at the <mask>",
                "query": "SELECT T1.name , T1.lat , min( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id",
                "ted": 0.03125,
                "db_id": "bike_1"
            },
            {
                "question": "For each start station id, what is its name, longitude and average duration of trips started there?",
                "masked_template": "For each <mask> id, what is its <mask> and average <mask> of <mask>",
                "query": "SELECT T1.name , T1.long , avg( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
                "ted": 0.03125,
                "db_id": "bike_1"
            },
            {
                "question": "For each station, return its longitude and the average duration of trips that started from the station.",
                "masked_template": "For each <mask> return its <mask> and the average <mask> of <mask> that <mask> the <mask>",
                "query": "SELECT T1.name , T1.long , avg( T2.duration ) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
                "ted": 0.03125,
                "db_id": "bike_1"
            },
            {
                "question": "For each team, return the team name, id and the maximum salary among the team.",
                "masked_template": "For each <mask> return the <mask> id and the maximum <mask> the <mask>",
                "query": "SELECT T1.name , T1.team_id , max( T2.salary ) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id",
                "ted": 0.03125,
                "db_id": "baseball_1"
            }
        ],
        "best_hyp": "What are the names and ids of the different artists and how many singers are in each concert?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names, themes, and number of singers in each concert?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT DISTINCT country FROM singer WHERE age > 18",
        "proc_query": "( distinct ( ( <col> country </col> ) ) ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> age </col> ) greater than ( <val> 18 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the different countries that have singers older than 18?",
            "List the distinct countries of singers older than 30.",
            "List the distinct countries of singers with age greater than 32.",
            "Find the countries which have singers with age more than 50.",
            "What are the distinct countries of singers with age greater than 18?",
            "What are the distinct countries with singers of age older than 50?",
            "Which countries are shared by singers older than 18?",
            "Which country is the singer aged above 18 living in?",
            "Find the countries where singers are older than 18.",
            "List the countries of all the singers older than 18.",
            "Tell me the distinct countries where singers are older than 18",
            "What are the countries that have singers older than 18?",
            "What are all the different country names for a singer that is older than 18?",
            "List all the distinct countries which a singer of age above 18 is from",
            "Show all distinct countries where singers with at least 100 age are older than 18",
            "What are the different countries that have more than 100 singers older than 18?",
            "Find the countries in which singers aged above 18 are from.",
            "Which countries are shared by singers older than 18?",
            "What are the countries of singers older than 18?",
            "Show me the countries where singers older than 18 are from."
        ],
        "templates": [
            "",
            {
                "question": "List the distinct positions of pilots older than 30.",
                "masked_template": "List the distinct <mask> of <mask> than 30.",
                "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age > 30",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "List the distinct carriers of phones with memories bigger than 32.",
                "masked_template": "List the distinct <mask> of <mask> with <mask> than 32.",
                "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "Find the buildings which have rooms with capacity more than 50.",
                "masked_template": "Find the <mask> which have <mask> with <mask> more than 50.",
                "query": "SELECT DISTINCT building FROM classroom WHERE capacity > 50",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the distinct publishers of publications with price higher than 5000000?",
                "masked_template": "What are the distinct <mask> of <mask> with <mask> than <mask>",
                "query": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the distinct buildings with capacities of greater than 50?",
                "masked_template": "What are the distinct <mask> with <mask> of <mask> than 50?",
                "query": "SELECT DISTINCT building FROM classroom WHERE capacity > 50",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Which classrooms are used by grade 4?",
                "masked_template": "Which <mask> are <mask> by <mask> 4?",
                "query": "SELECT DISTINCT classroom FROM list WHERE grade = 4",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "Which grade is studying in room 105?",
                "masked_template": "Which <mask> is <mask> in <mask>",
                "query": "SELECT DISTINCT grade FROM list WHERE classroom = 105",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "Find the grade studying in room 105.",
                "masked_template": "Find the <mask> in <mask>",
                "query": "SELECT DISTINCT grade FROM list WHERE classroom = 105",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "List the first names of all the students in room 107.",
                "masked_template": "List the <mask> names of all the <mask> in <mask>",
                "query": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "Tell me the distinct block codes where some rooms are available.",
                "masked_template": "<mask> me the distinct <mask> are <mask>",
                "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0",
                "ted": 0.0625,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the unique block codes that have available rooms?",
                "masked_template": "What are the <mask> that have <mask>",
                "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable = 0",
                "ted": 0.0625,
                "db_id": "hospital_1"
            },
            {
                "question": "What are all the different start station names for a trip that lasted less than 100?",
                "masked_template": "What are all the different <mask> names for a <mask> that <mask> than <mask>",
                "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
                "ted": 0.0625,
                "db_id": "bike_1"
            },
            {
                "question": "List all the distinct stations from which a trip of duration below 100 started.",
                "masked_template": "List all the distinct <mask> which a <mask> of <mask> 100 <mask>",
                "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100",
                "ted": 0.0625,
                "db_id": "bike_1"
            },
            {
                "question": "Show all distinct city where branches with at least 100 memberships are located.",
                "masked_template": "Show all distinct <mask> with at least 100 <mask> are <mask>",
                "query": "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100",
                "ted": 0.0625,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the different cities that have more than 100 memberships?",
                "masked_template": "What are the different <mask> that have more than 100 <mask>",
                "query": "SELECT DISTINCT city FROM branch WHERE membership_amount >= 100",
                "ted": 0.0625,
                "db_id": "shop_membership"
            },
            {
                "question": "Find the classrooms in which grade 4 is studying.",
                "masked_template": "Find the <mask> in which <mask> 4 is <mask>",
                "query": "SELECT DISTINCT classroom FROM list WHERE grade = 4",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "Which classrooms are used by grade 5?",
                "masked_template": "Which <mask> are <mask> by <mask> 5?",
                "query": "SELECT DISTINCT classroom FROM list WHERE grade = 5",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "What are the first names of students studying in room 107?",
                "masked_template": "What are the <mask> names of <mask> in <mask>",
                "query": "SELECT DISTINCT firstname FROM list WHERE classroom = 107",
                "ted": 0.0625,
                "db_id": "student_1"
            },
            {
                "question": "Show me the classrooms grade 5 is using.",
                "masked_template": "Show me the <mask> 5 is <mask>",
                "query": "SELECT DISTINCT classroom FROM list WHERE grade = 5",
                "ted": 0.0625,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "Find the countries which have singers with age more than 50.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the different countries that have singers older than 18?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Record_Company , COUNT( * ) FROM orchestra GROUP BY Record_Company",
        "proc_query": "( <col> record company </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> orchestra </tab> ) , grouped by ( <col> record company </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "For each record company, how many orchestra does it have?",
            "For each record company, return the company name and the count of orchestra with that company.",
            "Show the record company id and count of orchestra in each record company",
            "Show each record company and the number of orchestra.",
            "How many orchestra does each record company have? List the record company name and the number.",
            "Show the different record companies and the number of orchestras they have.",
            "List all record companies together with the number of orchestra produced by each record company",
            "Show different record companies along with the number of orchestra of each record company.",
            "For each record company, how many orchestra tracks are there?",
            "Show different record companies of music and the number of orchestra of each record company.",
            "What are the record companies and how many musicians correspond to each record company?",
            "Show all record companies and the number of orchestra in each record company.",
            "What are the number of orchestra tracks for each record company?",
            "Find the number of orchestra for each record company.",
            "What are the different record companies and how many orchestra tracks are there for each?",
            "Show record companies and the number of orchestra in each record.",
            "Show different record companies along with the number of orchestra with each record company.",
            "find the number of orchestra for each record company.",
            "How many orchestra tracks are produced by each record company?",
            "How many orchestra tracks correspond to each record company?",
            "Please show the record companies and the number of orchestra with each record company.",
            "List all record companies and the number of orchestra in each record company",
            "For each record company, what are the names and how many orchestras are there?",
            "Show the record company ID and number of orchestra for each record company",
            "For each record company, report the total number of orchestra produced by him or her.",
            "Show all record companies and corresponding number of orchestra.",
            "Find all record companies together with number of orchestra.",
            "Show the record companies and number of orchestra in each record.",
            "What are the different record companies and how many musicians belong to each?",
            "Show the different record companies and number of orchestra at each record company",
            "For each record company, show the company number and find how many musicians are associated with it."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "What are the different record companies and how many orchestra tracks are there for each?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "For each record company, how many orchestra does it have?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
        "proc_query": "( <col> name </col> ) , ( <col> capacity </col> ) that belongs to ( <tab> stadium </tab> ) , ordered by ( ( <col> average </col> ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name and capacity of the stadium with the highest average capacity?",
            "Find the name of the stadium that has the highest average number of seats as well as the count of how many capacity it has.",
            "Which stadium has the highest average capacity?",
            "Find the name and capacity of the stadium with the highest average capacity.",
            "What is the name and capacity of the stadium with the highest average capacity?",
            "Show the name and capacity for stadium that has the highest average capacity.",
            "Show the name and capacity of the stadium with maximum average capacity.",
            "List the name and capacity of the stadium with the highest average capacity.",
            "What is the name and capacity of the stadium with the highest average capacity?",
            "Show the name and capacity of the stadium with the highest average capacity.",
            "What are the name and capacity of the stadium with the highest average capacity?",
            "Find the name and capacity of the stadium with the highest average capacity.",
            "What is the name and capacity of the stadium with the highest average capacity?",
            "What is the name and capacity of the stadium that has the highest average capacity?",
            "Which stadiums have the highest average capacity? List the stadium name and its capacity.",
            "List the name and capacity of the stadium with the highest average average capacity.",
            "What is the name and capacity for the stadium with the highest average capacity?",
            "Show the name and capacity of the stadium with maximum average capacity.",
            "Who is the stadium with the highest average capacity? List name and capacity.",
            "Which stadium has the most number of seats? List its name and capacity.",
            "Show the name and capacity of the stadium with the highest average capacity.",
            "What is the id and name of the stadium that can accommodate the maximum average capacity?",
            "What is the name and capacity of the stadium with the highest average capacity?",
            "Find the name of the stadium with the highest average capacity. Show both the name and capacity.",
            "Show the names and capacities for stadiums that have the top average total number of seats.",
            "What is the id and name of the stadium with the highest average capacity?",
            "For all the stadiums, what is the name of the stadium with the highest average capacity? List both the name and capacity.",
            "Which stadium has the highest average capacity? And what is its name?",
            "What is the name of the stadium that was opened in the most recent year?",
            "What is the name and capacity for the stadium with the highest average capacity?",
            "What is the name and capacity of the stadium with the highest average capacity?"
        ],
        "templates": [
            "",
            {
                "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
                "masked_template": "Find the name of the <mask> that has <mask> the <mask> number of <mask> as <mask> as the count of how many <mask> it has <mask>",
                "query": "SELECT document_name , access_count FROM documents ORDER BY access_count DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Which room has the highest base price?",
                "masked_template": "Which <mask> has the <mask>",
                "query": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the name and id of the top 3 expensive rooms.",
                "masked_template": "Find the name and id of the top 3 <mask>",
                "query": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the name and id of the three highest priced rooms?",
                "masked_template": "What are the name and id of the <mask>",
                "query": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Show the name and opening year for three churches that opened most recently.",
                "masked_template": "Show the name and <mask> for <mask> that <mask> most <mask>",
                "query": "SELECT name , open_date FROM church ORDER BY open_date DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "Show the id and name of the employee with maximum salary.",
                "masked_template": "Show the id and name of the <mask> with maximum <mask>",
                "query": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "List the official name and status of the city with the largest population.",
                "masked_template": "List the <mask> name and <mask> of the <mask> with the <mask>",
                "query": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What is the official name and status of the city with the most residents?",
                "masked_template": "What is the <mask> name and <mask> of the <mask> with the most <mask>",
                "query": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Show the name and the nationality of the oldest host.",
                "masked_template": "Show the name and the <mask> of the <mask>",
                "query": "SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the name and the nationality of the host of the highest age?",
                "masked_template": "What are the name and the <mask> of the <mask> of the <mask>",
                "query": "SELECT Name , Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Find the id and name of the most expensive base price room.",
                "masked_template": "Find the id and name of the most <mask>",
                "query": "SELECT RoomId , roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What si the youngest employee's first and last name?",
                "masked_template": "What si the <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What is the name and date of the race that occurred most recently?",
                "masked_template": "What is the name and <mask> of the <mask> that <mask> most <mask>",
                "query": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
                "masked_template": "Which <mask> have <mask> List the <mask> name and its <mask>",
                "query": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "restaurant_1"
            },
            {
                "question": "List the event venues and names that have the top 2 most number of people attended.",
                "masked_template": "List the <mask> and names that have the top 2 most number of <mask>",
                "query": "SELECT venue , name FROM event ORDER BY Event_Attendance DESC LIMIT 2",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "What is the flight number and its distance for the one with the maximum price?",
                "masked_template": "What is the <mask> number and its <mask> for the one with the maximum <mask>",
                "query": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Show the flight number and distance of the flight with maximum price.",
                "masked_template": "Show the <mask> number and <mask> of the <mask> with maximum <mask>",
                "query": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Who is the youngest employee in the company? List employee's first and last name.",
                "masked_template": "Who is the <mask> in the <mask> List <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
                "masked_template": "Which <mask> has the most number of <mask> List its name and <mask> of <mask>",
                "query": "SELECT open_year , name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "Show the id and name of the aircraft with the maximum distance.",
                "masked_template": "Show the id and name of the <mask> with the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the id and name of the aircraft that can cover the maximum distance?",
                "masked_template": "What is the id and name of the <mask> that can <mask> the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the name and date of the most recent race?",
                "masked_template": "What is the name and <mask> of the most <mask>",
                "query": "SELECT name , date FROM races ORDER BY date DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.",
                "masked_template": "Find the <mask> of the <mask> with the <mask> Show both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show the names and main services for train stations that have the top three total number of passengers.",
                "masked_template": "Show the names and <mask> for <mask> that have the top <mask> total number of <mask>",
                "query": "SELECT name , main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What is the id and name of the employee with the highest salary?",
                "masked_template": "What is the id and name of the <mask> with the <mask>",
                "query": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.",
                "masked_template": "<mask> all the <mask> what is the <mask> of the <mask> with the <mask> List both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Which film has the highest rental rate? And what is the rate?",
                "masked_template": "Which <mask> has the <mask> And what is the <mask>",
                "query": "SELECT title , rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the name of the song that was released in the most recent year?",
                "masked_template": "What is the name of the <mask> that was <mask> in the most <mask>",
                "query": "SELECT song_name , releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "What is the department name and corresponding building for the department with the greatest budget?",
                "masked_template": "What is the <mask> name and <mask> for the <mask> with the <mask>",
                "query": "SELECT dept_name , building FROM department ORDER BY budget DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the name and category code of the product with the highest price?",
                "masked_template": "What is the name and <mask> of the <mask> with the <mask>",
                "query": "SELECT product_name , product_category_code FROM products ORDER BY product_price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customer_complaints"
            }
        ],
        "best_hyp": "What is the name and capacity of the stadium with the highest average capacity?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name and capacity of the stadium with the highest average capacity?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
        "proc_query": "( <col> name </col> of <tab> singer </tab> ) that belongs to ( ( <tab> singer </tab> ) , and ( ( <tab> song </tab> ) satisfied that ( ( <col> singer id </col> of <tab> singer </tab> ) equal to ( <col> singer id </col> of <tab> song </tab> ) ) ) ) , grouped by ( <col> name </col> of <tab> singer </tab> ) , that have ( ( the number of ( all items ) ) greater than ( <val> 1 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of singers who sang more than one song?",
            "What are the names of singers that are in song in more than a single genre?",
            "List names of singers who have the number of songs more than 10.",
            "Find the name of singers who have more than one song.",
            "What are the names of singers who have sung out more than one song?",
            "Which singers have more than one song? Tell me the singers' names.",
            "Show the names of singers in song at more than one time.",
            "What are the names of singers that have more than a single song?",
            "List the name of singers who have produced more than one song.",
            "What are the names of the singers that have more than 10 songs?",
            "What are the names of singers who have produced more than one song?",
            "Show the names of the singers that have produced more than one song.",
            "What are the names of singers that have sung more than one song?",
            "Which singers are in charge of more than one song? Tell me their names.",
            "Find the name of singers who are in charge of more than one song.",
            "What are the names of singers that have more than one song?",
            "Show the names of singers that have more than one song.",
            "Find the name of the singers that have more than one song.",
            "Show names of singers that have more than one song.",
            "List the name of singers who have number of songs than one.",
            "Show the names of singers that have more than one song.",
            "Find the name of singers who are in more than one song.",
            "What are the names of all singers that have more than 100 songs?",
            "Find the names of singers who have more than one song.",
            "Which singers have produced more than one song in total? Return the names of singers.",
            "Find the names of singers that have produced more than one song.",
            "What are the names of all singers who sang more than one song?",
            "What are the names of singers who sang more than one song?",
            "Find the names of singers who are in more than one song.",
            "What are the names of singers whose songs have more than one song?",
            "What are the names of singers who have more than one song?"
        ],
        "templates": [
            "",
            {
                "question": "What are the carriers of devices that are in stock in more than a single shop?",
                "masked_template": "What are the <mask> of <mask> that are in <mask> in more than a <mask>",
                "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List title of albums have the number of tracks greater than 10.",
                "masked_template": "List <mask> of <mask> have the number of <mask> than 10.",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count( T1.id ) > 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name of customers who have more than one loan.",
                "masked_template": "Find the name of <mask> who have more than one <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names of customers who have taken out more than one loan?",
                "masked_template": "What are the names of <mask> who have <mask> out more than one <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Which schools have more than 1 player? Give me the school locations.",
                "masked_template": "Which <mask> have more than 1 <mask> me the <mask>",
                "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the carriers of devices in stock at more than one shop.",
                "masked_template": "Show the <mask> of <mask> in <mask> at more than one <mask>",
                "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the names of shops that have more than a single kind of device in stock?",
                "masked_template": "What are the names of <mask> that have more than a <mask> of <mask> in <mask>",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List the name of staff who has been assigned multiple jobs.",
                "masked_template": "List the name of <mask> who has <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the names of the albums that have more than 10 tracks?",
                "masked_template": "What are the names of the <mask> that have more than 10 <mask>",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count( T1.id ) > 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of staff who have been assigned multiple jobs?",
                "masked_template": "What are the names of <mask> who have <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Show the official names of the cities that have hosted more than one competition.",
                "masked_template": "Show the <mask> names of the <mask> that have <mask> more than one <mask>",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the official names of cities that have hosted more than one competition?",
                "masked_template": "What are the <mask> names of <mask> that have <mask> more than one <mask>",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Which physicians are in charge of more than one patient? Give me their names.",
                "masked_template": "Which <mask> are in <mask> of more than one <mask> me their <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the name of physicians who are in charge of more than one patient.",
                "masked_template": "Find the name of <mask> who are in <mask> of more than one <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the names of ships that have more than one captain?",
                "masked_template": "What are the names of <mask> that have more than one <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id GROUP BY T2.ship_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show the names of countries that have more than one roller coaster.",
                "masked_template": "Show the names of <mask> that have more than one <mask>",
                "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Find the name of the ships that have more than one captain.",
                "masked_template": "Find the name of the <mask> that have more than one <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id GROUP BY T2.ship_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show names of shops that have more than one kind of device in stock.",
                "masked_template": "Show names of <mask> that have more than one <mask> of <mask> in <mask>",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List the name of playlist which has number of tracks greater than 100.",
                "masked_template": "List the name of <mask> which has number of <mask> than <mask>",
                "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count( T1.track_id ) > 100",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Show the locations of schools that have more than 1 player.",
                "masked_template": "Show the <mask> of <mask> that have more than 1 <mask>",
                "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Find the name of instructors who are advising more than one student.",
                "masked_template": "Find the name of <mask> who are <mask> more than one <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of all playlists that have more than 100 tracks?",
                "masked_template": "What are the names of all <mask> that have more than 100 <mask>",
                "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count( T1.track_id ) > 100",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the names of users who have more than one tweet.",
                "masked_template": "Find the names of <mask> who have more than one <mask>",
                "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
                "masked_template": "Which <mask> have <mask> more than <mask> in <mask> of <mask> Return the <mask>",
                "query": "SELECT T2.service_name FROM first_notification_of_loss AS T1 JOIN services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Find the names of rooms that have been reserved for more than 60 times.",
                "masked_template": "Find the names of <mask> that have <mask> for more than 60 <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count( * ) > 60",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the first names of all professors who teach more than one class?",
                "masked_template": "What are the <mask> names of all <mask> who <mask> more than one <mask>",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of instructors who advise more than one student?",
                "masked_template": "What are the names of <mask> who <mask> more than one <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Find the first names of professors who are teaching more than one class.",
                "masked_template": "Find the <mask> names of <mask> who are <mask> more than one <mask>",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
                "masked_template": "What are the names of <mask> whose <mask> 60 <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count( * ) > 60",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the names of students who have more than one advisor?",
                "masked_template": "What are the names of <mask> who have more than one <mask>",
                "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            }
        ],
        "best_hyp": "What are the names of singers who sang more than one song?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of singers who sang more than one song?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT country FROM singer WHERE age > 43 INTERSECT SELECT country FROM singer WHERE age < 29",
        "proc_query": "( <col> country </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> age </col> ) greater than ( <val> 43 </val> ) ), and intersect with ( ( <col> country </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> age </col> ) less than ( <val> 29 </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show the countries that have both singers older than 43 and singers younger than 29.",
            "Which countries have both singers that are older than 43 and singers younger than 29?",
            "Show the countries that have both singers with more than 10 years of age and singers with less than 3 years of ages.",
            "Show the countries shared by singers with age greater than 43 and singers younger than 29",
            "What are the countries with both singers having more than 20 years old and singers younger than 10?",
            "Which countries have both singers older than 45 and singers younger than 35?",
            "Show the countries of singers that are older than 43 and younger than 29",
            "Show the countries that have both singers with age more than 50 and singers younger than 20.",
            "Show the countries that have both singers older than 45 and singers younger than 35.",
            "Show the countries that have both singers older than 43 and singers younger than 29",
            "Show the countries that have both singers with age greater than 43 and singers younger than 80.",
            "Show the countries shared by singers with age greater than 43 and singers younger than 29",
            "Show the countries that have both singers of age above 50 and singers younger than 46.",
            "Which countries have both singers older than 90 and singers younger than 29?",
            "What are the countries that have singers in both ages who are older than 43 and younger than 29?",
            "Show the countries that have singers older than 43 and singers younger than 29",
            "Show the countries shared by singers that are older than 43 and singers younger than 29",
            "Show the countries that have both singers with more than 43 years old and singers with less than 29 years old",
            "Which countries correspond to both singers that are older than 43 and singers that have a younger age than 29?",
            "Find the countries that have both singers with more than 43 years old and singers with less than 29 years old",
            "What are the countries that have both singers with more than 43 years old and singers with younger than 29?",
            "What are the countries of both singers that are older than 43 and singers younger than 10?",
            "Which country has both singers older than 43 and singers younger than 29?",
            "What are the countries that have both singers that are older than 43 and singers younger than 29?",
            "Show the countries shared by singers older than 23 and singers younger than 20.",
            "Show the countries that have singers with ages more than 43 and singers with age less than 29",
            "Which countries did both singers older than 23 and singers younger than 20 come from?",
            "What are the countries of the singers that are older than 43 and younger than 29?",
            "Give me a list of countries where singers whose age is either above 43 or below 29",
            "Which countries have singers older than 43 or younger than 29?",
            "Show the countries that have both singers older than 32 and singers younger than 64."
        ],
        "templates": [
            "",
            {
                "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
                "masked_template": "Which <mask> both <mask> that <mask> the <mask> and <mask> that <mask>",
                "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
                "masked_template": "Show the <mask> that have both <mask> with more than 10 <mask> of <mask> and <mask> with <mask> than 3 <mask> of <mask>",
                "query": "SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.",
                "masked_template": "Show the <mask> by <mask> with <mask> than <mask> and <mask> than <mask>",
                "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the positions with both players having more than 20 points and less than 10 points.",
                "masked_template": "What are the <mask> with both <mask> having more than 20 <mask> and <mask> than 10 <mask>",
                "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
                "masked_template": "Which <mask> have both <mask> of age <mask> 45 and <mask> of age <mask> 35?",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
                "masked_template": "Show the <mask> of <mask> that have both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> more than 50 and <mask> with <mask> than 20.",
                "query": "SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
                "masked_template": "Show the <mask> that have both <mask> than 45 and <mask> than 35.",
                "query": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than 90 and <mask> with <mask> than 80.",
                "query": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
                "masked_template": "Show the <mask> by <mask> with <mask> than <mask> and <mask> with <mask>",
                "query": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
                "masked_template": "Show the <mask> that have both <mask> of age <mask> 50 and <mask> of age <mask> 46.",
                "query": "SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
                "masked_template": "Which <mask> have both <mask> with <mask> 90 and <mask> with <mask> 80?",
                "query": "SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
                "masked_template": "What are the <mask> who have <mask> in both <mask> who <mask> more than <mask> and <mask> who <mask> than <mask>",
                "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.",
                "masked_template": "Show the <mask> that have <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
                "masked_template": "Show the <mask> by <mask> that <mask> more than <mask> and <mask> that <mask> than <mask>",
                "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
                "masked_template": "Show the <mask> that have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000",
                "ted": 0.0,
                "db_id": "performance_attendance"
            },
            {
                "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?",
                "masked_template": "Which <mask> to both <mask> that have a <mask> and <mask> that have a <mask> than <mask>",
                "query": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
                "masked_template": "Find the <mask> have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
                "masked_template": "What are the <mask> that have both <mask> with more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
                "masked_template": "What are the <mask> of both <mask> that have more than 20 20 <mask> and <mask> than 10 <mask>",
                "query": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
                "masked_template": "Which <mask> has both <mask> with <mask> than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?",
                "masked_template": "What are the <mask> that have both <mask> that are <mask> than <mask> and <mask> than <mask>",
                "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Show the hometowns shared by people older than 23 and younger than 20.",
                "masked_template": "Show the <mask> by <mask> than 23 and <mask> than 20.",
                "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
                "ted": 0.0,
                "db_id": "gymnast"
            },
            {
                "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.",
                "masked_template": "Show the <mask> that have <mask> with <mask> more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
                "masked_template": "<mask> which <mask> did both <mask> than 23 and <mask> than 20 <mask>",
                "query": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20",
                "ted": 0.0,
                "db_id": "gymnast"
            },
            {
                "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
                "masked_template": "What are the <mask> of the <mask> that have both <mask> with <mask> more than <mask> and <mask> with <mask> than <mask>",
                "query": "SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
                "masked_template": "<mask> me a list of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000",
                "ted": 0.029411764705882353,
                "db_id": "city_record"
            },
            {
                "question": "Which cities have regional population above 8000000 or below 5000000?",
                "masked_template": "Which <mask> have <mask> or <mask>",
                "query": "SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000",
                "ted": 0.029411764705882353,
                "db_id": "city_record"
            },
            {
                "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
                "masked_template": "Show the <mask> that have both <mask> with <mask> than 32 and <mask> with <mask> than 64.",
                "query": "SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64",
                "ted": 0.058823529411764705,
                "db_id": "phone_market"
            }
        ],
        "best_hyp": "Show the countries that have both singers older than 45 and singers younger than 35.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show the countries that have both singers older than 43 and singers younger than 29.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT( * ) > 2",
        "proc_query": "( <col> name </col> of <tab> conductor </tab> ) that belongs to ( ( <tab> conductor </tab> ) , and ( ( <tab> orchestra </tab> ) satisfied that ( ( <col> conductor id </col> of <tab> conductor </tab> ) equal to ( <col> conductor id </col> of <tab> orchestra </tab> ) ) ) ) , grouped by ( <col> conductor id </col> of <tab> orchestra </tab> ) , that have ( ( the number of ( all items ) ) greater than ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the conductor who has more than two orchestras?",
            "What are the names of the heads that are in charge of more than two orchestras?",
            "List names of all the musicians who have the number of orchestras greater than 10.",
            "Find the names of all the musicians who have more than one orchestra.",
            "What are the names of all the musicians who have been in charge of more than one orchestra?",
            "Which musicians have more than one orchestra? Tell me the conductor name.",
            "Show the names of the heads in charge of more than one orchestra.",
            "What are the names of all the musicians that have more than a pair of orchestras in total?",
            "List the name of the conductor who has more than two orchestras.",
            "What are the names of the musicians that have more than two orchestras?",
            "What are the names of all the musicians who have more than two orchestras?",
            "Show the names of the musicians that have more than one orchestra.",
            "What are the names of the heads that have been in charge of more than one orchestra?",
            "Which musicians are in charge of more than one orchestra? Tell me their names.",
            "Find the names of all the musicians who are in charge of more than one orchestra.",
            "What are the names of all the musicians that have more than one orchestra?",
            "Show the names of all the musicians that have more than one orchestra.",
            "Find the name of the musicians that have more than one orchestra.",
            "Show names of all the musicians that have more than one orchestra.",
            "List the name of conductor who has number of orchestras bigger than 2",
            "Show the names of all the musicians that have more than one orchestra.",
            "Find the names of the heads who are in charge of more than one orchestra.",
            "What are the names of all the musicians that have more than two orchestras?",
            "Find the names of all the musicians who have more than one orchestra.",
            "Which musicians have more than two orchestras in total? Return the names of these musicians.",
            "Find the names of all the musicians that have been in charge of more than two orchestras.",
            "What are the names of all the musicians who have more than one orchestra?",
            "What are the names of all the musicians who have more than one orchestra?",
            "Find the names of the heads who are in charge of more than one orchestra.",
            "What are the names of all the musicians whose orchestra has more than two tracks?",
            "What are the names of all the musicians who have more than one orchestra?"
        ],
        "templates": [
            "",
            {
                "question": "What are the carriers of devices that are in stock in more than a single shop?",
                "masked_template": "What are the <mask> of <mask> that are in <mask> in more than a <mask>",
                "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List title of albums have the number of tracks greater than 10.",
                "masked_template": "List <mask> of <mask> have the number of <mask> than 10.",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count( T1.id ) > 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name of customers who have more than one loan.",
                "masked_template": "Find the name of <mask> who have more than one <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names of customers who have taken out more than one loan?",
                "masked_template": "What are the names of <mask> who have <mask> out more than one <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Which schools have more than 1 player? Give me the school locations.",
                "masked_template": "Which <mask> have more than 1 <mask> me the <mask>",
                "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the carriers of devices in stock at more than one shop.",
                "masked_template": "Show the <mask> of <mask> in <mask> at more than one <mask>",
                "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the names of shops that have more than a single kind of device in stock?",
                "masked_template": "What are the names of <mask> that have more than a <mask> of <mask> in <mask>",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List the name of staff who has been assigned multiple jobs.",
                "masked_template": "List the name of <mask> who has <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the names of the albums that have more than 10 tracks?",
                "masked_template": "What are the names of the <mask> that have more than 10 <mask>",
                "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count( T1.id ) > 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of staff who have been assigned multiple jobs?",
                "masked_template": "What are the names of <mask> who have <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Show the official names of the cities that have hosted more than one competition.",
                "masked_template": "Show the <mask> names of the <mask> that have <mask> more than one <mask>",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the official names of cities that have hosted more than one competition?",
                "masked_template": "What are the <mask> names of <mask> that have <mask> more than one <mask>",
                "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Which physicians are in charge of more than one patient? Give me their names.",
                "masked_template": "Which <mask> are in <mask> of more than one <mask> me their <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the name of physicians who are in charge of more than one patient.",
                "masked_template": "Find the name of <mask> who are in <mask> of more than one <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the names of ships that have more than one captain?",
                "masked_template": "What are the names of <mask> that have more than one <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id GROUP BY T2.ship_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show the names of countries that have more than one roller coaster.",
                "masked_template": "Show the names of <mask> that have more than one <mask>",
                "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Find the name of the ships that have more than one captain.",
                "masked_template": "Find the name of the <mask> that have more than one <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id GROUP BY T2.ship_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show names of shops that have more than one kind of device in stock.",
                "masked_template": "Show names of <mask> that have more than one <mask> of <mask> in <mask>",
                "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "List the name of playlist which has number of tracks greater than 100.",
                "masked_template": "List the name of <mask> which has number of <mask> than <mask>",
                "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count( T1.track_id ) > 100",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Show the locations of schools that have more than 1 player.",
                "masked_template": "Show the <mask> of <mask> that have more than 1 <mask>",
                "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Find the name of instructors who are advising more than one student.",
                "masked_template": "Find the name of <mask> who are <mask> more than one <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of all playlists that have more than 100 tracks?",
                "masked_template": "What are the names of all <mask> that have more than 100 <mask>",
                "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count( T1.track_id ) > 100",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the names of users who have more than one tweet.",
                "masked_template": "Find the names of <mask> who have more than one <mask>",
                "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
                "masked_template": "Which <mask> have <mask> more than <mask> in <mask> of <mask> Return the <mask>",
                "query": "SELECT T2.service_name FROM first_notification_of_loss AS T1 JOIN services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Find the names of rooms that have been reserved for more than 60 times.",
                "masked_template": "Find the names of <mask> that have <mask> for more than 60 <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count( * ) > 60",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the first names of all professors who teach more than one class?",
                "masked_template": "What are the <mask> names of all <mask> who <mask> more than one <mask>",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of instructors who advise more than one student?",
                "masked_template": "What are the names of <mask> who <mask> more than one <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Find the first names of professors who are teaching more than one class.",
                "masked_template": "Find the <mask> names of <mask> who are <mask> more than one <mask>",
                "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
                "masked_template": "What are the names of <mask> whose <mask> 60 <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING count( * ) > 60",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the names of students who have more than one advisor?",
                "masked_template": "What are the names of <mask> who have more than one <mask>",
                "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "college_2"
            }
        ],
        "best_hyp": "Which musicians are in charge of more than one orchestra? Tell me their names.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the conductor who has more than two orchestras?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT( * ) DESC LIMIT 1",
        "proc_query": "( <col> citizenship </col> ) that belongs to ( <tab> singer </tab> ) , grouped by ( <col> citizenship </col> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the most common citizenship among singers?",
            "Find the citizenship that is the most common in all the singers. Tell me its name.",
            "Which nationality is most common among singers?",
            "Which country has most number of singers?",
            "List the citizenship shared by the most singers.",
            "What is the id of the country with the most singers?",
            "Which country has the most singers?",
            "Find the citizenship that is most common among singers.",
            "What is the citizenship shared by the most singers?",
            "What are the countries which the most singers are from?",
            "Show the top 3 most common countries of singers in descending order of number of singers.",
            "What is the citizenship that is most common among singers?",
            "Show the nations that have the most singers.",
            "Show the most common citizenship of singers.",
            "List the name of country that have the most number of singers.",
            "Find the country that has the most singers.",
            "Show the country with the most number of singers.",
            "Show the most common citizenship of singers.",
            "List the citizenship shared by the greatest number of singers.",
            "What is the most common citizenship among singers?",
            "List the most common citizenship of singers.",
            "What is the citizenship of the singer?",
            "What is the name of teh country that has the most singers?",
            "Find the names of the top 3 countries that have the greatest number of singers.",
            "Return the citizenship for which there are the fewest singers.",
            "Which country has the most singers?",
            "What is the name of the country with the fewest singers?",
            "What is the citizenship of the singer with the most songs?",
            "What is the most common citizenship among singers?",
            "Return the citizenship of the singer that is most common.",
            "Find the citizenship of most of singers are living in."
        ],
        "templates": [
            "",
            {
                "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
                "masked_template": "Find the <mask> that is <mask> the most <mask> in all the <mask> me its <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Which allergy type is most common?",
                "masked_template": "Which <mask> is most <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Which allergy type has most number of allergies?",
                "masked_template": "Which <mask> has most number of <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "List the industry shared by the most companies.",
                "masked_template": "List the <mask> by the most <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the id of the event with the most participants?",
                "masked_template": "What is the id of the <mask> with the most <mask>",
                "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Which people severed as governor most frequently?",
                "masked_template": "Which <mask> as <mask> most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the payment method that is used most frequently.",
                "masked_template": "Find the <mask> that is <mask> most <mask>",
                "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customer_deliveries"
            },
            {
                "question": "What is the payment method code used by the most orders?",
                "masked_template": "What is the <mask> by the most <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the three colleges from which the most players are from?",
                "masked_template": "What are the <mask> which the most <mask> are <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the top 3 most common colleges of players in match seasons.",
                "masked_template": "Show the top 3 most <mask> of <mask> in <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "What is the position that is most common among players in match seasons?",
                "masked_template": "What is the <mask> that is most <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the people that have been governor the most times.",
                "masked_template": "Show the <mask> that have <mask> the most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the most common position of players in match seasons.",
                "masked_template": "Show the most <mask> of <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "List the name of film studio that have the most number of films.",
                "masked_template": "List the name of <mask> that have the most number of <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the country that has the most stadiums.",
                "masked_template": "Find the <mask> that has the most <mask>",
                "query": "SELECT country FROM stadium GROUP BY country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Show the home city with the most number of drivers.",
                "masked_template": "Show the <mask> with the most number of <mask>",
                "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "Show the most frequently used carrier of the phones.",
                "masked_template": "Show the most <mask> of the <mask>",
                "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "List the software platform shared by the greatest number of devices.",
                "masked_template": "List the <mask> by the <mask> number of <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What is the most common participant type?",
                "masked_template": "What is the most <mask>",
                "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "List the most common type of competition.",
                "masked_template": "List the most <mask> of <mask>",
                "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What instrument is used the most?",
                "masked_template": "What <mask> is <mask> the <mask>",
                "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What is the name of teh studio that created the most films?",
                "masked_template": "What is the name of teh <mask> that <mask> the most <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
                "masked_template": "Find the names of the top 3 <mask> that <mask> the <mask> of <mask>",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Return the rank for which there are the fewest captains.",
                "masked_template": "Return the <mask> for which there are the <mask>",
                "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Which location has the most corresponding counties?",
                "masked_template": "Which <mask> has the most <mask>",
                "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What is the name of the deparment with the highest enrollment?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the code of the city with the most students?",
                "masked_template": "What is the <mask> of the <mask> with the most <mask>",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the largest major?",
                "masked_template": "What is the <mask>",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Return the code of the document type that is most common.",
                "masked_template": "Return the <mask> of the <mask> that is most <mask>",
                "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Find the code of city where most of students are living in.",
                "masked_template": "Find the <mask> of <mask> most of <mask> are <mask> in.",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            }
        ],
        "best_hyp": "What is the id of the country with the most singers?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the most common citizenship among singers?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT song_name FROM singer WHERE age > ( SELECT avg( age ) FROM singer )",
        "proc_query": "( <col> song name </col> ) that belongs to ( <tab> singer </tab> ) , that have ( ( <col> age </col> ) greater than ( the <col> average </col> of ( <col> age </col> ) ) that belongs to ( <tab> singer </tab> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of singers who are older than average?",
            "Show ids for all songs whose singers are older than the average age.",
            "What are the names of singers that are older than the average number of singers for all ages?",
            "List the name of all songs that are sung older than the average age of all singers",
            "what are the names of singers who are older than the average age?",
            "What are the names of all singers that got older than the average number of singers?",
            "Find the song names for all singers who are older than the average age.",
            "What are the song names ids for singers who are older than the average age?",
            "What are the names of singers that are older than the average age?",
            "Find the name of singers whose age is older than the average age.",
            "What are the names of all singers who are older than average?",
            "Show names for all singers with age more than the average.",
            "What are the names of singers with age above the average?",
            "Find the name of songs whose age is greater than the average age of all singers.",
            "What are the ids for singers that are older than the average age of a singer?",
            "What are the names of singers with age greater than the average of all singers?",
            "What are the names of all singers that are older than average?",
            "Find the name of songs whose age is greater than the average age of all singers.",
            "What are the names of singers with age greater than the average?",
            "List all the songs which have a singer that is no more than the average age. List the song names.",
            "Return the names for the singers whose age is no more than the average.",
            "Find the names of singers whose age is greater than the average age.",
            "What are the names of singers who are older than average?",
            "find the name of singers whose age is older than the average age.",
            "How many songs have a singer older than the average age?",
            "How many songs have more than average number of singers are older than average?",
            "What is the total song name for all the singers that have an age greater than the average?",
            "How many singers have a fee higher than the average?",
            "Find the names of singers whose age is greater than the average age.",
            "How many singers have a fee higher than average?",
            "What is the number of songs that have more than the average number of singers?"
        ],
        "templates": [
            "",
            {
                "question": "Show ids for all transactions whose amounts are greater than the average.",
                "masked_template": "Show ids for all <mask> whose <mask> are <mask> than the <mask>",
                "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > ( SELECT avg( transaction_amount ) FROM Financial_transactions )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
                "masked_template": "What are the names of <mask> that have <mask> than the average number of <mask> for all <mask>",
                "query": "SELECT name FROM projects WHERE hours > ( SELECT avg( hours ) FROM projects )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
                "masked_template": "List the name of all <mask> that are <mask> than the average <mask> of all <mask>",
                "query": "SELECT name FROM projects WHERE hours > ( SELECT avg( hours ) FROM projects )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "what are the name of players who get more than the average points.",
                "masked_template": "what are the name of <mask> who get more than the average <mask>",
                "query": "SELECT name FROM player WHERE points > ( SELECT avg( points ) FROM player )",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the names of all players that got more than the average number of points?",
                "masked_template": "What are the names of all <mask> that got more than the average number of <mask>",
                "query": "SELECT name FROM player WHERE points > ( SELECT avg( points ) FROM player )",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Find the employee id for all employees who earn more than the average salary.",
                "masked_template": "Find the <mask> id for all <mask> who <mask> more than the average <mask>",
                "query": "SELECT employee_id FROM employees WHERE salary > ( SELECT AVG( salary ) FROM employees )",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the employee ids for employees who make more than the average?",
                "masked_template": "What are the <mask> ids for <mask> who <mask> more than the <mask>",
                "query": "SELECT employee_id FROM employees WHERE salary > ( SELECT AVG( salary ) FROM employees )",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the name of rooms that cost more than the average.",
                "masked_template": "What are the name of <mask> that <mask> more than the <mask>",
                "query": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg( basePrice ) FROM Rooms ) ",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the name of rooms whose price is higher than the average price.",
                "masked_template": "Find the name of <mask> whose <mask> is <mask> than the average <mask>",
                "query": "SELECT roomName FROM Rooms WHERE basePrice > ( SELECT avg( basePrice ) FROM Rooms ) ",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the names of all employees who have a salary higher than average?",
                "masked_template": "What are the names of all <mask> who have a <mask> than <mask>",
                "query": "SELECT name FROM Employee WHERE salary > ( SELECT avg( salary ) FROM Employee )",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Show names for all employees with salary more than the average.",
                "masked_template": "Show names for all <mask> with <mask> more than the <mask>",
                "query": "SELECT name FROM Employee WHERE salary > ( SELECT avg( salary ) FROM Employee )",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the mascots for schools with enrollments above the average?",
                "masked_template": "What are the <mask> for <mask> with <mask> the <mask>",
                "query": "SELECT mascot FROM school WHERE enrollment > ( SELECT avg( enrollment ) FROM school )",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
                "masked_template": "Find the name of <mask> whose <mask> is <mask> than the average <mask> of all <mask>",
                "query": "SELECT name FROM manufacturers WHERE revenue > ( SELECT avg( revenue ) FROM manufacturers )",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
                "masked_template": "What are the ids for <mask> that have an <mask> than the average <mask> of a <mask>",
                "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > ( SELECT avg( transaction_amount ) FROM Financial_transactions )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
                "masked_template": "What are the names of <mask> with <mask> than the average of all <mask>",
                "query": "SELECT name FROM manufacturers WHERE revenue > ( SELECT avg( revenue ) FROM manufacturers )",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the names of all aircrafts that can cover more distances than average?",
                "masked_template": "What are the names of all <mask> that can <mask> more <mask> than <mask>",
                "query": "SELECT name FROM Aircraft WHERE distance > ( SELECT avg( distance ) FROM Aircraft )",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
                "masked_template": "Find the name of <mask> whose <mask> is <mask> the average <mask> of all <mask>",
                "query": "SELECT cust_name FROM customer WHERE credit_score < ( SELECT avg( credit_score ) FROM customer )",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names of customers with credit score less than the average credit score across customers?",
                "masked_template": "What are the names of <mask> with <mask> than the average <mask>",
                "query": "SELECT cust_name FROM customer WHERE credit_score < ( SELECT avg( credit_score ) FROM customer )",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",
                "masked_template": "<mask> all the <mask> which <mask> have a <mask> that is no more than the <mask> List the <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg( Amount_Settled ) FROM Claims )",
                "ted": 0.045454545454545456,
                "db_id": "insurance_policies"
            },
            {
                "question": "Return the claim start date for the claims whose claimed amount is no more than the average",
                "masked_template": "Return the <mask> for the <mask> whose <mask> is no more than the average",
                "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= ( SELECT avg( Amount_Settled ) FROM Claims )",
                "ted": 0.045454545454545456,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
                "masked_template": "Find the names of <mask> whose <mask> is <mask> than the average <mask>",
                "query": "SELECT name FROM stadium WHERE capacity < ( SELECT avg( capacity ) FROM stadium )",
                "ted": 0.045454545454545456,
                "db_id": "swimming"
            },
            {
                "question": "What are the names of people who are shorter than average?",
                "masked_template": "What are the names of <mask> who are <mask> than <mask>",
                "query": "SELECT name FROM people WHERE height < ( SELECT avg( height ) FROM people )",
                "ted": 0.045454545454545456,
                "db_id": "candidate_poll"
            },
            {
                "question": "find the name of people whose height is lower than the average.",
                "masked_template": "find the name of <mask> whose <mask> is <mask> than the <mask>",
                "query": "SELECT name FROM people WHERE height < ( SELECT avg( height ) FROM people )",
                "ted": 0.045454545454545456,
                "db_id": "candidate_poll"
            },
            {
                "question": "How many products have a price higher than the average?",
                "masked_template": "How many <mask> have a <mask> than the <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_price > ( SELECT avg( product_price ) FROM products )",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "How many branches where have more than average number of memberships are there?",
                "masked_template": "How many <mask> have more than average number of <mask> are <mask>",
                "query": "SELECT count( * ) FROM branch WHERE membership_amount > ( SELECT avg( membership_amount ) FROM branch )",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
                "masked_template": "What is the total <mask> for all the <mask> that have an <mask> the average <mask>",
                "query": "SELECT sum( city_population ) FROM district WHERE city_area > ( SELECT avg( city_area ) FROM district )",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "How many universities have a campus fee greater than the average?",
                "masked_template": "How many <mask> have a <mask> fee <mask> than the <mask>",
                "query": "SELECT count( * ) FROM csu_fees WHERE campusfee > ( SELECT avg( campusfee ) FROM csu_fees )",
                "ted": 0.08333333333333333,
                "db_id": "csu_1"
            },
            {
                "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
                "masked_template": "Find the count of <mask> whose <mask> fee is <mask> than the average <mask>",
                "query": "SELECT count( * ) FROM csu_fees WHERE campusfee > ( SELECT avg( campusfee ) FROM csu_fees )",
                "ted": 0.08333333333333333,
                "db_id": "csu_1"
            },
            {
                "question": "How many universities have a campus fee higher than average?",
                "masked_template": "How many <mask> have a <mask> fee <mask> than <mask>",
                "query": "SELECT count( * ) FROM csu_fees WHERE campusfee > ( SELECT avg( campusfee ) FROM csu_fees )",
                "ted": 0.08333333333333333,
                "db_id": "csu_1"
            },
            {
                "question": "What is the number of branches that have more than the average number of memberships?",
                "masked_template": "What is the number of <mask> that have more than the average number of <mask>",
                "query": "SELECT count( * ) FROM branch WHERE membership_amount > ( SELECT avg( membership_amount ) FROM branch )",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            }
        ],
        "best_hyp": "What are the names of singers who are older than average?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of singers who are older than average?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT name , country , age FROM singer ORDER BY age DESC",
        "proc_query": "( <col> name </col> ) , ( <col> country </col> ) , ( <col> age </col> ) that belongs to ( <tab> singer </tab> ) , ordered by ( ( <col> age </col> ) in descending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "List the name, country, and age of singers in descending order of age.",
            "Find the name and country of all singers sorted by their ages in the descending order.",
            "Show the names and countries of singers in descending order of age.",
            "What are the names and countries of singers ordered by age descending?",
            "Show names and countries for all singers in a descending order of age.",
            "Show the name and country for all singers in descending order by age.",
            "What are the names and countries for all singers, ordered by age descending?",
            "What are the names and countries for singers sorted by age?",
            "Show the name and country for all singers in descending order of age.",
            "Who are the singers and what countries did they hail from, ordered by age descending?",
            "What are the names and countries of singers in descending order of age?",
            "Show all singers' names and countries ordered by the age.",
            "Show name and country for all singers sorted by age.",
            "What are the names and countries of the singers ordered by age descending?",
            "Please list names and countries for each singer in descending order by age.",
            "What are the names and countries of each singer ordered by their age?",
            "Show gas ids, countries and ages for all gas singers ordered by age.",
            "Show names of all singers in the descending order of the age.",
            "What is the name and country for all singers in descending order by age?",
            "List the name and age of the singers of descending order by age.",
            "List the name and country of all singers in descending order of age.",
            "List the all the singers' names and countries in descending order of age.",
            "Find the name, country and age of each singer and show the results in the order of age.",
            "List singer name and country name in descending order by age.",
            "What are the names and countries of all singers ordered by age descending?",
            "List the name and country of all singers ordered by age descending.",
            "List the name and country of all the singers in descending order of age.",
            "Show the name and the country and age of singers listed by the age.",
            "What are the gas names and country names for the gas singers ordered by age descending?",
            "What are the names and countries of each singer and the list in descending order of age?",
            "What are the names and countries of all singers ordered by age in descending order?"
        ],
        "templates": [
            "",
            {
                "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
                "masked_template": "Find the <mask> and <mask> of all <mask> by their <mask> in the <mask>",
                "query": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "Show the dates, places, and names of events in descending order of the attendance.",
                "masked_template": "Show the <mask> and names of <mask> in <mask> order of the <mask>",
                "query": "SELECT Date , Name , venue FROM event ORDER BY Event_Attendance DESC",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
                "masked_template": "What are the <mask> and <mask> of <mask> ordered by <mask>",
                "query": "SELECT card_number , name , hometown FROM member ORDER BY LEVEL DESC",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "Show card number, name, and hometown for all members in a descending order of level.",
                "masked_template": "Show <mask> and <mask> for all <mask> in a <mask> order of <mask>",
                "query": "SELECT card_number , name , hometown FROM member ORDER BY LEVEL DESC",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
                "masked_template": "Show the <mask> and <mask> for all <mask> in <mask> order by <mask>",
                "query": "SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC",
                "ted": 0.0,
                "db_id": "culture_company"
            },
            {
                "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
                "masked_template": "What are the <mask> and <mask> for all <mask> ordered by <mask>",
                "query": "SELECT YEAR , book_title , publisher FROM book_club ORDER BY YEAR DESC",
                "ted": 0.0,
                "db_id": "culture_company"
            },
            {
                "question": "What are the names, headquarters and revenues for manufacturers, sorted by revenue descending?",
                "masked_template": "What are the <mask> and <mask> for <mask> by <mask>",
                "query": "SELECT name , headquarter , revenue FROM manufacturers ORDER BY revenue DESC",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
                "masked_template": "Show the <mask> and <mask> for all <mask> in <mask> order of <mask>",
                "query": "SELECT customer_name , customer_phone , payment_method_code FROM customers ORDER BY customer_number DESC",
                "ted": 0.0,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
                "masked_template": "Who are the <mask> did <mask> and <mask> did <mask> ordered by <mask>",
                "query": "SELECT minister , took_office , left_office FROM party ORDER BY left_office",
                "ted": 0.05555555555555555,
                "db_id": "party_people"
            },
            {
                "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
                "masked_template": "What are the <mask> and <mask> of <mask> by the <mask>",
                "query": "SELECT name , age , country FROM artist ORDER BY Year_Join",
                "ted": 0.05555555555555555,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all artist name, age, and country ordered by the yeared they joined.",
                "masked_template": "Show all <mask> and <mask> ordered by the <mask>",
                "query": "SELECT name , age , country FROM artist ORDER BY Year_Join",
                "ted": 0.05555555555555555,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show name, address road, and city for all branches sorted by open year.",
                "masked_template": "Show <mask> and <mask> for all <mask> by <mask>",
                "query": "SELECT name , address_road , city FROM branch ORDER BY open_year",
                "ted": 0.05555555555555555,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the names, address roads, and cities of the branches ordered by opening year?",
                "masked_template": "What are the <mask> and <mask> of the <mask> ordered by <mask>",
                "query": "SELECT name , address_road , city FROM branch ORDER BY open_year",
                "ted": 0.05555555555555555,
                "db_id": "shop_membership"
            },
            {
                "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
                "masked_template": "<mask> list <mask> and <mask> for each <mask> in <mask> order by <mask>",
                "query": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
                "ted": 0.05555555555555555,
                "db_id": "candidate_poll"
            },
            {
                "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
                "masked_template": "What are the <mask> and <mask> of each <mask> ordered <mask> by their <mask>",
                "query": "SELECT Support_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY unsure_rate",
                "ted": 0.05555555555555555,
                "db_id": "candidate_poll"
            },
            {
                "question": "Show gas station id, location, and manager_name for all gas stations ordered by open year.",
                "masked_template": "Show gas <mask> id, <mask> and <mask> for all gas <mask> ordered by <mask>",
                "query": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
                "ted": 0.05555555555555555,
                "db_id": "gas_company"
            },
            {
                "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
                "masked_template": "Show <mask> of all <mask> in the <mask> order of the <mask>",
                "query": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
                "masked_template": "What is the <mask> and <mask> for all <mask> in <mask> order by <mask>",
                "query": "SELECT flno , origin , destination FROM Flight ORDER BY origin",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "List the name, born state and age of the heads of departments ordered by age.",
                "masked_template": "List the <mask> and age of the <mask> of <mask> ordered by <mask>",
                "query": "SELECT name , born_state , age FROM head ORDER BY age",
                "ted": 0.05555555555555555,
                "db_id": "department_management"
            },
            {
                "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
                "masked_template": "List the <mask> and <mask> of all <mask> by their <mask> of <mask>",
                "query": "SELECT customer_name , customer_phone , customer_email FROM Customers ORDER BY date_became_customer",
                "ted": 0.05555555555555555,
                "db_id": "customer_deliveries"
            },
            {
                "question": "List the all the assets make, model, details by the disposed date ascendingly.",
                "masked_template": "List the all the <mask> by the <mask>",
                "query": "SELECT asset_make , asset_model , asset_details FROM Assets ORDER BY asset_disposed_date ASC",
                "ted": 0.05555555555555555,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
                "masked_template": "Find the <mask> age and <mask> of each <mask> and show the <mask> in the order of <mask>",
                "query": "SELECT Time_of_purchase , age , address FROM member ORDER BY Time_of_purchase",
                "ted": 0.05555555555555555,
                "db_id": "coffee_shop"
            },
            {
                "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
                "masked_template": "List <mask> name and <mask> name in <mask> order by <mask>",
                "query": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
                "masked_template": "What are the <mask> and <mask> names of all <mask> ordered by <mask>",
                "query": "SELECT individual_first_name , individual_middle_name , individual_last_name FROM individuals ORDER BY individual_last_name",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
                "masked_template": "List the <mask> and <mask> of all the <mask> ordered by <mask>",
                "query": "SELECT vehicle_flight_number , date , pilot FROM flight ORDER BY altitude ASC",
                "ted": 0.05555555555555555,
                "db_id": "flight_company"
            },
            {
                "question": "List the method, date and amount of all the payments, in ascending order of date.",
                "masked_template": "List the <mask> and <mask> of all the <mask> in <mask> order of <mask>",
                "query": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
                "ted": 0.05555555555555555,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
                "masked_template": "Show the <mask> and the <mask> and <mask> listed by the <mask>",
                "query": "SELECT minister , took_office , left_office FROM party ORDER BY left_office",
                "ted": 0.05555555555555555,
                "db_id": "party_people"
            },
            {
                "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?",
                "masked_template": "What are the gas <mask> and <mask> names for the gas <mask> ordered by <mask>",
                "query": "SELECT station_id , LOCATION , manager_name FROM gas_station ORDER BY open_year",
                "ted": 0.05555555555555555,
                "db_id": "gas_company"
            },
            {
                "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
                "masked_template": "What are the <mask> and <mask> of each <mask> the list in <mask> order of <mask>",
                "query": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
                "ted": 0.05555555555555555,
                "db_id": "insurance_policies"
            },
            {
                "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
                "masked_template": "What are the <mask> and <mask> of all <mask> ordered by <mask> in <mask>",
                "query": "SELECT title , YEAR , director FROM movie ORDER BY budget_million",
                "ted": 0.05555555555555555,
                "db_id": "culture_company"
            }
        ],
        "best_hyp": "What is the name and country for all singers in descending order by age?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "List the name, country, and age of singers in descending order of age.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2009",
        "proc_query": "( <col> name </col> of <tab> conductor </tab> ) that belongs to ( ( <tab> conductor </tab> ) , and ( ( <tab> orchestra </tab> ) satisfied that ( ( <col> conductor id </col> of <tab> conductor </tab> ) equal to ( <col> conductor id </col> of <tab> orchestra </tab> ) ) ) ) , that have ( ( <col> year of founded </col> ) greater than ( <val> 2009 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the heads of the orchestras that were founded after 2009?",
            "Find the names of all the musicians who had an orchestra founded after 2009.",
            "What are the names of all the musicians that were at least 2 years old on founded dates?",
            "What are the names of the musicians with an orchestra founded after 2009?",
            "Tell me the names of the heads of the orchestras that were founded after 2009",
            "What are the names of the heads of the orchestras with more than 2 years of foundation on record?",
            "Return the names for all the musicians that have an orchestra that was founded more than 2 years after 2009.",
            "What are the names of the heads of the orchestras that were founded after 2009?",
            "Find the names of the heads of the orchestras that were founded after 2009.",
            "Find the names of all the musicians who have an orchestra founded after 2009.",
            "Which conductor was in charge of an orchestra founded after 2009?",
            "Which musicians have orchestras that have more than two years of founded? Tell me the names of the musicians.",
            "Show the names of the heads of the orchestras that have been founded after 2009.",
            "Show names who have been a conductor with an orchestra founded after 2009",
            "What are the names of the musicians with more than one orchestra founded after 2009?",
            "Show the names of all the musicians with more than 4 orchestras founded after 2009.",
            "What are the names of all the musicians whose total score is greater than 2009?",
            "Show the names of musicians with orchestra having founded after 2009",
            "What are the names of all the musicians that have an orchestra founded after 2009?",
            "What are the names of all the musicians with an orchestra founded after 2009?",
            "What are the names of the musicians who have been a conductor for more than 3 years?",
            "What are the names of all the musicians with more than one orchestra founded after 2009?",
            "Show the names of all the musicians with a orchestra having been founded after 2009.",
            "What are the names of all the musicians that have an orchestra founded after 2009?",
            "Show names of heads of orchestras with founded year more than 50.",
            "What are the names of the heads of orchestras that were founded after 2009?",
            "Show names of all the musicians who are in a orchestra founded after 2009.",
            "What are the names of all the musicians that were in a company founded after 2009?",
            "What are the names of all the musicians who have a orchestra of more than one year founded after 2009?",
            "Find the the name of the musicians who have a orchestra with founded more than 2009",
            "Show names of all music directors if any orchestra with start count greater than 2009"
        ],
        "templates": [
            "",
            {
                "question": "Find the names of reviewers who had given higher than 3 star ratings.",
                "masked_template": "Find the names of <mask> who had <mask> than 3 <mask>",
                "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
                "masked_template": "What are the <mask> of <mask> at <mask> to <mask> that <mask> more than 2 <mask> on <mask>",
                "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "What are the descriptions of the service types with product price above 100?",
                "masked_template": "What are the <mask> of the <mask> with <mask>",
                "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the descriptions of the service types that cost more than 100.",
                "masked_template": "<mask> me the <mask> of the <mask> that <mask> more than <mask>",
                "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
                "masked_template": "What are the <mask> of the <mask> with <mask> with more than 2 <mask> on <mask>",
                "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
                "masked_template": "Return the <mask> for <mask> that have <mask> that <mask> more than 2 <mask> on <mask>",
                "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "What are the order details of the products with price higher than 2000?",
                "masked_template": "What are the order <mask> of the <mask> with <mask> than <mask>",
                "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Find the order detail for the products with price above 2000.",
                "masked_template": "Find the order <mask> for the <mask> with <mask>",
                "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Find the cities which were once a host city after 2010?",
                "masked_template": "Find the <mask> which <mask> a <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which cities served as a host city after 2010?",
                "masked_template": "Which <mask> as a <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
                "masked_template": "Which <mask> have <mask> that have more than two <mask> me the <mask> of the <mask>",
                "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.",
                "masked_template": "Show the <mask> of the <mask> that have <mask> with more than 2 <mask>",
                "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show writers who have published a book with price more than 4000000.",
                "masked_template": "Show <mask> who have <mask> a <mask> with <mask> more than <mask>",
                "query": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the facility codes of the apartments with more than four bedrooms?",
                "masked_template": "What are the <mask> of the <mask> with more than <mask>",
                "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the facility codes of apartments with more than 4 bedrooms.",
                "masked_template": "Show the <mask> of <mask> with more than 4 <mask>",
                "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are the names of body builders whose total score is higher than 300?",
                "masked_template": "What are the names of <mask> whose total <mask> is <mask> than <mask>",
                "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
                "masked_template": "<mask> show the <mask> of <mask> with <mask> having <mask> than <mask>",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
                "masked_template": "What are the <mask> of <mask> that have <mask> with more than <mask>",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the purchase details of transactions with amount bigger than 10000?",
                "masked_template": "What are the <mask> of <mask> with <mask> than <mask>",
                "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
                "masked_template": "What are the names of the <mask> who have <mask> a <mask> more than 3 <mask>",
                "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What are the names of representatives with more than 10000 votes in election?",
                "masked_template": "What are the names of <mask> with more than <mask> in <mask>",
                "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "Show the crime rate of counties with a city having white percentage more than 90.",
                "masked_template": "Show the <mask> of <mask> with a <mask> having <mask> more than 90.",
                "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
                "masked_template": "What are the <mask> of <mask> that <mask> that have <mask> of <mask> 90?",
                "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show times of elimination of wrestlers with days held more than 50.",
                "masked_template": "Show <mask> of <mask> of <mask> with <mask> more than 50.",
                "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are the times of elimination for wrestlers with over 50 days held?",
                "masked_template": "What are the <mask> of <mask> for <mask> with <mask> 50 <mask>",
                "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Show names of ships involved in a mission launched after 1928.",
                "masked_template": "Show names of <mask> in a <mask>",
                "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the names of ships that were involved in a mission launched after 1928?",
                "masked_template": "What are the names of <mask> that <mask> in a <mask>",
                "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the names of customers who have a loan of more than 3000 in amount?",
                "masked_template": "What are the names of <mask> who have a <mask> of more than <mask> in <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the the name of the customers who have a loan with amount more than 3000.",
                "masked_template": "Find the the name of the <mask> who have a <mask> with <mask> more than <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Show details of all investors if they make any transaction with share count greater than 100.",
                "masked_template": "Show <mask> of all <mask> if <mask> any <mask> with <mask> count <mask> than <mask>",
                "query": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            }
        ],
        "best_hyp": "What are the names of the musicians with more than one orchestra founded after 2009?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the heads of the orchestras that were founded after 2009?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Birth_Year , Citizenship FROM singer",
        "proc_query": "( <col> birth year </col> ) , ( <col> citizenship </col> ) that belongs to ( <tab> singer </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the birth year and citizenship of all singers?",
            "List all birth years and nationalities of singers.",
            "Show the birth year and citizenship of singers.",
            "What are the birth year and citizenship for each singer?",
            "Show all birth years and nationalities.",
            "What are all the birth years and nationalities of singers?",
            "Show the ids and names of all singers.",
            "What are the birth year and citizenship of all singers?",
            "What are all the birth years and nationalities of singers?",
            "What are the ids and citizenship of all singers?",
            "What are the birth year and citizenship of the singers?",
            "What are the birth year and citizenship of singers?",
            "Show all birth years and nationalities of singers.",
            "What are the birth year and citizenship of all singers?",
            "Show the birth year and citizenship for all singers.",
            "What are the ids and names for each of the singers?",
            "List all birth years and nationalities of singers.",
            "What are the birth year and citizenship of each singer?",
            "Show the birth year and citizenship of all singers.",
            "Show all the birth years and citizenship of singers.",
            "What are the birth years of singers and their nationalities?",
            "List the names and the countries that the singers can live in.",
            "For each singer, show their birth year and their citizenship.",
            "List the tax ids and their cmi numbers of all the singers",
            "Tell me the birth year and citizenship of each singer.",
            "What are the birth year and citizenship of singers?",
            "Return the birth year and citizenship for all singers.",
            "Show all birth years and nationalities of singers.",
            "Return the birth year and citizenship for each singer.",
            "Return the birth year and citizenship of singers.",
            "What are the birth year and citizenship for all singers?"
        ],
        "templates": [
            "",
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What are the birth year and citizenship of all singers?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the birth year and citizenship of all singers?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT T1.Name , sum( T2.Sales ) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "proc_query": "( <col> name </col> of <tab> singer </tab> ) , ( the sum of ( <col> sales </col> of <tab> song </tab> ) ) that belongs to ( ( <tab> singer </tab> ) , and ( ( <tab> song </tab> ) satisfied that ( ( <col> singer id </col> of <tab> singer </tab> ) equal to ( <col> singer id </col> of <tab> song </tab> ) ) ) ) , grouped by ( <col> name </col> of <tab> singer </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of singers and the total number of sales of their songs?",
            "Show the singer name and total number of sales for each song.",
            "What is total number of showings per dat for each singer?",
            "What are the different singers and what is the sum of sales ordered for each song?",
            "For each singer, show its names and total number of sales.",
            "Show all singers' names and the total sales ordered for each song.",
            "For each singer, show the name of the song and the number of sales in it.",
            "What is the name of each singer and the total number of songs sold?",
            "List the name and the number of sales for each singer.",
            "How many songs are there for each singer? Return both the names and the sales.",
            "Show all singers along with the number of songs produced by each singer.",
            "How many songs are sung by each singer? List the singer name and the number of songs sold.",
            "Show the names of singers and the total number of songs they have produced.",
            "Find the number of songs each singer has sung. Show the number with the song id.",
            "What is the name of each singer and how many songs were produced by each one?",
            "Return the name of each singer and the number of songs that he or she produced.",
            "Show the name and number of songs produced by each singer",
            "What is the average song sales for each singer?",
            "Show names along with the number of songs for each singer",
            "What is the average number of songs that each singer sold for a song?",
            "How many songs do each singer have? List their names and number of songs they have produced.",
            "Find the name of each singer and the number of songs they produced.",
            "Show the names of singers and the number of songs they have produced.",
            "What are the different names of singers and how many songs have been produced by them?",
            "Show names and number of sales for each singer.",
            "What are the names of singers and the total number of sales of all songs they sang?",
            "Show the names of singers and the number of songs they have sold on the web.",
            "List the id of singers who sang songs and the number of songs they sold.",
            "What are the names of singers and the total number of sales of their songs?",
            "What is the average song sales for each artist?",
            "What is the name and number of sales of each of the singers?"
        ],
        "templates": [
            "",
            {
                "question": "Show the product name and total order quantity for each product.",
                "masked_template": "Show the <mask> name and total order <mask> for each <mask>",
                "query": "SELECT T1.product_name , sum( T2.order_quantity ) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id",
                "ted": 0.0,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "What is total number of show times per dat for each cinema?",
                "masked_template": "What is total number of show <mask> per dat for each <mask>",
                "query": "SELECT T2.name , sum( T1.show_times_per_day ) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
                "masked_template": "What are the different <mask> and what is the sum of <mask> ordered for each <mask>",
                "query": "SELECT T2.product_name , sum( T1.product_quantity ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "For each phone, show its names and total number of stocks.",
                "masked_template": "For each <mask> show its names and total number of <mask>",
                "query": "SELECT T2.Name , sum( T1.Num_of_stock ) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "Show all product names and the total quantity ordered for each product name.",
                "masked_template": "Show all <mask> names and the total <mask> ordered for each <mask>",
                "query": "SELECT T2.product_name , sum( T1.product_quantity ) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "For each building, show the name of the building and the number of institutions in it.",
                "masked_template": "For each <mask> show the name of the <mask> and the number of <mask> in it.",
                "query": "SELECT T1.name , count( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
                "ted": 0.03571428571428571,
                "db_id": "protein_institute"
            },
            {
                "question": "What is the name of each course and the corresponding number of student enrollment?",
                "masked_template": "What is the name of each <mask> and the <mask> number of <mask>",
                "query": "SELECT T1.course_name , COUNT( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
                "ted": 0.03571428571428571,
                "db_id": "e_learning"
            },
            {
                "question": "List the name and the number of enrolled student for each course.",
                "masked_template": "List the name and the number of <mask> for each <mask>",
                "query": "SELECT T1.course_name , COUNT( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
                "ted": 0.03571428571428571,
                "db_id": "e_learning"
            },
            {
                "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
                "masked_template": "How many <mask> are there in each <mask> Return both the <mask> and the <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.03571428571428571,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show all cities along with the number of drama workshop groups in each city.",
                "masked_template": "Show all <mask> with the number of <mask> in each <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.03571428571428571,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
                "masked_template": "How many <mask> each <mask> to? List the <mask> id and the number of <mask>",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.03571428571428571,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show the average amount of transactions for different lots.",
                "masked_template": "Show the average <mask> of <mask> for different <mask>",
                "query": "SELECT T2.lot_id , avg( amount_of_transaction ) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
                "ted": 0.03571428571428571,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
                "masked_template": "Find the number of <mask> each <mask> to. Show the number <mask> with the <mask> id.",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.03571428571428571,
                "db_id": "insurance_policies"
            },
            {
                "question": "What is the name of each aircraft and how many flights does each one complete?",
                "masked_template": "What is the name of each <mask> and how many <mask> each one <mask>",
                "query": "SELECT T2.name , count( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                "ted": 0.03571428571428571,
                "db_id": "flight_1"
            },
            {
                "question": "Return the name of each physician and the number of patients he or she treats.",
                "masked_template": "Return the name of each <mask> and the number of <mask> he or she <mask>",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.03571428571428571,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the station name and number of trains in each station.",
                "masked_template": "Show the <mask> name and number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
                "ted": 0.03571428571428571,
                "db_id": "train_station"
            },
            {
                "question": "What is the average rating star for each reviewer?",
                "masked_template": "What is the average <mask> for each <mask>",
                "query": "SELECT T2.name , avg( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
                "ted": 0.03571428571428571,
                "db_id": "movie_1"
            },
            {
                "question": "Show institution names along with the number of proteins for each institution.",
                "masked_template": "Show <mask> names <mask> with the number of <mask> for each <mask>",
                "query": "SELECT T1.institution , count( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
                "ted": 0.03571428571428571,
                "db_id": "protein_institute"
            },
            {
                "question": "What is the average number of stars that each reviewer awards for a movie?",
                "masked_template": "What is the average number of <mask> that each <mask> for a <mask>",
                "query": "SELECT T2.name , avg( T1.stars ) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name",
                "ted": 0.03571428571428571,
                "db_id": "movie_1"
            },
            {
                "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
                "masked_template": "How many <mask> do each <mask> of? List their names and number of <mask> of.",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.03571428571428571,
                "db_id": "hospital_1"
            },
            {
                "question": "Give the name of each department and the number of employees in each.",
                "masked_template": "<mask> the name of each <mask> and the number of <mask> in <mask>",
                "query": "SELECT T2.department_name , COUNT( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
                "ted": 0.03571428571428571,
                "db_id": "hr_1"
            },
            {
                "question": "Show the card type codes and the number of transactions.",
                "masked_template": "Show the <mask> and the number of <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.03571428571428571,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the different card types, and how many transactions have been made with each?",
                "masked_template": "What are the different <mask> and how many <mask> have <mask> with <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.03571428571428571,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Show aircraft names and number of flights for each aircraft.",
                "masked_template": "Show <mask> names and number of <mask> for each <mask>",
                "query": "SELECT T2.name , count( * ) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid",
                "ted": 0.03571428571428571,
                "db_id": "flight_1"
            },
            {
                "question": "What are the line 1 and average monthly rentals of all student addresses?",
                "masked_template": "What are the <mask> 1 and average <mask> of all <mask>",
                "query": "SELECT T1.line_1 , avg( T2.monthly_rental ) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id",
                "ted": 0.03571428571428571,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
                "masked_template": "Show the names of <mask> and the number of <mask> have <mask> on the <mask> of <mask>",
                "query": "SELECT T2.Name , COUNT( * ) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name",
                "ted": 0.03571428571428571,
                "db_id": "debate"
            },
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "masked_template": "List the id of <mask> who <mask> and the number of their <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.03571428571428571,
                "db_id": "student_assessment"
            },
            {
                "question": "display job title and average salary of employees.",
                "masked_template": "<mask> job <mask> and average <mask> of <mask>",
                "query": "SELECT job_title , AVG( salary ) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
                "ted": 0.03571428571428571,
                "db_id": "hr_1"
            },
            {
                "question": "What is the average salary for each job title?",
                "masked_template": "What is the average <mask> for each job <mask>",
                "query": "SELECT job_title , AVG( salary ) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title",
                "ted": 0.03571428571428571,
                "db_id": "hr_1"
            },
            {
                "question": "display the department name and number of employees in each of the department.",
                "masked_template": "<mask> the <mask> name and number of <mask> in each of the <mask>",
                "query": "SELECT department_name , COUNT( * ) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
                "ted": 0.03571428571428571,
                "db_id": "hr_1"
            }
        ],
        "best_hyp": "What is total number of showings per dat for each singer?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of singers and the total number of sales of their songs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT T2.name , count( * ) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
        "proc_query": "( <col> name </col> of <tab> singer </tab> ) , ( the number of ( all items ) ) that belongs to ( ( <tab> singer in concert </tab> ) , and ( ( <tab> singer </tab> ) satisfied that ( ( <col> singer id </col> of <tab> singer in concert </tab> ) equal to ( <col> singer id </col> of <tab> singer </tab> ) ) ) ) , grouped by ( <col> singer id </col> of <tab> singer </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show the names of singers and the number of concerts they have been in.",
            "List the id of singers who have been in concert and the number of their performances.",
            "How many singers are in concert?",
            "List the name of all singers along with the number of times that they have been in concert",
            "How many concerts do each singer attend? List their names and number of concerts they are in.",
            "Show the names of singers along with the number of times he or she has been in concert",
            "What are the singers' names and the number of concerts they have been in?",
            "Show all the singers and the number of concerts they have been in.",
            "How many songs are sung by each singer? List the singer name and the number of songs.",
            "Find the number of concerts each singer is to. Show the number with the singer id.",
            "For each singer, find their name and the number of concerts they are in.",
            "Show names and the number of concerts for each singer.",
            "How many concerts are there for each singer?",
            "Show all the singers' names and the number of concerts they have been in.",
            "How many singers are in concert? Return the singers' names and the number of singers in concert.",
            "For each singer, show the name of the singer and the number of singers in concert.",
            "Show the names of singers and the number of concerts they have been in.",
            "Show the name of singers and the number of concerts they have been in.",
            "Return the name of each singer and the number of times he or she has been in concert.",
            "How many concerts has each singer been in?",
            "Show all singers' names and the number of concerts they have been in.",
            "What are all the different singers and how many concerts has each been in?",
            "Show names along with the number of concerts for each singer",
            "Show the names of singers and number of concerts they have been in.",
            "What are the different singers and how many concerts have they been in?",
            "Find the name of each singer and number of performances by each of them.",
            "How many singers are there in concert? Return both the singers' names and the number of singers.",
            "For each singer who is in concert for some time, how many times are they in concert?",
            "Show the singer name with the number of gas stations.",
            "How many singers are there? List the singer name and the number of singers.",
            "Show all singers along with the number of concerts they participated in."
        ],
        "templates": [
            "",
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "masked_template": "List the id of <mask> who <mask> and the number of their <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many members are in each party?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "List the name of all products along with the number of complaints that they have received.",
                "masked_template": "List the name of all <mask> with the number of <mask> that <mask> have <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
                "masked_template": "How many <mask> do each <mask> of? List their names and number of <mask> of.",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
                "masked_template": "Show the <mask> id of each <mask> with the number of <mask> he or she <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty id and the number of students each faculty has?",
                "masked_template": "What are the <mask> id and the number of <mask> each <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show all the faculty ranks and the number of students advised by each rank.",
                "masked_template": "Show all the <mask> and the number of <mask> by each <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
                "masked_template": "How many <mask> are <mask> by each <mask> of <mask> List the <mask> and the number of <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
                "masked_template": "Find the number of <mask> each <mask> to. Show the number <mask> with the <mask> id.",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "For each user, find their name and the number of reviews written by them.",
                "masked_template": "For each <mask> find their name and the number of <mask> by <mask>",
                "query": "SELECT T1.name , count( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Show party names and the number of events for each party.",
                "masked_template": "Show <mask> names and the number of <mask> for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "How many events are there for each party?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all the activity names and the number of faculty involved in each activity.",
                "masked_template": "Show all the <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
                "masked_template": "How many <mask> in each <mask> Return the <mask> names and the number of <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For each building, show the name of the building and the number of institutions in it.",
                "masked_template": "For each <mask> show the name of the <mask> and the number of <mask> in it.",
                "query": "SELECT T1.name , count( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the names of pilots and the number of records they have.",
                "masked_template": "Show the names of <mask> and the number of <mask>",
                "query": "SELECT T2.Pilot_name , COUNT( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the name of track and the number of races in each track.",
                "masked_template": "Show the name of <mask> and the number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Return the name of each physician and the number of patients he or she treats.",
                "masked_template": "Return the name of each <mask> and the number of <mask> he or she <mask>",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many exhibitions has each artist had?",
                "masked_template": "How many <mask> has each <mask>",
                "query": "SELECT T2.name , count( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all party names and the number of members in each party.",
                "masked_template": "Show all <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are all the different product names, and how many complains has each received?",
                "masked_template": "What are all the different <mask> and how many <mask> has each <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "Show institution names along with the number of proteins for each institution.",
                "masked_template": "Show <mask> names <mask> with the number of <mask> for each <mask>",
                "query": "SELECT T1.institution , count( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the station name and number of trains in each station.",
                "masked_template": "Show the <mask> name and number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the different card types, and how many transactions have been made with each?",
                "masked_template": "What are the different <mask> and how many <mask> have <mask> with <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the name of each user and number of tweets tweeted by each of them.",
                "masked_template": "Find the name of each <mask> and number of <mask> by each of <mask>",
                "query": "SELECT T1.name , count( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
                "masked_template": "How many <mask> are there in each <mask> Return both the <mask> and the <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "For every student who is registered for some course, how many courses are they registered for?",
                "masked_template": "For <mask> who is <mask> for <mask> how many <mask> are <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Show the company name with the number of gas station.",
                "masked_template": "Show the <mask> name with the number of gas <mask>",
                "query": "SELECT T2.company , count( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
                "masked_template": "How many <mask> each <mask> to? List the <mask> id and the number of <mask>",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show all cities along with the number of drama workshop groups in each city.",
                "masked_template": "Show all <mask> with the number of <mask> in each <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "Return the name of each singer and the number of times he or she has been in concert.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show the names of singers and the number of concerts they have been in.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "select T2.name , T2.capacity from concert as T1 join stadium as T2 on T1.stadium_id = T2.stadium_id where T1.year > 2045 group by T2.stadium_id order by count( * ) desc limit 1",
        "proc_query": "( <col> name </col> of <tab> stadium </tab> ) , ( <col> capacity </col> of <tab> stadium </tab> ) that belongs to ( ( <tab> concert </tab> ) , and ( ( <tab> stadium </tab> ) satisfied that ( ( <col> stadium id </col> of <tab> concert </tab> ) equal to ( <col> stadium id </col> of <tab> stadium </tab> ) ) ) ) , that have ( ( <col> year </col> of <tab> concert </tab> ) greater than ( <val> 2045 </val> ) ) , grouped by ( <col> stadium id </col> of <tab> stadium </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name and capacity of the stadium that has the most number of concerts after 2045?",
            "What are the name and capacity of the stadium with the most concerts in year 2045?",
            "What is the name and capacity of the stadium that has hosted the most number of concerts after 2045?",
            "What is the name and capacity for the stadium that hosted the most concerts in year 2045?",
            "Find the name and capacity of the stadium that hosted the most concerts after 2045.",
            "find the name and age of the stadium that has hosted the most number of concerts after the year 2045.",
            "What is the name and capacity for the stadium with most number of concerts in year 2045?",
            "In what are the id and capacity of the stadium that has the highest average number of concerts after 2045?",
            "Find the id and capacity of the stadium that has the highest average number of concerts in year 2045",
            "What is the id and name of the stadium with most number of concerts that can last as long as 2045?",
            "What is the id and name of the stadium that can accommodate the most concerts after 2045 as an attraction?",
            "Which stadium has the most concerts with a capacity above 2045?",
            "Find the id and capacity of the stadium that has the most concerts with year after 2045.",
            "What is the name of stadium has the greatest number of concerts with a year after 2045?",
            "Find the stadium with the most number of concerts with year after 2045.",
            "What is the name and capacity of the stadium that has the most concerts after 2045?"
        ],
        "templates": [
            "",
            {
                "question": "What are the name and id of the team with the most victories in 2008 postseason?",
                "masked_template": "What are the name and id of the <mask> with the most <mask> in <mask>",
                "query": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.022727272727272728,
                "db_id": "baseball_1"
            },
            {
                "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
                "masked_template": "What is the name and age of the <mask> than 30 who has won the most number of <mask>",
                "query": "SELECT T1.name , T1.age FROM pilot AS T1 JOIN MATCH AS T2 ON T1.pilot_id = T2.winning_pilot WHERE T1.age < 30 GROUP BY T2.winning_pilot ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.022727272727272728,
                "db_id": "aircraft"
            },
            {
                "question": "What is the name and opening year for the branch that registered the most members in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> that <mask> the most <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.022727272727272728,
                "db_id": "shop_membership"
            },
            {
                "question": "Find the name and id of the team that won the most times in 2008 postseason.",
                "masked_template": "Find the name and id of the <mask> that won the most <mask> in <mask>",
                "query": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.022727272727272728,
                "db_id": "baseball_1"
            },
            {
                "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
                "masked_template": "find the name and age of the <mask> who has won the most number of <mask> the <mask> who are <mask> than 30.",
                "query": "SELECT T1.name , T1.age FROM pilot AS T1 JOIN MATCH AS T2 ON T1.pilot_id = T2.winning_pilot WHERE T1.age < 30 GROUP BY T2.winning_pilot ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.022727272727272728,
                "db_id": "aircraft"
            },
            {
                "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> with most number of <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.022727272727272728,
                "db_id": "shop_membership"
            },
            {
                "question": "In 2014, what are the id and rank of the team that has the largest average number of attendance?",
                "masked_template": "In <mask> what are the id and <mask> of the <mask> that has the <mask> average number of <mask>",
                "query": "SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg( T1.attendance ) DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the id and rank of the team that has the highest average attendance rate in 2014.",
                "masked_template": "Find the id and <mask> of the <mask> that has the <mask> average <mask> in <mask>",
                "query": "SELECT T2.team_id , T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY avg( T1.attendance ) DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "baseball_1"
            },
            {
                "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
                "masked_template": "What is the id and name of the <mask> with most number of <mask> that can <mask> as <mask>",
                "query": "SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.06521739130434782,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
                "masked_template": "What is the id and name of the <mask> that can <mask> with the most <mask> as an <mask>",
                "query": "SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.06521739130434782,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which department has the most professors with a Ph.D.?",
                "masked_template": "Which <mask> has the most <mask> with a <mask>",
                "query": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.06521739130434782,
                "db_id": "college_1"
            },
            {
                "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most <mask> with <mask>",
                "query": "SELECT T1.teacher_id , T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = 'AFTER' GROUP BY T1.teacher_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.06521739130434782,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
                "masked_template": "What is the name of <mask> has the <mask> number of <mask> with a <mask>",
                "query": "SELECT T2.dept_name , T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.06521739130434782,
                "db_id": "college_1"
            },
            {
                "question": "Find the county where produces the most number of wines with score higher than 90.",
                "masked_template": "Find the <mask> the most number of <mask> with <mask> than 90.",
                "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.09090909090909091,
                "db_id": "wine_1"
            },
            {
                "question": "What is the county that produces the most wines scoring higher than 90?",
                "masked_template": "What is the <mask> that <mask> the most <mask> than 90?",
                "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.09090909090909091,
                "db_id": "wine_1"
            }
        ],
        "best_hyp": "What is the id and name of the stadium with most number of concerts that can last as long as 2045?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name and capacity of the stadium that has the most number of concerts after 2045?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> conductor </tab> ) , ordered by ( ( <col> year of work </col> ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the conductor with the most years of work?",
            "Find the name of conductor that worked for the longest time.",
            "Show the names of the conductor with the most years of work.",
            "What is the name of the conductor with the greatest number of years of work?",
            "What is the name of the conductor with the longest year of work?",
            "What is the name of the conductor with the most years of work?",
            "What is the name of the conductor with the most years of work?",
            "Find the name of the conductor with the longest year of work.",
            "What is the name of the conductor that worked in the most recent year?",
            "Which conductor has the longest working history? Tell me the name of the conductor.",
            "Show the name of the conductor with the longest year of work.",
            "Who is the conductor with the longest year of work?",
            "What is the name of the youngest conductor?",
            "What are the names of the conductor with the top 3 years of work?",
            "What are the names of the conductor with the top 3 years of work?",
            "What is the name of the most recent conductor?",
            "What is the name of the conductor with the longest year of work?",
            "What is the name of the conductor with the greatest number of years of work?",
            "What is the id of the most recent conductor?",
            "Find the id of the order of most recent year of work.",
            "What are the names of the conductor with the longest year of work?",
            "Show the name of the conductor with the longest year of work.",
            "Find the name of the conductor in the longest year of work.",
            "What are the ids of the top conductor that started in the most recent year?",
            "List the name of the conductor that has the longest working history.",
            "What is the name of the youngest conductor?",
            "Which conductor has the longest working history?",
            "Return the name of the conductor that has worked the most years on record.",
            "What is the id of the conductor that worked most recently?",
            "What is the name of the conductor with the maximum year of work?",
            "Return the name of the conductor with the longest year of work."
        ],
        "templates": [
            "",
            {
                "question": "Find the name of project that continues for the longest time.",
                "masked_template": "Find the name of <mask> that <mask> for the <mask>",
                "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Show the names of the three most recent festivals.",
                "masked_template": "Show the names of the <mask> most <mask>",
                "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "What is the location of the festival with the largest number of audience?",
                "masked_template": "What is the <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "What is the name of the product with the highest price?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "What is the name of the project with the most hours?",
                "masked_template": "What is the name of the <mask> with the most <mask>",
                "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "What is the stories of highest building?",
                "masked_template": "What is the <mask> of <mask>",
                "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the stories of the building with the largest height.",
                "masked_template": "Find the <mask> of the <mask> with the <mask>",
                "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the name of the event that happened in the most recent year?",
                "masked_template": "What is the name of the <mask> that <mask> in the most <mask>",
                "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Which county has the largest population? Give me the name of the county.",
                "masked_template": "Which <mask> has the <mask> me the name of the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the name of the county with the biggest population.",
                "masked_template": "Show the name of the <mask> with the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Who is the instructor with the highest salary?",
                "masked_template": "Who is the <mask> with the <mask>",
                "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Give the name of the highest paid instructor.",
                "masked_template": "<mask> the name of the <mask>",
                "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of schools with the top 3 largest size?",
                "masked_template": "What are the names of <mask> with the top 3 <mask>",
                "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What are the names of the schools with the top 3 largest class sizes?",
                "masked_template": "What are the names of the <mask> with the top 3 <mask>",
                "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the carrier of the most expensive phone?",
                "masked_template": "What is the <mask> of the most <mask>",
                "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "What is the author of the submission with the highest score?",
                "masked_template": "What is the <mask> of the <mask> with the <mask>",
                "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What is the name of the player with the largest number of votes?",
                "masked_template": "What is the name of the <mask> with the <mask> number of <mask>",
                "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "riding_club"
            },
            {
                "question": "What is the id of the most recent order?",
                "masked_template": "What is the id of the most <mask>",
                "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the id of the order made most recently.",
                "masked_template": "Find the id of the order <mask> most <mask>",
                "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "What are the names of the dorm with the largest capacity?",
                "masked_template": "What are the names of the <mask> with the <mask>",
                "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Show the park of the roller coaster with the highest speed.",
                "masked_template": "Show the <mask> of the <mask> with the <mask>",
                "query": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Give the ids of the three products purchased in the largest amounts.",
                "masked_template": "<mask> the ids of the <mask> in the <mask>",
                "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the ids of the top three products that were purchased in the largest amount?",
                "masked_template": "What are the ids of the top <mask> that <mask> in the <mask>",
                "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "List the school color of the school that has the largest enrollment.",
                "masked_template": "List the <mask> of the <mask> that has the <mask>",
                "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the speeds of the longest roller coaster?",
                "masked_template": "What are the <mask> of the <mask>",
                "query": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Which district has the largest population?",
                "masked_template": "Which <mask> has the <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Return the song in the volume that has spent the most weeks on top?",
                "masked_template": "Return the <mask> in the <mask> that has <mask> the most <mask> on <mask>",
                "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "What is the id of the appointment that started most recently?",
                "masked_template": "What is the id of the <mask> that <mask> most <mask>",
                "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What is the song in the volume with the maximum weeks on top?",
                "masked_template": "What is the <mask> in the <mask> with the maximum <mask> on <mask>",
                "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Return the famous release date for the oldest artist.",
                "masked_template": "Return the <mask> for the <mask>",
                "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_4"
            }
        ],
        "best_hyp": "What is the name of the conductor with the most years of work?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the conductor with the most years of work?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )",
        "proc_query": "( <tab> orchestra </tab> ) that belongs to ( <tab> orchestra </tab> ) , that have ( ( <col> orchestra id </col> ) not in ( ( <col> orchestra id </col> ) that belongs to ( <tab> performance </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the orchestras that did not have any performance?",
            "List the names of the orchestras that do not have any performance",
            "List the names of the orchestras that are not involved in any performance",
            "List the names of the orchestras that are not involved in any performance",
            "Find the name of the orchestra that do not have any performance",
            "What are the names of the orchestras that did not have any performance?",
            "What are the names of the orchestras that did not have any performance?",
            "What are the names of the orchestras that did not participate in any performance?",
            "what are the names of the orchestras that did not participate in any performance?",
            "Find the name of the orchestra not performing in any performance",
            "What are the names of all the orchestras that are not involved in any performance?",
            "List the names of the orchestras that did not have any performance",
            "What are the names of all the orchestras that have never won any performance?",
            "List the names of orchestras that do not have any performance",
            "Which orchestras do not have any performances? Tell me the orchestra id.",
            "List the names of the orchestras that are not involved in any performance",
            "What are the names of the orchestras that do not have any performances?",
            "Find the names of the orchestras that do not have any performance",
            "List the names of the orchestras that have no performances",
            "What are all ids of the orchestras that have not performed any performance?",
            "What are the names of the orchestras that did not have any performance?",
            "List the names of the orchestras that are not used by any performance",
            "What are the names of the orchestras that do not have a performance?",
            "What are the names of the orchestras that do not have any performances?",
            "Which orchestras have no performances? List the orchestra id.",
            "What are the names of the orchestras that have no performances?",
            "What are the names of all the orchestras that have not provided any performance?",
            "Find the names of all the orchestras that have no performances",
            "List the names of the orchestras that did not participate in any performance",
            "Find all the names of the orchestra without any performance",
            "What are the names of the orchestras that do not have any performances?"
        ],
        "templates": [
            "",
            {
                "question": "List the names of mountains that do not have any climber.",
                "masked_template": "List the names of <mask> that do not have any <mask>",
                "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN ( SELECT Mountain_ID FROM climber )",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "List the names of products that are not in any event.",
                "masked_template": "List the names of <mask> that are not in any <mask>",
                "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN ( SELECT Product_ID FROM Products_in_Events )",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "List the name of artworks that are not nominated.",
                "masked_template": "List the name of <mask> that are not <mask>",
                "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN ( SELECT Artwork_ID FROM nomination )",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Find the name of the courses that do not have any prerequisite?",
                "masked_template": "Find the name of the <mask> that do not have any <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of courses without prerequisites?",
                "masked_template": "What are the names of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of instructors who didn't teach?",
                "masked_template": "What are the names of <mask> who <mask>",
                "query": "SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Give the names of people who did not participate in the candidate election.",
                "masked_template": "<mask> the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "what are the names of people who did not participate in the candidate election.",
                "masked_template": "what are the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "Find the first name of students not enrolled in any course.",
                "masked_template": "Find the <mask> name of <mask> not <mask> in any <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the first names of all students that are not enrolled in courses?",
                "masked_template": "What are the <mask> names of all <mask> that are not <mask> in <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "List the names of aircrafts and that did not win any match.",
                "masked_template": "List the names of <mask> and that did not win any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aicrafts that have never won any match?",
                "masked_template": "What are the names of all <mask> that have <mask> won any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "List the locations of schools that do not have any player.",
                "masked_template": "List the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Which schools do not have any player? Give me the school locations.",
                "masked_template": "Which <mask> do not have any <mask> me the <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "List the names of people that are not perpetrators.",
                "masked_template": "List the names of <mask> that are not <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM perpetrator )",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "What are the famous titles of artists who do not have any volumes?",
                "masked_template": "What are the <mask> of <mask> who do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Find the famous titles of artists that do not have any volume.",
                "masked_template": "Find the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "List the names of buildings that have no company office.",
                "masked_template": "List the names of <mask> that have no <mask>",
                "query": "SELECT name FROM buildings WHERE id NOT IN ( SELECT building_id FROM Office_locations )",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What are all info of students who registered courses but not attended courses?",
                "masked_template": "What are all <mask> of <mask> who <mask> but not <mask>",
                "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance )",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the titles of courses without prerequisites?",
                "masked_template": "What are the <mask> of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "List the names of people that are not employed by any company",
                "masked_template": "List the names of <mask> that are not <mask> by any <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM employment )",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "What are the titles of films that do not have a film market estimation?",
                "masked_template": "What are the <mask> of <mask> that do not have a <mask>",
                "query": "SELECT Title FROM film WHERE Film_ID NOT IN ( SELECT Film_ID FROM film_market_estimation )",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are the names of counties that do not contain any cities?",
                "masked_template": "What are the names of <mask> that do not <mask> any <mask>",
                "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN ( SELECT County_ID FROM city )",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Which projects have no outcome? List the project details.",
                "masked_template": "Which <mask> have no <mask> List the <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the details of the project with no outcomes?",
                "masked_template": "What are the <mask> of the <mask> with no <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the titles of all movies that have not been rated?",
                "masked_template": "What are the <mask> of all <mask> that have not <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies that have no ratings.",
                "masked_template": "Find the <mask> of all <mask> that have no <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "List the names of members who did not participate in any round.",
                "masked_template": "List the names of <mask> who did not <mask> in any <mask>",
                "query": "SELECT Name FROM member WHERE Member_ID NOT IN ( SELECT Member_ID FROM round )",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "Find all the name of documents without any sections.",
                "masked_template": "Find all the name of <mask> any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "What are the names of documents that do not have any sections?",
                "masked_template": "What are the names of <mask> that do not have any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            }
        ],
        "best_hyp": "What are the names of all the orchestras that have never won any performance?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the orchestras that did not have any performance?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "concert_singer",
        "query": "SELECT count( * ) FROM concert WHERE YEAR = 2031 OR YEAR = 2030",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> concert </tab> ) , that have ( ( ( <col> year </col> ) equal to ( <val> 2031 </val> ) ) or ( ( <col> year </col> ) equal to ( <val> 2030 </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many concerts are held in either year 2031 or 2030?",
            "How many concerts in year 2031 or 2030 are there?",
            "Find the number of concerts in year 2031 or 2030.",
            "Show the number of concerts in year 2031 or 2030.",
            "Show the number of concerts in year 2031 or 2030.",
            "Show the number of concerts in year 2031 or 2030.",
            "What are the names of the concerts held in year 2031 or 2030?",
            "Show the number of concerts in year 2031 or 2030",
            "Show all names who have a concert in the year 2031 or 2030",
            "Which concerts had a date in either 2031 or 2030?"
        ],
        "templates": [
            "",
            {
                "question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
                "masked_template": "How many <mask> in <mask> in <mask> is, the <mask> of <mask> is <mask>",
                "query": "SELECT count( * ) FROM postseason WHERE YEAR = 1885 AND ties = 1",
                "ted": 0.041666666666666664,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.",
                "masked_template": "Find the number of <mask> of <mask> is <mask> in <mask>",
                "query": "SELECT count( * ) FROM postseason WHERE YEAR = 1885 AND ties = 1",
                "ted": 0.041666666666666664,
                "db_id": "baseball_1"
            },
            {
                "question": "Show the names of editors of age either 24 or 25.",
                "masked_template": "Show the names of <mask> of age <mask> 24 or 25.",
                "query": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
                "ted": 0.08333333333333333,
                "db_id": "journal_committee"
            },
            {
                "question": "Show the names of people aged either 35 or 36.",
                "masked_template": "Show the names of <mask> 35 or 36.",
                "query": "SELECT Name FROM people WHERE Age = 35 OR Age = 36",
                "ted": 0.08333333333333333,
                "db_id": "debate"
            },
            {
                "question": "Show the name of technicians aged either 36 or 37",
                "masked_template": "Show the name of <mask> 36 or 37",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.08333333333333333,
                "db_id": "machine_repair"
            },
            {
                "question": "What are the names of the technicians aged either 36 or 37?",
                "masked_template": "What are the names of the <mask> 36 or 37?",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.08333333333333333,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the number of audience in year 2008 or 2010.",
                "masked_template": "Show the number of <mask> in <mask> or <mask>",
                "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
                "ted": 0.08333333333333333,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Show all director names who have a movie in the year 1999 or 2000.",
                "masked_template": "Show all <mask> names who have a <mask> in the <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.08333333333333333,
                "db_id": "culture_company"
            },
            {
                "question": "Which directors had a movie in either 1999 or 2000?",
                "masked_template": "Which <mask> had a <mask> in <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.08333333333333333,
                "db_id": "culture_company"
            }
        ],
        "best_hyp": "How many concerts in year 2031 or 2030 are there?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many concerts are held in either year 2031 or 2030?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "orchestra",
        "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT( * ) ASC",
        "proc_query": "( <col> major record format </col> ) that belongs to ( <tab> orchestra </tab> ) , grouped by ( <col> major record format </col> ) , ordered by ( ( the number of ( all items ) ) in ascending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "List the major record format of the orchestra in ascending order of the number of albums.",
            "Return the different types of major record format used by orchestra",
            "Please show the different major record formats ordered by the number of orchestras that have been released.",
            "Show all the major record formats in ascending order of the count of orchestra in each format.",
            "Please show the major record format of orchestras in ascending order of the number of albums.",
            "Please show the major record format of orchestras in ascending order of the number of albums.",
            "What are the different major record formats for orchestra ordered by decreasing number of albums?"
        ],
        "templates": [
            "",
            {
                "question": "Return the different statuses of cities, ascending by frequency.",
                "masked_template": "Return the different <mask> of <mask> by <mask>",
                "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT( * ) ASC",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Please show the different statuses, ordered by the number of cities that have each.",
                "masked_template": "<mask> show the different <mask> ordered by the number of <mask> that have <mask>",
                "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT( * ) ASC",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Sort all the industries in descending order of the count of companies in each industry",
                "masked_template": "<mask> all the <mask> in <mask> order of the count of <mask> in each <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC",
                "ted": 0.0625,
                "db_id": "company_office"
            },
            {
                "question": "Please show the software platforms of devices in descending order of the count.",
                "masked_template": "<mask> show the <mask> of <mask> in <mask> order of the <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC",
                "ted": 0.0625,
                "db_id": "device"
            },
            {
                "question": "Please show the industries of companies in descending order of the number of companies.",
                "masked_template": "<mask> show the <mask> of <mask> in <mask> order of the number of <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC",
                "ted": 0.0625,
                "db_id": "company_office"
            },
            {
                "question": "What are the different software platforms for devices, ordered by frequency descending?",
                "masked_template": "What are the different <mask> for <mask> ordered by <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC",
                "ted": 0.0625,
                "db_id": "device"
            }
        ],
        "best_hyp": "Show all the major record formats in ascending order of the count of orchestra in each format.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "List the major record format of the orchestra in ascending order of the number of albums.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT Citizenship , COUNT( * ) FROM singer GROUP BY Citizenship",
        "proc_query": "( <col> citizenship </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> singer </tab> ) , grouped by ( <col> citizenship </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many singers are from each nationality?",
            "For each nationality, return the nationality and the count of singers with that nationality.",
            "display the citizenship id and count of singers in each nationality.",
            "Show each nationality and the number of singers.",
            "How many singers are from each nationality? List the nationality and the count.",
            "Show the different nationalities and the number of singers.",
            "List all nations along with the number of singers from each nationality.",
            "Show different nationalities along with the number of singers of each nationality.",
            "For each nationality, how many singers are there?",
            "Show different nationalities of singers and the number of singers of each nationality",
            "What are the different nationalities and how many singers belong to each?",
            "Show all nationalities and the number of singers in each nationality.",
            "What are the number of singers for each nationality?",
            "Find the number of singers for each nationality.",
            "What are the different nationalities and how many singers are there for each?",
            "Show different nationalities and the number of singers in each nationality.",
            "Show different nations of singers along with the number of singers with each nationality.",
            "find the number of singers from each nationality.",
            "How many singers are from each nationality?",
            "How many singers belong to each nationality?",
            "Please show the citizenship and the number of singers with each nationality.",
            "List all nations and the number of singers from each nationality.",
            "For each nationality, what are the countries and how many singers are from there?",
            "Show the citizenship ID and number of singers for each nationality.",
            "For each nationality, report the total number of singers of that nationality.",
            "Show all nations and corresponding number of singers.",
            "Find all nations of singers and number of singers.",
            "Show the citizenship and number of singers in each nationality.",
            "What are the different nationalities of singers and how many singers belong to each?",
            "Show the different nationalities and number of singers at each nationality.",
            "For each nationality, show the citizenship number and find how many singers are from it."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "What are the different nationalities and how many singers are there for each?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many singers are from each nationality?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "singer",
        "query": "SELECT T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
        "proc_query": "( <col> title </col> of <tab> song </tab> ) , ( <col> name </col> of <tab> singer </tab> ) that belongs to ( ( <tab> singer </tab> ) , and ( ( <tab> song </tab> ) satisfied that ( ( <col> singer id </col> of <tab> singer </tab> ) equal to ( <col> singer id </col> of <tab> song </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all singers who sang a song?",
            "List all song titles and singers",
            "Find the names of all singers who have produced songs and the singers' names.",
            "What are the names of all singers who have produced a song and the singers?",
            "What are the names of all singers who have produced a song as well as the song id?",
            "What are the ids of all songs for singers and what are the names of singers?",
            "Find the names of all songs that have singers and the singers.",
            "Please show the names and names of singers.",
            "Show names and names of singers",
            "What are the titles and names of all the singers?",
            "what are the names of all singers?",
            "What are the names and names of all the singers?",
            "Tell me the names and names of singers which are singers",
            "List the song name and singer name for each song.",
            "What are the song titles and names of all singers?",
            "What are the names of singers and their names?",
            "Return the day Number and name for all the songs.",
            "What is the song title and name of all the singers?",
            "Show the titles of songs and the names of their singers.",
            "What are the titles of songs and the names of the singers they are singers to?",
            "Show names of songs and the names of singers they are in.",
            "Tell me all the song titles and names of the singers they are singers.",
            "What are the names of the songs as well as the name of the singers they are singers to?",
            "What are the titles and names of songs in which singers are singers?",
            "Tell me the title and name of the singers for each song.",
            "What are the title and name of each song?",
            "Show the song name and the singer name.",
            "What are the names and names of the singers that have produced a song?",
            "Show the song titles and names for all singers.",
            "What are all the song titles and the names of all the singers in the songs?",
            "For each song, find the names of the singers they are singers of."
        ],
        "templates": [
            "",
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            }
        ],
        "best_hyp": "Show names of songs and the names of singers they are in.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all singers who sang a song?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    }
]