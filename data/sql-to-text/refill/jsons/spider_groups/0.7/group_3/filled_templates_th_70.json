[
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> address id </col> of <tab> addresses </tab> ) , ( <col> line 1 </col> of <tab> addresses </tab> ) , ( <col> line 2 </col> of <tab> addresses </tab> ) that belongs to ( ( <tab> addresses </tab> ) , and ( ( <tab> students </tab> ) satisfied that ( ( <col> address id </col> of <tab> addresses </tab> ) equal to ( <col> current address id </col> of <tab> students </tab> ) ) ) ) , grouped by ( <col> address id </col> of <tab> addresses </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id, line 1, and 2 of the address with the most students?",
            "Return the id and line number of the address that has the greatest number of students.",
            "What are the id, line 1 and 2 of the address with the greatest number of students?",
            "Which address has the most number of students living there? List the address id and line 1.",
            "What is the id, name and line 2 of the address where most students live?",
            "What are the id, line 1 and 2 of the address where the most students live?",
            "Which address has the most students? Tell me the address id, line 1 and 2.",
            "Which 3 addresses have the most students? List their address id, line 1 and id.",
            "Find the id, line 1 and id for the address where the most students live.",
            "Find the id and line 1 ID of the address that has the most students.",
            "What are the id and line 1 ID of the address where the most students live?",
            "Which address has the most students? List his or her address id and line 1 id.",
            "Which address has the most number of students? List the address id, line 1 and 2.",
            "Find the name and line 1 of the address which is the address for the most number of students.",
            "What are the id, line 1 and 2 of the address where the greatest number of students live?",
            "Return the id, line 1 and 2 for the address with the most students.",
            "What is the address id and line 1 number with most number of students?",
            "Return the id and line 1 name of the address with the most students.",
            "What is the id, line 1 and 2 of address with most number of students?",
            "What is the id, name and line 2 of the address that had most number of students?",
            "Find the name and line 1 of the address which is the address of the most number of students.",
            "What is the id and line 1 of the address that the most students end at?",
            "What are the id and line 1 of the address with the most students?",
            "Return the id and id of the address with the most students living there.",
            "What is the id and line 1 of the address where most of the students live?",
            "Which address has the most number of students? List the address id, line 1 and 2.",
            "List the address id, line 1, line 2 and address number of students",
            "Return the id and line 1 name of the address that has the most students.",
            "Which address has most number of students? List the address id, line 1 and the id.",
            "What is the id, line 1 and 2 of address with least number of students?",
            "Find the id and line 1 id of the address with the most students."
        ],
        "templates": [
            "",
            {
                "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
                "masked_template": "Return the <mask> id and <mask> number of the <mask> who has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the title, id, and description of the movie with the greatest number of actors?",
                "masked_template": "What are the <mask> id, and <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
                "masked_template": "Which <mask> has the most number of <mask> or <mask> List the <mask> id and <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the id, name and nationality of the architect who built most mills?",
                "masked_template": "What is the id, name and <mask> of the <mask> who <mask> most <mask>",
                "query": "SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What are the manager's first name, last name and id who won the most manager award?",
                "masked_template": "What are the <mask> name and id who won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
                "masked_template": "Which <mask> won the most <mask> me the <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which 3 players won the most player awards? List their full name and id.",
                "masked_template": "Which 3 <mask> won the most <mask> List their <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the first name, last name and id for the top three players won the most player awards.",
                "masked_template": "Find the <mask> name and id for the top <mask> won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
                "masked_template": "Find the <mask> and <mask> ID of the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
                "masked_template": "What are the <mask> and <mask> ID of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
                "masked_template": "Which <mask> the most <mask> List his or her <mask> name and <mask> id.",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
                "masked_template": "Which <mask> the most number of <mask> List the <mask> id, <mask> and <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the name and city of the airport which is the source for the most number of flight routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> for the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
                "masked_template": "What are the <mask> number and <mask> of the <mask> who <mask> the <mask> number of <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Return the name, phone number and email address for the customer with the most orders.",
                "masked_template": "Return the <mask> number and <mask> for the <mask> with the most <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What is the customer last name, id and phone number with most number of orders?",
                "masked_template": "What is the <mask> id and <mask> number with most number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the id and full name of the customer with the most accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the customer id, first and last name with most number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with most number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the id, name and IATA code of the airport that had most number of flights?",
                "masked_template": "What is the id, name and <mask> of the <mask> that had most number of <mask>",
                "query": "SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Find the name and city of the airport which is the destination of the most number of routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> of the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and city of the airport that the most routes end at?",
                "masked_template": "What is the name and <mask> of the <mask> that the most <mask> end at?",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the ids, types, and details of the organization with the most research staff?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the most <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
                "masked_template": "Return the <mask> name and id of the <mask> or <mask> who <mask> in the <mask> number of <mask>",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the name and city of the airport from most of the routes start?",
                "masked_template": "What is the name and <mask> of the <mask> most of the <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
                "masked_template": "Which <mask> log <mask> the most number of <mask> List the <mask> log id, <mask> and <mask>",
                "query": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
                "masked_template": "<mask> who have <mask> which <mask> the least number of <mask> List the <mask> id, <mask> name and <mask>",
                "query": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Return the id and full name of the customer who has the fewest accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> who has the <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Which staff handled least number of payments? List the full name and the id.",
                "masked_template": "Which <mask> least number of <mask> List the <mask> name and the id.",
                "query": "SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the customer id, first and last name with least number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with least number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Give the full name and customer id of the customer with the fewest accounts.",
                "masked_template": "<mask> the <mask> name and <mask> id of the <mask> with the <mask>",
                "query": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            }
        ],
        "best_hyp": "Find the name and line 1 of the address which is the address for the most number of students.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id, line 1, and 2 of the address with the most students?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Age , Hometown FROM teacher",
        "proc_query": "( <col> age </col> ) , ( <col> hometown </col> ) that belongs to ( <tab> teacher </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ages and hometowns of all teachers?",
            "List all ages and hometowns of teachers.",
            "Show the ages and hometowns of teachers.",
            "What are the ages and hometowns of teachers?",
            "Show all ages and hometowns of teachers.",
            "What are all the ages and hometowns of teachers?",
            "Show the ids and names of all teachers.",
            "What are the ages and hometowns of all teachers?",
            "What are all the ages and hometowns of teachers?",
            "What are the ids and hometowns of all teachers?",
            "What are the ages and hometowns of the teachers?",
            "What are the ages and hometowns of teachers?",
            "Show all ages and hometowns of teachers",
            "What are the ages and hometowns of all teachers?",
            "Show the age and hometown for all teachers.",
            "What are the ids and names for each of the teachers?",
            "List all ages and hometowns of teachers.",
            "What are the age and hometown of each teacher?",
            "Show the age and hometown of all teachers.",
            "Show all the ages and hometowns of teachers.",
            "What are the ages of teachers and their hometowns?",
            "List the names and the hometowns that the teachers can teach an course.",
            "For each teacher, show the age and hometown.",
            "List the age and hometown of all the teachers",
            "Tell me the age and hometown of each teacher.",
            "What are the ages and hometowns of teachers?",
            "Return the low and high age for all teachers.",
            "Show all ages and hometowns of teachers.",
            "Return the age and hometown for each teacher.",
            "Return the ages and hometowns of teachers.",
            "What are the ages and hometowns of all teachers?"
        ],
        "templates": [
            "",
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What are the ages and hometowns of all teachers?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ages and hometowns of all teachers?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count( * ) FROM Courses",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> courses </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many courses are there?",
            "Count the number of courses offered.",
            "How many courses are offered?",
            "How many courses are there in total?",
            "How many courses do we offer?",
            "Count the total number of courses offered.",
            "What is the total number of courses offered?",
            "How many courses are there?",
            "How many courses do we offer?",
            "Show the number of courses.",
            "Find the number of courses offered in total",
            "What is the number of courses offered?",
            "How many courses are offered?",
            "How many courses exist in total?",
            "Find the total number of courses offered.",
            "How many courses are there in total?",
            "How many CSU courses are offered?",
            "Return the total number of distinct courses offered.",
            "Count the number of total courses offered.",
            "How many courses exist in total?",
            "Count how many courses have been offered.",
            "How many courses are offered?",
            "How many courses are offered in total?",
            "Find the number of courses offered.",
            "Find the number of distinct courses offered.",
            "How many courses are offered?",
            "What is the total number of courses offered?",
            "Count the number of courses offered.",
            "How many courses have been offered?",
            "How many courses are there?",
            "How many distinct courses are offered in by universities?"
        ],
        "templates": [
            "",
            {
                "question": "Count the number of budget codes.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM Ref_budget_codes",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many schools are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM school",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "How many counties are there in total?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many statements do we have?",
                "masked_template": "How many <mask> do we <mask>",
                "query": "SELECT count( * ) FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the total number of counties.",
                "masked_template": "Count the total number of <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the total number of faculty members?",
                "masked_template": "What is the total number of <mask>",
                "query": "SELECT count( * ) FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many video games exist?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many video games do you have?",
                "masked_template": "How many <mask> do you <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show the number of trains",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( * ) FROM train",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the number of students in total.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the number of technicians?",
                "masked_template": "What is the number of <mask>",
                "query": "SELECT count( * ) FROM technician",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "how many ships are there?",
                "masked_template": "how many <mask> are <mask>",
                "query": "SELECT count( * ) FROM ship",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "How many aircrafts exist in the database?",
                "masked_template": "How many <mask> in the <mask>",
                "query": "SELECT count( * ) FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the total number of catalog contents.",
                "masked_template": "Find the total number of <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many products are there in the records?",
                "masked_template": "How many <mask> are there in the <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many CSU campuses are there?",
                "masked_template": "How many CSU <mask> are <mask>",
                "query": "SELECT count( * ) FROM campuses",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "Return the total number of distinct customers.",
                "masked_template": "Return the total number of distinct <mask>",
                "query": "SELECT count( * ) FROM customers",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Count the number of total papers.",
                "masked_template": "Count the number of total <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "How many staff in total?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Count how many appointments have been made in total.",
                "masked_template": "Count how many <mask> have <mask> in <mask>",
                "query": "SELECT count( * ) FROM appointment",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many followers does each user have?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) FROM follows",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many papers are published in total?",
                "masked_template": "How many <mask> are <mask> in <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of reviews.",
                "masked_template": "Find the number of <mask>",
                "query": "SELECT count( * ) FROM review",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of distinct amenities.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( * ) FROM dorm_amenity",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "How many dorms are in the database?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM dorm",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the total number of rooms available in this inn?",
                "masked_template": "What is the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM Rooms",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Count the number of documents with expenses.",
                "masked_template": "Count the number of <mask> with <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many documents have expenses?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many council taxes are collected for renting arrears ?",
                "masked_template": "How many <mask> are <mask> for <mask> ?",
                "query": "SELECT count( * ) FROM rent_arrears",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "How many distinct courses are enrolled in by students?",
                "masked_template": "How many distinct <mask> are <mask> in by <mask>",
                "query": "SELECT count( course_id ) FROM Student_Course_Enrolment",
                "ted": 0.0,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "How many courses do we offer?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many courses are there?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade , count( * ) FROM Highschooler GROUP BY grade",
        "proc_query": "( <col> grade </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> high schooler </tab> ) , grouped by ( <col> grade </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many students are in each grade?",
            "For each grade, return the grade and the count of students with that grade.",
            "display the grade id and count of students in each grade.",
            "Show each grade and the number of students in each grade.",
            "How many students are in each grade? List the grade and the count.",
            "Show the different grade and the number of students in each grade.",
            "List all grade along with the number of students in each grade.",
            "Show different grade along with the number of students of each grade.",
            "For each grade, how many students are in that grade?",
            "Show different grades of students and the number of students of each grade.",
            "What are the grades and how many students belong to each grade?",
            "Show all grade and the number of students in each grade.",
            "What are the grade and the number of students in each grade?",
            "Find the number of students for each grade.",
            "What are the different grades and how many students are there for each grade?",
            "Show grade and the number of students in each grade.",
            "Show different grades of students along with the number of students with each grade.",
            "find the number of students in each grade.",
            "How many students are in each grade?",
            "How many students are in each grade?",
            "Please show the grade and the number of students with each grade.",
            "List all grade and the number of students in each grade.",
            "For each grade, what are the grade and how many students are there?",
            "display the grade ID and number of students for each grade.",
            "For each grade, report the total number of students in that grade.",
            "Show all grade and corresponding number of students.",
            "Find all grades of students and number of students in each grade.",
            "Show the grade and number of students in each grade.",
            "What are the different grades of students and how many students belong to each grade?",
            "Show the different grade and number of students in each grade.",
            "For each grade, show the grade number and find how many students are in it."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "For each grade, show the grade number and find how many students are in it.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many students are in each grade?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id , count( * ) FROM Likes GROUP BY student_id",
        "proc_query": "( <col> student id </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> likes </tab> ) , grouped by ( <col> student id </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the student ids and the number of likes for each student?",
            "For each student id, return the student id and the count of likes associated with that student.",
            "display the student id and count of likes in each student.",
            "Show each student id and the number of likes.",
            "How many likes correspond to each student id? List the student id and the number of likes.",
            "Show the different student ids and the number of likes.",
            "List all student ids along with the number of likes shared by each student.",
            "Show different student ids along with the number of likes of each student.",
            "For each student id, how many likes are there?",
            "Show different ids of students and the number of likes of each student.",
            "What are the student ids and how many likes correspond to each student id?",
            "Show all student ids and the number of likes in each student.",
            "What are the number of likes for each student?",
            "Find the number of likes for each student.",
            "What are the different student ids and how many likes are there for each student?",
            "Show student ids and the number of likes in each student.",
            "Show different ids of students along with the number of likes associated with each student.",
            "Find the number of likes shared by each student.",
            "How many likes are there for each student?",
            "How many likes correspond to each student id?",
            "Please show the student ids and the number of likes with each student id.",
            "List all student ids and the number of likes in each student.",
            "For each student id, what are the ids and how many likes are there?",
            "display the student ID and number of likes for each student.",
            "For each student id, report the total number of likes shared by him or her.",
            "Show all student ids and corresponding number of likes.",
            "Find all student ids of students and number of likes.",
            "Show the student ids and number of likes in each student.",
            "What are the different ids of students and how many likes correspond to their ids?",
            "Show the different student ids and number of likes for each student.",
            "For each student id, show the student id number and find how many likes are there for it."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "What are the different student ids and how many likes are there for each student?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the student ids and the number of likes for each student?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> likes </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> likes </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> likes </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the student who has the most likes?",
            "Find the name of the student who has the greatest number of likes.",
            "Find the most common high schooler in the US. The most common is the student that had the greatest number of likes.",
            "Which student has the most number of likes?",
            "Which student has the highest number of likes?",
            "Which student is most popular? Tell me the student name.",
            "Return the name of the student who has the most likes.",
            "What are the names of the students who have the most number of likes?",
            "What is the name of the student who has the most number of likes?",
            "Which student has the most likes? Tell me the student's name.",
            "What is the name of the student that has the highest number of likes?",
            "Return the name of the student that has the highest number of likes.",
            "Which is the name of the student that has the most number of likes?",
            "List the name of the student that has been named the most number of times.",
            "Find the name of the student that has the most likes.",
            "What are the names of the students that have the most number of likes?",
            "What is the name of the student that has the most likes?",
            "Find the name of the most popular student.",
            "What are the names of the students that have the most number of likes?",
            "What is the name of the student with the least number of likes?",
            "Find the name of the student who has the most likes.",
            "Which student has the most likes?",
            "Return the name of the student that has the highest number of likes.",
            "Which student has the most likes? Tell me the student's name.",
            "Return the name of the student that has the most likes.",
            "Show the name of the student that has the most likes.",
            "Find the top 3 high schoolers which have the highest number of likes.",
            "What is the name of the student that has the most likes?",
            "What is the name of the student that has the most likes?",
            "Which student is followed in by the most people? Tell me the student name.",
            "Find the name of the student that has the highest number of likes."
        ],
        "templates": [
            "",
            {
                "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
                "masked_template": "<mask> the <mask> that the <mask> who <mask> the <mask> number of <mask> in.",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
                "masked_template": "Find the most <mask> in the <mask> The most <mask> is the <mask> that had <mask> the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which building does the instructor who teaches the most number of courses live in?",
                "masked_template": "Which <mask> the <mask> who <mask> the most number of <mask> in?",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Which room has the largest number of reservations?",
                "masked_template": "Which <mask> has the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which program is broadcast most frequently? Give me the program name.",
                "masked_template": "Which <mask> is <mask> most <mask> me the <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Return the name of the organization which has the most contact individuals.",
                "masked_template": "Return the name of the <mask> which has the most <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the details of the student who registered for the most number of courses?",
                "masked_template": "What are the <mask> of the <mask> who <mask> for the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What is detail of the student who registered the most number of courses?",
                "masked_template": "What is <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Which customer uses the most policies? Give me the customer name.",
                "masked_template": "Which <mask> the most <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "What is the name of organization that has the greatest number of contact individuals?",
                "masked_template": "What is the name of <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Return the party email that has used party services the greatest number of times.",
                "masked_template": "Return the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which is the email of the party that has used the services the most number of times?",
                "masked_template": "Which is the <mask> of the <mask> that has <mask> the <mask> the most number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
                "masked_template": "List the name of the <mask> that has <mask> named <mask> the most number of <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of the program that is broadcast most frequently.",
                "masked_template": "Find the name of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are the three products that have the most problems?s",
                "masked_template": "What are the <mask> that have the most <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the party form that is most common?",
                "masked_template": "What is the name of the <mask> that is most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Find the name of the most popular party form.",
                "masked_template": "Find the name of the most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of the cameras that have taken picture of the most mountains?",
                "masked_template": "What are the names of the <mask> that have <mask> of the most <mask>",
                "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What is the structure of the document with the least number of accesses?",
                "masked_template": "What is the <mask> of the <mask> with the least number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Find the city that hosted the most events.",
                "masked_template": "Find the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which city has hosted the most events?",
                "masked_template": "Which <mask> has <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Return the structure description of the document that has been accessed the fewest number of times.",
                "masked_template": "Return the <mask> of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Which customer have the most policies? Give me the customer details.",
                "masked_template": "Which <mask> have the most <mask> me the <mask>",
                "query": "SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_details ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Return the name of the document that has the most sections.",
                "masked_template": "Return the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.document_name FROM documents AS T1 JOIN document_sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Show the name of the party that has the most delegates.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the top 3 products which have the largest number of problems?",
                "masked_template": "Find the top 3 <mask> which have the <mask> number of <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the aircraft that has won an award the most?",
                "masked_template": "What is the name of the <mask> that has won an <mask> the <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the name of the course that has the most student enrollment?",
                "masked_template": "What is the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which course is enrolled in by the most students? Give me the course name.",
                "masked_template": "Which <mask> is <mask> in by the most <mask> me the <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name of the activity that has the largest number of student participants.",
                "masked_template": "Find the name of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            }
        ],
        "best_hyp": "What is the name of the student with the least number of likes?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the student who has the most likes?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = 'Sports'",
        "proc_query": "( <col> name </col> of <tab> teacher </tab> ) that belongs to ( ( <tab> course arrange </tab> ) , and ( ( <tab> course </tab> ) satisfied that ( ( <col> course id </col> of <tab> course arrange </tab> ) equal to ( <col> course id </col> of <tab> course </tab> ) ) ) , and ( ( <tab> teacher </tab> ) satisfied that ( ( <col> teacher id </col> of <tab> course arrange </tab> ) equal to ( <col> teacher id </col> of <tab> teacher </tab> ) ) ) ) , that have ( ( <tab> course </tab> of <tab> course </tab> ) equal to ( <val> Sports </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the teachers who arrange the course \"Sports\"?",
            "Find the names of teachers who are in charge of the course \"Sports\".",
            "Find the name of the teacher who arrange course \"Sports\".",
            "What is the name of the teacher who arrange the course \"Sports\"?",
            "Show the name of teachers who arrange the course \"Sports\".",
            "What are the names of the teachers who arrange the course \"Sports\"?",
            "Who is the teacher of the course \"Sports\"? Tell me the name of the teacher.",
            "Show all teacher names.",
            "What are the names of teachers who arrange for the course named 'Sports'?",
            "What are the names of teachers who have taught a course called \"Sports\"?",
            "What are the names of the teachers that arrange sports courses?",
            "What are the names of teachers who arrange the course \"Sports\"?",
            "What are the names of teachers who arrange the course named \"Sports\"?",
            "What are the names of all teachers that are on the course \"Sports\"?",
            "What is the name of the teacher which the course whose name is Sports is taught by?",
            "Find the name of teachers who arrange the course \"Sports\".",
            "What are the names of all teachers taught by the course with the name Sports?",
            "Find the names of teachers who arrange the course \"Sports\".",
            "Find all the teachers taught by course with name \"Sports\".",
            "What are the names of all teachers who have a course arrange for sports?",
            "What are the names of all teachers that have taught some course to be related to sports?",
            "Who are the teachers of the course named Sports? Tell me their names.",
            "Who are the teachers of the course named Sports? Show the teacher names.",
            "What are the names of the teachers whose course is Sports?",
            "List the name of all teachers involved in the arrange of course \"Sports\".",
            "In which department is the teacher that teaches sports courses?",
            "Show the names of the teachers whose course is Sports.",
            "Which teachers arrange the course with name \"Sports\"?",
            "Show names for all teachers who have taught some course of sports.",
            "What is the name of the teacher who arrange the course \"Sports\"?",
            "Return the name for the teacher of the course named Sports."
        ],
        "templates": [
            "",
            {
                "question": "Find the last names of faculties who are members of computer science department.",
                "masked_template": "Find the <mask> names of <mask> who are <mask> of <mask>",
                "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = 'Computer Science'",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find the name of the instructors who taught C Programming course before.",
                "masked_template": "Find the name of the <mask> who <mask> C <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the location name of the document \"Robin CV\"?",
                "masked_template": "What is the <mask> name of the <mask>",
                "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the location name for document \"Robin CV\".",
                "masked_template": "Show the <mask> name for <mask>",
                "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
                "masked_template": "What are the <mask> names of the <mask> of the <mask>",
                "query": "SELECT T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title = 'Binders Unbound'",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
                "masked_template": "Who is the <mask> of the <mask> me the <mask>",
                "query": "SELECT T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title = 'Binders Unbound'",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Show all storm names affecting region \"Denmark\".",
                "masked_template": "Show all <mask> names <mask>",
                "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What products are sold at the store named Miramichi?",
                "masked_template": "What <mask> are <mask> at the <mask> named <mask>",
                "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.product_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T3.store_name = 'Miramichi'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What are the names of instructors who have taught C Programming courses?",
                "masked_template": "What are the names of <mask> who have <mask> C <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of the storms that affected Denmark?",
                "masked_template": "What are the names of the <mask> that <mask>",
                "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What are the names of procedures physician John Wen was trained in?",
                "masked_template": "What are the names of <mask> Wen was <mask> in?",
                "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What products are available at store named \"Miramichi\"?",
                "masked_template": "What <mask> are <mask> at <mask> named <mask>",
                "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.product_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T3.store_name = 'Miramichi'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What are the names of all tracks that are on playlists titled Movies?",
                "masked_template": "What are the names of all <mask> that are on <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What is the code of the course which the student whose last name is Smithson took?",
                "masked_template": "What is the <mask> of the <mask> which the <mask> whose <mask> name is <mask>",
                "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the name of amenities Smith Hall dorm have.",
                "masked_template": "Find the name of <mask>",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the names of all songs produced by the artist with the first name \"Marianne\"?",
                "masked_template": "What are the names of all <mask> by the <mask> with the <mask> name <mask>",
                "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = 'Marianne'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "Find the names of procedures which physician John Wen was trained in.",
                "masked_template": "Find the names of <mask> which <mask> Wen was <mask> in.",
                "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find all the songs produced by artists with first name \"Marianne\".",
                "masked_template": "Find all the <mask> by <mask> with <mask> name <mask>",
                "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = 'Marianne'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
                "masked_template": "What are the names of all <mask> who have a <mask> to fly <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
                "masked_template": "What are the names of all <mask> that <mask> have <mask> to be <mask> to <mask>",
                "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = 'John Williams'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
                "masked_template": "Who are the <mask> of the <mask> named <mask> me their <mask>",
                "query": "SELECT T3.lname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T1.clubname = 'Bootup Baltimore'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
                "masked_template": "Who are the <mask> of the <mask> named <mask> Show the <mask>",
                "query": "SELECT T3.lname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T1.clubname = 'Hopkins Student Enterprises'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What are the result description of the project whose detail is 'sint'?",
                "masked_template": "What are the <mask> of the <mask> whose <mask> is <mask>",
                "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "List the name of all tracks in the playlists of Movies.",
                "masked_template": "List the name of all <mask> in the <mask> of <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "In which state is the college that Charles attends?",
                "masked_template": "In which <mask> is the <mask> that <mask>",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
                "masked_template": "Show the <mask> by the <mask> whose <mask> is <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
                "masked_template": "Which <mask> the <mask> with <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Show names for all employees who have certificate of Boeing 737-800.",
                "masked_template": "Show names for all <mask> who have <mask> of <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the description for the results whose project detail is 'sint'?",
                "masked_template": "What is the <mask> for the <mask> whose <mask> is <mask>",
                "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
                "masked_template": "Return the <mask> name for the <mask> of the <mask> named <mask>",
                "query": "SELECT T3.lname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T1.clubname = 'Hopkins Student Enterprises'",
                "ted": 0.0,
                "db_id": "club_1"
            }
        ],
        "best_hyp": "Return the name for the teacher of the course named Sports.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the teachers who arrange the course \"Sports\"?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count( * ) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'economics'",
        "proc_query": "( the number of ( all items ) ) that belongs to ( ( <tab> departments </tab> ) , and ( ( <tab> degree programs </tab> ) satisfied that ( ( <col> department id </col> of <tab> departments </tab> ) equal to ( <col> department id </col> of <tab> degree programs </tab> ) ) ) ) , that have ( ( <col> department name </col> of <tab> departments </tab> ) equal to ( <val> economics </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many degrees does the economics department offer?",
            "How many degrees are offered in the economics department?",
            "How many degrees are there in economics department?",
            "How many degrees are offered by economics department?",
            "Find the number of degrees offered by economics department.",
            "Count the number of degrees that the economics department offers.",
            "Find the number of degrees offered in the economics department.",
            "How many degrees are offered by the economics department?",
            "Count the number of degrees offered by the economics department.",
            "How many degrees are offered by the economics department?",
            "Find the number of degrees offered in economics department.",
            "How many degrees does the economics department offer?",
            "How many degrees are offered in the economics department?",
            "How many degrees are offered by economics department?",
            "How many degrees are offered by the economics department?",
            "How many degrees are offered by the economics department?",
            "How many degrees has economics department offered?",
            "How many degrees are offered by the economics department?",
            "How many degrees are offered by the economics department?",
            "How many degrees are offered in economics department?",
            "What are the total number of degrees offered in economics department?",
            "What is the number of degrees offered by economics department?",
            "Find the number of degrees that have been offered by economics department.",
            "How many degrees are offered in economics department?",
            "How many degrees are offered in economics department?",
            "Find the number of degrees offered by economics department",
            "Find the number of degrees offered by economics department.",
            "How many degrees are offered in the economics department?",
            "How many degrees are offered by economics department?",
            "What is the number of degrees offered by economics department?",
            "How many degrees are offered by economics department?"
        ],
        "templates": [
            "",
            {
                "question": "How many vocal types are used in the song \"Le Pop\"?",
                "masked_template": "How many <mask> are <mask> in the <mask> \"Le <mask>",
                "query": "SELECT count( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "How many leagues are there in England?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = 'England'",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "How many friends does Dan have?",
                "masked_template": "How many <mask> Dan <mask>",
                "query": "SELECT count( T2.friend ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "Find the number of routes with destination airports in Italy.",
                "masked_template": "Find the number of <mask> with <mask> in <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Count the number of financial transactions that the account with the name 337 has.",
                "masked_template": "Count the number of <mask> that the <mask> with the name 337 <mask>",
                "query": "SELECT count( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of vocal types used in song \"Le Pop\"",
                "masked_template": "Find the number of <mask> in <mask> \"Le <mask>",
                "query": "SELECT count( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "How many characteristics does the product named \"sesame\" have?",
                "masked_template": "How many <mask> the <mask> named <mask>",
                "query": "SELECT count( * ) FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'sesame'",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Count the number of characteristics the product 'sesame' has.",
                "masked_template": "Count the number of <mask> the <mask>",
                "query": "SELECT count( * ) FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'sesame'",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many lesson does customer with first name Ray took?",
                "masked_template": "How many <mask> with <mask> name Ray <mask>",
                "query": "SELECT count( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Find the number of professors in accounting department.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many lessons did the customer with the first name Ray take?",
                "masked_template": "How many <mask> did the <mask> with the <mask> name Ray <mask>",
                "query": "SELECT count( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many professors are in the accounting dept?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many classes are professor whose last name is Graztevski has?",
                "masked_template": "How many <mask> are <mask> whose <mask> name is <mask>",
                "query": "SELECT count( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many classes does the professor whose last name is Graztevski teach?",
                "masked_template": "How many <mask> the <mask> whose <mask> name is <mask>",
                "query": "SELECT count( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many department stores does the store chain South have?",
                "masked_template": "How many <mask> the <mask>",
                "query": "SELECT count( * ) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = 'South'",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "How many albums has Billy Cobam released?",
                "masked_template": "How many <mask> has <mask>",
                "query": "SELECT count( * ) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "How many courses are offered by the Computer Info. Systems department?",
                "masked_template": "How many <mask> are <mask> by the <mask>",
                "query": "SELECT count( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many courses does the department of Computer Information Systmes offer?",
                "masked_template": "How many <mask> the <mask> of <mask>",
                "query": "SELECT count( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many students enrolled in class ACCT-211?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the total number of students enrolled in ACCT-211?",
                "masked_template": "What are the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the number of routes that end at John F Kennedy International Airport?",
                "masked_template": "What is the number of <mask> that end at <mask> F <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the number of routes that have destination John F Kennedy International Airport.",
                "masked_template": "Find the number of <mask> that have <mask> F <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many students attend course English?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many students are attending English courses?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the number of routes operated by American Airlines.",
                "masked_template": "Find the number of <mask> by <mask>",
                "query": "SELECT count( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the number of routes whose destination airports are in Canada.",
                "masked_template": "Find the number of <mask> whose <mask> are in <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many routes end in a Canadian airport?",
                "masked_template": "How many <mask> end in a <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many documents were shipped by USPS?",
                "masked_template": "How many <mask> by <mask>",
                "query": "SELECT count( * ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "What is the number of routes whose destinations are Italian airports?",
                "masked_template": "What is the number of <mask> whose <mask> are <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many transaction does account with name 337 have?",
                "masked_template": "How many <mask> with name 337 <mask>",
                "query": "SELECT count( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            }
        ],
        "best_hyp": "How many degrees are offered by the economics department?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many degrees does the economics department offer?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name , count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) , ( the number of ( all items ) ) that belongs to ( ( <tab> likes </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> likes </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> likes </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many likes does each student have?",
            "List the id of students who have some number of likes and the number of their likes.",
            "How many likes are there for each student?",
            "List the name of all high schoolers along with the number of likes that they have.",
            "How many likes do each student have? List their names and number of likes.",
            "Show the id of each student along with the number of times he or she has tweeted.",
            "What are the students' names and the number of likes for each student?",
            "Show all the high schooler names and the number of likes shared by each student",
            "How many likes are there by each student? List the student name and the number of likes.",
            "Find the number of likes each student has. Show the number with the student id.",
            "For each student, find their name and the number of likes shared by them.",
            "Show names and the number of likes for each student.",
            "How many likes are there for each student?",
            "Show all the high schooler names and the number of likes in each student",
            "How many likes does each student have? Return the student names and the number of likes.",
            "For each student, show the name of the student and the number of likes in it.",
            "Show the names of high schoolers and the number of likes they have.",
            "Show the name of high schooler and the number of likes in each student.",
            "Return the name of each high schooler and the number of likes he or she has.",
            "How many likes has each student had?",
            "Show all high schooler names and the number of likes in each student.",
            "What are all the different high schooler names and how many likes has each student had?",
            "Show names along with the number of likes for each student.",
            "Show the name and number of likes in each student.",
            "What are the different names and how many likes does each student have?",
            "Find the name of each student and number of likes shared by each of them.",
            "How many likes are there in each student? Return both the name and the count.",
            "For every student who is famous for liking, how many times are they followed?",
            "Show the high schooler name with the number of gas users.",
            "How many likes does each student have? List the student id and the number of likes.",
            "Show all high schooler names along with the number of likes in each student."
        ],
        "templates": [
            "",
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "masked_template": "List the id of <mask> who <mask> and the number of their <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many members are in each party?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "List the name of all products along with the number of complaints that they have received.",
                "masked_template": "List the name of all <mask> with the number of <mask> that <mask> have <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
                "masked_template": "How many <mask> do each <mask> of? List their names and number of <mask> of.",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
                "masked_template": "Show the <mask> id of each <mask> with the number of <mask> he or she <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty id and the number of students each faculty has?",
                "masked_template": "What are the <mask> id and the number of <mask> each <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show all the faculty ranks and the number of students advised by each rank.",
                "masked_template": "Show all the <mask> and the number of <mask> by each <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
                "masked_template": "How many <mask> are <mask> by each <mask> of <mask> List the <mask> and the number of <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
                "masked_template": "Find the number of <mask> each <mask> to. Show the number <mask> with the <mask> id.",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "For each user, find their name and the number of reviews written by them.",
                "masked_template": "For each <mask> find their name and the number of <mask> by <mask>",
                "query": "SELECT T1.name , count( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Show party names and the number of events for each party.",
                "masked_template": "Show <mask> names and the number of <mask> for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "How many events are there for each party?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all the activity names and the number of faculty involved in each activity.",
                "masked_template": "Show all the <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
                "masked_template": "How many <mask> in each <mask> Return the <mask> names and the number of <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For each building, show the name of the building and the number of institutions in it.",
                "masked_template": "For each <mask> show the name of the <mask> and the number of <mask> in it.",
                "query": "SELECT T1.name , count( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the names of pilots and the number of records they have.",
                "masked_template": "Show the names of <mask> and the number of <mask>",
                "query": "SELECT T2.Pilot_name , COUNT( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the name of track and the number of races in each track.",
                "masked_template": "Show the name of <mask> and the number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Return the name of each physician and the number of patients he or she treats.",
                "masked_template": "Return the name of each <mask> and the number of <mask> he or she <mask>",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many exhibitions has each artist had?",
                "masked_template": "How many <mask> has each <mask>",
                "query": "SELECT T2.name , count( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all party names and the number of members in each party.",
                "masked_template": "Show all <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are all the different product names, and how many complains has each received?",
                "masked_template": "What are all the different <mask> and how many <mask> has each <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "Show institution names along with the number of proteins for each institution.",
                "masked_template": "Show <mask> names <mask> with the number of <mask> for each <mask>",
                "query": "SELECT T1.institution , count( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the station name and number of trains in each station.",
                "masked_template": "Show the <mask> name and number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the different card types, and how many transactions have been made with each?",
                "masked_template": "What are the different <mask> and how many <mask> have <mask> with <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the name of each user and number of tweets tweeted by each of them.",
                "masked_template": "Find the name of each <mask> and number of <mask> by each of <mask>",
                "query": "SELECT T1.name , count( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
                "masked_template": "How many <mask> are there in each <mask> Return both the <mask> and the <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "For every student who is registered for some course, how many courses are they registered for?",
                "masked_template": "For <mask> who is <mask> for <mask> how many <mask> are <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Show the company name with the number of gas station.",
                "masked_template": "Show the <mask> name with the number of gas <mask>",
                "query": "SELECT T2.company , count( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
                "masked_template": "How many <mask> each <mask> to? List the <mask> id and the number of <mask>",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show all cities along with the number of drama workshop groups in each city.",
                "masked_template": "Show all <mask> with the number of <mask> in each <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "How many likes are there for each student?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many likes does each student have?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count( * ) FROM Transcripts",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> transcripts </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many transcripts are there?",
            "Count the number of transcripts.",
            "How many transcripts are there?",
            "How many transcripts are there in total?",
            "How many transcripts do we have?",
            "Count the total number of transcripts.",
            "What is the total number of transcripts?",
            "How many transcripts are there?",
            "How many transcripts do we have?",
            "Show the number of transcripts.",
            "Find the number of transcripts in total",
            "What is the number of transcripts?",
            "How many transcripts are there?",
            "How many transcripts are there in total?",
            "Find the total number of transcripts.",
            "How many transcripts are there in total?",
            "How many CSU transcripts are there?",
            "Return the total number of distinct transcripts.",
            "Count the number of total transcripts.",
            "How many transcripts are there?",
            "Count how many transcripts are there.",
            "How many transcripts are there?",
            "How many transcripts are there?",
            "Find the number of transcripts.",
            "Find the number of distinct transcripts.",
            "How many transcripts are there?",
            "What is the total number of transcripts in total?",
            "Count the number of transcripts.",
            "How many transcripts are there?",
            "How many transcripts are there?",
            "How many distinct transcripts are stored in by users?"
        ],
        "templates": [
            "",
            {
                "question": "Count the number of budget codes.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM Ref_budget_codes",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many schools are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM school",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "How many counties are there in total?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many statements do we have?",
                "masked_template": "How many <mask> do we <mask>",
                "query": "SELECT count( * ) FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the total number of counties.",
                "masked_template": "Count the total number of <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the total number of faculty members?",
                "masked_template": "What is the total number of <mask>",
                "query": "SELECT count( * ) FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many video games exist?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many video games do you have?",
                "masked_template": "How many <mask> do you <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show the number of trains",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( * ) FROM train",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the number of students in total.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the number of technicians?",
                "masked_template": "What is the number of <mask>",
                "query": "SELECT count( * ) FROM technician",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "how many ships are there?",
                "masked_template": "how many <mask> are <mask>",
                "query": "SELECT count( * ) FROM ship",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "How many aircrafts exist in the database?",
                "masked_template": "How many <mask> in the <mask>",
                "query": "SELECT count( * ) FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the total number of catalog contents.",
                "masked_template": "Find the total number of <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many products are there in the records?",
                "masked_template": "How many <mask> are there in the <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many CSU campuses are there?",
                "masked_template": "How many CSU <mask> are <mask>",
                "query": "SELECT count( * ) FROM campuses",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "Return the total number of distinct customers.",
                "masked_template": "Return the total number of distinct <mask>",
                "query": "SELECT count( * ) FROM customers",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Count the number of total papers.",
                "masked_template": "Count the number of total <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "How many staff in total?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Count how many appointments have been made in total.",
                "masked_template": "Count how many <mask> have <mask> in <mask>",
                "query": "SELECT count( * ) FROM appointment",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many followers does each user have?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) FROM follows",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many papers are published in total?",
                "masked_template": "How many <mask> are <mask> in <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of reviews.",
                "masked_template": "Find the number of <mask>",
                "query": "SELECT count( * ) FROM review",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of distinct amenities.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( * ) FROM dorm_amenity",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "How many dorms are in the database?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM dorm",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the total number of rooms available in this inn?",
                "masked_template": "What is the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM Rooms",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Count the number of documents with expenses.",
                "masked_template": "Count the number of <mask> with <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many documents have expenses?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many council taxes are collected for renting arrears ?",
                "masked_template": "How many <mask> are <mask> for <mask> ?",
                "query": "SELECT count( * ) FROM rent_arrears",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "How many distinct courses are enrolled in by students?",
                "masked_template": "How many distinct <mask> are <mask> in by <mask>",
                "query": "SELECT count( course_id ) FROM Student_Course_Enrolment",
                "ted": 0.0,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "How many transcripts are there?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many transcripts are there?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select T2.department_name , T1.department_id from degree_programs as T1 join departments as T2 on T1.department_id = T2.department_id group by T1.department_id order by count( * ) desc limit 1",
        "proc_query": "( <col> department name </col> of <tab> departments </tab> ) , ( <col> department id </col> of <tab> degree programs </tab> ) that belongs to ( ( <tab> degree programs </tab> ) , and ( ( <tab> departments </tab> ) satisfied that ( ( <col> department id </col> of <tab> degree programs </tab> ) equal to ( <col> department id </col> of <tab> departments </tab> ) ) ) ) , grouped by ( <col> department id </col> of <tab> degree programs </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name and id of the department that offers the most degrees?",
            "What is the name and id of the department that is offering the most degrees?",
            "What is the name and id for the department which has the most degrees offered?",
            "Find the name and id of the department that is offering the most degrees.",
            "What are the name and id of the department with the most degrees?",
            "Which department offers the most number of degrees? List the department name and the id.",
            "Find the ID and name of the department with the most degrees.",
            "What is the name and id of the department that offers the most degrees?",
            "What is the name and id of the department that offers most number of degrees?",
            "For the department ids with the top 10 most number of degrees, what are their names?",
            "Return the name and id corresponding to the department that has had the most degrees.",
            "Find the names of the top 10 departments that offer the most number of degrees.",
            "What is the name and id for the department with most number of degrees?",
            "Show the id and name for the department that offers the top 3 number of degrees.",
            "Find the name and id of the department that has the most degrees.",
            "Which department has the most degrees in the database? List both department name and id.",
            "Which department offers the most degrees? Tell me its name and id.",
            "What is the name and id of the department that has the greatest number of degrees in one year?",
            "Find the name of department that offers the most number of degrees.",
            "What is the name and id of the department that has the most degrees?",
            "What are the name and id of the department that offers the most degrees?",
            "Tell me the the name and id of the department that offers the most degrees.",
            "What is the name and id of the department which has the most number of degrees?",
            "What are the name and id of the most popular degree program?",
            "Show the id and name of the department that has the greatest number of degrees.",
            "Find the id and name of the department that has the most number of degrees.",
            "Find the ids and names of the 3 departments that have the most number of degrees.",
            "What is the name and id of the department with the most degrees?",
            "Find the name and id of the department that is involved in the greatest number of degrees.",
            "Find the id and name of the department that has the most degrees.",
            "Which department is involved in the most number of degrees? List the department name and id"
        ],
        "templates": [
            "",
            {
                "question": "What is the description and code of the type of service that is performed the most often?",
                "masked_template": "What is the <mask> and <mask> of the <mask> of <mask> that is <mask> the most <mask>",
                "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What is the name and hours for the project which has the most scientists assigned to it?",
                "masked_template": "What is the name and <mask> for the <mask> which has the most <mask> to it?",
                "query": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the description and code of the service type that is performed the most times.",
                "masked_template": "Find the <mask> and <mask> of the <mask> that is <mask> the most <mask>",
                "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the details and id of the project with the most outcomes?",
                "masked_template": "What are the <mask> and id of the <mask> with the most <mask>",
                "query": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Which project made the most number of outcomes? List the project details and the project id.",
                "masked_template": "Which <mask> the most number of <mask> List the <mask> and the <mask> id.",
                "query": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the student ID and login name of the student with the most course enrollments",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What is the first and last name of the student who played the most sports?",
                "masked_template": "What is the <mask> and <mask> name of the <mask> who <mask> the most <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What is the first name and last name of the student who have most number of sports?",
                "masked_template": "What is the <mask> name and <mask> name of the <mask> who have most number of <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "For the airline ids with the top 10 most routes operated, what are their names?",
                "masked_template": "For the <mask> ids with the top 10 most <mask> what are their <mask>",
                "query": "SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count( * ) DESC LIMIT 10",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
                "masked_template": "Return the name and <mask> to the <mask> who has had the most <mask>",
                "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Find the names of the top 10 airlines that operate the most number of routes.",
                "masked_template": "Find the names of the top 10 <mask> that <mask> the most number of <mask>",
                "query": "SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count( * ) DESC LIMIT 10",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and country for the artist with most number of exhibitions?",
                "masked_template": "What is the name and <mask> for the <mask> with most number of <mask>",
                "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show the id and details for the investors who have the top 3 number of transactions.",
                "masked_template": "Show the id and <mask> for the <mask> who have the top 3 number of <mask>",
                "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Find the full name and id of the college that has the most baseball players.",
                "masked_template": "Find the <mask> name and id of the <mask> that has the most <mask>",
                "query": "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which film has the most copies in the inventory? List both title and id.",
                "masked_template": "Which <mask> has the most <mask> in the <mask> List both <mask> and id.",
                "query": "SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
                "masked_template": "Which <mask> the most <mask> to? <mask> me its <mask> and <mask>",
                "query": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
                "masked_template": "What is the <mask> and id of the <mask> that has the <mask> number of <mask> in <mask>",
                "query": "SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the full name of employee who supported the most number of customers.",
                "masked_template": "Find the <mask> name of <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What is the type and id of the organization that has the most research staff?",
                "masked_template": "What is the <mask> and id of the <mask> that has the most <mask>",
                "query": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the first and last name of the faculty who has the most students?",
                "masked_template": "What are the <mask> and <mask> name of the <mask> who has the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Give me the the first and last name of the faculty who advises the most students.",
                "masked_template": "<mask> me the the <mask> and <mask> name of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
                "masked_template": "What is the <mask> and id of the <mask> which has the most number of <mask>",
                "query": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the code and description of the most frequent behavior incident type?",
                "masked_template": "What are the <mask> and <mask> of the most <mask>",
                "query": "SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Show the id and details of the investor that has the largest number of transactions.",
                "masked_template": "Show the id and <mask> of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Find the id and first name of the student that has the most number of assessment notes?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most number of <mask>",
                "query": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
                "masked_template": "Find the ids and <mask> names of the 3 <mask> that have the most number of <mask>",
                "query": "SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What is the first and last name of the faculty participating in the most activities?",
                "masked_template": "What is the <mask> and <mask> name of the <mask> in the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the first and last name of the faculty who is involved in the largest number of activities.",
                "masked_template": "Find the <mask> and <mask> name of the <mask> who is <mask> in the <mask> number of <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the id and last name of the student that has the most behavior incidents?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most <mask>",
                "query": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
                "masked_template": "Which <mask> is <mask> in <mask> the most number of <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            }
        ],
        "best_hyp": "What is the name and id of the department that has the most degrees?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name and id of the department that offers the most degrees?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )",
        "proc_query": "( <col> semester name </col> ) that belongs to ( <tab> semesters </tab> ) , that have ( ( <col> semester id </col> ) not in ( ( <col> semester id </col> ) that belongs to ( <tab> student enrolment </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of semesters that have no enrolled students?",
            "List the names of semesters that do not have any student enrollment.",
            "List the names of semesters that are not enrolled in any student.",
            "List the name of semesters that are not enrolled in any student.",
            "Find the name of the semesters that do not have any student enrollment.",
            "What are the names of semesters without any student enrollment?",
            "What are the names of semesters that have no enrolled students?",
            "Find the names of semesters that did not have any student enrollment.",
            "what are the names of semesters that did not have any students enrolled in the courses?",
            "Find the name of semesters not enrolled in any student.",
            "What are the names of all semesters that are not enrolled in students?",
            "List the names of semesters that did not have any student enrollment.",
            "What are the names of all semesters that have never had any student enrollment?",
            "List the names of semesters that do not have any student enrollment.",
            "Which semesters do not have any student enrollment? Give me the semesters names.",
            "List the names of semesters that are not enrolled in any students",
            "What are the names of semesters that do not have any student enrollment?",
            "Find the names of semesters that do not have any student enrollment.",
            "List the names of semesters that have no enrolled students",
            "What are all names of semesters that have no enrolled students?",
            "What are the names of semesters without any student enrollment?",
            "List the names of semesters that are not attended by any student.",
            "What are the names of semesters that do not have a student enrollment record?",
            "What are the names of semesters that do not have any enrolled students?",
            "Which semesters have no enrolled students? List the semesters' names.",
            "What are the names of the semesters with no student enrollment?",
            "What are the names of all semesters that have not enrolled any students?",
            "Find the names of all semesters that have no student enrollment.",
            "List the names of semesters that did not have any student enrollment.",
            "Find all the name of semesters without any student enrollment.",
            "What are the names of semesters that do not have any student enrollment?"
        ],
        "templates": [
            "",
            {
                "question": "List the names of mountains that do not have any climber.",
                "masked_template": "List the names of <mask> that do not have any <mask>",
                "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN ( SELECT Mountain_ID FROM climber )",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "List the names of products that are not in any event.",
                "masked_template": "List the names of <mask> that are not in any <mask>",
                "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN ( SELECT Product_ID FROM Products_in_Events )",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "List the name of artworks that are not nominated.",
                "masked_template": "List the name of <mask> that are not <mask>",
                "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN ( SELECT Artwork_ID FROM nomination )",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Find the name of the courses that do not have any prerequisite?",
                "masked_template": "Find the name of the <mask> that do not have any <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of courses without prerequisites?",
                "masked_template": "What are the names of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of instructors who didn't teach?",
                "masked_template": "What are the names of <mask> who <mask>",
                "query": "SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Give the names of people who did not participate in the candidate election.",
                "masked_template": "<mask> the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "what are the names of people who did not participate in the candidate election.",
                "masked_template": "what are the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "Find the first name of students not enrolled in any course.",
                "masked_template": "Find the <mask> name of <mask> not <mask> in any <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the first names of all students that are not enrolled in courses?",
                "masked_template": "What are the <mask> names of all <mask> that are not <mask> in <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "List the names of aircrafts and that did not win any match.",
                "masked_template": "List the names of <mask> and that did not win any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aicrafts that have never won any match?",
                "masked_template": "What are the names of all <mask> that have <mask> won any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "List the locations of schools that do not have any player.",
                "masked_template": "List the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Which schools do not have any player? Give me the school locations.",
                "masked_template": "Which <mask> do not have any <mask> me the <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "List the names of people that are not perpetrators.",
                "masked_template": "List the names of <mask> that are not <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM perpetrator )",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "What are the famous titles of artists who do not have any volumes?",
                "masked_template": "What are the <mask> of <mask> who do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Find the famous titles of artists that do not have any volume.",
                "masked_template": "Find the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "List the names of buildings that have no company office.",
                "masked_template": "List the names of <mask> that have no <mask>",
                "query": "SELECT name FROM buildings WHERE id NOT IN ( SELECT building_id FROM Office_locations )",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What are all info of students who registered courses but not attended courses?",
                "masked_template": "What are all <mask> of <mask> who <mask> but not <mask>",
                "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance )",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the titles of courses without prerequisites?",
                "masked_template": "What are the <mask> of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "List the names of people that are not employed by any company",
                "masked_template": "List the names of <mask> that are not <mask> by any <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM employment )",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "What are the titles of films that do not have a film market estimation?",
                "masked_template": "What are the <mask> of <mask> that do not have a <mask>",
                "query": "SELECT Title FROM film WHERE Film_ID NOT IN ( SELECT Film_ID FROM film_market_estimation )",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are the names of counties that do not contain any cities?",
                "masked_template": "What are the names of <mask> that do not <mask> any <mask>",
                "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN ( SELECT County_ID FROM city )",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Which projects have no outcome? List the project details.",
                "masked_template": "Which <mask> have no <mask> List the <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the details of the project with no outcomes?",
                "masked_template": "What are the <mask> of the <mask> with no <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the titles of all movies that have not been rated?",
                "masked_template": "What are the <mask> of all <mask> that have not <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies that have no ratings.",
                "masked_template": "Find the <mask> of all <mask> that have no <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "List the names of members who did not participate in any round.",
                "masked_template": "List the names of <mask> who did not <mask> in any <mask>",
                "query": "SELECT Name FROM member WHERE Member_ID NOT IN ( SELECT Member_ID FROM round )",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "Find all the name of documents without any sections.",
                "masked_template": "Find all the name of <mask> any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "What are the names of documents that do not have any sections?",
                "masked_template": "What are the names of <mask> that do not have any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            }
        ],
        "best_hyp": "What are the names of semesters that do not have any student enrollment?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of semesters that have no enrolled students?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
        "proc_query": "( <col> other student details </col> ) that belongs to ( <tab> students </tab> ) , ordered by ( ( <col> other student details </col> ) in descending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "List the details of all students in descending order of detail.",
            "List all student names by their ages old to young",
            "Return the details for students ordered by age.",
            "Show the names of students in descending order of detail.",
            "What are the names of all the students in the school sorted by their details in descending order?",
            "List names of all students in the school ordered by all details in descending order.",
            "What are the names of students by age in descending order?",
            "Find the names of all students in the descending order of detail.",
            "What are the names of all the students ordered in descending order?",
            "What are the details of students in descending order of detail?",
            "List all student details in descending order.",
            "What are the names of the students in descending order of detail?",
            "List the names of students in descending order of detail.",
            "List the name of students in descending order of detail.",
            "What are the details of all the students in the descending order of detail?",
            "List details of all students in the order of their details the most frequently.",
            "What are the names of students by age?",
            "Find all details of students in descending order of detail.",
            "What are the names of students in descending order of detail?",
            "List the names of all students in descending order of detail.",
            "Give me a list of all the details of the students in descending order of detail.",
            "Show the details of students in descending order of their details.",
            "Show the details of students in descending order of detail.",
            "What are the details of students ordered by details descending?",
            "What are the names of the students ordered by detail?",
            "List all the student names by the most recent detail corresponding to the students.",
            "List the details of students in descending order of detail.",
            "List all student names ordered by their details in descending order.",
            "List the students' names in descending order of the details.",
            "Find the name of students in the descending order of detail.",
            "What are the names of students in descending order of detail?"
        ],
        "templates": [
            "",
            {
                "question": "Sort all captain names by their ages from old to young.",
                "masked_template": "<mask> all <mask> names by their <mask> old to <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Return the characters for actors, ordered by age descending.",
                "masked_template": "Return the <mask> for <mask> ordered by age <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show the name of drivers in descending order of age.",
                "masked_template": "Show the name of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM driver ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
                "masked_template": "What are the names of all the <mask> in the <mask> by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
                "masked_template": "List names of all <mask> in the <mask> ordered by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "What are the names of everybody sorted by age in descending order?",
                "masked_template": "What are the names of <mask> by age in <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "Find the names of all person sorted in the descending order using age.",
                "masked_template": "Find the names of all <mask> in the <mask> order <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "What are the names of all the clubs ordered in descending alphabetical order?",
                "masked_template": "What are the names of all the <mask> ordered in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the characters of actors in descending order of age?",
                "masked_template": "What are the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "List all club names in descending alphabetical order.",
                "masked_template": "List all <mask> names in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the names of the counties of public safety, ordered by population descending?",
                "masked_template": "What are the names of the <mask> of <mask> ordered by <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the names of counties in descending order of population.",
                "masked_template": "List the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the name of enzymes in descending lexicographical order.",
                "masked_template": "List the name of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
                "masked_template": "What are the <mask> of all the <mask> in the <mask> order of <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "List venues of all matches in the order of their dates starting from the most recent one.",
                "masked_template": "List <mask> of all <mask> in the order of their <mask> the most <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What are the names of captains, sorted by age descending?",
                "masked_template": "What are the names of <mask> by age <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
                "masked_template": "Find all <mask> and <mask> by <mask> in <mask>",
                "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What are the names of enzymes in descending order?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Sort the names of all counties in descending alphabetical order.",
                "masked_template": "<mask> the names of all <mask> in <mask>",
                "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
                "masked_template": "<mask> me a list of all the <mask> names <mask> by the <mask> in <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Show the working years of managers in descending order of their level.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of their <mask>",
                "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "Show the case burden of counties in descending order of population.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the case burdens of counties, ordered descending by population?",
                "masked_template": "What are the <mask> of <mask> ordered <mask> by <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the names of the wrestlers, ordered descending by days held?",
                "masked_template": "What are the names of the <mask> ordered <mask> by <mask>",
                "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "List all the event names by year from the most recent to the oldest.",
                "masked_template": "List all the <mask> names by <mask> the most <mask> to the <mask>",
                "query": "SELECT name FROM event ORDER BY YEAR DESC",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "List the votes of elections in descending order.",
                "masked_template": "List the <mask> of <mask> in <mask>",
                "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "List all channel names ordered by their rating in percent from big to small.",
                "masked_template": "List all <mask> names ordered by their <mask> in <mask> big to <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Sort the company names in descending order of the company's market value.",
                "masked_template": "<mask> the <mask> names in <mask> order of the <mask>",
                "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the first name of students in the descending order of age.",
                "masked_template": "Find the <mask> name of <mask> in the <mask> order of <mask>",
                "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the names of buildings sorted in descending order of building height?",
                "masked_template": "What are the names of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM buildings ORDER BY Height DESC",
                "ted": 0.0,
                "db_id": "company_office"
            }
        ],
        "best_hyp": "What are the details of all the students in the descending order of detail?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "List the details of all students in descending order of detail.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler WHERE name = 'Brittany'",
        "proc_query": "( <col> grade </col> ) that belongs to ( <tab> high schooler </tab> ) , that have ( ( <col> name </col> ) equal to ( <val> Brittany </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the grade of the high schooler named Brittany?",
            "Find the grade of the high schooler named Brittany.",
            "What is the grade of the girl named Brittany?",
            "What is the grade of the girl named Brittany?",
            "Find the grade of the girl named Brittany.",
            "What are the names of all the grades taught by Brittany?",
            "Find the grade of all students taught by Brittany",
            "What is the grade for the girl with name Brittany?",
            "Find the grade of the girl named Brittany.",
            "Which grades have the girl with name Brittany? Find their grade.",
            "Return the grade numbers of the students with name Brittany.",
            "Which grade students have Brittany as their first name?",
            "Show the grade of all the students with name Brittany.",
            "Show the grade of the girl named Brittany.",
            "What are the ids of all the students in grade Brittany?",
            "Return the grade of Brittany for all the students with name Brittany.",
            "What are grades of all the students whose name is Brittany?",
            "What is the grade of the girl whose name is Brittany?",
            "What is the grade of the girl named Brittany?",
            "What are the ids of the students whose name is Brittany?",
            "What are the grades of students who are named Brittany?",
            "What is the grade of the girl named Brittany?",
            "What is the grade of the girl named Brittany?",
            "Find the grade of the girl named Brittany.",
            "Show the grade for the girl named Brittany.",
            "What are the names of all the students in grade Brittany?",
            "How many students is Brittany?",
            "Tell us the grade of the girl named Brittany.",
            "Show ids for all the grade students named Brittany.",
            "What are the grade ids of all the students named Brittany?",
            "Find the grade corresponding to students who are in the school of Brittany."
        ],
        "templates": [
            "",
            {
                "question": "Find the name of dorms only for female (F gender).",
                "masked_template": "Find the name of <mask> for <mask> (F <mask>",
                "query": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the location of the club named \"Tennis Club\"?",
                "masked_template": "What is the <mask> of the <mask> named <mask>",
                "query": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What is the description of the club \"Pen and Paper Gaming\"?",
                "masked_template": "What is the <mask> of the <mask> and <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Find the description of the club \"Pen and Paper Gaming\".",
                "masked_template": "Find the <mask> of the <mask> and <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What are the names of all movies directed by Steven Spielberg?",
                "masked_template": "What are the names of all <mask> by <mask>",
                "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies directed by steven spielberg.",
                "masked_template": "Find the <mask> of all <mask> by <mask>",
                "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
                "masked_template": "What is the <mask> for the <mask> with <mask>",
                "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = 'VIOLENCE'",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the description of the club called \"Tennis Club\".",
                "masked_template": "Find the <mask> of the <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Which employees have the role with code \"HR\"? Find their names.",
                "masked_template": "Which <mask> have the <mask> with <mask> Find their <mask>",
                "query": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
                "masked_template": "Return the <mask> numbers of the <mask> with <mask>",
                "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
                "masked_template": "Which <mask> have <mask> me their <mask>",
                "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the names of all the employees with role \"HR\".",
                "masked_template": "Show the names of all the <mask> with <mask>",
                "query": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the id of the employee named Ebba.",
                "masked_template": "Show the id of the <mask> named <mask>",
                "query": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the id of all the files in mp3 format?",
                "masked_template": "What are the id of all the <mask> in mp3 <mask>",
                "query": "SELECT f_id FROM files WHERE formats = 'mp3'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "Return the date of birth for all the guests with gender code \"Male\".",
                "masked_template": "Return the <mask> of <mask> for all the <mask> with <mask>",
                "query": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are dates of birth of all the guests whose gender is \"Male\"?",
                "masked_template": "What are <mask> of <mask> of all the <mask> whose <mask> is <mask>",
                "query": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
                "masked_template": "What is the <mask> of <mask> of <mask> whose <mask> is <mask>",
                "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the id for the employee called Ebba?",
                "masked_template": "What is the id for the <mask>",
                "query": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the id of songs whose format is mp3.",
                "masked_template": "What are the id of <mask> whose <mask> is <mask>",
                "query": "SELECT f_id FROM files WHERE formats = 'mp3'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
                "masked_template": "<mask> are the <mask> of <mask> who are <mask> as <mask>",
                "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the code of the school where the accounting department belongs to?",
                "masked_template": "What is the <mask> of the <mask> the <mask> to?",
                "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the school code of the accounting department?",
                "masked_template": "What is the <mask> of the <mask>",
                "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the department name that is in Building \"Mergenthaler\".",
                "masked_template": "Find the <mask> name that is in <mask>",
                "query": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Show the description for role name \"Proof Reader\".",
                "masked_template": "Show the <mask> for <mask> name <mask>",
                "query": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the names of all songs in English?",
                "masked_template": "What are the names of all <mask> in <mask>",
                "query": "SELECT song_name FROM song WHERE languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "How many milliseconds long is Fast As a Shark?",
                "masked_template": "How many <mask> is <mask> As a <mask>",
                "query": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Where us the club named \"Tennis Club\" located?",
                "masked_template": "<mask> us the <mask> named <mask>",
                "query": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Show ids for all the male faculty.",
                "masked_template": "Show ids for all the <mask>",
                "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty ids of all the male faculty members?",
                "masked_template": "What are the <mask> ids of all the <mask>",
                "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
                "masked_template": "Find the <mask> to <mask> who <mask> in the <mask> of <mask>",
                "query": "SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'",
                "ted": 0.0,
                "db_id": "chinook_1"
            }
        ],
        "best_hyp": "What is the grade of the girl named Brittany?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the grade of the high schooler named Brittany?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT count( * ) FROM Highschooler",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> high schooler </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many high school students are there?",
            "Count the number of students.",
            "How many students are there?",
            "How many students are there?",
            "How many students do we have?",
            "Count the total number of students.",
            "What is the total number of high school students?",
            "How many students are there?",
            "How many students do we have?",
            "Show the number of students.",
            "Find the number of students in high school.",
            "What is the number of high school students?",
            "How many students are there?",
            "How many students are in the high school?",
            "Find the total number of students.",
            "How many students are there in the school?",
            "How many CSU students are there?",
            "Return the total number of distinct high school students.",
            "Count the number of students.",
            "How many students are in high school?",
            "Count how many students are in high school.",
            "How many students are there?",
            "How many students are in high school?",
            "Find the number of high school students.",
            "Find the number of distinct high school students.",
            "How many students are in the high school?",
            "What is the total number of students in high school?",
            "Count the number of high school students.",
            "How many students are there?",
            "How many students are there?",
            "How many distinct students are enrolled in by high school?"
        ],
        "templates": [
            "",
            {
                "question": "Count the number of budget codes.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM Ref_budget_codes",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many schools are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM school",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "How many counties are there in total?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many statements do we have?",
                "masked_template": "How many <mask> do we <mask>",
                "query": "SELECT count( * ) FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the total number of counties.",
                "masked_template": "Count the total number of <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the total number of faculty members?",
                "masked_template": "What is the total number of <mask>",
                "query": "SELECT count( * ) FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many video games exist?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many video games do you have?",
                "masked_template": "How many <mask> do you <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show the number of trains",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( * ) FROM train",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the number of students in total.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the number of technicians?",
                "masked_template": "What is the number of <mask>",
                "query": "SELECT count( * ) FROM technician",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "how many ships are there?",
                "masked_template": "how many <mask> are <mask>",
                "query": "SELECT count( * ) FROM ship",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "How many aircrafts exist in the database?",
                "masked_template": "How many <mask> in the <mask>",
                "query": "SELECT count( * ) FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the total number of catalog contents.",
                "masked_template": "Find the total number of <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many products are there in the records?",
                "masked_template": "How many <mask> are there in the <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many CSU campuses are there?",
                "masked_template": "How many CSU <mask> are <mask>",
                "query": "SELECT count( * ) FROM campuses",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "Return the total number of distinct customers.",
                "masked_template": "Return the total number of distinct <mask>",
                "query": "SELECT count( * ) FROM customers",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Count the number of total papers.",
                "masked_template": "Count the number of total <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "How many staff in total?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Count how many appointments have been made in total.",
                "masked_template": "Count how many <mask> have <mask> in <mask>",
                "query": "SELECT count( * ) FROM appointment",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many followers does each user have?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) FROM follows",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many papers are published in total?",
                "masked_template": "How many <mask> are <mask> in <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of reviews.",
                "masked_template": "Find the number of <mask>",
                "query": "SELECT count( * ) FROM review",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of distinct amenities.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( * ) FROM dorm_amenity",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "How many dorms are in the database?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM dorm",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the total number of rooms available in this inn?",
                "masked_template": "What is the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM Rooms",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Count the number of documents with expenses.",
                "masked_template": "Count the number of <mask> with <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many documents have expenses?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many council taxes are collected for renting arrears ?",
                "masked_template": "How many <mask> are <mask> for <mask> ?",
                "query": "SELECT count( * ) FROM rent_arrears",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "How many distinct courses are enrolled in by students?",
                "masked_template": "How many distinct <mask> are <mask> in by <mask>",
                "query": "SELECT count( course_id ) FROM Student_Course_Enrolment",
                "ted": 0.0,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "How many CSU students are there?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many high school students are there?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count( * ) >= 2",
        "proc_query": "( <col> transcript date </col> of <tab> transcripts </tab> ) , ( <col> transcript id </col> of <tab> transcript contents </tab> ) that belongs to ( ( <tab> transcript contents </tab> ) , and ( ( <tab> transcripts </tab> ) satisfied that ( ( <col> transcript id </col> of <tab> transcript contents </tab> ) equal to ( <col> transcript id </col> of <tab> transcripts </tab> ) ) ) ) , grouped by ( <col> transcript id </col> of <tab> transcript contents </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the dates and ids of the transcripts with at least two corresponding contents?",
            "Show the date and id of the transcript with at least two corresponding contents.",
            "What are the ids and names of the transcripts with at least 3 corresponding id?",
            "Which transcripts are in at least two states? Tell me the transcript date and id.",
            "What are the ids and dates of the transcripts that have at least 3 corresponding ids?",
            "What is the cmi id that is corresponding to at least one tax record? List the id and date.",
            "What are the ids and names of the web pages that are associated with two or more corresponding transcripts?",
            "Which transcripts are at least two years old? Tell me their names and ids.",
            "Find the date and id of the transcript with at least two corresponding contents.",
            "Show the dates and ids of the transcripts that are at least two years old.",
            "What are the dates and ids for transcripts with at least two rep ids?",
            "Which two or more transcripts tell me their dates and ids?",
            "Find the dates and ids of the transcripts that have at least two corresponding ids.",
            "What are the ids and names of the transcripts that can correspond with two or more corresponding ids?",
            "Please show the dates and ids of the transcripts with at least two corresponding ids.",
            "Show the date and id for all transcripts with at least two corresponding contents.",
            "What are the ids and names of the transcripts that have at least two corresponding ids?",
            "What are the ids and names of the transcripts with 4 or more corresponding ids?",
            "What are the dates and ids for the transcripts with two or more corresponding ids?",
            "What are the ids and names of the transcripts that can be accessed with at least 3 times?",
            "For each id, what are the names of the dates that can correspond with more than one transcript?",
            "What is the id and name of the transcript that can be accessed with at least 3 times?",
            "Which transcript has at least two corresponding contents? List its date and id.",
            "Which transcripts have more than 2 corresponding id? Show the transcript date and id.",
            "Show ids and dates of the transcripts that are associated with more than one corresponding id.",
            "List the date and id of all the transcripts that have at least two corresponding contents.",
            "Show the dates and ids of the transcripts that are at most two years old.",
            "Return the order ids and ids for orderes with two or more corresponding transcripts.",
            "Return the dates and names of the transcripts that have more than two corresponding contents in.",
            "Find the date and id for the transcripts that have at least two corresponding contents.",
            "What are the dates and names of the transcripts that have at least two corresponding contents?"
        ],
        "templates": [
            "",
            {
                "question": "Show the account id and name with at least 4 transactions.",
                "masked_template": "Show the <mask> id and name with at least 4 <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and names of the architects who built at least 3 bridges ?",
                "masked_template": "What are the ids and names of the <mask> who <mask> at least 3 <mask> ?",
                "query": "SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
                "masked_template": "Which <mask> are <mask> in at least two <mask> me the <mask> ID and <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the id and details of the customers who have at least 3 events?",
                "masked_template": "What are the id and <mask> of the <mask> who have at least 3 <mask>",
                "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
                "masked_template": "What is the cmi <mask> id that is <mask> to at least one <mask> tax <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count( * ) >= 1",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "masked_template": "What are the ids and names of the web <mask> that are <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the student ID and personal name of the student with at least two enrollments.",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with at least two <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
                "masked_template": "Find the <mask> and <mask> IDs of the <mask> that <mask> at least two <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
                "masked_template": "What are the ids and names of the <mask> that can <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
                "masked_template": "<mask> show the <mask> names and ids of <mask> who <mask> at least 10 <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the id and name of the mountains that have at least 2 photos?",
                "masked_template": "What are the id and name of the <mask> that have at least 2 <mask>",
                "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the ids and names of accounts with 4 or more transactions?",
                "masked_template": "What are the ids and names of <mask> with 4 or more <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
                "masked_template": "What are the ids and <mask> names of the <mask> that can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
                "masked_template": "For <mask> id, what are the names of the <mask> that can <mask> with more than one <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
                "masked_template": "What is the id and <mask> name of the <mask> can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
                "masked_template": "Which <mask> a <mask> in more than 30 <mask> List his or her <mask> name and <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.027777777777777776,
                "db_id": "sakila_1"
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "railway"
            },
            {
                "question": "List first name and last name of customers that have more than 2 payments.",
                "masked_template": "List <mask> name and <mask> name of <mask> that have more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "driving_school"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at most once.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at most <mask>",
                "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) <= 1",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
                "masked_template": "Return the <mask> and names of the <mask> that have more than two <mask> in.",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "twitter_1"
            },
            {
                "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
                "masked_template": "What are the <mask> and names of the <mask> that have <mask> than 2?",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "What are the ids and names of the transcripts that can be accessed with at least 3 times?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the dates and ids of the transcripts with at least two corresponding contents?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "select name from teacher where hometown != 'Farnworth Municipal Borough'",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> teacher </tab> ) , that have ( ( <col> hometown </col> ) not equal to ( <val> Farnworth Municipal Borough </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of teachers who are not from Farnworth Municipal Borough?",
            "List the name of teachers whose hometown is not Farnworth Municipal Borough.",
            "Which teachers are not from Farnworth Municipal Borough?",
            "Show all teachers who do not live in Farnworth Municipal Borough.",
            "What are the names of the teachers who are not from Farnworth Municipal Borough?",
            "Find the name of teachers who did not live in Farnworth Municipal Borough.",
            "What is the name of the teacher whose hometown is not Farnworth Municipal Borough?",
            "Return the names of teachers that do not have hometown as their hometown.",
            "What are the names of teachers whose hometowns are not Farnworth Municipal Borough?",
            "Show names for all teachers whose hometown is not Farnworth Municipal Borough.",
            "Return the names of all teachers who are not from Farnworth Municipal Borough.",
            "What are the names of teachers whose hometown is not Farnworth Municipal Borough?",
            "Show the names of teachers whose hometowns are not Farnworth Municipal Borough.",
            "Find the names of the teachers whose hometowns are not in Farnworth Municipal Borough.",
            "What are the names of teachers that do not live in Farnworth Municipal Borough?",
            "Find the names of teachers that are not from Farnworth Municipal Borough.",
            "Which teachers are not from Farnworth Municipal Borough? Tell me their names.",
            "find the names of teachers whose hometown is not Farnworth Municipal Borough.",
            "Which teachers are not from Farnworth Municipal Borough? Tell me their names.",
            "What are the names of teachers whose hometown is not Farnworth Municipal Borough?",
            "Show the names of teachers that are not from Farnworth Municipal Borough.",
            "What are the names of the teachers whose hometown is not Farnworth Municipal Borough?",
            "List the names of teachers whose hometown is not Farnworth Municipal Borough.",
            "List the names for each teacher that does not have hometown as Farnworth Municipal Borough.",
            "What are the names of teachers whose hometown is not Farnworth Municipal Borough?",
            "What are the names of the teachers that are not from the Farnworth Municipal Borough?",
            "What are the names of teachers who are not from Farnworth Municipal Borough?",
            "What are the names of teachers whose hometowns are not Farnworth Municipal Borough?",
            "What is the name of teachers who do not live in Farnworth Municipal Borough?",
            "Return the names of teachers for which the hometown is not Farnworth Municipal Borough.",
            "What are the names of the teachers who are not from Farnworth Municipal Borough?"
        ],
        "templates": [
            "",
            {
                "question": "List the name of technicians whose team is not \"NYY\".",
                "masked_template": "List the name of <mask> whose <mask> is not <mask>",
                "query": "SELECT Name FROM technician WHERE Team != 'NYY'",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Which ministers are not a part of the Progress Party?",
                "masked_template": "Which <mask> are not a <mask> of the <mask>",
                "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all ministers who do not belong to Progress Party.",
                "masked_template": "Show all <mask> who do not <mask> to <mask>",
                "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are the names of the airports which are not in the country 'Iceland'?",
                "masked_template": "What are the names of the <mask> which are not in the <mask>",
                "query": "SELECT name FROM airport WHERE country != 'Iceland'",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Find the name of customers who did not pay with Cash.",
                "masked_template": "Find the name of <mask> who did not pay with <mask>",
                "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What is the name of the technician whose team is not 'NYY'?",
                "masked_template": "What is the name of the <mask> whose <mask> is not <mask>",
                "query": "SELECT Name FROM technician WHERE Team != 'NYY'",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Return the device carriers that do not have Android as their software platform.",
                "masked_template": "Return the <mask> that do not have <mask> as their <mask>",
                "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
                "masked_template": "What are the <mask> of <mask> whose <mask> are not <mask>",
                "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "Show names for all regions except for Denmark.",
                "masked_template": "Show names for all <mask> for <mask>",
                "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Return the names of all regions other than Denmark.",
                "masked_template": "Return the names of all <mask> than <mask>",
                "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What are the names of enzymes whose product is not 'Heme'?",
                "masked_template": "What are the names of <mask> whose <mask> is not <mask>",
                "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Show the census ranking of cities whose status are not \"Village\".",
                "masked_template": "Show the <mask> of <mask> whose <mask> are not <mask>",
                "query": "SELECT Census_Ranking FROM city WHERE Status != 'Village'",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
                "masked_template": "Find the names of the <mask> whose <mask> are not <mask> in <mask>",
                "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What are the census rankings of cities that do not have the status \"Village\"?",
                "masked_template": "What are the <mask> of <mask> that do not have the <mask>",
                "query": "SELECT Census_Ranking FROM city WHERE Status != 'Village'",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "Find the names of channels that are not owned by CCTV.",
                "masked_template": "Find the names of <mask> that are not <mask> by <mask>",
                "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Which channels are not owned by CCTV? Give me the channel names.",
                "masked_template": "Which <mask> are not <mask> by <mask> me the <mask>",
                "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "find the names of programs whose origin is not in Beijing.",
                "masked_template": "find the names of <mask> whose <mask> is not in <mask>",
                "query": "SELECT name FROM program WHERE origin != 'Beijing'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
                "masked_template": "Which <mask> are not <mask> me the <mask>",
                "query": "SELECT name FROM program WHERE origin != 'Beijing'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are the nicknames of schools whose division is not 1?",
                "masked_template": "What are the <mask> of <mask> whose <mask> is not 1?",
                "query": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the nicknames of schools that are not in division 1.",
                "masked_template": "Show the <mask> of <mask> that are not in <mask> 1.",
                "query": "SELECT Nickname FROM school_details WHERE Division != 'Division 1'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?",
                "masked_template": "What are the <mask> of the <mask> whose <mask> is not <mask>",
                "query": "SELECT Title FROM book WHERE Writer != 'Elaine Lee'",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "List the names of countries whose language is not \"German\".",
                "masked_template": "List the names of <mask> whose <mask> is not <mask>",
                "query": "SELECT Name FROM country WHERE Languages != 'German'",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
                "masked_template": "List the <mask> for each <mask> that <mask> not have <mask> as <mask>",
                "query": "SELECT Enrollment FROM school WHERE Denomination != 'Catholic'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
                "masked_template": "What are the <mask> of <mask> whose <mask> is not <mask>",
                "query": "SELECT Enrollment FROM school WHERE Denomination != 'Catholic'",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the names of the ships that are not from the United States?",
                "masked_template": "What are the names of the <mask> that are not <mask> the <mask>",
                "query": "SELECT Name FROM ship WHERE Nationality != 'United States'",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the names of enzymes who does not produce 'Heme'?",
                "masked_template": "What are the names of <mask> who <mask> not <mask>",
                "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the names of companies whose headquarters are not \"USA\"?",
                "masked_template": "What are the names of <mask> whose <mask> are not <mask>",
                "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the name of customers who do not use Cash as payment method.",
                "masked_template": "What is the name of <mask> who do not use <mask> as <mask>",
                "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Return the hosts of competitions for which the theme is not Aliens?",
                "masked_template": "Return the <mask> of <mask> for which the <mask> is not <mask>",
                "query": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens'",
                "ted": 0.0,
                "db_id": "farm"
            },
            {
                "question": "What are the names of the mills which are not located in 'Donceel'?",
                "masked_template": "What are the names of the <mask> which are not <mask> in <mask>",
                "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
                "ted": 0.0,
                "db_id": "architecture"
            }
        ],
        "best_hyp": "What are the names of teachers whose hometown is not Farnworth Municipal Borough?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of teachers who are not from Farnworth Municipal Borough?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name , count( * ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) , ( the number of ( all items ) ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> friend </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "Find the name of each student and the number of friends they have.",
            "List the id of students who are friends and the number of their friends.",
            "How many friends are there for each student?",
            "List the name of all students along with the number of friends that they have.",
            "How many friends do each student have? List their names and number of friends they have.",
            "Show the id of each student along with the number of friends he or she has.",
            "What are the students' names and the number of friends of each student?",
            "Show all the high schooler names and the number of friends shared by each student.",
            "How many friends are there by each student? List the student name and the number of friends.",
            "Find the number of friends each student belongs to. Show the number.",
            "For each student, find their name and the number of friends they have.",
            "Show student names and the number of friends for each student.",
            "How many friends are there for each student?",
            "Show all the student names and the number of friends in each school.",
            "How many friends are there for each student? Return the student names and the number of friends.",
            "For each student, show the name of the student and the number of friends in it.",
            "Show the names of students and the number of friends they have.",
            "Show the name of students and the number of friends in each school.",
            "Return the name of each student and the number of friends he or she has.",
            "How many friends has each student had?",
            "Show all student names and the number of friends in each school.",
            "What are all the different high schooler names and how many friends has each student?",
            "Show names along with the number of friends for each student.",
            "Show the name and number of friends in each school.",
            "What are the different names and how many friends have each student with?",
            "Find the name of each student and number of friends shared by each of them.",
            "How many friends are there in each student? Return both the name and the count.",
            "For every student who is friends for some time, how many friends are there?",
            "Show the name of students and the number of friends they have.",
            "How many friends does each student have? List the student name and the number of friends.",
            "Show all high schooler names along with the number of friends in each student."
        ],
        "templates": [
            "",
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "masked_template": "List the id of <mask> who <mask> and the number of their <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many members are in each party?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "List the name of all products along with the number of complaints that they have received.",
                "masked_template": "List the name of all <mask> with the number of <mask> that <mask> have <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
                "masked_template": "How many <mask> do each <mask> of? List their names and number of <mask> of.",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
                "masked_template": "Show the <mask> id of each <mask> with the number of <mask> he or she <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty id and the number of students each faculty has?",
                "masked_template": "What are the <mask> id and the number of <mask> each <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show all the faculty ranks and the number of students advised by each rank.",
                "masked_template": "Show all the <mask> and the number of <mask> by each <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
                "masked_template": "How many <mask> are <mask> by each <mask> of <mask> List the <mask> and the number of <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
                "masked_template": "Find the number of <mask> each <mask> to. Show the number <mask> with the <mask> id.",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "For each user, find their name and the number of reviews written by them.",
                "masked_template": "For each <mask> find their name and the number of <mask> by <mask>",
                "query": "SELECT T1.name , count( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Show party names and the number of events for each party.",
                "masked_template": "Show <mask> names and the number of <mask> for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "How many events are there for each party?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all the activity names and the number of faculty involved in each activity.",
                "masked_template": "Show all the <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
                "masked_template": "How many <mask> in each <mask> Return the <mask> names and the number of <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For each building, show the name of the building and the number of institutions in it.",
                "masked_template": "For each <mask> show the name of the <mask> and the number of <mask> in it.",
                "query": "SELECT T1.name , count( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the names of pilots and the number of records they have.",
                "masked_template": "Show the names of <mask> and the number of <mask>",
                "query": "SELECT T2.Pilot_name , COUNT( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the name of track and the number of races in each track.",
                "masked_template": "Show the name of <mask> and the number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Return the name of each physician and the number of patients he or she treats.",
                "masked_template": "Return the name of each <mask> and the number of <mask> he or she <mask>",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many exhibitions has each artist had?",
                "masked_template": "How many <mask> has each <mask>",
                "query": "SELECT T2.name , count( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all party names and the number of members in each party.",
                "masked_template": "Show all <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are all the different product names, and how many complains has each received?",
                "masked_template": "What are all the different <mask> and how many <mask> has each <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "Show institution names along with the number of proteins for each institution.",
                "masked_template": "Show <mask> names <mask> with the number of <mask> for each <mask>",
                "query": "SELECT T1.institution , count( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the station name and number of trains in each station.",
                "masked_template": "Show the <mask> name and number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the different card types, and how many transactions have been made with each?",
                "masked_template": "What are the different <mask> and how many <mask> have <mask> with <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the name of each user and number of tweets tweeted by each of them.",
                "masked_template": "Find the name of each <mask> and number of <mask> by each of <mask>",
                "query": "SELECT T1.name , count( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
                "masked_template": "How many <mask> are there in each <mask> Return both the <mask> and the <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "For every student who is registered for some course, how many courses are they registered for?",
                "masked_template": "For <mask> who is <mask> for <mask> how many <mask> are <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Show the company name with the number of gas station.",
                "masked_template": "Show the <mask> name with the number of gas <mask>",
                "query": "SELECT T2.company , count( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
                "masked_template": "How many <mask> each <mask> to? List the <mask> id and the number of <mask>",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show all cities along with the number of drama workshop groups in each city.",
                "masked_template": "Show all <mask> with the number of <mask> in each <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "How many friends are there for each student?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Find the name of each student and the number of friends they have.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN ( SELECT Teacher_id FROM course_arrange )",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> teacher </tab> ) , that have ( ( <col> teacher id </col> ) not in ( ( <col> teacher id </col> ) that belongs to ( <tab> course arrange </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the teachers who did not arrange any course?",
            "List the names of teachers that do not have any course arrange.",
            "List the names of teachers that are not involved in any course arrange.",
            "List the names of teachers that are not teaching any course.",
            "Find the name of the teachers that do not have any course arrange.",
            "What are the names of teachers who did not arrange any course?",
            "What are the names of teachers who did not arrange any course?",
            "Find the names of teachers who did not arrange any course.",
            "what are the names of teachers who did not arrange any course?",
            "Find the name of teachers not involved in any course arrange.",
            "What are the names of all teachers that are not teaching any course?",
            "List the names of teachers who did not arrange any course.",
            "What are the names of all teachers that have never won any course arrange?",
            "List the names of teachers that do not have any course arrange.",
            "Which teachers do not have any course arrange? Tell me the teacher names.",
            "List the names of teachers that are not teaching any course.",
            "What are the names of teachers who do not have any course arrange?",
            "Find the names of teachers that do not have any course arrange.",
            "List the names of teachers that have no courses arrange.",
            "What are all names of teachers who teach courses but not arrange courses?",
            "What are the names of teachers who did not arrange any course?",
            "List the names of teachers that are not teaching any course.",
            "What are the names of teachers that do not have a course arrange?",
            "What are the names of teachers that do not arrange any courses?",
            "Which teachers have no courses arrange? List their names.",
            "What are the names of the teachers with no courses arrange?",
            "What are the names of all teachers that have not provided any course arrange?",
            "Find the names of all teachers that have no courses arrange.",
            "List the names of teachers who did not arrange any course.",
            "Find all the name of teachers without any course arrange.",
            "What are the names of teachers that do not have any course arrange?"
        ],
        "templates": [
            "",
            {
                "question": "List the names of mountains that do not have any climber.",
                "masked_template": "List the names of <mask> that do not have any <mask>",
                "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN ( SELECT Mountain_ID FROM climber )",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "List the names of products that are not in any event.",
                "masked_template": "List the names of <mask> that are not in any <mask>",
                "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN ( SELECT Product_ID FROM Products_in_Events )",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "List the name of artworks that are not nominated.",
                "masked_template": "List the name of <mask> that are not <mask>",
                "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN ( SELECT Artwork_ID FROM nomination )",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Find the name of the courses that do not have any prerequisite?",
                "masked_template": "Find the name of the <mask> that do not have any <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of courses without prerequisites?",
                "masked_template": "What are the names of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of instructors who didn't teach?",
                "masked_template": "What are the names of <mask> who <mask>",
                "query": "SELECT name FROM instructor WHERE id NOT IN ( SELECT id FROM teaches )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Give the names of people who did not participate in the candidate election.",
                "masked_template": "<mask> the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "what are the names of people who did not participate in the candidate election.",
                "masked_template": "what are the names of <mask> who did not <mask> in the <mask>",
                "query": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM candidate )",
                "ted": 0.0,
                "db_id": "candidate_poll"
            },
            {
                "question": "Find the first name of students not enrolled in any course.",
                "masked_template": "Find the <mask> name of <mask> not <mask> in any <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the first names of all students that are not enrolled in courses?",
                "masked_template": "What are the <mask> names of all <mask> that are not <mask> in <mask>",
                "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN ( SELECT StuID FROM ENROLLED_IN )",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "List the names of aircrafts and that did not win any match.",
                "masked_template": "List the names of <mask> and that did not win any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aicrafts that have never won any match?",
                "masked_template": "What are the names of all <mask> that have <mask> won any <mask>",
                "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN ( SELECT Winning_Aircraft FROM MATCH )",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "List the locations of schools that do not have any player.",
                "masked_template": "List the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Which schools do not have any player? Give me the school locations.",
                "masked_template": "Which <mask> do not have any <mask> me the <mask>",
                "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN ( SELECT School_ID FROM Player )",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "List the names of people that are not perpetrators.",
                "masked_template": "List the names of <mask> that are not <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM perpetrator )",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "What are the famous titles of artists who do not have any volumes?",
                "masked_template": "What are the <mask> of <mask> who do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Find the famous titles of artists that do not have any volume.",
                "masked_template": "Find the <mask> of <mask> that do not have any <mask>",
                "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN ( SELECT Artist_ID FROM volume )",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "List the names of buildings that have no company office.",
                "masked_template": "List the names of <mask> that have no <mask>",
                "query": "SELECT name FROM buildings WHERE id NOT IN ( SELECT building_id FROM Office_locations )",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What are all info of students who registered courses but not attended courses?",
                "masked_template": "What are all <mask> of <mask> who <mask> but not <mask>",
                "query": "SELECT * FROM student_course_registrations WHERE student_id NOT IN ( SELECT student_id FROM student_course_attendance )",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the titles of courses without prerequisites?",
                "masked_template": "What are the <mask> of <mask>",
                "query": "SELECT title FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "List the names of people that are not employed by any company",
                "masked_template": "List the names of <mask> that are not <mask> by any <mask>",
                "query": "SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM employment )",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "What are the titles of films that do not have a film market estimation?",
                "masked_template": "What are the <mask> of <mask> that do not have a <mask>",
                "query": "SELECT Title FROM film WHERE Film_ID NOT IN ( SELECT Film_ID FROM film_market_estimation )",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are the names of counties that do not contain any cities?",
                "masked_template": "What are the names of <mask> that do not <mask> any <mask>",
                "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN ( SELECT County_ID FROM city )",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Which projects have no outcome? List the project details.",
                "masked_template": "Which <mask> have no <mask> List the <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the details of the project with no outcomes?",
                "masked_template": "What are the <mask> of the <mask> with no <mask>",
                "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the titles of all movies that have not been rated?",
                "masked_template": "What are the <mask> of all <mask> that have not <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies that have no ratings.",
                "masked_template": "Find the <mask> of all <mask> that have no <mask>",
                "query": "SELECT title FROM Movie WHERE mID NOT IN ( SELECT mID FROM Rating )",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "List the names of members who did not participate in any round.",
                "masked_template": "List the names of <mask> who did not <mask> in any <mask>",
                "query": "SELECT Name FROM member WHERE Member_ID NOT IN ( SELECT Member_ID FROM round )",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "Find all the name of documents without any sections.",
                "masked_template": "Find all the name of <mask> any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "What are the names of documents that do not have any sections?",
                "masked_template": "What are the names of <mask> that do not have any <mask>",
                "query": "SELECT document_name FROM documents WHERE document_code NOT IN ( SELECT document_code FROM document_sections )",
                "ted": 0.0,
                "db_id": "document_management"
            }
        ],
        "best_hyp": "What are the names of teachers that do not have a course arrange?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the teachers who did not arrange any course?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count( * ) <= 3",
        "proc_query": "( <col> course name </col> of <tab> courses </tab> ) , ( <col> course id </col> of <tab> courses </tab> ) that belongs to ( ( <tab> courses </tab> ) , and ( ( <tab> sections </tab> ) satisfied that ( ( <col> course id </col> of <tab> courses </tab> ) equal to ( <col> course id </col> of <tab> sections </tab> ) ) ) ) , grouped by ( <col> course id </col> of <tab> courses </tab> ) , that have ( ( the number of ( all items ) ) less than or equal to ( <val> 3 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names and ids of the courses that have at most three sections?",
            "What are the names and ids of the courses in at most two sections?",
            "What are the names and ids of the courses that are offered at most three sections?",
            "Find the course ID and name for all the courses with at most two sections?",
            "Show the names and ids of courses that are offered at most three sections.",
            "Find the the name and id for the courses that have at most three sections?",
            "what are name and id of courses that have at most three sections?",
            "Which courses require more than one section? Tell me the course name and id.",
            "What are the names and ids for courses that have two or more sections?",
            "Show the names and ids of courses that are offered at least two times.",
            "Find the name and id for courses that have less than 3 sections?",
            "Find the name and id for the courses that have less than 3 sections?",
            "Show the name and id of courses with at most 3 sections.",
            "What are the names and ids of courses that have had at least 3 sections?",
            "What are the ids and names of the courses that are offered with two or more sections?",
            "Please show the names and ids of courses that have at least three sections.",
            "Which courses are offered at least three times? Tell me their names and ids.",
            "What are the names and ids of all courses with more than 2 sections?",
            "What are the course names and rep ids for courses with 3 or more sections?",
            "What are the names and ids of the courses that have at least 3 sections?",
            "Show names and ids of courses that are offered with more than one section.",
            "What is the cmi id that is corresponding to at least one course with at least three sections? List the course name and id",
            "What are the ids and names of the courses that can be accessed with two or more sections?",
            "For each course id, what are the names of the courses that can be accessed with more than one section?",
            "Which courses have more than 2 sections? Show the course name and id.",
            "What is the id and name of the course that can be accessed with at least 3 sections?",
            "What are the ids and names of the courses that can be accessed with at least 3 sections?",
            "Return the order ids and ids for orderes with two or more sections.",
            "What is the name and id of the course with at least three sections?",
            "What are the ids and names of courses with 3 or more sections?",
            "Show the course name and name with at least 3 sections."
        ],
        "templates": [
            "",
            {
                "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
                "masked_template": "What are the <mask> IDs and <mask> names of the <mask> in at most two <mask>",
                "query": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) <= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names and ids of the tourist attractions that are visited at most once?",
                "masked_template": "What are the names and ids of the <mask> that are <mask> at most <mask>",
                "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) <= 1",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the student ID and middle name for all the students with at most two enrollments.",
                "masked_template": "Find the <mask> ID and <mask> name for all the <mask> with at most two <mask>",
                "query": "SELECT T1.student_id , T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) <= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at most once.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at most <mask>",
                "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) <= 1",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the the customer details and id for the customers who had more than one policy.",
                "masked_template": "Find the the <mask> and id for the <mask> who had more than one <mask>",
                "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "insurance_policies"
            },
            {
                "question": "what are name and phone number of patients who had more than one appointment?",
                "masked_template": "what are name and <mask> number of <mask> who had more than one <mask>",
                "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "hospital_1"
            },
            {
                "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
                "masked_template": "Which <mask> more than one <mask> me the name and <mask> number of <mask>",
                "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the name and partition id for users who tweeted less than twice.",
                "masked_template": "Find the name and <mask> id for <mask> who <mask> than <mask>",
                "query": "SELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count( * ) < 2",
                "ted": 0.027777777777777776,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "twitter_1"
            },
            {
                "question": "Show the name and location of track with 1 race.",
                "masked_template": "Show the name and <mask> of <mask> with 1 <mask>",
                "query": "SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count( * ) = 1",
                "ted": 0.027777777777777776,
                "db_id": "race_track"
            },
            {
                "question": "What are the names and locations of tracks that have had exactly 1 race?",
                "masked_template": "What are the names and <mask> of <mask> that have had <mask> 1 <mask>",
                "query": "SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count( * ) = 1",
                "ted": 0.027777777777777776,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "masked_template": "What are the ids and names of the web <mask> that are <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "browser_web"
            },
            {
                "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
                "masked_template": "<mask> show the <mask> names and ids of <mask> who <mask> at least 10 <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.027777777777777776,
                "db_id": "chinook_1"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the first and last names of all customers with more than 2 payments?",
                "masked_template": "What are the <mask> and <mask> names of all <mask> with more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "driving_school"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.027777777777777776,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the id and details of the customers who have at least 3 events?",
                "masked_template": "What are the id and <mask> of the <mask> who have at least 3 <mask>",
                "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 3",
                "ted": 0.027777777777777776,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "railway"
            },
            {
                "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
                "masked_template": "What is the cmi <mask> id that is <mask> to at least one <mask> tax <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count( * ) >= 1",
                "ted": 0.027777777777777776,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
                "masked_template": "What are the ids and names of the <mask> that can <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
                "masked_template": "For <mask> id, what are the names of the <mask> that can <mask> with more than one <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
                "masked_template": "What is the id and <mask> name of the <mask> can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.027777777777777776,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
                "masked_template": "What are the ids and <mask> names of the <mask> that can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.027777777777777776,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the order id and order details for the order more than two invoices.",
                "masked_template": "What is the order id and order <mask> for the order more than two <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and names of accounts with 4 or more transactions?",
                "masked_template": "What are the ids and names of <mask> with 4 or more <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show the account id and name with at least 4 transactions.",
                "masked_template": "Show the <mask> id and name with at least 4 <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            }
        ],
        "best_hyp": "What are the ids and names of courses with 3 or more sections?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names and ids of the courses that have at most three sections?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count( * ) ASC LIMIT 1",
        "proc_query": "( <col> transcript date </col> of <tab> transcripts </tab> ) , ( <col> transcript id </col> of <tab> transcript contents </tab> ) that belongs to ( ( <tab> transcript contents </tab> ) , and ( ( <tab> transcripts </tab> ) satisfied that ( ( <col> transcript id </col> of <tab> transcript contents </tab> ) equal to ( <col> transcript id </col> of <tab> transcripts </tab> ) ) ) ) , grouped by ( <col> transcript id </col> of <tab> transcript contents </tab> ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the date and id of the most recent transcript?",
            "What are the dates and ids of the transcripts with the greatest number of corresponding contents?",
            "What are the dates and ids of the most recent transcript?",
            "Show the date and id of the most recent transcript.",
            "what is the name and id of the transcript whose id has least number of copies?",
            "Find the name and id of the date of the transcript with the least number of copies.",
            "What is the date and id of the transcript that has been accessed the most times?",
            "Which transcript is used in the most number of times? List the transcript date and id.",
            "Find the date and id of the transcript that has been accessed the most number of times.",
            "What are the dates and ids of the 3 transcripts that are accessed the most often?",
            "What is the date and id of the transcript that has been accessed the most times?",
            "Find the date and id of the transcript that is accessed the most number of times.",
            "What is the date and id corresponding to the transcript with the greatest number of records?",
            "What is the date and name of the transcript that is used to fly the most planes?",
            "What are the date and id of the transcript that has been accessed the most times?",
            "What are the date and id of the transcript that is accessed the most often?",
            "Tell me the the date and id of the transcript that has been accessed the most times.",
            "What is the date and id for the transcript with most number of copies?",
            "Find the date and id of the transcript with the most corresponding id.",
            "What are the id and the date of creation of the transcript that contains the most number of records?",
            "what is the date and name of the transcript that has been accessed the most number of times?",
            "What are the name and id of the transcript that has been accessed the fewest times?",
            "Find the id and date of the transcript that has been accessed the most number of times.",
            "What is the name of the transcript that is accessed by most of times?",
            "What are the dates and ids of the transcripts that are accessed the top 3 number of times?",
            "What is the date and id of the transcript which has the most corresponding contents?",
            "What is the date and id of the transcript that has been accessed most number of times?",
            "How many times has the transcript with the most corresponding id been accessed?",
            "Find the ids and names of the 3 transcripts that have the most number of corresponding contents.",
            "Find the id and date of the transcript that has been accessed the most times.",
            "Which transcript dates correspond to the oldest average? Tell me the name and id of the transcript."
        ],
        "templates": [
            "",
            {
                "question": "What are the name and code of the location with the smallest number of documents?",
                "masked_template": "What are the name and <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the code and description of the least frequent detention type ?",
                "masked_template": "What are the <mask> and <mask> of the least <mask> ?",
                "query": "SELECT T1.detention_type_code , T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Show the location name and code with the least documents.",
                "masked_template": "Show the <mask> name and <mask> with the least <mask>",
                "query": "SELECT T2.location_name , T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "what is the name and position of the head whose department has least number of employees?",
                "masked_template": "what is the name and <mask> of the <mask> whose <mask> has least number of <mask>",
                "query": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count( departmentID ) LIMIT 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the name and position of the head of the department with the least employees.",
                "masked_template": "Find the name and <mask> of the <mask> of the <mask> with the least <mask>",
                "query": "SELECT T2.name , T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY count( departmentID ) LIMIT 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What is the first and last name of the student who played the most sports?",
                "masked_template": "What is the <mask> and <mask> name of the <mask> who <mask> the most <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "game_1"
            },
            {
                "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
                "masked_template": "Which <mask> is <mask> in <mask> the most number of <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Find the name and hours of project that has the most number of scientists.",
                "masked_template": "Find the name and <mask> of <mask> that has the most number of <mask>",
                "query": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "scientist_1"
            },
            {
                "question": "What are the full names of the 3 instructors who teach the most courses?",
                "masked_template": "What are the <mask> names of the 3 <mask> who <mask> the most <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.027777777777777776,
                "db_id": "college_3"
            },
            {
                "question": "What is the full name of the employee who has the most customers?",
                "masked_template": "What is the <mask> name of the <mask> who has the most <mask>",
                "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "store_1"
            },
            {
                "question": "Find the full name of employee who supported the most number of customers.",
                "masked_template": "Find the <mask> name of <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "store_1"
            },
            {
                "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
                "masked_template": "What is the <mask> number and <mask> to the <mask> with the <mask> number of <mask>",
                "query": "SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
                "masked_template": "What is the <mask> and name of the <mask> that is <mask> to fly the most <mask>",
                "query": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "flight_1"
            },
            {
                "question": "What are the first and last name of the faculty who has the most students?",
                "masked_template": "What are the <mask> and <mask> name of the <mask> who has the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "activity_1"
            },
            {
                "question": "What are the student ID and login name of the student who are enrolled in the most courses?",
                "masked_template": "What are the <mask> ID and <mask> name of the <mask> who are <mask> in the most <mask>",
                "query": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "Give me the the first and last name of the faculty who advises the most students.",
                "masked_template": "<mask> me the the <mask> and <mask> name of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "activity_1"
            },
            {
                "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
                "masked_template": "What is the <mask> number and <mask> for the <mask> with most number of <mask>",
                "query": "SELECT T2.invoice_number , T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the student ID and login name of the student with the most course enrollments",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
                "masked_template": "What are the id and the <mask> of <mask> of the <mask> that <mask> the most <mask> of <mask>",
                "query": "SELECT T1.booking_id , T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "products_for_hire"
            },
            {
                "question": "what is the salary and name of the employee who has the most number of aircraft certificates?",
                "masked_template": "what is the <mask> and name of the <mask> who has the most number of <mask>",
                "query": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "flight_1"
            },
            {
                "question": "What are the name and id of the team offering the lowest average salary?",
                "masked_template": "What are the name and id of the <mask> the <mask> average <mask>",
                "query": "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg( T2.salary ) ASC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the id and first name of the student that has the most number of assessment notes?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most number of <mask>",
                "query": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What is the name of the movie that is rated by most of times?",
                "masked_template": "What is the name of the <mask> that is <mask> by most of <mask>",
                "query": "SELECT T2.title , T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "movie_1"
            },
            {
                "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
                "masked_template": "What are the <mask> and <mask> names of the <mask> who <mask> the top 3 number of <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.027777777777777776,
                "db_id": "college_3"
            },
            {
                "question": "What is the name and hours for the project which has the most scientists assigned to it?",
                "masked_template": "What is the name and <mask> for the <mask> which has the most <mask> to it?",
                "query": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "scientist_1"
            },
            {
                "question": "What is the first name and last name of the student who have most number of sports?",
                "masked_template": "What is the <mask> name and <mask> name of the <mask> who have most number of <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "game_1"
            },
            {
                "question": "How many gold medals has the club with the most coaches won?",
                "masked_template": "How many <mask> has the <mask> with the most <mask>",
                "query": "SELECT T1.club_id , T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "riding_club"
            },
            {
                "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
                "masked_template": "Find the ids and <mask> names of the 3 <mask> that have the most number of <mask>",
                "query": "SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.027777777777777776,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the id and last name of the student that has the most behavior incidents?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most <mask>",
                "query": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Which team offers the lowest average salary? Give me the name and id of the team.",
                "masked_template": "Which <mask> the <mask> average <mask> me the name and id of the <mask>",
                "query": "SELECT T1.name , T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY avg( T2.salary ) ASC LIMIT 1",
                "ted": 0.027777777777777776,
                "db_id": "baseball_1"
            }
        ],
        "best_hyp": "What is the date and name of the transcript that is used to fly the most planes?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the date and id of the most recent transcript?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> grade </col> ) that belongs to ( <tab> high schooler </tab> ) , grouped by ( <col> grade </col> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the grade of the youngest high schooler?",
            "Find the grade that is the most common in all the students. Tell me its grade.",
            "Which grade is taught most frequently?",
            "Which grade has most number of students?",
            "List the grade taught by the most students.",
            "What is the id of the grade with the most students?",
            "Which grade offers the most students?",
            "Find the grade that is taught most frequently.",
            "What is the grade taught by the most students?",
            "What are the grades which the most students are in?",
            "Show the top 3 most common grades of students in high school.",
            "What is the grade that is most common in high school students?",
            "Show the grade that have the most students.",
            "Show the most common grade of students in high school.",
            "List the name of grade that has the most number of students.",
            "Find the grade that has the most students.",
            "Show the grade with the most number of students.",
            "Show the most common grade of the students.",
            "List the grade shared by the greatest number of students.",
            "What is the most common grade among high school students?",
            "List the most common grade of students.",
            "What is the grade of the youngest students?",
            "What is the name of teh grade that teaches the most students?",
            "Find the names of the top 3 grades that the youngest students are in.",
            "Return the grade for which there are the fewest students.",
            "Which grade has the most students?",
            "What is the name of the grade with the fewest students?",
            "What is the grade of the students with the most grades?",
            "What is the grade of the youngest high schooler?",
            "Return the grade of the students that is most common.",
            "Find the grade of most of students are in."
        ],
        "templates": [
            "",
            {
                "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
                "masked_template": "Find the <mask> that is <mask> the most <mask> in all the <mask> me its <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Which allergy type is most common?",
                "masked_template": "Which <mask> is most <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Which allergy type has most number of allergies?",
                "masked_template": "Which <mask> has most number of <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "List the industry shared by the most companies.",
                "masked_template": "List the <mask> by the most <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the id of the event with the most participants?",
                "masked_template": "What is the id of the <mask> with the most <mask>",
                "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Which people severed as governor most frequently?",
                "masked_template": "Which <mask> as <mask> most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the payment method that is used most frequently.",
                "masked_template": "Find the <mask> that is <mask> most <mask>",
                "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customer_deliveries"
            },
            {
                "question": "What is the payment method code used by the most orders?",
                "masked_template": "What is the <mask> by the most <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the three colleges from which the most players are from?",
                "masked_template": "What are the <mask> which the most <mask> are <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the top 3 most common colleges of players in match seasons.",
                "masked_template": "Show the top 3 most <mask> of <mask> in <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "What is the position that is most common among players in match seasons?",
                "masked_template": "What is the <mask> that is most <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the people that have been governor the most times.",
                "masked_template": "Show the <mask> that have <mask> the most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the most common position of players in match seasons.",
                "masked_template": "Show the most <mask> of <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "List the name of film studio that have the most number of films.",
                "masked_template": "List the name of <mask> that have the most number of <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the country that has the most stadiums.",
                "masked_template": "Find the <mask> that has the most <mask>",
                "query": "SELECT country FROM stadium GROUP BY country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Show the home city with the most number of drivers.",
                "masked_template": "Show the <mask> with the most number of <mask>",
                "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "Show the most frequently used carrier of the phones.",
                "masked_template": "Show the most <mask> of the <mask>",
                "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "List the software platform shared by the greatest number of devices.",
                "masked_template": "List the <mask> by the <mask> number of <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What is the most common participant type?",
                "masked_template": "What is the most <mask>",
                "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "List the most common type of competition.",
                "masked_template": "List the most <mask> of <mask>",
                "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What instrument is used the most?",
                "masked_template": "What <mask> is <mask> the <mask>",
                "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What is the name of teh studio that created the most films?",
                "masked_template": "What is the name of teh <mask> that <mask> the most <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
                "masked_template": "Find the names of the top 3 <mask> that <mask> the <mask> of <mask>",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Return the rank for which there are the fewest captains.",
                "masked_template": "Return the <mask> for which there are the <mask>",
                "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Which location has the most corresponding counties?",
                "masked_template": "Which <mask> has the most <mask>",
                "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What is the name of the deparment with the highest enrollment?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the code of the city with the most students?",
                "masked_template": "What is the <mask> of the <mask> with the most <mask>",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the largest major?",
                "masked_template": "What is the <mask>",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Return the code of the document type that is most common.",
                "masked_template": "Return the <mask> of the <mask> that is most <mask>",
                "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Find the code of city where most of students are living in.",
                "masked_template": "Find the <mask> of <mask> most of <mask> are <mask> in.",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            }
        ],
        "best_hyp": "Which grade has most number of students?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the grade of the youngest high schooler?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ), and intersect with ( ( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> likes </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> liked id </col> of <tab> likes </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the students who are friends with some friends and are liked by some friends?",
            "What are the names of friends who are liked by some students and some students?",
            "Which students have at least one friend but no friends?",
            "Show all high schooler names with at least one friend in but no friend in."
        ],
        "templates": [
            "",
            {
                "question": "What are the line 1 of addresses shared by some students and some teachers?",
                "masked_template": "What are the <mask> 1 of <mask> by <mask> and <mask>",
                "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Which cities have at least one customer but no performer?",
                "masked_template": "Which <mask> have at least one <mask> but no <mask>",
                "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID",
                "ted": 0.023809523809523808,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show all cities where at least one customer lives in but no performer lives in.",
                "masked_template": "Show all <mask> at least one <mask> in but no <mask> in.",
                "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID",
                "ted": 0.023809523809523808,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "Which students have at least one friend but no friends?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the students who are friends with some friends and are liked by some friends?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count( * ) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> student id </col> of <tab> students </tab> ) , ( <col> first name </col> of <tab> students </tab> ) , ( <col> middle name </col> of <tab> students </tab> ) , ( <col> last name </col> of <tab> students </tab> ) , ( the number of ( all items ) ) , ( <col> student id </col> of <tab> students </tab> ) that belongs to ( ( <tab> students </tab> ) , and ( ( <tab> student enrolment </tab> ) satisfied that ( ( <col> student id </col> of <tab> students </tab> ) equal to ( <col> student id </col> of <tab> student enrolment </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> students </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id, middle name, and id of the student who is enrolled in the largest number of courses?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What is the id, middle name, and id of the student who is enrolled in the largest number of courses?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id, middle name, and id of the student who is enrolled in the largest number of courses?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT( * ) DESC LIMIT 1",
        "proc_query": "( <col> hometown </col> ) that belongs to ( <tab> teacher </tab> ) , grouped by ( <col> hometown </col> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "Which hometown has the most teachers?",
            "Find the hometown that is the most common in all the teachers. Tell me its name.",
            "Which hometown is most common among teachers?",
            "Which hometown has most number of teachers?",
            "List the hometown shared by the most teachers.",
            "What is the id of the hometown with the most teachers?",
            "Which hometown has the most teachers?",
            "Find the hometown that is shared by most teachers.",
            "What is the hometown shared by the most teachers?",
            "What are the hometowns which the most teachers are from?",
            "Show the top 3 most common hometowns of teachers in total",
            "What is the hometown that is most common among teachers?",
            "Show the hometowns that have the most teachers.",
            "Show the most common hometown of teachers in our record.",
            "List the name of hometown that have the most number of teachers.",
            "Find the hometown that has the most teachers.",
            "Show the hometown with the most number of teachers.",
            "Show the most common hometown of teachers.",
            "List the hometown shared by the greatest number of teachers.",
            "What is the most common hometown of teachers?",
            "List the most common hometown of teachers.",
            "What is the hometown of the greatest number of teachers?",
            "What is the name of teh hometown that has the most teachers?",
            "Find the names of the top 3 hometowns that have the greatest number of teachers.",
            "Return the hometown for which there are the fewest teachers.",
            "Which hometown has the most teachers?",
            "What is the name of the hometown with the fewest teachers?",
            "What is the hometown of the teacher with the most teachers?",
            "What is the hometown of the most teachers?",
            "Return the hometown of the teacher that is most common.",
            "Find the hometown of teachers most of them are from."
        ],
        "templates": [
            "",
            {
                "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
                "masked_template": "Find the <mask> that is <mask> the most <mask> in all the <mask> me its <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Which allergy type is most common?",
                "masked_template": "Which <mask> is most <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Which allergy type has most number of allergies?",
                "masked_template": "Which <mask> has most number of <mask>",
                "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "List the industry shared by the most companies.",
                "masked_template": "List the <mask> by the most <mask>",
                "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the id of the event with the most participants?",
                "masked_template": "What is the id of the <mask> with the most <mask>",
                "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Which people severed as governor most frequently?",
                "masked_template": "Which <mask> as <mask> most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the payment method that is used most frequently.",
                "masked_template": "Find the <mask> that is <mask> most <mask>",
                "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customer_deliveries"
            },
            {
                "question": "What is the payment method code used by the most orders?",
                "masked_template": "What is the <mask> by the most <mask>",
                "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the three colleges from which the most players are from?",
                "masked_template": "What are the <mask> which the most <mask> are <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the top 3 most common colleges of players in match seasons.",
                "masked_template": "Show the top 3 most <mask> of <mask> in <mask>",
                "query": "SELECT College FROM match_season GROUP BY College ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "What is the position that is most common among players in match seasons?",
                "masked_template": "What is the <mask> that is most <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the people that have been governor the most times.",
                "masked_template": "Show the <mask> that have <mask> the most <mask>",
                "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the most common position of players in match seasons.",
                "masked_template": "Show the most <mask> of <mask> in <mask>",
                "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "List the name of film studio that have the most number of films.",
                "masked_template": "List the name of <mask> that have the most number of <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the country that has the most stadiums.",
                "masked_template": "Find the <mask> that has the most <mask>",
                "query": "SELECT country FROM stadium GROUP BY country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Show the home city with the most number of drivers.",
                "masked_template": "Show the <mask> with the most number of <mask>",
                "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "Show the most frequently used carrier of the phones.",
                "masked_template": "Show the most <mask> of the <mask>",
                "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "List the software platform shared by the greatest number of devices.",
                "masked_template": "List the <mask> by the <mask> number of <mask>",
                "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "What is the most common participant type?",
                "masked_template": "What is the most <mask>",
                "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "List the most common type of competition.",
                "masked_template": "List the most <mask> of <mask>",
                "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What instrument is used the most?",
                "masked_template": "What <mask> is <mask> the <mask>",
                "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What is the name of teh studio that created the most films?",
                "masked_template": "What is the name of teh <mask> that <mask> the most <mask>",
                "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
                "masked_template": "Find the names of the top 3 <mask> that <mask> the <mask> of <mask>",
                "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Return the rank for which there are the fewest captains.",
                "masked_template": "Return the <mask> for which there are the <mask>",
                "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Which location has the most corresponding counties?",
                "masked_template": "Which <mask> has the most <mask>",
                "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What is the name of the deparment with the highest enrollment?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the code of the city with the most students?",
                "masked_template": "What is the <mask> of the <mask> with the most <mask>",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the largest major?",
                "masked_template": "What is the <mask>",
                "query": "SELECT major FROM Student GROUP BY major ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Return the code of the document type that is most common.",
                "masked_template": "Return the <mask> of the <mask> that is most <mask>",
                "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Find the code of city where most of students are living in.",
                "masked_template": "Find the <mask> of <mask> most of <mask> are <mask> in.",
                "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            }
        ],
        "best_hyp": "Which hometown has most number of teachers?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Which hometown has the most teachers?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 6 GROUP BY T1.student_id HAVING count( * ) >= 3",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , that have ( ( <col> grade </col> of <tab> high schooler </tab> ) greater than ( <val> 6 </val> ) ) , grouped by ( <col> student id </col> of <tab> friend </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 3 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "Find the name of students who are in grade 6 or above and have at least 3 friends.",
            "Find the names of students that have more than one friend with grade 6 or above.",
            "Show the names of students who have at least two friends with grade 6 or above",
            "Show the names and ages of students with at least two friends in third grade.",
            "Find the name and grade of students for all students who have at least one friend of grade 3 or above.",
            "What is the name and grade of each student who has a friend with a grade higher than 6?",
            "Show the names of students who use third grade and have more than 2 friends."
        ],
        "templates": [
            "",
            {
                "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
                "masked_template": "Find the names of <mask> that have more than one <mask> with <mask>",
                "query": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING count( * ) > 1",
                "ted": 0.025,
                "db_id": "school_finance"
            },
            {
                "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
                "masked_template": "Show the names of <mask> who have at least 2 <mask> with <mask>",
                "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.07142857142857142,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
                "masked_template": "Show the names and <mask> of <mask> with at least two <mask>",
                "query": "SELECT T1.name , T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING count( * ) >= 2",
                "ted": 0.09090909090909091,
                "db_id": "protein_institute"
            },
            {
                "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
                "masked_template": "Find the name and <mask> of <mask> for all <mask> who have <mask> at least one <mask> of <mask>",
                "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count( * ) >= 1",
                "ted": 0.09090909090909091,
                "db_id": "music_1"
            },
            {
                "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
                "masked_template": "What is the name and <mask> of <mask> for each <mask> who has <mask> a <mask> with a <mask> than <mask>",
                "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING count( * ) >= 1",
                "ted": 0.09090909090909091,
                "db_id": "music_1"
            },
            {
                "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
                "masked_template": "Show the names of <mask> who use <mask> and have more than 2 <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.09523809523809523,
                "db_id": "customers_and_products_contacts"
            }
        ],
        "best_hyp": "Find the names of students that have more than one friend with grade 6 or above.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Find the name of students who are in grade 6 or above and have at least 3 friends.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT count( * ) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Tiffany'",
        "proc_query": "( the number of ( all items ) ) that belongs to ( ( <tab> likes </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> likes </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , that have ( ( <col> name </col> of <tab> high schooler </tab> ) equal to ( <val> Tiffany </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many likes does the girl named Tiffany have?",
            "How many likes are there for the student named \"Tiffany\"?",
            "How many likes are there for Tiffany?",
            "How many likes does student Tiffany have?",
            "Find the number of likes associated with student named Tiffany.",
            "Count the number of likes that the girl with the name Tiffany has.",
            "Find the number of likes of student named \"Tiffany\"",
            "How many likes does the girl named Tiffany have?",
            "Count the number of likes of the girl named Tiffany.",
            "How many likes does the girl with name Tiffany have?",
            "Find the number of likes of the girl named Tiffany.",
            "How many likes did the girl with the name Tiffany have?",
            "How many likes are there for the girl named Tiffany?",
            "How many likes are there for students whose name is Tiffany?",
            "How many likes does the girl whose name is Tiffany have?",
            "How many likes does the girl named Tiffany have?",
            "How many likes has Tiffany had?",
            "How many likes are there for the student named Tiffany?",
            "How many likes does the girl named Tiffany have?",
            "How many likes does Tiffany have?",
            "What are the total number of likes of Tiffany?",
            "What is the number of likes that the student named Tiffany has?",
            "Find the number of likes that have Tiffany as a student.",
            "How many likes does Tiffany have?",
            "How many likes are there for Tiffany?",
            "Find the number of likes shared by Tiffany",
            "Find the number of likes among students whose name is Tiffany.",
            "How many likes does Tiffany have?",
            "How many likes does the girl named Tiffany have?",
            "What is the number of likes of the student named Tiffany?",
            "How many likes does student with name 337 have?"
        ],
        "templates": [
            "",
            {
                "question": "How many vocal types are used in the song \"Le Pop\"?",
                "masked_template": "How many <mask> are <mask> in the <mask> \"Le <mask>",
                "query": "SELECT count( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "How many leagues are there in England?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = 'England'",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "How many friends does Dan have?",
                "masked_template": "How many <mask> Dan <mask>",
                "query": "SELECT count( T2.friend ) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan'",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "Find the number of routes with destination airports in Italy.",
                "masked_template": "Find the number of <mask> with <mask> in <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Count the number of financial transactions that the account with the name 337 has.",
                "masked_template": "Count the number of <mask> that the <mask> with the name 337 <mask>",
                "query": "SELECT count( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of vocal types used in song \"Le Pop\"",
                "masked_template": "Find the number of <mask> in <mask> \"Le <mask>",
                "query": "SELECT count( * ) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = 'Le Pop'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "How many characteristics does the product named \"sesame\" have?",
                "masked_template": "How many <mask> the <mask> named <mask>",
                "query": "SELECT count( * ) FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'sesame'",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Count the number of characteristics the product 'sesame' has.",
                "masked_template": "Count the number of <mask> the <mask>",
                "query": "SELECT count( * ) FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'sesame'",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many lesson does customer with first name Ray took?",
                "masked_template": "How many <mask> with <mask> name Ray <mask>",
                "query": "SELECT count( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Find the number of professors in accounting department.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many lessons did the customer with the first name Ray take?",
                "masked_template": "How many <mask> did the <mask> with the <mask> name Ray <mask>",
                "query": "SELECT count( * ) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Ray'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many professors are in the accounting dept?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many classes are professor whose last name is Graztevski has?",
                "masked_template": "How many <mask> are <mask> whose <mask> name is <mask>",
                "query": "SELECT count( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many classes does the professor whose last name is Graztevski teach?",
                "masked_template": "How many <mask> the <mask> whose <mask> name is <mask>",
                "query": "SELECT count( * ) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many department stores does the store chain South have?",
                "masked_template": "How many <mask> the <mask>",
                "query": "SELECT count( * ) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = 'South'",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "How many albums has Billy Cobam released?",
                "masked_template": "How many <mask> has <mask>",
                "query": "SELECT count( * ) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = 'Billy Cobham'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "How many courses are offered by the Computer Info. Systems department?",
                "masked_template": "How many <mask> are <mask> by the <mask>",
                "query": "SELECT count( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many courses does the department of Computer Information Systmes offer?",
                "masked_template": "How many <mask> the <mask> of <mask>",
                "query": "SELECT count( * ) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = 'Computer Info. Systems'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many students enrolled in class ACCT-211?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the total number of students enrolled in ACCT-211?",
                "masked_template": "What are the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the number of routes that end at John F Kennedy International Airport?",
                "masked_template": "What is the number of <mask> that end at <mask> F <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the number of routes that have destination John F Kennedy International Airport.",
                "masked_template": "Find the number of <mask> that have <mask> F <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many students attend course English?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many students are attending English courses?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'English'",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the number of routes operated by American Airlines.",
                "masked_template": "Find the number of <mask> by <mask>",
                "query": "SELECT count( * ) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the number of routes whose destination airports are in Canada.",
                "masked_template": "Find the number of <mask> whose <mask> are in <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many routes end in a Canadian airport?",
                "masked_template": "How many <mask> end in a <mask>",
                "query": "SELECT count( * ) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many documents were shipped by USPS?",
                "masked_template": "How many <mask> by <mask>",
                "query": "SELECT count( * ) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = 'USPS'",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "What is the number of routes whose destinations are Italian airports?",
                "masked_template": "What is the number of <mask> whose <mask> are <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many transaction does account with name 337 have?",
                "masked_template": "How many <mask> with name 337 <mask>",
                "query": "SELECT count( * ) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = '337'",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            }
        ],
        "best_hyp": "Count the number of likes that the girl with the name Tiffany has.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many likes does the girl named Tiffany have?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "proc_query": "( <col> section name </col> ) that belongs to ( <tab> sections </tab> ) , ordered by ( ( <col> section name </col> ) in descending order )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all the sections in descending alphabetical order?",
            "List all section names by their names starting from old to young",
            "Return the names for sections ordered by age.",
            "Show the name of sections in descending order of name.",
            "What are the names of all the sections in the alphabetical order?",
            "List names of all sections in the database ordered by all section names in descending order.",
            "What are the names of all the sections in descending alphabetical order?",
            "Find the names of all sections in the descending order.",
            "What are the names of all the sections ordered in descending alphabetical order?",
            "What are the names of sections in descending order of name?",
            "List all section names in descending order.",
            "What are the names of the sections ordered by name?",
            "List the names of sections in descending order of name.",
            "List the name of sections in descending alphabetical order.",
            "What are the names of all the sections in the descending order of section name?",
            "List names of all sections in the order of their names.",
            "What are the names of all sections in descending alphabetical order?",
            "Find all section names in descending order.",
            "What are the names of all the sections in descending alphabetical order?",
            "List the names of all sections in descending alphabetical order.",
            "Give me a list of all the section names ordered by the name in descending order.",
            "Show the names of sections in descending order of their names.",
            "Show the names of sections in descending order of name.",
            "What are the names of sections ordered by name?",
            "What are the names of the sections ordered by name?",
            "List all the section names by the most common name corresponding to the section.",
            "List the names of sections in descending alphabetical order.",
            "List all section names ordered by their names in descending order.",
            "List the section names in descending order of the name.",
            "Find the name of sections in the descending order of name.",
            "What are the names of sections in descending order of name?"
        ],
        "templates": [
            "",
            {
                "question": "Sort all captain names by their ages from old to young.",
                "masked_template": "<mask> all <mask> names by their <mask> old to <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Return the characters for actors, ordered by age descending.",
                "masked_template": "Return the <mask> for <mask> ordered by age <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show the name of drivers in descending order of age.",
                "masked_template": "Show the name of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM driver ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
                "masked_template": "What are the names of all the <mask> in the <mask> by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
                "masked_template": "List names of all <mask> in the <mask> ordered by all <mask> in <mask>",
                "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "What are the names of everybody sorted by age in descending order?",
                "masked_template": "What are the names of <mask> by age in <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "Find the names of all person sorted in the descending order using age.",
                "masked_template": "Find the names of all <mask> in the <mask> order <mask>",
                "query": "SELECT name FROM Person ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "What are the names of all the clubs ordered in descending alphabetical order?",
                "masked_template": "What are the names of all the <mask> ordered in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the characters of actors in descending order of age?",
                "masked_template": "What are the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Character FROM actor ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "List all club names in descending alphabetical order.",
                "masked_template": "List all <mask> names in <mask>",
                "query": "SELECT name FROM club ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What are the names of the counties of public safety, ordered by population descending?",
                "masked_template": "What are the names of the <mask> of <mask> ordered by <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the names of counties in descending order of population.",
                "masked_template": "List the names of <mask> in <mask> order of <mask>",
                "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List the name of enzymes in descending lexicographical order.",
                "masked_template": "List the name of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
                "masked_template": "What are the <mask> of all the <mask> in the <mask> order of <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "List venues of all matches in the order of their dates starting from the most recent one.",
                "masked_template": "List <mask> of all <mask> in the order of their <mask> the most <mask>",
                "query": "SELECT venue FROM MATCH ORDER BY date DESC",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What are the names of captains, sorted by age descending?",
                "masked_template": "What are the names of <mask> by age <mask>",
                "query": "SELECT name FROM captain ORDER BY age DESC",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
                "masked_template": "Find all <mask> and <mask> by <mask> in <mask>",
                "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What are the names of enzymes in descending order?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT name FROM enzyme ORDER BY name DESC",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Sort the names of all counties in descending alphabetical order.",
                "masked_template": "<mask> the names of all <mask> in <mask>",
                "query": "SELECT County_name FROM county ORDER BY County_name DESC",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
                "masked_template": "<mask> me a list of all the <mask> names <mask> by the <mask> in <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Show the working years of managers in descending order of their level.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of their <mask>",
                "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "Show the case burden of counties in descending order of population.",
                "masked_template": "Show the <mask> of <mask> in <mask> order of <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the case burdens of counties, ordered descending by population?",
                "masked_template": "What are the <mask> of <mask> ordered <mask> by <mask>",
                "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the names of the wrestlers, ordered descending by days held?",
                "masked_template": "What are the names of the <mask> ordered <mask> by <mask>",
                "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "List all the event names by year from the most recent to the oldest.",
                "masked_template": "List all the <mask> names by <mask> the most <mask> to the <mask>",
                "query": "SELECT name FROM event ORDER BY YEAR DESC",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "List the votes of elections in descending order.",
                "masked_template": "List the <mask> of <mask> in <mask>",
                "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "List all channel names ordered by their rating in percent from big to small.",
                "masked_template": "List all <mask> names ordered by their <mask> in <mask> big to <mask>",
                "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Sort the company names in descending order of the company's market value.",
                "masked_template": "<mask> the <mask> names in <mask> order of the <mask>",
                "query": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the first name of students in the descending order of age.",
                "masked_template": "Find the <mask> name of <mask> in the <mask> order of <mask>",
                "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the names of buildings sorted in descending order of building height?",
                "masked_template": "What are the names of <mask> in <mask> order of <mask>",
                "query": "SELECT name FROM buildings ORDER BY Height DESC",
                "ted": 0.0,
                "db_id": "company_office"
            }
        ],
        "best_hyp": "What are the names of all the sections ordered in descending alphabetical order?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all the sections in descending alphabetical order?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "proc_query": "( <col> transcript date </col> ) that belongs to ( <tab> transcripts </tab> ) , ordered by ( ( <col> transcript date </col> ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the date of the most recent transcript?",
            "Find the name of the date that was used for the first transcript.",
            "Show the dates of the most recent transcript.",
            "What is the date of the first transcript with the greatest number of corresponding dates?",
            "What is the date of the first transcript?",
            "What is the name of the date with the most recent transcript?",
            "What is the date of the first transcript?",
            "Find the date of the first transcript with the earliest date.",
            "What is the name of the date that was used in the most recent transcript?",
            "Which date has the oldest transcript? Tell me the name of the date.",
            "Show the date of the first transcript.",
            "What is the date of the first transcript?",
            "What is the date of the first transcript?",
            "What are the names of the dates corresponding to the most recent transcripts?",
            "What are the names of the dates corresponding to the most recent transcripts?",
            "What is the date of the most recent transcript?",
            "What is the date of the first transcript?",
            "What is the name of the date with the greatest number of transcripts?",
            "What is the id of the most recent transcript?",
            "Find the id of the order of the most recent transcript date.",
            "What are the names of the dates corresponding to the most recent transcript?",
            "Show the date of the first transcript with the earliest date.",
            "Find the ids of the dates in which the first transcript was made.",
            "What are the ids of the top dates that correspond to the oldest transcripts?",
            "List the date of the first transcript that has been made.",
            "What are the dates of the earliest transcripts?",
            "Which date has the oldest transcript been made?",
            "Return the date in the file that has been accessed the most recently on record.",
            "What is the id of the date that the most recent transcript was made?",
            "What is the date in the transcript with the maximum date on record?",
            "Return the date for the earliest transcript."
        ],
        "templates": [
            "",
            {
                "question": "Find the name of project that continues for the longest time.",
                "masked_template": "Find the name of <mask> that <mask> for the <mask>",
                "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Show the names of the three most recent festivals.",
                "masked_template": "Show the names of the <mask> most <mask>",
                "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "What is the location of the festival with the largest number of audience?",
                "masked_template": "What is the <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "What is the name of the product with the highest price?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "What is the name of the project with the most hours?",
                "masked_template": "What is the name of the <mask> with the most <mask>",
                "query": "SELECT name FROM projects ORDER BY hours DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "What is the stories of highest building?",
                "masked_template": "What is the <mask> of <mask>",
                "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Find the stories of the building with the largest height.",
                "masked_template": "Find the <mask> of the <mask> with the <mask>",
                "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "What is the name of the event that happened in the most recent year?",
                "masked_template": "What is the name of the <mask> that <mask> in the most <mask>",
                "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Which county has the largest population? Give me the name of the county.",
                "masked_template": "Which <mask> has the <mask> me the name of the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the name of the county with the biggest population.",
                "masked_template": "Show the name of the <mask> with the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Who is the instructor with the highest salary?",
                "masked_template": "Who is the <mask> with the <mask>",
                "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Give the name of the highest paid instructor.",
                "masked_template": "<mask> the name of the <mask>",
                "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of schools with the top 3 largest size?",
                "masked_template": "What are the names of <mask> with the top 3 <mask>",
                "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What are the names of the schools with the top 3 largest class sizes?",
                "masked_template": "What are the names of the <mask> with the top 3 <mask>",
                "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the carrier of the most expensive phone?",
                "masked_template": "What is the <mask> of the most <mask>",
                "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "What is the author of the submission with the highest score?",
                "masked_template": "What is the <mask> of the <mask> with the <mask>",
                "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What is the name of the player with the largest number of votes?",
                "masked_template": "What is the name of the <mask> with the <mask> number of <mask>",
                "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "riding_club"
            },
            {
                "question": "What is the id of the most recent order?",
                "masked_template": "What is the id of the most <mask>",
                "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the id of the order made most recently.",
                "masked_template": "Find the id of the order <mask> most <mask>",
                "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "What are the names of the dorm with the largest capacity?",
                "masked_template": "What are the names of the <mask> with the <mask>",
                "query": "SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Show the park of the roller coaster with the highest speed.",
                "masked_template": "Show the <mask> of the <mask> with the <mask>",
                "query": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Give the ids of the three products purchased in the largest amounts.",
                "masked_template": "<mask> the ids of the <mask> in the <mask>",
                "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the ids of the top three products that were purchased in the largest amount?",
                "masked_template": "What are the ids of the top <mask> that <mask> in the <mask>",
                "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "List the school color of the school that has the largest enrollment.",
                "masked_template": "List the <mask> of the <mask> that has the <mask>",
                "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the speeds of the longest roller coaster?",
                "masked_template": "What are the <mask> of the <mask>",
                "query": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "roller_coaster"
            },
            {
                "question": "Which district has the largest population?",
                "masked_template": "Which <mask> has the <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Return the song in the volume that has spent the most weeks on top?",
                "masked_template": "Return the <mask> in the <mask> that has <mask> the most <mask> on <mask>",
                "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "What is the id of the appointment that started most recently?",
                "masked_template": "What is the id of the <mask> that <mask> most <mask>",
                "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What is the song in the volume with the maximum weeks on top?",
                "masked_template": "What is the <mask> in the <mask> with the maximum <mask> on <mask>",
                "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Return the famous release date for the oldest artist.",
                "masked_template": "Return the <mask> for the <mask>",
                "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "music_4"
            }
        ],
        "best_hyp": "What is the id of the most recent transcript?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the date of the most recent transcript?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> friend </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the student who has the most friends?",
            "Find the name of the student who has the greatest number of friends.",
            "Find the most common friend in the school. The most common is the student that had the greatest number of friends.",
            "Which student has the most number of friends?",
            "Which student has the greatest number of friends?",
            "Which student is friends with most people? Tell me the student name.",
            "Return the name of the student who has the most friends.",
            "What are the names of the students who are friends for the most number of years?",
            "What is the name of the student who has the most number of friends?",
            "Which student has the most friends? Tell me the student name.",
            "What is the name of student that has the greatest number of friends?",
            "Return the name of student that has the greatest number of friends.",
            "Which is the name of the student that has the most number of friends?",
            "List the name of the student that has friends named the most number of times.",
            "Find the name of the student that is friends with most people.",
            "What are the names of the students that have the most friends?",
            "What is the name of the student that has the most friends?",
            "Find the name of the student who has the most friends.",
            "What are the names of the students that have the most friends?",
            "What is the name of the student with the least number of friends?",
            "Find the name of the student who has the most friends.",
            "Which student has the most friends?",
            "Return the name of the student that has the greatest number of friends.",
            "Which student has the most friends? Tell me the student name.",
            "Return the name of the student that has the most friends.",
            "Show the name of the student that has the most friends.",
            "Find the top 3 students who have the greatest number of friends.",
            "What is the name of the student that has the most friends?",
            "What is the name of the student that has the most friends?",
            "Which student is involved in by the most friends? Tell me the student name.",
            "Find the name of the student that has the greatest number of friends."
        ],
        "templates": [
            "",
            {
                "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
                "masked_template": "<mask> the <mask> that the <mask> who <mask> the <mask> number of <mask> in.",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
                "masked_template": "Find the most <mask> in the <mask> The most <mask> is the <mask> that had <mask> the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which building does the instructor who teaches the most number of courses live in?",
                "masked_template": "Which <mask> the <mask> who <mask> the most number of <mask> in?",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Which room has the largest number of reservations?",
                "masked_template": "Which <mask> has the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which program is broadcast most frequently? Give me the program name.",
                "masked_template": "Which <mask> is <mask> most <mask> me the <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Return the name of the organization which has the most contact individuals.",
                "masked_template": "Return the name of the <mask> which has the most <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the details of the student who registered for the most number of courses?",
                "masked_template": "What are the <mask> of the <mask> who <mask> for the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What is detail of the student who registered the most number of courses?",
                "masked_template": "What is <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Which customer uses the most policies? Give me the customer name.",
                "masked_template": "Which <mask> the most <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "What is the name of organization that has the greatest number of contact individuals?",
                "masked_template": "What is the name of <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Return the party email that has used party services the greatest number of times.",
                "masked_template": "Return the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which is the email of the party that has used the services the most number of times?",
                "masked_template": "Which is the <mask> of the <mask> that has <mask> the <mask> the most number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
                "masked_template": "List the name of the <mask> that has <mask> named <mask> the most number of <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of the program that is broadcast most frequently.",
                "masked_template": "Find the name of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are the three products that have the most problems?s",
                "masked_template": "What are the <mask> that have the most <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the party form that is most common?",
                "masked_template": "What is the name of the <mask> that is most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Find the name of the most popular party form.",
                "masked_template": "Find the name of the most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of the cameras that have taken picture of the most mountains?",
                "masked_template": "What are the names of the <mask> that have <mask> of the most <mask>",
                "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What is the structure of the document with the least number of accesses?",
                "masked_template": "What is the <mask> of the <mask> with the least number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Find the city that hosted the most events.",
                "masked_template": "Find the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which city has hosted the most events?",
                "masked_template": "Which <mask> has <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Return the structure description of the document that has been accessed the fewest number of times.",
                "masked_template": "Return the <mask> of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Which customer have the most policies? Give me the customer details.",
                "masked_template": "Which <mask> have the most <mask> me the <mask>",
                "query": "SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_details ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Return the name of the document that has the most sections.",
                "masked_template": "Return the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.document_name FROM documents AS T1 JOIN document_sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Show the name of the party that has the most delegates.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the top 3 products which have the largest number of problems?",
                "masked_template": "Find the top 3 <mask> which have the <mask> number of <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the aircraft that has won an award the most?",
                "masked_template": "What is the name of the <mask> that has won an <mask> the <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the name of the course that has the most student enrollment?",
                "masked_template": "What is the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which course is enrolled in by the most students? Give me the course name.",
                "masked_template": "Which <mask> is <mask> in by the most <mask> me the <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name of the activity that has the largest number of student participants.",
                "masked_template": "Find the name of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            }
        ],
        "best_hyp": "What is the name of the student with the least number of friends?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the student who has the most friends?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'PHD' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'PHD'",
        "proc_query": "( distinct ( ( <col> semester id </col> of <tab> student enrolment </tab> ) ) ) that belongs to ( ( <tab> degree programs </tab> ) , and ( ( <tab> student enrolment </tab> ) satisfied that ( ( <col> degree program id </col> of <tab> degree programs </tab> ) equal to ( <col> degree program id </col> of <tab> student enrolment </tab> ) ) ) ) , that have ( ( <col> degree summary name </col> ) equal to ( <val> PHD </val> ) ), and intersect with ( ( distinct ( ( <col> semester id </col> of <tab> student enrolment </tab> ) ) ) that belongs to ( ( <tab> degree programs </tab> ) , and ( ( <tab> student enrolment </tab> ) satisfied that ( ( <col> degree program id </col> of <tab> degree programs </tab> ) equal to ( <col> degree program id </col> of <tab> student enrolment </tab> ) ) ) ) , that have ( ( <col> degree summary name </col> ) equal to ( <val> PHD </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids of the distinct semeses that have both degrees with summary name 'PHD' and degrees with 'D' as their summary names?",
            "Find the name of the distinct semeses that have both degrees with summary name PHD and a degree with summary named PHD.",
            "What is the id of the semeseter which enrolls both the degree with summary name PHD and the student with ID PHD?",
            "Tell me the id of the semeseter that enroll not only the student with the summary name PHD but also the students with the PHD.",
            "What are the names of semesetermes that are offered by both degrees with the summary name of PHD and programs with the name PHD?",
            "Find the name of the semeseter that are enrolled by both a degree with summary name PHD and a program with summary names PHD",
            "List the ids of the distinct semeses that have both degree summary name PHD and student enrollment as well",
            "Which semeses had both degree summary name PHD and student enrollment in both programs?",
            "Find the ids of the semeses that are offered by both degrees with summary name PHD and degrees with summ name PhD",
            "Find the name of semeseter that is enrolled by both PHD and PHD students",
            "Find the names of the students who have enrolled in both \"On PhD\" and \"PHD\" degrees.",
            "Which semeses have both \"On PhD\" and \"PHD\" as their summaries? List the semeseter ids.",
            "Find the id of the students who have enrolled in both \"On PhD\" and \"PHD\" degrees.",
            "Find the semeseter ids that have enrolled both the student with the summary name PHD and the students with the degree summary name D.",
            "Which semeses have both degree summary name PHD and student enrollment",
            "What are the distinct semester ids of the degrees offered by both PHD and PHD?",
            "what are the names of the semeseter that enroll in both PHD and PHD degrees?",
            "What are the names of students who have enrolled in both PHD and PHD degrees?",
            "What are the names of the semeses that have students enrolled in the degrees of PHD and PHD?",
            "Show the names of students who are enrolled in both degree summary name PHD and PHD.",
            "Find the id of students who are enrolled in both degree summary name PHD and PHD.",
            "Which semeses have students with both PHD and PHD degrees enrolled? Tell me the semeseter ids.",
            "Find the ids of the students who enrolled in degrees with summary name PHD and PHD.",
            "Which semeseter ids are enrolled in both degree summary name PHD and PHD as their enrollments? Tell me their ids.",
            "What is the id of the semester that has both degree summary name PHD and student enrollment in both programs?",
            "Find the semester id of the student who is enrolled in two degree programs with summary name PHD and PHD",
            "What are the ids of the courses offered by both PHD and PHD degrees?",
            "Show the ids of distinct semeses with degrees that have summary name both PHD and PHD.",
            "Find the ids of semeses for degrees that have both summary name PHD and student enrollment",
            "What are the ids for the semeses with both degree summary name PHD and student enrollment",
            "Return the names of semeses that have both degrees that have the summary name PHD as well as students who enrolled in the program"
        ],
        "templates": [
            "",
            {
                "question": "Find the name of customers who have loans of both Mortgages and Auto.",
                "masked_template": "Find the name of <mask> who have <mask> of both <mask> and <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'",
                "ted": 0.06060606060606061,
                "db_id": "loan_1"
            },
            {
                "question": "What is the description of the service type which offers both the photo product and the film product?",
                "masked_template": "What is the <mask> of the <mask> which <mask> both the <mask> and the <mask>",
                "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'",
                "ted": 0.06060606060606061,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the description of the service type that offers not only the photo product but also the film product.",
                "masked_template": "<mask> me the <mask> of the <mask> that <mask> not <mask> the <mask> but <mask> the <mask>",
                "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film'",
                "ted": 0.06060606060606061,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?",
                "masked_template": "What are the names of <mask> that are <mask> by both <mask> with the <mask> of <mask> and <mask> with the <mask> of <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id WHERE T2.rank = 'Midshipman' INTERSECT SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id WHERE T2.rank = 'Lieutenant'",
                "ted": 0.06060606060606061,
                "db_id": "ship_1"
            },
            {
                "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
                "masked_template": "Find the name of the <mask> that are <mask> by both a <mask> with <mask> and a <mask> with <mask>",
                "query": "SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id WHERE T2.rank = 'Midshipman' INTERSECT SELECT T1.name FROM ship AS T1 JOIN captain AS T2 ON T1.ship_id = T2.ship_id WHERE T2.rank = 'Lieutenant'",
                "ted": 0.06060606060606061,
                "db_id": "ship_1"
            },
            {
                "question": "List the project details of the project both producing patent and paper as outcomes.",
                "masked_template": "List the <mask> of the <mask> both <mask> and <mask> as <mask>",
                "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent'",
                "ted": 0.06060606060606061,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Which services type had both successful and failure event details?",
                "masked_template": "Which <mask> had both <mask> and <mask>",
                "query": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'",
                "ted": 0.06060606060606061,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
                "masked_template": "Find the <mask> of the <mask> that are <mask> by both <mask> with <mask> and <mask> with <mask>",
                "query": "SELECT T1.pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = 'Provisional' INTERSECT SELECT T1.pixels FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Accreditation_type = 'Full'",
                "ted": 0.06060606060606061,
                "db_id": "phone_1"
            },
            {
                "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
                "masked_template": "Find the name of <mask> that is <mask> by both <mask> and <mask>",
                "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
                "ted": 0.06060606060606061,
                "db_id": "manufactory_1"
            },
            {
                "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
                "masked_template": "Find the names of the <mask> who have order <mask> both \"On <mask> and <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
                "ted": 0.06060606060606061,
                "db_id": "tracking_orders"
            },
            {
                "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.",
                "masked_template": "Which <mask> have both \"On <mask> and <mask> as order <mask> List the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
                "ted": 0.06060606060606061,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
                "masked_template": "Find the id of the <mask> who have order <mask> both \"On <mask> and <mask>",
                "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'On Road' INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = 'Shipped'",
                "ted": 0.06060606060606061,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the committees that have delegates both from from the democratic party and the liberal party.",
                "masked_template": "Find the <mask> that have <mask> both <mask> the <mask> and the <mask>",
                "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic' INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Liberal'",
                "ted": 0.06060606060606061,
                "db_id": "election"
            },
            {
                "question": "Which committees have delegates from both democratic party and liberal party?",
                "masked_template": "Which <mask> have <mask> both <mask> and <mask>",
                "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Democratic' INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = 'Liberal'",
                "ted": 0.06060606060606061,
                "db_id": "election"
            },
            {
                "question": "What are the names of products produced by both Creative Labs and Sony?",
                "masked_template": "What are the names of <mask> by both <mask> and <mask>",
                "query": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'",
                "ted": 0.06060606060606061,
                "db_id": "manufactory_1"
            },
            {
                "question": "what are the names of the channels that broadcast in both morning and night?",
                "masked_template": "what are the names of the <mask> that <mask> in both <mask> and <mask>",
                "query": "SELECT T1.name FROM channel AS T1 JOIN broadcast AS T2 ON T1.channel_id = T2.channel_id WHERE T2.time_of_day = 'Morning' INTERSECT SELECT T1.name FROM channel AS T1 JOIN broadcast AS T2 ON T1.channel_id = T2.channel_id WHERE T2.time_of_day = 'Night'",
                "ted": 0.06060606060606061,
                "db_id": "program_share"
            },
            {
                "question": "What are the names of customers who have taken both Mortgage and Auto loans?",
                "masked_template": "What are the names of <mask> who have <mask> both <mask> and <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto'",
                "ted": 0.06060606060606061,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
                "masked_template": "What are the names of the <mask> that have <mask> in the <mask> of <mask> and <mask>",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid'",
                "ted": 0.06060606060606061,
                "db_id": "soccer_2"
            },
            {
                "question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
                "masked_template": "Show the names of <mask> who <mask> to both <mask> and <mask>",
                "query": "SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton'",
                "ted": 0.06060606060606061,
                "db_id": "school_finance"
            },
            {
                "question": "Find the id of users who are followed by Mary and Susan.",
                "masked_template": "Find the id of <mask> who are <mask> by <mask> and <mask>",
                "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Susan'",
                "ted": 0.06060606060606061,
                "db_id": "twitter_1"
            },
            {
                "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.",
                "masked_template": "Which <mask> have <mask> with both <mask> and <mask> me the <mask>",
                "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'",
                "ted": 0.06060606060606061,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
                "masked_template": "Find the ids of the <mask> who <mask> in <mask> and <mask>",
                "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'",
                "ted": 0.06060606060606061,
                "db_id": "activity_1"
            },
            {
                "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
                "masked_template": "Which <mask> in both <mask> and <mask> as their <mask> me their <mask>",
                "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking'",
                "ted": 0.06060606060606061,
                "db_id": "activity_1"
            },
            {
                "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
                "masked_template": "What is the <mask> name of the <mask> who is <mask> and <mask>",
                "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'",
                "ted": 0.06060606060606061,
                "db_id": "college_1"
            },
            {
                "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
                "masked_template": "Find the <mask> name of the <mask> who is <mask> two <mask> with <mask> and <mask>",
                "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261'",
                "ted": 0.06060606060606061,
                "db_id": "college_1"
            },
            {
                "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
                "masked_template": "What are the <mask> of the <mask> by both <mask> and bad <mask>",
                "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad'",
                "ted": 0.06060606060606061,
                "db_id": "products_for_hire"
            },
            {
                "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"",
                "masked_template": "Show the <mask> numbers of <mask> with <mask> that have <mask> both <mask> and <mask>",
                "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Confirmed' INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = 'Provisional'",
                "ted": 0.06060606060606061,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
                "masked_template": "<mask> the <mask> of <mask> for <mask> that have both <mask> and <mask>",
                "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'",
                "ted": 0.06060606060606061,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
                "masked_template": "What are the <mask> for the <mask> with both <mask> and <mask>",
                "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF'",
                "ted": 0.06060606060606061,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
                "masked_template": "Return the names of <mask> that have <mask> that <mask> the <mask> as <mask> as <mask> who <mask> the <mask>",
                "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Forward' INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = 'Defender'",
                "ted": 0.06060606060606061,
                "db_id": "match_season"
            }
        ],
        "best_hyp": "Find the ids of the students who enrolled in degrees with summary name PHD and PHD.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids of the distinct semeses that have both degrees with summary name 'PHD' and degrees with 'D' as their summary names?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT count( * ) FROM Highschooler WHERE grade = 10 OR grade = 11",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> high schooler </tab> ) , that have ( ( ( <col> grade </col> ) equal to ( <val> 10 </val> ) ) or ( ( <col> grade </col> ) equal to ( <val> 11 </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many students are in grade 10 or 11?",
            "How many students in grade 10 or 11 are in the school?",
            "Find the number of students in grade 10 or 11.",
            "Find the number of students in grade 10 or 11.",
            "Show the number of students in grade 10 or 11.",
            "Show the number of students in grade 10 or 11.",
            "What are the names of the students in grade 10 or 11?",
            "Show the number of students in grade 10 or 11",
            "Show all high schooler names who have a grade either in the 10th or 11th.",
            "How many students are in grade 10 or 11?"
        ],
        "templates": [
            "",
            {
                "question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
                "masked_template": "How many <mask> in <mask> in <mask> is, the <mask> of <mask> is <mask>",
                "query": "SELECT count( * ) FROM postseason WHERE YEAR = 1885 AND ties = 1",
                "ted": 0.041666666666666664,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the number of tied games (the value of \"ties\" is '1') in 1885 postseason.",
                "masked_template": "Find the number of <mask> of <mask> is <mask> in <mask>",
                "query": "SELECT count( * ) FROM postseason WHERE YEAR = 1885 AND ties = 1",
                "ted": 0.041666666666666664,
                "db_id": "baseball_1"
            },
            {
                "question": "Show the names of editors of age either 24 or 25.",
                "masked_template": "Show the names of <mask> of age <mask> 24 or 25.",
                "query": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
                "ted": 0.08333333333333333,
                "db_id": "journal_committee"
            },
            {
                "question": "Show the names of people aged either 35 or 36.",
                "masked_template": "Show the names of <mask> 35 or 36.",
                "query": "SELECT Name FROM people WHERE Age = 35 OR Age = 36",
                "ted": 0.08333333333333333,
                "db_id": "debate"
            },
            {
                "question": "Show the name of technicians aged either 36 or 37",
                "masked_template": "Show the name of <mask> 36 or 37",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.08333333333333333,
                "db_id": "machine_repair"
            },
            {
                "question": "What are the names of the technicians aged either 36 or 37?",
                "masked_template": "What are the names of the <mask> 36 or 37?",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.08333333333333333,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the number of audience in year 2008 or 2010.",
                "masked_template": "Show the number of <mask> in <mask> or <mask>",
                "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
                "ted": 0.08333333333333333,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Show all director names who have a movie in the year 1999 or 2000.",
                "masked_template": "Show all <mask> names who have a <mask> in the <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.08333333333333333,
                "db_id": "culture_company"
            },
            {
                "question": "Which directors had a movie in either 1999 or 2000?",
                "masked_template": "Which <mask> had a <mask> in <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.08333333333333333,
                "db_id": "culture_company"
            }
        ],
        "best_hyp": "How many students are in grade 10 or 11?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many students are in grade 10 or 11?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
        "proc_query": "( <col> name </col> of <tab> teacher </tab> ) , ( <tab> course </tab> of <tab> course </tab> ) that belongs to ( ( <tab> course arrange </tab> ) , and ( ( <tab> course </tab> ) satisfied that ( ( <col> course id </col> of <tab> course arrange </tab> ) equal to ( <col> course id </col> of <tab> course </tab> ) ) ) , and ( ( <tab> teacher </tab> ) satisfied that ( ( <col> teacher id </col> of <tab> course arrange </tab> ) equal to ( <col> teacher id </col> of <tab> teacher </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the teachers and the corresponding courses they arrange?",
            "Show the names of teachers and names of their courses they arrange.",
            "For each teacher, find the teacher name and the course arrange.",
            "Show the teacher name and course arrange name for each course.",
            "Find the names of all teachers who have arrange courses and the corresponding courses.",
            "What are the names of all teachers who have taught a course and the corresponding courses?",
            "Show names of teachers and names of courses they arrange.",
            "Show the names of teachers and corresponding courses they arrange.",
            "What are the names of teachers and what are the courses that they arrange?",
            "Show the names of teachers and the corresponding courses they arrange for which they teach.",
            "Show names of teachers and the corresponding courses they arrange.",
            "Show the names of teachers and the corresponding courses they arrange.",
            "Show the names of teachers and the corresponding courses they arrange.",
            "For each course arrange, show the name of the teacher and the course it is taught by.",
            "What are the names of the teachers who arrange the courses and the corresponding courses?",
            "List the names of the teachers who arrange the courses and the corresponding courses taught by them.",
            "For each course arrange, return the teacher name and the name of the course its teacher is involved in.",
            "List the names of a teacher along with the name of a course whose teacher is in the arrange department.",
            "Show the names of teachers and the corresponding courses they arrange.",
            "For all the courses of different teachers, what are all the names of the courses they arrange to fix? List the name of the teacher and the course description",
            "What are the names of teachers and the corresponding courses that they arrange?",
            "Show the names of teachers and the corresponding courses they arrange.",
            "Show the teacher name and course arrange name for all courses.",
            "For each teacher, return its name and the name of its course arrange."
        ],
        "templates": [
            "",
            {
                "question": "Show the names of players and names of their coaches.",
                "masked_template": "Show the names of <mask> and names of their <mask>",
                "query": "SELECT T3.Player_name , T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID",
                "ted": 0.0,
                "db_id": "riding_club"
            },
            {
                "question": "For each journal_committee, find the editor name and the journal theme.",
                "masked_template": "For each <mask> find the <mask> name and the <mask>",
                "query": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "show the train name and station name for each train.",
                "masked_template": "show the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T2.name , T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course description.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Show names of technicians and series of machines they are assigned to repair.",
                "masked_template": "Show names of <mask> and <mask> of <mask> are <mask> to <mask>",
                "query": "SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the names of pilots and models of aircrafts they have flied with.",
                "masked_template": "Show the names of <mask> and <mask> of <mask> have <mask>",
                "query": "SELECT T3.Pilot_name , T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
                "masked_template": "What are the names of <mask> and what are the <mask> that <mask> in <mask>",
                "query": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "Show the names of editors and the theme of journals for which they serve on committees.",
                "masked_template": "Show the names of <mask> and the <mask> of <mask> for which <mask> on <mask>",
                "query": "SELECT T2.Name , T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "Show names of shops and the carriers of devices they have in stock.",
                "masked_template": "Show names of <mask> and the <mask> of <mask> have in <mask>",
                "query": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID",
                "ted": 0.0,
                "db_id": "device"
            },
            {
                "question": "Show the names of members and the location of the performances they attended.",
                "masked_template": "Show the names of <mask> and the <mask> of the <mask>",
                "query": "SELECT T2.Name , T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID",
                "ted": 0.0,
                "db_id": "performance_attendance"
            },
            {
                "question": "Show the names of companies and of employees.",
                "masked_template": "Show the names of <mask> and of <mask>",
                "query": "SELECT T3.Name , T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
                "masked_template": "For each <mask> show the name of the <mask> and name of the <mask> it is <mask>",
                "query": "SELECT T2.Name , T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
                "masked_template": "What are the names of the <mask> who <mask> the <mask> and the <mask> who <mask> the <mask>",
                "query": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
                "masked_template": "List the names of the <mask> who <mask> the <mask> of <mask> and the <mask> who <mask> the <mask>",
                "query": "SELECT T2.employee_name , T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "For each company, return the company name and the name of the building its office is located in.",
                "masked_template": "For each <mask> return the <mask> name and the name of the <mask> its <mask> is <mask> in.",
                "query": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "List the name of a building along with the name of a company whose office is in the building.",
                "masked_template": "List the name of a <mask> with the name of a <mask> whose <mask> is in the <mask>",
                "query": "SELECT T3.name , T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id",
                "ted": 0.0,
                "db_id": "company_office"
            },
            {
                "question": "Show the names of phones and the districts of markets they are on.",
                "masked_template": "Show the names of <mask> and the <mask> of <mask> are on.",
                "query": "SELECT T3.Name , T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
                "masked_template": "For all the <mask> of different <mask> what are all the <mask> of the <mask> to fix <mask> List the name of the <mask> and the <mask>",
                "query": "SELECT T1.fault_short_name , T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the names of technicians and the machine series that they repair?",
                "masked_template": "What are the names of <mask> and the <mask> that <mask>",
                "query": "SELECT T3.Name , T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the themes of parties and the names of the party hosts.",
                "masked_template": "Show the <mask> of <mask> and the names of the <mask>",
                "query": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the school name and driver name for all school buses.",
                "masked_template": "Show the <mask> name and <mask> name for all <mask>",
                "query": "SELECT T2.school , T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "For each party, return its theme and the name of its host.",
                "masked_template": "For each <mask> return its <mask> and the name of its <mask>",
                "query": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID",
                "ted": 0.0,
                "db_id": "party_host"
            }
        ],
        "best_hyp": "What are the names of teachers and what are the courses that they arrange?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the teachers and the corresponding courses they arrange?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT count( * ) FROM teacher",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> teacher </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many teachers are there?",
            "Count the number of teachers.",
            "How many teachers are there?",
            "How many teachers are there?",
            "How many teachers do we have?",
            "Count the number of teachers.",
            "What is the total number of teachers?",
            "How many teachers are there?",
            "How many teachers do we have?",
            "Show the number of teachers.",
            "Find the number of teachers in total",
            "What is the number of teachers?",
            "How many teachers are there?",
            "How many teachers are there?",
            "Find the total number of teachers.",
            "How many teachers are there?",
            "How many CSU teachers are there?",
            "Return the total number of distinct teachers.",
            "Count the number of teachers.",
            "How many teachers are there?",
            "Count how many teachers are there.",
            "How many teachers are there?",
            "How many teachers are there?",
            "Find the number of teachers.",
            "Find the number of distinct teachers.",
            "How many teachers are there?",
            "What is the total number of teachers in total?",
            "Count the number of teachers.",
            "How many teachers do we have?",
            "How many teachers are there?",
            "How many distinct teachers are there?"
        ],
        "templates": [
            "",
            {
                "question": "Count the number of budget codes.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM Ref_budget_codes",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many schools are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM school",
                "ted": 0.0,
                "db_id": "school_finance"
            },
            {
                "question": "How many counties are there in total?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many statements do we have?",
                "masked_template": "How many <mask> do we <mask>",
                "query": "SELECT count( * ) FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the total number of counties.",
                "masked_template": "Count the total number of <mask>",
                "query": "SELECT count( * ) FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the total number of faculty members?",
                "masked_template": "What is the total number of <mask>",
                "query": "SELECT count( * ) FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many video games exist?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many video games do you have?",
                "masked_template": "How many <mask> do you <mask>",
                "query": "SELECT count( * ) FROM Video_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show the number of trains",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( * ) FROM train",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the number of students in total.",
                "masked_template": "Find the number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the number of technicians?",
                "masked_template": "What is the number of <mask>",
                "query": "SELECT count( * ) FROM technician",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "how many ships are there?",
                "masked_template": "how many <mask> are <mask>",
                "query": "SELECT count( * ) FROM ship",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "How many aircrafts exist in the database?",
                "masked_template": "How many <mask> in the <mask>",
                "query": "SELECT count( * ) FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the total number of catalog contents.",
                "masked_template": "Find the total number of <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many products are there in the records?",
                "masked_template": "How many <mask> are there in the <mask>",
                "query": "SELECT count( * ) FROM catalog_contents",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "How many CSU campuses are there?",
                "masked_template": "How many CSU <mask> are <mask>",
                "query": "SELECT count( * ) FROM campuses",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "Return the total number of distinct customers.",
                "masked_template": "Return the total number of distinct <mask>",
                "query": "SELECT count( * ) FROM customers",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Count the number of total papers.",
                "masked_template": "Count the number of total <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "How many staff in total?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Count how many appointments have been made in total.",
                "masked_template": "Count how many <mask> have <mask> in <mask>",
                "query": "SELECT count( * ) FROM appointment",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many followers does each user have?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) FROM follows",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many papers are published in total?",
                "masked_template": "How many <mask> are <mask> in <mask>",
                "query": "SELECT count( * ) FROM papers",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of reviews.",
                "masked_template": "Find the number of <mask>",
                "query": "SELECT count( * ) FROM review",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of distinct amenities.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( * ) FROM dorm_amenity",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "How many dorms are in the database?",
                "masked_template": "How many <mask> are in the <mask>",
                "query": "SELECT count( * ) FROM dorm",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the total number of rooms available in this inn?",
                "masked_template": "What is the total number of <mask> in <mask>",
                "query": "SELECT count( * ) FROM Rooms",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Count the number of documents with expenses.",
                "masked_template": "Count the number of <mask> with <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many documents have expenses?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM Documents_with_expenses",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many council taxes are collected for renting arrears ?",
                "masked_template": "How many <mask> are <mask> for <mask> ?",
                "query": "SELECT count( * ) FROM rent_arrears",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "How many distinct courses are enrolled in by students?",
                "masked_template": "How many distinct <mask> are <mask> in by <mask>",
                "query": "SELECT count( course_id ) FROM Student_Course_Enrolment",
                "ted": 0.0,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "How many teachers are there?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many teachers are there?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "select T1.first_name from students as T1 join addresses as T2 on T1.permanent_address_id = T2.address_id where T2.country = 'Gibraltar' or T1.cell_mobile_number = '5073658405'",
        "proc_query": "( <col> first name </col> of <tab> students </tab> ) that belongs to ( ( <tab> students </tab> ) , and ( ( <tab> addresses </tab> ) satisfied that ( ( <col> permanent address id </col> of <tab> students </tab> ) equal to ( <col> address id </col> of <tab> addresses </tab> ) ) ) ) , that have ( ( ( <col> country </col> of <tab> addresses </tab> ) equal to ( <val> Gibraltar </val> ) ) or ( ( <col> cell mobile number </col> of <tab> students </tab> ) equal to ( <val> 5073658405 </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of the students who live in Gibraltar or have cell phone number 5073658405?",
            "List the first names of students living in country Gibraltar or living in cell mobile number 5073658405",
            "Find the first names of the students that is living either in country Gibraltar or at address 5073658405.",
            "What are the names of students that live in country Gibraltar or is at cell mobile number 5073658405?",
            "What are the first names of students living in Gibraltar or 5073658405?",
            "Find the first names of the students who live in the country with name Gibraltar or cell mobile number 5073658405",
            "Return the first names of students who live in the country of Gibraltar or have cell mobile number 5073658405.",
            "What are the first names of students living in country Gibraltar or with cell mobile number 5073658405?",
            "What are the first names of the students who live in Gibraltar or have cell phone number 5073658405?",
            "What are the names of students that can be reached by bus or is at address 254 254.",
            "What are the first names of the students that live in Gibraltar or have cell phone number 5073658405?",
            "What are the first names ids of students that live in country Gibraltar or have cell mobile number 5073658405?",
            "What are the first names of students living in country Gibraltar or living in cell mobile number 5073658405?",
            "What are the first names of the students living in Gibraltar or 5073658405?",
            "Find the first names of all the students that are living in country Gibraltar or have cell mobile number 5073658405.",
            "Find the first names of the students that is living either in country Gibraltar or at address 5073658405.",
            "Return the first names of students who live in Gibraltar or have cell mobile number 5073658405.",
            "Show the first names ids for all students with permanent address in country Gibraltar or cell mobile number 5073658405",
            "What are the first names ids of the students whose country name is Gibraltar or cell mobile number is 5073658405?",
            "What are the first names of the students that live in country Gibraltar or have cell mobile number 5073658405?",
            "Find the first names of students who are living in country Gibraltar or living in cell mobile number 5073658405",
            "Which students live in country Gibraltar or have cell phone number 5073658405?",
            "What are the first names of the students who live in the country of Gibraltar or have cell mobile number 5073658405?",
            "Find the first names of all the students living in Gibraltar or living in cell mobile number 5073658405.",
            "What are the names of all students who live in Gibraltar or have cell phone number 5073658405?",
            "Find the first names of students who live in country Gibraltar or have cell phone number 5073658405.",
            "What are the first names of all students who are living in country Gibraltar or have cell phone number 5073658405?",
            "What is the first name of the student who is living in Gibraltar or living in cell mobile number 5073658405?",
            "What are the first names of students who live in the country of Gibraltar or have cell mobile number 5073658405?",
            "Find the first names of students living in Gibraltar or living in cell mobile number 5073658405.",
            "Find the first names of the students who are living in the country of Gibraltar or have cell mobile number 5073658405."
        ],
        "templates": [
            "",
            {
                "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
                "masked_template": "List the name of <mask> to <mask> or <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
                "masked_template": "Find the names of the <mask> that is <mask> by bus or at <mask> 254 <mask>",
                "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '254 Ottilie Junction' OR T2.How_to_Get_There = 'bus'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
                "masked_template": "What are the names of <mask> that can be <mask> by <mask> or is at <mask> 660 <mask>",
                "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '660 Shea Crescent' OR T2.How_to_Get_There = 'walk'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
                "masked_template": "What are the names of <mask> in <mask> or <mask>",
                "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = 'China' OR T2.Country = 'Japan'",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".",
                "masked_template": "Find the <mask> of the <mask> who <mask> the <mask> with name <mask> or <mask>",
                "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure'",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
                "masked_template": "Return the <mask> of <mask> for <mask> who have <mask> the <mask> or <mask>",
                "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
                "masked_template": "What are the <mask> of <mask> of <mask> with <mask> or <mask>",
                "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = 'Simon Woodroffe' OR T1.Investor = 'Peter Jones'",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.",
                "masked_template": "What are the <mask> of the <mask> who <mask> or <mask>",
                "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = 'operating system' OR T2.course_name = 'data structure'",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
                "masked_template": "What are the names of <mask> that can be <mask> by bus or is at <mask> 254 <mask>",
                "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '254 Ottilie Junction' OR T2.How_to_Get_There = 'bus'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names of the tracks that are Rock or Jazz songs?",
                "masked_template": "What are the names of the <mask> that are <mask> or <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = 'Rock' OR T1.name = 'Jazz'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
                "masked_template": "What are the <mask> ids of <mask> that have the <mask> or <mask>",
                "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
                "masked_template": "What are the names of <mask> with the <mask> or <mask>",
                "query": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus'",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the official languages of the countries of players from Maryland or Duke college?",
                "masked_template": "What are the <mask> of the <mask> of <mask> or <mask>",
                "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Find the details of all the markets that are accessible by walk or bus.",
                "masked_template": "Find the <mask> of all the <mask> that are <mask> by <mask> or <mask>",
                "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
                "masked_template": "Find the names of the <mask> that is <mask> by <mask> or at <mask> 660 <mask>",
                "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = '660 Shea Crescent' OR T2.How_to_Get_There = 'walk'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
                "masked_template": "Return the <mask> of <mask> who have <mask> or <mask>",
                "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = 'Maryland' OR T2.College = 'Duke'",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
                "masked_template": "Show the <mask> ids for all <mask> with <mask> name <mask> or <mask>",
                "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Human Resource' OR T2.role_name = 'Manager'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
                "masked_template": "What are the <mask> ids of the <mask> whose <mask> name is <mask> or <mask>",
                "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = 'Human Resource' OR T2.role_name = 'Manager'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the details of the markets that can be accessed by walk or bus?",
                "masked_template": "What are the <mask> of the <mask> that can be <mask> by <mask> or <mask>",
                "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = 'walk' OR T2.How_to_Get_There = 'bus'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the id of users who are followed by Mary or Susan.",
                "masked_template": "Find the id of <mask> who are <mask> by <mask> or <mask>",
                "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = 'Mary' OR T1.name = 'Susan'",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Which city does staff with first name as Janessa and last name as Sawayn live?",
                "masked_template": "Which <mask> with <mask> name as <mask> and <mask> name as <mask>",
                "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'",
                "ted": 0.02631578947368421,
                "db_id": "driving_school"
            },
            {
                "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
                "masked_template": "What are the <mask> names of the <mask> who <mask> the <mask>",
                "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'GELL' AND T1.lastname = 'TAMI'",
                "ted": 0.02631578947368421,
                "db_id": "student_1"
            },
            {
                "question": "Find the last names of all the teachers that teach GELL TAMI.",
                "masked_template": "Find the <mask> names of all the <mask> that <mask>",
                "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'GELL' AND T1.lastname = 'TAMI'",
                "ted": 0.02631578947368421,
                "db_id": "student_1"
            },
            {
                "question": "What are the names of all students who successfully tried out for the position of striker?",
                "masked_template": "What are the names of all <mask> who <mask> out for the <mask> of <mask>",
                "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
                "ted": 0.02631578947368421,
                "db_id": "soccer_2"
            },
            {
                "question": "Find the names of females who are friends with Zach",
                "masked_template": "Find the names of <mask> who are <mask> with <mask>",
                "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'",
                "ted": 0.02631578947368421,
                "db_id": "network_2"
            },
            {
                "question": "What are the names of all females who are friends with Zach?",
                "masked_template": "What are the names of all <mask> who are <mask> with <mask>",
                "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female'",
                "ted": 0.02631578947368421,
                "db_id": "network_2"
            },
            {
                "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
                "masked_template": "What is the <mask> of <mask> of the <mask> who is <mask> and <mask> a <mask> in <mask>",
                "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' AND T2.languages = 'bangla'",
                "ted": 0.02631578947368421,
                "db_id": "music_1"
            },
            {
                "question": "What countries are the female artists who sung in the language Bangla from?",
                "masked_template": "What <mask> are the <mask> who <mask> in the <mask>",
                "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = 'Female' AND T2.languages = 'bangla'",
                "ted": 0.02631578947368421,
                "db_id": "music_1"
            },
            {
                "question": "Find the female friends of Alice.",
                "masked_template": "Find the <mask> of <mask>",
                "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female'",
                "ted": 0.02631578947368421,
                "db_id": "network_2"
            },
            {
                "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
                "masked_template": "Find the names of the <mask> who are in the <mask> of <mask> and got a yes <mask>",
                "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker'",
                "ted": 0.02631578947368421,
                "db_id": "soccer_2"
            }
        ],
        "best_hyp": "Find the first names of the students who live in the country with name Gibraltar or cell mobile number 5073658405",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of the students who live in Gibraltar or have cell phone number 5073658405?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT avg( grade ) FROM Highschooler WHERE id IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
        "proc_query": "( the average of ( <col> grade </col> ) ) that belongs to ( <tab> high schooler </tab> ) , that have ( ( <col> id </col> ) in ( ( <col> student id </col> of <tab> friend </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the average grade of the students who are friends with some high schooler?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What is the average grade of the students who are friends with some high schooler?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average grade of the students who are friends with some high schooler?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Name FROM teacher WHERE Age = 31 OR Age = 32",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> teacher </tab> ) , that have ( ( ( <col> age </col> ) equal to ( <val> 31 </val> ) ) or ( ( <col> age </col> ) equal to ( <val> 32 </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of teachers aged either 31 or 32?",
            "Show the names of teachers aged either 31 or 32.",
            "Which teachers are either 31 or 32 years old?",
            "Show all teacher names who are either 31 or 32 years old",
            "What are the names of the teachers aged either 31 or 32?",
            "Show the names of teachers aged either 31 or 32.",
            "Show the names of teachers of age either 31 or 32.",
            "Show the names of teachers aged either 31 or 32.",
            "Find the ids of the teachers who are on age 31 or 32.",
            "What are the names of teachers aged either 31 or 32? Tell me their names.",
            "What are the names of teachers with at least 100 teacher count or age 32?",
            "Show the names of teachers if the teacher count is greater than 100 or the age is 32.",
            "Show the names of teachers that are either 31 or 32 years old.",
            "Show the names of teachers with age either 31 or 32.",
            "Show all teachers with a age in either 31 or 32 and a teacher with more than 100 students.",
            "What are the names of teachers that are either 31 or 32 years old?",
            "What are the names of teachers that have a age of either 31 or 32?",
            "What are the names of teachers who are either 31 or 32 years old?",
            "find the names of teachers who are either older than 31 or younger than 32",
            "What are the names of teachers that are either 31 years old or 32 years old?",
            "Who are the teachers who are either 31 or 32 years old?",
            "Find the names of teachers with age either 31 or 32.",
            "Show the names of teachers older than 31 or younger than 32",
            "Find the name all teachers with age either 31 or 32.",
            "Which teachers are either aged 31 or 32? Find their names.",
            "What are the names of all teachers who are either older than 31 or younger than 32?",
            "Find the names of the teachers aged either 31 or 32.",
            "Show the names of teachers aged either 31 or 32"
        ],
        "templates": [
            "",
            {
                "question": "Show the number of audience in year 2008 or 2010.",
                "masked_template": "Show the number of <mask> in <mask> or <mask>",
                "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "Which directors had a movie in either 1999 or 2000?",
                "masked_template": "Which <mask> had a <mask> in <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.0,
                "db_id": "culture_company"
            },
            {
                "question": "Show all director names who have a movie in the year 1999 or 2000.",
                "masked_template": "Show all <mask> names who have a <mask> in the <mask> or <mask>",
                "query": "SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000",
                "ted": 0.0,
                "db_id": "culture_company"
            },
            {
                "question": "What are the names of the technicians aged either 36 or 37?",
                "masked_template": "What are the names of the <mask> 36 or 37?",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the name of technicians aged either 36 or 37",
                "masked_template": "Show the name of <mask> 36 or 37",
                "query": "SELECT Name FROM technician WHERE Age = 36 OR Age = 37",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "Show the names of editors of age either 24 or 25.",
                "masked_template": "Show the names of <mask> of age <mask> 24 or 25.",
                "query": "SELECT Name FROM editor WHERE Age = 24 OR Age = 25",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "Show the names of people aged either 35 or 36.",
                "masked_template": "Show the names of <mask> 35 or 36.",
                "query": "SELECT Name FROM people WHERE Age = 35 OR Age = 36",
                "ted": 0.0,
                "db_id": "debate"
            },
            {
                "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
                "masked_template": "Find the ids of the <mask> who are on <mask> in <mask> 1 and <mask> 1.",
                "query": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
                "ted": 0.045454545454545456,
                "db_id": "hospital_1"
            },
            {
                "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.",
                "masked_template": "What <mask> are on <mask> with <mask> 1 and <mask> 1? <mask> me their <mask>",
                "query": "SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1",
                "ted": 0.045454545454545456,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
                "masked_template": "What are the <mask> of <mask> with at least 100 <mask> count or <mask> than <mask>",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100",
                "ted": 0.09090909090909091,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
                "masked_template": "Show the <mask> of <mask> if the <mask> count is <mask> than 100 or the <mask> is <mask> than <mask>",
                "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000",
                "ted": 0.09090909090909091,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Show the countries that have managers of age above 50 or below 46.",
                "masked_template": "Show the <mask> that have <mask> of age <mask> 50 or <mask> 46.",
                "query": "SELECT Country FROM manager WHERE Age > 50 OR Age < 46",
                "ted": 0.09090909090909091,
                "db_id": "railway"
            },
            {
                "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.",
                "masked_template": "Show the names of <mask> with <mask> more than <mask> or <mask> more than <mask>",
                "query": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
                "ted": 0.09090909090909091,
                "db_id": "climbing"
            },
            {
                "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
                "masked_template": "Show all <mask> with a <mask> in <mask> and a <mask> with more than 100 <mask>",
                "query": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100",
                "ted": 0.09090909090909091,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the official names of cities that have population over 1500 or less than 500?",
                "masked_template": "What are the <mask> names of <mask> that have <mask> or <mask> than <mask>",
                "query": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
                "ted": 0.09090909090909091,
                "db_id": "farm"
            },
            {
                "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?",
                "masked_template": "What are the names of <mask> that have a <mask> of <mask> or a <mask> of <mask>",
                "query": "SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000",
                "ted": 0.09090909090909091,
                "db_id": "climbing"
            },
            {
                "question": "What are the names of people who have a height greater than 200 or less than 190?",
                "masked_template": "What are the names of <mask> who have a <mask> than 200 or <mask> than <mask>",
                "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
                "ted": 0.09090909090909091,
                "db_id": "candidate_poll"
            },
            {
                "question": "find the names of people who are taller than 200 or lower than 190.",
                "masked_template": "find the names of <mask> who are <mask> than 200 or <mask> than <mask>",
                "query": "SELECT name FROM people WHERE height > 200 OR height < 190",
                "ted": 0.09090909090909091,
                "db_id": "candidate_poll"
            },
            {
                "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
                "masked_template": "What are the <mask> that have a <mask> that <mask> in <mask> and a <mask> with more than 100 <mask>",
                "query": "SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100",
                "ted": 0.09090909090909091,
                "db_id": "shop_membership"
            },
            {
                "question": "Who are the ministers who took office after 1961 or before 1959?",
                "masked_template": "Who are the <mask> who <mask> or <mask>",
                "query": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
                "ted": 0.09090909090909091,
                "db_id": "party_people"
            },
            {
                "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.",
                "masked_template": "Find the <mask> names of <mask> with <mask> than <mask> or <mask> than <mask>",
                "query": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500",
                "ted": 0.09090909090909091,
                "db_id": "farm"
            },
            {
                "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
                "masked_template": "Show the <mask> of <mask> than <mask> or <mask> than <mask>",
                "query": "SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100",
                "ted": 0.09090909090909091,
                "db_id": "roller_coaster"
            },
            {
                "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
                "masked_template": "Find the name all <mask> with <mask> than 10 or <mask> than <mask>",
                "query": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
                "ted": 0.09090909090909091,
                "db_id": "store_product"
            },
            {
                "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
                "masked_template": "Which <mask> have <mask> 3 or <mask> 5? Find the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
                "ted": 0.09090909090909091,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
                "masked_template": "What are the names of all <mask> with a <mask> than 10 or have more than <mask>",
                "query": "SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000",
                "ted": 0.09090909090909091,
                "db_id": "store_product"
            },
            {
                "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
                "masked_template": "Find the names of the <mask> with <mask> than 3 or <mask> than 5.",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5",
                "ted": 0.09090909090909091,
                "db_id": "product_catalog"
            },
            {
                "question": "Show the minister who took office after 1961 or before 1959.",
                "masked_template": "Show the <mask> who <mask> or <mask>",
                "query": "SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959",
                "ted": 0.09090909090909091,
                "db_id": "party_people"
            }
        ],
        "best_hyp": "Show the names of teachers of age either 31 or 32.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of teachers aged either 31 or 32?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> semester name </col> of <tab> semesters </tab> ) , ( <col> semester id </col> of <tab> semesters </tab> ) that belongs to ( ( <tab> semesters </tab> ) , and ( ( <tab> student enrolment </tab> ) satisfied that ( ( <col> semester id </col> of <tab> semesters </tab> ) equal to ( <col> semester id </col> of <tab> student enrolment </tab> ) ) ) ) , grouped by ( <col> semester id </col> of <tab> semesters </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name and id of the semesters that have the most students enrolled?",
            "What is the name and id of the semester that is enrolled the most students?",
            "What is the name and id for the semesters which has the most students enrolled?",
            "Find the name and id of the semester that is enrolled the most students.",
            "What are the name and id of the semesters with the most student enrollment?",
            "Which semesters have the most number of students enrolled? List the semesters name and the semester id.",
            "Find the semester name and id of the semesters with the most student enrollment.",
            "What is the name and id of the semester that has the most students enrolled?",
            "What is the name and id of the semesters that have most number of students enrolled?",
            "For the semesters with the top 10 most enrollments, what are their names?",
            "Return the name and id corresponding to the semester that has had the most student enrollment.",
            "Find the names of the top 10 semesters that enroll the most number of students.",
            "What is the name and id for the semesters with most number of students enrolled?",
            "Show the id and name for the semesters that have the top 3 number of student enrollment.",
            "Find the name and id of the semesters that has the most student enrollment.",
            "Which semesters has the most students enrolled in the courses? List both semesters name and id.",
            "Which semesters have the most students enrolled? Tell me its name and id.",
            "What is the name and id of the semesters that has the largest number of students enrolled in?",
            "Find the name of semesters that have the most number of students enrolled.",
            "What is the name and id of the semesters that has the most student enrollment?",
            "What are the name and id of the semester that has the most students enrolled?",
            "Tell me the the name and id of the semester that has the most student enrollment.",
            "What is the name and id of the semesters which has the most number of students enrolled?",
            "What are the name and id of the semesters with the most student enrollment?",
            "Show the id and name of the semesters that has the greatest number of students enrolled.",
            "Find the id and name of the semester that has the most number of students enrolled.",
            "Find the ids and names of the 3 semesters that have the most number of students enrolled.",
            "What is the name and id of the semesters with the most student enrollment?",
            "Find the name and id of the semester that is enrolled in the greatest number of students.",
            "Find the id and name of the semester that has the most student enrollment.",
            "Which semester is enrolled in the most number of students? List the semester name and id."
        ],
        "templates": [
            "",
            {
                "question": "What is the description and code of the type of service that is performed the most often?",
                "masked_template": "What is the <mask> and <mask> of the <mask> of <mask> that is <mask> the most <mask>",
                "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What is the name and hours for the project which has the most scientists assigned to it?",
                "masked_template": "What is the name and <mask> for the <mask> which has the most <mask> to it?",
                "query": "SELECT T1.name , T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the description and code of the service type that is performed the most times.",
                "masked_template": "Find the <mask> and <mask> of the <mask> that is <mask> the most <mask>",
                "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the details and id of the project with the most outcomes?",
                "masked_template": "What are the <mask> and id of the <mask> with the most <mask>",
                "query": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Which project made the most number of outcomes? List the project details and the project id.",
                "masked_template": "Which <mask> the most number of <mask> List the <mask> and the <mask> id.",
                "query": "SELECT T1.project_details , T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the student ID and login name of the student with the most course enrollments",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.student_id , T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What is the first and last name of the student who played the most sports?",
                "masked_template": "What is the <mask> and <mask> name of the <mask> who <mask> the most <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What is the first name and last name of the student who have most number of sports?",
                "masked_template": "What is the <mask> name and <mask> name of the <mask> who have most number of <mask>",
                "query": "SELECT T2.Fname , T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "For the airline ids with the top 10 most routes operated, what are their names?",
                "masked_template": "For the <mask> ids with the top 10 most <mask> what are their <mask>",
                "query": "SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count( * ) DESC LIMIT 10",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
                "masked_template": "Return the name and <mask> to the <mask> who has had the most <mask>",
                "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Find the names of the top 10 airlines that operate the most number of routes.",
                "masked_template": "Find the names of the top 10 <mask> that <mask> the most number of <mask>",
                "query": "SELECT T1.name , T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY count( * ) DESC LIMIT 10",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and country for the artist with most number of exhibitions?",
                "masked_template": "What is the name and <mask> for the <mask> with most number of <mask>",
                "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show the id and details for the investors who have the top 3 number of transactions.",
                "masked_template": "Show the id and <mask> for the <mask> who have the top 3 number of <mask>",
                "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Find the full name and id of the college that has the most baseball players.",
                "masked_template": "Find the <mask> name and id of the <mask> that has the most <mask>",
                "query": "SELECT T1.name_full , T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which film has the most copies in the inventory? List both title and id.",
                "masked_template": "Which <mask> has the most <mask> in the <mask> List both <mask> and id.",
                "query": "SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
                "masked_template": "Which <mask> the most <mask> to? <mask> me its <mask> and <mask>",
                "query": "SELECT T1.Attraction_Type_Description , T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
                "masked_template": "What is the <mask> and id of the <mask> that has the <mask> number of <mask> in <mask>",
                "query": "SELECT T1.title , T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the full name of employee who supported the most number of customers.",
                "masked_template": "Find the <mask> name of <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What is the type and id of the organization that has the most research staff?",
                "masked_template": "What is the <mask> and id of the <mask> that has the most <mask>",
                "query": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the first and last name of the faculty who has the most students?",
                "masked_template": "What are the <mask> and <mask> name of the <mask> who has the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Give me the the first and last name of the faculty who advises the most students.",
                "masked_template": "<mask> me the the <mask> and <mask> name of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
                "masked_template": "What is the <mask> and id of the <mask> which has the most number of <mask>",
                "query": "SELECT T1.organisation_type , T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the code and description of the most frequent behavior incident type?",
                "masked_template": "What are the <mask> and <mask> of the most <mask>",
                "query": "SELECT T1.incident_type_code , T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Show the id and details of the investor that has the largest number of transactions.",
                "masked_template": "Show the id and <mask> of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T2.investor_id , T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Find the id and first name of the student that has the most number of assessment notes?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most number of <mask>",
                "query": "SELECT T1.student_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
                "masked_template": "Find the ids and <mask> names of the 3 <mask> that have the most number of <mask>",
                "query": "SELECT T1.teacher_id , T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "What is the first and last name of the faculty participating in the most activities?",
                "masked_template": "What is the <mask> and <mask> name of the <mask> in the most <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the first and last name of the faculty who is involved in the largest number of activities.",
                "masked_template": "Find the <mask> and <mask> name of the <mask> who is <mask> in the <mask> number of <mask>",
                "query": "SELECT T1.fname , T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the id and last name of the student that has the most behavior incidents?",
                "masked_template": "Find the id and <mask> name of the <mask> that has the most <mask>",
                "query": "SELECT T1.student_id , T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
                "masked_template": "Which <mask> is <mask> in <mask> the most number of <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.skill_id , T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            }
        ],
        "best_hyp": "What is the name and id for the semesters with most number of students enrolled?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name and id of the semesters that have the most students enrolled?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id , count( * ) FROM Friend GROUP BY student_id",
        "proc_query": "( <col> student id </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> friend </tab> ) , grouped by ( <col> student id </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show all student ids and the number of friends of each student.",
            "For each student id, return the student id and the count of friends with that student.",
            "display the student id and count of friends in each student.",
            "Show each student id and the number of friends they have.",
            "How many friends are there for each student? List the student id and the count.",
            "Show the different student ids and the number of friends they have.",
            "List all student ids along with the number of friends shared by each student.",
            "Show different student ids along with the number of friends of each student.",
            "For each student id, how many friends are there?",
            "Show different ids of students and the number of friends of each student.",
            "What are the student ids and how many friends correspond to each student id?",
            "Show all student ids and the number of friends in each student.",
            "What are the number of friends for each student?",
            "Find the number of friends for each student.",
            "What are the different student ids and how many friends are there for each student?",
            "Show student ids and the number of friends in each student.",
            "Show different ids of students along with the number of friends with each student.",
            "Find the number of friends for each student.",
            "How many friends are there for each student?",
            "How many friends correspond to each student id?",
            "Please show the student ids and the number of friends with each student.",
            "List all student ids and the number of friends in each student.",
            "For each student id, what are the ids and how many friends are there?",
            "display the student ID and number of friends for each student.",
            "For each student id, report the total number of friends shared by him or her.",
            "Show all student IDs and corresponding number of friends.",
            "Find all student ids of friends and number of friends.",
            "Show the student id and number of friends in each student.",
            "What are the different ids of students and how many friends correspond to them?",
            "Show the different student ids and number of friends at each student.",
            "For each student id, show the student id number and find how many friends are there."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "What are the different student ids and how many friends are there for each student?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show all student ids and the number of friends of each student.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> high schooler </tab> ), and except that ( ( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the students who are not friends with any high schooler?",
            "Show all high schooler names without a friend.",
            "Which students do not have a friend of friends? Tell me the students' names.",
            "List the name of students who never had any friends.",
            "Which students do not have any friends? Find their names.",
            "List the names of the students who do not have any friends.",
            "What are the names of students who are not in the school of any friends?",
            "List the names of students who have not showed up in any class of friends.",
            "What are the names of students who are not friends with an older student?",
            "Find the names of students who are not friends with an older student.",
            "Find the names of students who have no friends.",
            "What are the names of students who do not have any friends?",
            "Find the names of students that do not have any friends.",
            "What are the names of students who are not friends with any students?",
            "Find the names of students who do not have a friend of any kind.",
            "Show all high schooler names who are not friends of any student",
            "Show the names of all the students with no friends.",
            "What are the names of the students who are not friends in any school?",
            "Find the name of the high schooler that has no friends in the past?",
            "What are the names of the students that have no friends?",
            "What is the name of the high schooler who has no friends in it?",
            "Find name of the high schooler that has no friends.",
            "Which students are not friends with any high schooler? Find their names.",
            "What is the name of the students who did not have any friends?",
            "Which students do not have any friends? Find the names of students.",
            "What are the names of students who are not friends with any high schooler?",
            "What is the name of all students who do not have any friends?",
            "Find the names of students not involved in any drama.",
            "What are the names of the students who do not have any friends?",
            "Find the names of students who are not friends with any high schooler"
        ],
        "templates": [
            "",
            {
                "question": "Show all product names without an order.",
                "masked_template": "Show all <mask> names <mask> an <mask>",
                "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
                "masked_template": "Which <mask> do not have a <mask> of <mask> me the <mask>",
                "query": "SELECT customer_name FROM customers EXCEPT SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "List the name of physicians who never took any appointment.",
                "masked_template": "List the name of <mask> who <mask> any <mask>",
                "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Which physicians have never taken any appointment? Find their names.",
                "masked_template": "Which <mask> have <mask> any <mask> Find their <mask>",
                "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "List the details of the customers who do not have any policies.",
                "masked_template": "List the <mask> of the <mask> who do not have any <mask>",
                "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "What are the names of members who are not in charge of any events?",
                "masked_template": "What are the names of <mask> who are not in <mask> of any <mask>",
                "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
                "masked_template": "List the <mask> who have not showed up in any <mask> of <mask> List the <mask>",
                "query": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "What are the names of customers who never made an order.",
                "masked_template": "What are the names of <mask> who <mask> an <mask>",
                "query": "SELECT customer_name FROM customers EXCEPT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the names of customers who never placed an order.",
                "masked_template": "Find the names of <mask> who <mask> an <mask>",
                "query": "SELECT customer_name FROM customers EXCEPT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the names of customers who have no policies associated.",
                "masked_template": "Find the names of <mask> who have no <mask>",
                "query": "SELECT customer_details FROM customers EXCEPT SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "What are the names of customers who do not have any policies?",
                "masked_template": "What are the names of <mask> who do not have any <mask>",
                "query": "SELECT customer_details FROM customers EXCEPT SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Find the names of artists that do not have any albums.",
                "masked_template": "Find the names of <mask> that do not have any <mask>",
                "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the names of artists who have not released any albums?",
                "masked_template": "What are the names of <mask> who have not <mask> any <mask>",
                "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Find the names of users who do not have a first notification of loss record.",
                "masked_template": "Find the names of <mask> who do not have a <mask> of <mask>",
                "query": "SELECT customer_name FROM customers EXCEPT SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Show all member names who are not in charge of any event.",
                "masked_template": "Show all <mask> names who are not in <mask> of any <mask>",
                "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show the names of all the clients with no booking.",
                "masked_template": "Show the names of all the <mask> with no <mask>",
                "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the details of the lots which are not used in any transactions?",
                "masked_template": "What are the <mask> of the <mask> which are not <mask> in any <mask>",
                "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Find the name of the department that has no students minored in?",
                "masked_template": "Find the name of the <mask> that has no <mask> in?",
                "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the names of the services that have never been used?",
                "masked_template": "What are the names of the <mask> that have <mask>",
                "query": "SELECT service_name FROM services EXCEPT SELECT T1.service_name FROM services AS T1 JOIN party_services AS T2 ON T1.service_id = T2.service_id",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What is the name of the department htat has no students minoring in it?",
                "masked_template": "What is the name of the <mask> has no <mask> in it?",
                "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find name of the services that has never been used.",
                "masked_template": "Find name of the <mask> that has <mask>",
                "query": "SELECT service_name FROM services EXCEPT SELECT T1.service_name FROM services AS T1 JOIN party_services AS T2 ON T1.service_id = T2.service_id",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which students not enrolled in any course? Find their personal names.",
                "masked_template": "Which <mask> not <mask> in any <mask> Find their <mask>",
                "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What is the first name of the staff who did not give any lesson?",
                "masked_template": "What is the <mask> name of the <mask> who did not <mask> any <mask>",
                "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Which customers do not have any policies? Find the details of these customers.",
                "masked_template": "Which <mask> do not have any <mask> Find the <mask> of <mask>",
                "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "What are the names of products that have never been ordered?",
                "masked_template": "What are the names of <mask> that have <mask>",
                "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the first name of all employees who do not give any lessons?",
                "masked_template": "What is the <mask> name of all <mask> who do not <mask> any <mask>",
                "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Find the personal names of students not enrolled in any course.",
                "masked_template": "Find the <mask> names of <mask> not <mask> in any <mask>",
                "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names of the clients who do not have any booking?",
                "masked_template": "What are the names of the <mask> who do not have any <mask>",
                "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Find the last names of teachers who are not involved in any detention.",
                "masked_template": "Find the <mask> names of <mask> who are not <mask> in any <mask>",
                "query": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            }
        ],
        "best_hyp": "What are the names of the students who do not have any friends?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the students who are not friends with any high schooler?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "proc_query": "( <col> first name </col> ) , ( <col> middle name </col> ) , ( <col> last name </col> ) that belongs to ( <tab> students </tab> ) , ordered by ( ( <col> date first registered </col> ) in ascending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the first name, middle name and last name of the youngest student?",
            "What is the first and last name of the student with the first registered date?",
            "What are the first and last names of the students with the first registered date?",
            "Find the first name and middle name of the student that has the first registered date.",
            "What is the first and last name of the student that is registered the earliest?",
            "What is the first and last name for the most recently registered student?",
            "What are the first and last names for the top 3 students with the oldest max age?",
            "What is the average first name and middle name for the students with the 3 maximum first registered years?",
            "Find the first and last name of the student that is registered in the most recent year.",
            "What is the first and last name of the student that was registered in the most recent year?",
            "What is the first and last name of the youngest student with the top 5 most recent registration dates?",
            "What is the first name, middle name and last name of the top 5 students with first registered date?",
            "Find the first name and middle name of the student who has the first registered date.",
            "What is the first and last name corresponding to the student with the first registered date?",
            "Return the first and last name of the student that was registered in the most recent year."
        ],
        "templates": [
            "",
            {
                "question": "What is the name, city, and country of the airport with the lowest altitude?",
                "masked_template": "What is the <mask> and <mask> of the <mask> with the <mask>",
                "query": "SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the name, latitude, and city of the station with the lowest latitude?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the <mask>",
                "query": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Find the name, city, and country of the airport that has the lowest altitude.",
                "masked_template": "Find the <mask> and <mask> of the <mask> that has the <mask>",
                "query": "SELECT name , city , country FROM airports ORDER BY elevation LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name, latitude, and city of the station that is located the furthest South?",
                "masked_template": "What is the <mask> and <mask> of the <mask> that is <mask> the <mask>",
                "query": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the name, location and seating for the most recently opened track?",
                "masked_template": "What is the <mask> and <mask> for the most <mask>",
                "query": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "race_track"
            },
            {
                "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
                "masked_template": "What are the <mask> and <mask> for the top 3 <mask> with the <mask> max <mask>",
                "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
                "ted": 0.045454545454545456,
                "db_id": "bike_1"
            },
            {
                "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?",
                "masked_template": "What is the <mask> average <mask> and <mask> for the <mask> with the 3 <mask> maximum <mask>",
                "query": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
                "ted": 0.045454545454545456,
                "db_id": "bike_1"
            },
            {
                "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
                "masked_template": "Find the <mask> and <mask> of the <mask> that is <mask> in the most <mask>",
                "query": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "ship_1"
            },
            {
                "question": "What is the name, type, and flag of the ship that was built in the most recent year?",
                "masked_template": "What is the <mask> and <mask> of the <mask> that was <mask> in the most <mask>",
                "query": "SELECT name , TYPE , flag FROM ship ORDER BY built_year DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "ship_1"
            },
            {
                "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
                "masked_template": "What is the <mask> and <mask> number of the <mask> with the top 5 <mask>",
                "query": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
                "ted": 0.045454545454545456,
                "db_id": "college_1"
            },
            {
                "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
                "masked_template": "What is the <mask> gpa and <mask> number of the top 5 <mask> with <mask>",
                "query": "SELECT stu_gpa , stu_phone , stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
                "ted": 0.045454545454545456,
                "db_id": "college_1"
            },
            {
                "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
                "masked_template": "Find the <mask> and <mask> of the <mask> who has the <mask>",
                "query": "SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
                "masked_template": "What is the <mask> and <mask> to the <mask> with the <mask>",
                "query": "SELECT cust_name , acc_type , acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
                "masked_template": "Return the <mask> and <mask> of the <mask> that was <mask> in the most <mask>",
                "query": "SELECT name , LOCATION , seating FROM track ORDER BY year_opened DESC LIMIT 1",
                "ted": 0.045454545454545456,
                "db_id": "race_track"
            }
        ],
        "best_hyp": "What is the first and last name of the student that was registered in the most recent year?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the first name, middle name and last name of the youngest student?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown , COUNT( * ) FROM teacher GROUP BY Hometown",
        "proc_query": "( <col> hometown </col> ) , ( the number of ( all items ) ) that belongs to ( <tab> teacher </tab> ) , grouped by ( <col> hometown </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many teachers are from each hometown?",
            "For each hometown, return the hometown and the count of teachers with that hometown.",
            "display the hometown id and count of teachers in each hometown.",
            "Show each hometown and the number of teachers in each hometown.",
            "How many teachers are from each hometown? List the hometown and the number.",
            "Show the different hometowns and the number of teachers in each hometown.",
            "List all hometowns along with the number of teachers from each hometown.",
            "Show different hometowns along with the number of teachers of each hometown.",
            "For each hometown, how many teachers are from there?",
            "Show different hometowns of teachers and the number of teachers of each hometown.",
            "What are the hometowns and how many teachers correspond to each hometown?",
            "Show all hometowns and the number of teachers in each hometown.",
            "What are the number of teachers for each hometown?",
            "Find the number of teachers for each hometown.",
            "What are the different hometowns and how many teachers are there for each hometown?",
            "Show hometowns and the number of teachers in each hometown.",
            "Show different hometowns along with the number of teachers with each hometown.",
            "find the number of teachers from each hometown.",
            "How many teachers are from each hometown?",
            "How many teachers live in each hometown?",
            "Please show the hometowns and the number of teachers with each hometown.",
            "List all hometowns and the number of teachers in each hometown.",
            "For each hometown, what are the hometowns and how many teachers are from there?",
            "display the hometown ID and number of teachers for each hometown.",
            "For each hometown, report the total number of teachers from that hometown.",
            "Show all hometowns and corresponding number of teachers.",
            "Find all hometowns of teachers and number of teachers in each hometown",
            "Show the hometown and number of teachers in each hometown.",
            "What are the different hometowns of teachers and how many teachers correspond to each hometown?",
            "Show the different hometowns and number of teachers at each hometown.",
            "For each hometown, show the hometown number and find how many teachers are from it."
        ],
        "templates": [
            "",
            {
                "question": "For each denomination, return the denomination and the count of schools with that denomination.",
                "masked_template": "For each <mask> return the <mask> and the count of <mask> with that <mask>",
                "query": "SELECT Denomination , COUNT( * ) FROM school GROUP BY Denomination",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Give the country id and corresponding count of cities in each country.",
                "masked_template": "<mask> the <mask> id and <mask> count of <mask> in each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show each location and the number of cinemas there.",
                "masked_template": "Show each <mask> and the number of <mask>",
                "query": "SELECT LOCATION , count( * ) FROM cinema GROUP BY LOCATION",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "How many hosts does each nationality have? List the nationality and the count.",
                "masked_template": "How many <mask> each <mask> List the <mask> and the <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Show the different countries and the number of members from each.",
                "masked_template": "Show the different <mask> and the number of <mask>",
                "query": "SELECT Country , COUNT( * ) FROM member GROUP BY Country",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "List all directors along with the number of films directed by each director.",
                "masked_template": "List all <mask> with the number of <mask> by each <mask>",
                "query": "SELECT directed_by , count( * ) FROM film GROUP BY directed_by",
                "ted": 0.0,
                "db_id": "cinema"
            },
            {
                "question": "Show different nationalities along with the number of hosts of each nationality.",
                "masked_template": "Show different <mask> with the number of <mask> of each <mask>",
                "query": "SELECT Nationality , COUNT( * ) FROM HOST GROUP BY Nationality",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "For each type, how many ships are there?",
                "masked_template": "For each <mask> how many <mask> are <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show different types of ships and the number of ships of each type.",
                "masked_template": "Show different <mask> of <mask> and the number of <mask> of each <mask>",
                "query": "SELECT TYPE , COUNT( * ) FROM ship GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the allergy types and how many allergies correspond to each one?",
                "masked_template": "What are the <mask> and how many <mask> to each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Show all allergy types and the number of allergies in each type.",
                "masked_template": "Show all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT allergytype , count( * ) FROM Allergy_type GROUP BY allergytype",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the number of rooms for each bed type?",
                "masked_template": "What are the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Find the number of rooms for each bed type.",
                "masked_template": "Find the number of <mask> for each bed <mask>",
                "query": "SELECT bedType , count( * ) FROM Rooms GROUP BY bedType",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the different budget type codes, and how many documents are there for each?",
                "masked_template": "What are the different <mask> and how many <mask> are there for <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show budget type codes and the number of documents in each budget type.",
                "masked_template": "Show <mask> and the number of <mask> in each <mask>",
                "query": "SELECT budget_type_code , count( * ) FROM Documents_with_expenses GROUP BY budget_type_code",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show different carriers of phones together with the number of phones with each carrier.",
                "masked_template": "Show different <mask> of <mask> with the number of <mask> with each <mask>",
                "query": "SELECT Carrier , COUNT( * ) FROM phone GROUP BY Carrier",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "find the number of medicines offered by each trade.",
                "masked_template": "find the number of <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many medicines are offered by each trade name?",
                "masked_template": "How many <mask> are <mask> by each <mask>",
                "query": "SELECT trade_name , count( * ) FROM medicine GROUP BY trade_name",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many counties correspond to each police force?",
                "masked_template": "How many <mask> to each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Please show the police forces and the number of counties with each police force.",
                "masked_template": "<mask> show the <mask> and the number of <mask> with each <mask>",
                "query": "SELECT Police_force , COUNT( * ) FROM county_public_safety GROUP BY Police_force",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "List all headquarters and the number of companies in each headquarter.",
                "masked_template": "List all <mask> and the number of <mask> in each <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "For each headquarter, what are the headquarter and how many companies are centered there?",
                "masked_template": "For each <mask> what are the <mask> and how many <mask> are <mask>",
                "query": "SELECT headquarters , count( * ) FROM company GROUP BY headquarters",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "display the country ID and number of cities for each country.",
                "masked_template": "<mask> the <mask> ID and number of <mask> for each <mask>",
                "query": "SELECT country_id , COUNT( * ) FROM locations GROUP BY country_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "For each advisor, report the total number of students advised by him or her.",
                "masked_template": "For each <mask> the total number of <mask> by him or <mask>",
                "query": "SELECT Advisor , count( * ) FROM STUDENT GROUP BY Advisor",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "Show all majors and corresponding number of students.",
                "masked_template": "Show all <mask> and <mask> number of <mask>",
                "query": "SELECT major , count( * ) FROM Student GROUP BY major",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all types of store and number of them.",
                "masked_template": "Find all <mask> of <mask> and number of <mask>",
                "query": "SELECT TYPE , count( * ) FROM store GROUP BY TYPE",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Show the race class and number of races in each class.",
                "masked_template": "Show the <mask> and number of <mask> in each <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the different classes of races, and how many races correspond to each?",
                "masked_template": "What are the different <mask> of <mask> and how many <mask> to <mask>",
                "query": "SELECT CLASS , count( * ) FROM race GROUP BY CLASS",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the different headquarters and number of companies at each headquarter.",
                "masked_template": "Show the different <mask> and number of <mask> at each <mask>",
                "query": "SELECT Headquarters , COUNT( * ) FROM company GROUP BY Headquarters",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "For each classroom, show the classroom number and find how many students are using it.",
                "masked_template": "For each <mask> show the <mask> number and find how many <mask> are <mask> it.",
                "query": "SELECT classroom , count( * ) FROM list GROUP BY classroom",
                "ted": 0.0,
                "db_id": "student_1"
            }
        ],
        "best_hyp": "What are the different hometowns and how many teachers are there for each hometown?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many teachers are from each hometown?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> degree summary name </col> of <tab> degree programs </tab> ) that belongs to ( ( <tab> degree programs </tab> ) , and ( ( <tab> student enrolment </tab> ) satisfied that ( ( <col> degree program id </col> of <tab> degree programs </tab> ) equal to ( <col> degree program id </col> of <tab> student enrolment </tab> ) ) ) ) , grouped by ( <col> degree summary name </col> of <tab> degree programs </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the degree with the most student enrollment?",
            "Find the degree summary name that the degree who enrolls the greatest number of students in.",
            "Find the most common degree summary name in the program. The most common is the degree that had the greatest number of students enrolled.",
            "Which degree summary name has the most number of students enrolled in?",
            "Which degree summary name has the greatest number of student enrollment?",
            "Which degree summary name is most common among degrees? Tell me the name.",
            "Return the name of the degree summary name which has the most student enrollment.",
            "What are the summary names of the degree programs that are enrolled for the most number of students?",
            "What is the name of the degree program that enrolls the most number of students?",
            "Which degree summary name has the most student enrollment? Tell me the name.",
            "What is the name of degree that has the largest number of student enrollment?",
            "Return the degree summary name that has been used the greatest number of times.",
            "Which is the name of the degree that has enrolled the most number of students?",
            "List the name of the degree that has been named the most number of times.",
            "Find the name of the degree that is enrolled in most students.",
            "What are the degree summary names that have the most student enrollment?",
            "What is the name of the degree that is most popular among students?",
            "Find the name of the most popular degree with student enrollment.",
            "What are the names of the degree summaries that have been used by the most students?",
            "What is the name of the degree with the least number of student enrollment?",
            "Find the degree summary name that has the most student enrollment.",
            "Which degree summary name has the most student enrollment?",
            "Return the name of the degree that has the greatest number of student enrollment.",
            "Which degree summary name has the most student enrollment? Tell me the name.",
            "Return the name of the degree that has the most student enrollment.",
            "Show the name of the degree that has the most student enrollment.",
            "Find the top 3 degree summaries which have the greatest number of student enrollment.",
            "What is the name of the degree that has the largest number of student enrollment?",
            "What is the name of the degree that has the most student enrollment?",
            "Which degree summary is used in by the most students? Tell me the degree summary name.",
            "Find the name of the degree that has the largest number of student enrollment."
        ],
        "templates": [
            "",
            {
                "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
                "masked_template": "<mask> the <mask> that the <mask> who <mask> the <mask> number of <mask> in.",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
                "masked_template": "Find the most <mask> in the <mask> The most <mask> is the <mask> that had <mask> the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which building does the instructor who teaches the most number of courses live in?",
                "masked_template": "Which <mask> the <mask> who <mask> the most number of <mask> in?",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Which room has the largest number of reservations?",
                "masked_template": "Which <mask> has the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which program is broadcast most frequently? Give me the program name.",
                "masked_template": "Which <mask> is <mask> most <mask> me the <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Return the name of the organization which has the most contact individuals.",
                "masked_template": "Return the name of the <mask> which has the most <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the details of the student who registered for the most number of courses?",
                "masked_template": "What are the <mask> of the <mask> who <mask> for the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What is detail of the student who registered the most number of courses?",
                "masked_template": "What is <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Which customer uses the most policies? Give me the customer name.",
                "masked_template": "Which <mask> the most <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "What is the name of organization that has the greatest number of contact individuals?",
                "masked_template": "What is the name of <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Return the party email that has used party services the greatest number of times.",
                "masked_template": "Return the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which is the email of the party that has used the services the most number of times?",
                "masked_template": "Which is the <mask> of the <mask> that has <mask> the <mask> the most number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
                "masked_template": "List the name of the <mask> that has <mask> named <mask> the most number of <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of the program that is broadcast most frequently.",
                "masked_template": "Find the name of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are the three products that have the most problems?s",
                "masked_template": "What are the <mask> that have the most <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the party form that is most common?",
                "masked_template": "What is the name of the <mask> that is most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Find the name of the most popular party form.",
                "masked_template": "Find the name of the most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of the cameras that have taken picture of the most mountains?",
                "masked_template": "What are the names of the <mask> that have <mask> of the most <mask>",
                "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What is the structure of the document with the least number of accesses?",
                "masked_template": "What is the <mask> of the <mask> with the least number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Find the city that hosted the most events.",
                "masked_template": "Find the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which city has hosted the most events?",
                "masked_template": "Which <mask> has <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Return the structure description of the document that has been accessed the fewest number of times.",
                "masked_template": "Return the <mask> of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Which customer have the most policies? Give me the customer details.",
                "masked_template": "Which <mask> have the most <mask> me the <mask>",
                "query": "SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_details ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Return the name of the document that has the most sections.",
                "masked_template": "Return the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.document_name FROM documents AS T1 JOIN document_sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Show the name of the party that has the most delegates.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the top 3 products which have the largest number of problems?",
                "masked_template": "Find the top 3 <mask> which have the <mask> number of <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the aircraft that has won an award the most?",
                "masked_template": "What is the name of the <mask> that has won an <mask> the <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the name of the course that has the most student enrollment?",
                "masked_template": "What is the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which course is enrolled in by the most students? Give me the course name.",
                "masked_template": "Which <mask> is <mask> in by the most <mask> me the <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name of the activity that has the largest number of student participants.",
                "masked_template": "Find the name of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            }
        ],
        "best_hyp": "What is the name of the degree that has the most student enrollment?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the degree with the most student enrollment?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
        "proc_query": "( <col> student id </col> ) that belongs to ( <tab> friend </tab> ), and intersect with ( ( <col> liked id </col> ) that belongs to ( <tab> likes </tab> ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids of all the students who have friends and likes?",
            "Find the ids of students who have friends and likes.",
            "What are ids of the students who not only live in an apartment but also have a friend?",
            "Show the ids of all the students who live in an apartment and have a friend.",
            "Show ids of students who have friends and likes.",
            "What are the ids of all students who have friends and likes?",
            "What are the student ids that are shared by friends and likes?",
            "Which students' names are both shared by friends and by likes?",
            "What are the student ids shared both by friends and by likes?",
            "What are the ids of all students who have friends and likes?",
            "Which students do not have friends for any relationship? Tell me their ids.",
            "Show the ids of the students who have friends for any number of years",
            "What are the ids of students who have friends and likes?",
            "Which students do not have any friends? Find their ids.",
            "Find the id of students who have some friends and some likes.",
            "Find the id of all the students who have friends and likes.",
            "Show ids of students who have friends and likes.",
            "What are the ids of all students who have friends and likes?",
            "What are the ids of all students who are not friends?",
            "Show the ids of all students who have some friends and some likes.",
            "Which students do not have any friends? Find their ids.",
            "Show the ids of all students who have a friend or an associate to do something.",
            "Which students have either a friend or an admirer to do so? Return their ids.",
            "Find the id of the students that do not have any friends.",
            "What are the ids of all the students who have friends and likes?",
            "Show the ids of the students who are friends with some friends and have some likes.",
            "What are the ids of all students who do not have friends?",
            "What are the ids of the students who are not followed by any friends?",
            "What are the ids of all students who have friends and likes?",
            "Show ids for all students who have a friend or like.",
            "Return all student ids and their friends' names in a single record."
        ],
        "templates": [
            "",
            {
                "question": "Find the common personal name of course authors and students.",
                "masked_template": "Find the <mask> name of <mask> and <mask>",
                "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
                "masked_template": "What are ids of the <mask> who not <mask> in an <mask> but <mask> a <mask>",
                "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
                "masked_template": "Show the ids of all the <mask> who <mask> in an <mask> and <mask> a <mask>",
                "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show ids of students who play video game and play sports.",
                "masked_template": "Show ids of <mask> who <mask> and <mask>",
                "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who played video games and sports?",
                "masked_template": "What are the ids of all <mask> who <mask> and <mask>",
                "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the last names that are used by customers and staff?",
                "masked_template": "What are the <mask> names that are <mask> by <mask> and <mask>",
                "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Which last names are both used by customers and by staff?",
                "masked_template": "Which <mask> names are both <mask> by <mask> and by <mask>",
                "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the personal names used both by some course authors and some students?",
                "masked_template": "What are the <mask> names <mask> both by <mask> and <mask>",
                "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names of all cities and states?",
                "masked_template": "What are the names of all <mask> and <mask>",
                "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
                "masked_template": "Which <mask> do not <mask> for any <mask> me their <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids of the employees who don't authorize destruction for any document.",
                "masked_template": "Show the ids of the <mask> who <mask> for any <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids of instructors who didnt' teach?",
                "masked_template": "What are the ids of <mask> who <mask>",
                "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Which faculty do not participate in any activity? Find their faculty ids.",
                "masked_template": "Which <mask> do not <mask> in any <mask> Find their <mask>",
                "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "Find the id of instructors who didn't teach any courses?",
                "masked_template": "Find the id of <mask> who <mask> any <mask>",
                "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Find the name of all the cities and states.",
                "masked_template": "Find the name of all the <mask> and <mask>",
                "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "Show ids of students who don't play video game.",
                "masked_template": "Show ids of <mask> who <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who don't play sports?",
                "masked_template": "What are the ids of all <mask> who <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who are not video game players?",
                "masked_template": "What are the ids of all <mask> who are not <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "Show the ids of all employees who don't destroy any document.",
                "masked_template": "Show the ids of all <mask> who <mask> any <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which employees do not destroy any document? Find their employee ids.",
                "masked_template": "Which <mask> do not <mask> any <mask> Find their <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
                "masked_template": "Show the ids of all <mask> who have <mask> a <mask> or <mask> an <mask> to do <mask>",
                "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
                "masked_template": "Which <mask> have <mask> a <mask> or <mask> an <mask> to do so? Return their <mask>",
                "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Find the id of the courses that do not have any prerequisite?",
                "masked_template": "Find the id of the <mask> that do not have any <mask>",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of all the reviewers and movie names?",
                "masked_template": "What are the names of all the <mask> and <mask>",
                "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                "ted": 0.05555555555555555,
                "db_id": "movie_1"
            },
            {
                "question": "Show the ids of the students who don't participate in any activity.",
                "masked_template": "Show the ids of the <mask> who <mask> in any <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "What are the names of all people who do not have friends?",
                "masked_template": "What are the names of all <mask> who do not have <mask>",
                "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                "ted": 0.05555555555555555,
                "db_id": "network_2"
            },
            {
                "question": "What are the ids of the students who are not involved in any activity",
                "masked_template": "What are the ids of the <mask> who are not <mask> in any <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "What are the ids of courses without prerequisites?",
                "masked_template": "What are the ids of <mask>",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Show ids for all employees who don't have a certificate.",
                "masked_template": "Show ids for all <mask> who <mask> have a <mask>",
                "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "Return all reviewer names and movie names together in a single list.",
                "masked_template": "Return all <mask> names and <mask> names <mask> in a <mask>",
                "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                "ted": 0.05555555555555555,
                "db_id": "movie_1"
            }
        ],
        "best_hyp": "Which students do not have any friends? Find their ids.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids of all the students who have friends and likes?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT( * ) >= 3",
        "proc_query": "( <col> hometown </col> ) that belongs to ( <tab> teacher </tab> ) , grouped by ( <col> hometown </col> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 3 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the hometowns that have at least three teachers?",
            "Find the ID for hometowns that have at least three teachers.",
            "Show the hometowns with at least 3 teachers.",
            "Show all hometowns that have at least two teachers.",
            "Show the hometowns that have at least two teachers.",
            "What are the hometowns that have at least three teachers?",
            "What hometowns have at least three teachers?",
            "What are the ids for hometowns that have at least three teachers?",
            "What is the hometown with at least two teachers?",
            "What are the hometowns with 3 or more teachers? Tell me the hometown names.",
            "What are the names of all hometowns that have at least three teachers?",
            "Show the hometowns which have two or more teachers.",
            "What are the hometowns in which at least two teachers are from?",
            "Show all hometowns with at least 3 teachers.",
            "Show the hometowns with at least two teachers.",
            "Find the hometowns that have at least three teachers.",
            "Show the names of hometowns that have at least two teachers.",
            "List all hometowns where at least two teachers are from.",
            "What are the hometowns that have at least 3 teachers?",
            "What are the ids for hometowns that have at least three teachers?",
            "Which hometowns have at least two teachers?",
            "Show hometowns with at least 3 teachers.",
            "Which hometown has at least three teachers?",
            "Show the name of the hometown that has at least two teachers.",
            "What are the hometowns that are shared by at least two teachers?",
            "What are the hometowns of teachers that have two or more teachers?",
            "List the hometowns with at least two teachers.",
            "Which hometowns have at least three teachers?",
            "What are the ids of hometowns that have at least 3 teachers?",
            "Show the ids for hometowns with at least two teachers.",
            "What are the names of the hometowns with at least 3 teachers?"
        ],
        "templates": [
            "",
            {
                "question": "display the ID for those employees who did two or more jobs in the past.",
                "masked_template": "<mask> the ID for <mask> who did two or more <mask> in the <mask>",
                "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Show the location codes with at least 3 documents.",
                "masked_template": "Show the <mask> with at least 3 <mask>",
                "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show all advisors who have at least two students.",
                "masked_template": "Show all <mask> who have at least two <mask>",
                "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show the product type codes that have at least two products.",
                "masked_template": "Show the <mask> that have at least two <mask>",
                "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "What are the advisors",
                "masked_template": "What are the <mask>",
                "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What parties have at least three representatives?",
                "masked_template": "What <mask> have at least <mask>",
                "query": "SELECT Party FROM representative GROUP BY Party HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "What are the employee ids for employees who have held two or more jobs?",
                "masked_template": "What are the <mask> ids for <mask> who have <mask> two or more <mask>",
                "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What is the team with at least 2 technicians?",
                "masked_template": "What is the <mask> with at least 2 <mask>",
                "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "machine_repair"
            },
            {
                "question": "What are the roles with three or more employees? Give me the role codes.",
                "masked_template": "What are the <mask> with <mask> or more <mask> me the <mask>",
                "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the names of all colleges that have two or more players?",
                "masked_template": "What are the names of all <mask> that have two or more <mask>",
                "query": "SELECT College FROM match_season GROUP BY College HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "Give the districts which have two or more addresses.",
                "masked_template": "<mask> the <mask> which have two or more <mask>",
                "query": "SELECT district FROM address GROUP BY district HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What are the opening years in which at least two shops opened?",
                "masked_template": "What are the <mask> in which at least two <mask>",
                "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "Show all role codes with at least 3 employees.",
                "masked_template": "Show all <mask> with at least 3 <mask>",
                "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the opening year in whcih at least two churches opened.",
                "masked_template": "Show the <mask> in <mask> at least two <mask>",
                "query": "SELECT open_date FROM church GROUP BY open_date HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "Find the wineries that have at least four wines.",
                "masked_template": "Find the <mask> that have at least <mask>",
                "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Show the name of colleges that have at least two players.",
                "masked_template": "Show the name of <mask> that have at least two <mask>",
                "query": "SELECT College FROM match_season GROUP BY College HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "match_season"
            },
            {
                "question": "List all open years when at least two shops are opened.",
                "masked_template": "List all <mask> at least two <mask> are <mask>",
                "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the codes of card types that have 5 or more cards?",
                "masked_template": "What are the <mask> of <mask> that have 5 or more <mask>",
                "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count( * ) >= 5",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the employee ids for those who had two or more jobs.",
                "masked_template": "What are the <mask> ids for <mask> who had two or more <mask>",
                "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Which districts have at least two addresses?",
                "masked_template": "Which <mask> have at least two <mask>",
                "query": "SELECT district FROM address GROUP BY district HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Show card type codes with at least 5 cards.",
                "masked_template": "Show <mask> with at least 5 <mask>",
                "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count( * ) >= 5",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Which party has two or more records?",
                "masked_template": "Which <mask> has two or more <mask>",
                "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the name of the party that has at least two records.",
                "masked_template": "Show the name of the <mask> that has at least two <mask>",
                "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the birth places that are shared by at least two people?",
                "masked_template": "What are the <mask> that are <mask> by at least two <mask>",
                "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "What are the classes of races that have two or more corresponding races?",
                "masked_template": "What are the <mask> of <mask> that have two or more <mask>",
                "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "List the race class with at least two races.",
                "masked_template": "List the <mask> with at least two <mask>",
                "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Which wineries produce at least four wines?",
                "masked_template": "Which <mask> at least <mask>",
                "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "What are project ids of projects that have 2 or more corresponding documents?",
                "masked_template": "What are <mask> ids of <mask> that have 2 or more <mask>",
                "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show the ids for projects with at least 2 documents.",
                "masked_template": "Show the ids for <mask> with at least 2 <mask>",
                "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the names of the states where at least 3 heads were born?",
                "masked_template": "What are the names of the <mask> at least 3 <mask>",
                "query": "SELECT born_state FROM head GROUP BY born_state HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "department_management"
            }
        ],
        "best_hyp": "What are the hometowns that are shared by at least two teachers?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the hometowns that have at least three teachers?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT line_1 , line_2 FROM addresses",
        "proc_query": "( <col> line 1 </col> ) , ( <col> line 2 </col> ) that belongs to ( <tab> addresses </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are line 1 and 2 of the addresses?",
            "List all line 1 and 2 addresses.",
            "Show the line 1 and 2 of addresses.",
            "What are the line 1 and 2 for each address?",
            "Show all line 1 and 2 of addresses.",
            "What are all the line 1 and 2 addresses?",
            "Show the ids and names of all line 1 and 2 addresses.",
            "What are the line 1 and 2 of all addresses?",
            "What are all the line 1 and 2 addresses?",
            "What are the ids and line numbers of all addresses?",
            "What are the line 1 and 2 of the addresses?",
            "What are the line 1 and 2 of addresses?",
            "Show all line 1 and 2 numbers of addresses.",
            "What are the names and lines of all addresses?",
            "Show the line 1 and 2 for all addresses.",
            "What are the ids and names for each of the addresses?",
            "List all line 1 and 2 of addresses.",
            "What are the line 1 and 2 of addresses?",
            "Show the line 1 and 2 of all addresses.",
            "Show all the line 1 and 2 of addresses.",
            "What are the lines 1 and 2 of addresses?",
            "List the names and the lines that the addresses can correspond to.",
            "For each address, show the line 1 and 2.",
            "List the tax ids and their corresponding cmi numbers of all the addresses",
            "Tell me the line 1 and 2 of each address.",
            "What are the line 1 and 2 of addresses?",
            "Return the low and high line 1 for all addresses.",
            "Show all line 1 and 2 of addresses.",
            "Return the line 1 and 2 for each address.",
            "Return the line 1 and 2 of addresses.",
            "What are the names and lines of addresses for all addresses?"
        ],
        "templates": [
            "",
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What are the line 1 and 2 of addresses?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are line 1 and 2 of the addresses?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT min( grade ) FROM Highschooler WHERE id NOT IN ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id )",
        "proc_query": "( the minimum of ( <col> grade </col> ) ) that belongs to ( <tab> high schooler </tab> ) , that have ( ( <col> id </col> ) not in ( ( <col> student id </col> of <tab> friend </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the minimum grade for students who are not friends with any high schooler?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What is the minimum grade for students who are not friends with any high schooler?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the minimum grade for students who are not friends with any high schooler?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count( * ) = 3",
        "proc_query": "( <col> first name </col> of <tab> students </tab> ) , ( <col> middle name </col> of <tab> students </tab> ) , ( <col> last name </col> of <tab> students </tab> ) , ( <col> student id </col> of <tab> students </tab> ) that belongs to ( ( <tab> students </tab> ) , and ( ( <tab> student enrolment </tab> ) satisfied that ( ( <col> student id </col> of <tab> students </tab> ) equal to ( <col> student id </col> of <tab> student enrolment </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> students </tab> ) , that have ( ( the number of ( all items ) ) equal to ( <val> 3 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first name, middle name, and id of the students who are enrolled in three universities?",
            "List the first name the student was studying the year it was enrolled and the last name for all the students which had one or more enrollments",
            "Which students had one or more enrollments? For me the the first name the student was the youngest it was and the last name was"
        ],
        "templates": [
            "",
            {
                "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.",
                "masked_template": "List the <mask> the <mask> was <mask> the <mask> it was <mask> and the <mask> for all the <mask> which had <mask> one <mask>",
                "query": "SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count( * ) = 1",
                "ted": 0.09090909090909091,
                "db_id": "insurance_policies"
            },
            {
                "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.",
                "masked_template": "Which <mask> had <mask> one <mask> For <mask> me the the <mask> the <mask> was <mask> the <mask> it was <mask> and the <mask>",
                "query": "SELECT T1.claim_id , T1.date_claim_made , T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING count( * ) = 1",
                "ted": 0.09090909090909091,
                "db_id": "insurance_policies"
            }
        ],
        "best_hyp": "List the first name the student was studying the year it was enrolled and the last name for all the students which had one or more enrollments",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first name, middle name, and id of the students who are enrolled in three universities?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
        "proc_query": "( <col> name </col> of <tab> teacher </tab> ) that belongs to ( ( <tab> course arrange </tab> ) , and ( ( <tab> teacher </tab> ) satisfied that ( ( <col> teacher id </col> of <tab> course arrange </tab> ) equal to ( <col> teacher id </col> of <tab> teacher </tab> ) ) ) ) , grouped by ( <col> name </col> of <tab> teacher </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the teachers who arrange at least two courses?",
            "Show the names of teachers that are on at least two courses.",
            "What are the names of teachers that are involved in at least two courses?",
            "Find the name of the teacher who has at least two courses arrange?",
            "Find the names of teachers who arrange two or more courses.",
            "Show the teacher name with at least two courses arrange.",
            "Show the names of teachers that are in charge of at least two courses.",
            "Show the names of teachers that have at least two courses arrange.",
            "Which teachers have two or more courses? Tell me the teacher names.",
            "Which teachers arrange two ore more courses? Tell me their names.",
            "Show the ids of the teachers who have at least two courses arrange.",
            "Find the names of the teachers with at least two courses arrange.",
            "Return the names of teachers that have either two or more courses arrange?",
            "What are the names of teachers with at least two courses arrange?",
            "Which teachers have at least 3 courses arrange?",
            "What are the names of teachers that arrange 3 or more courses?",
            "List the names of teachers who arrange at least two courses.",
            "What are the names of all teachers that have won a course arrange at least twice?",
            "What are the names of teachers that have at least two courses arrange?",
            "Show all teacher names that have at least two courses arrange.",
            "Show the ids for all the teachers who have at least two courses arrange.",
            "Show the names of teachers who have worked on the arrange of courses at least twice.",
            "What are the names of teachers with two or more courses arrange?",
            "Show names of teachers who have at least two courses arrange.",
            "What are the names of teachers who have at least two courses arrange?",
            "Show names for all teachers with at least two courses arrange.",
            "What are the names for all teachers with at least two courses arrange?",
            "Find the names of all teachers who have either two or more courses arrange?",
            "What are the names of all teachers that have arrange 3 or more courses?",
            "What are the names of teachers who arrange at least two courses?",
            "What are the names of teachers who have at least two courses arrange?"
        ],
        "templates": [
            "",
            {
                "question": "Show the names of editors that are on at least two journal committees.",
                "masked_template": "Show the names of <mask> that are on at least two <mask>",
                "query": "SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "What are the hometowns that are shared by at least two gymnasts?",
                "masked_template": "What are the <mask> that are <mask> by at least two <mask>",
                "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "gymnast"
            },
            {
                "question": "Find the name of the swimmer who has at least 2 records.",
                "masked_template": "Find the name of the <mask> who has at least 2 <mask>",
                "query": "SELECT T1.name FROM swimmer AS T1 JOIN record AS T2 ON T1.id = T2.swimmer_id GROUP BY T2.swimmer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Give the hometowns from which two or more gymnasts are from.",
                "masked_template": "<mask> the <mask> which two or more <mask> are <mask>",
                "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "gymnast"
            },
            {
                "question": "Show the station name with at least two trains.",
                "masked_template": "Show the <mask> name with at least two <mask>",
                "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Show the names of products that are in at least two events.",
                "masked_template": "Show the names of <mask> that are in at least two <mask>",
                "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "Show the names of counties that have at least two delegates.",
                "masked_template": "Show the names of <mask> that have at least two <mask>",
                "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Which counties have two or more delegates? Give me the county names.",
                "masked_template": "Which <mask> have two or more <mask> me the <mask>",
                "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Which faculty members advise two ore more students? Give me their faculty ids.",
                "masked_template": "Which <mask> two ore more <mask> me their <mask>",
                "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the ids of the investors who have at least two transactions.",
                "masked_template": "Show the ids of the <mask> who have at least two <mask>",
                "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Give the names of the courses with at least five enrollments.",
                "masked_template": "<mask> the names of the <mask> with at least <mask>",
                "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT( * ) >= 5",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Return the names of parties that have two or more events.",
                "masked_template": "Return the names of <mask> that have two or more <mask>",
                "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are the names of parties with at least 2 events?",
                "masked_template": "What are the names of <mask> with at least 2 <mask>",
                "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Which countries have at least 3 cities?",
                "masked_template": "Which <mask> have at least 3 <mask>",
                "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What are the countries that contain 3 or more cities?",
                "masked_template": "What are the <mask> that <mask> 3 or more <mask>",
                "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "List the names of aircrafts and that won matches at least twice.",
                "masked_template": "List the names of <mask> and that won <mask> at least <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aircrafts that have won a match at least twice?",
                "masked_template": "What are the names of all <mask> that have won a <mask> at least <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the name of courses that have at least five enrollments?",
                "masked_template": "What are the name of <mask> that have at least <mask>",
                "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT( * ) >= 5",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Show all church names that have hosted least two weddings.",
                "masked_template": "Show all <mask> names that have <mask> least two <mask>",
                "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "Show the ids for all the faculty members who have at least 2 students.",
                "masked_template": "Show the ids for all the <mask> who have at least 2 <mask>",
                "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the names of people who have been on the negative side of debates at least twice.",
                "masked_template": "Show the names of <mask> who have <mask> on the <mask> of <mask> at least <mask>",
                "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "debate"
            },
            {
                "question": "What are the names of regions with two or more storms?",
                "masked_template": "What are the names of <mask> with two or more <mask>",
                "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Show names of musicals which have at least three actors.",
                "masked_template": "Show names of <mask> which have at least <mask>",
                "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "What are the names of musicals who have at 3 or more actors?",
                "masked_template": "What are the names of <mask> who have at 3 or more <mask>",
                "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show names for all aircraft with at least two flights.",
                "masked_template": "Show names for all <mask> with at least two <mask>",
                "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the names for all aircrafts with at least 2 flights?",
                "masked_template": "What are the names for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the names of all reviewers who have contributed three or more ratings.",
                "masked_template": "Find the names of all <mask> who have <mask> or more <mask>",
                "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What are the names of all reviewers that have rated 3 or more movies?",
                "masked_template": "What are the names of all <mask> that have <mask> 3 or more <mask>",
                "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What are the titles for courses with two prerequisites?",
                "masked_template": "What are the <mask> for <mask> with two <mask>",
                "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING count( * ) = 2",
                "ted": 0.03125,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of staff who have been assigned multiple jobs?",
                "masked_template": "What are the names of <mask> who have <mask>",
                "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT( * ) > 1",
                "ted": 0.03125,
                "db_id": "department_store"
            }
        ],
        "best_hyp": "Which teachers arrange two ore more courses? Tell me their names.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the teachers who arrange at least two courses?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT zip_postcode FROM Addresses WHERE city = 'Lake Careyberg'",
        "proc_query": "( <col> zip postcode </col> ) that belongs to ( <tab> addresses </tab> ) , that have ( ( <col> city </col> ) equal to ( <val> Lake Careyberg </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the zip code of the address in Lake Careyberg?",
            "Find the zip code of the city called Lake Careyberg.",
            "What is the zip code of the city named Lake Careyberg?",
            "What is the zip code of the city of Lake Careyberg?",
            "Find the zip code of the city of Lake Careyberg.",
            "What are the zip codes of all cities in Lake Careyberg?",
            "Find the zip code of all cities in Lake Careyberg.",
            "What is the zip code for the city with city name Lake Careyberg?",
            "Find the zip code of the city called Lake Careyberg.",
            "Which zip codes have the city with city name Lake Careyberg? Find their zip codes.",
            "Return the zip code numbers of the city with city name Lake Careyberg.",
            "Which zip codes have corresponding cities? Tell me their zip codes.",
            "Show the zip code of the city with city name Lake Careyberg.",
            "Show the zip code of the city named Lake Careyberg.",
            "What are the zip codes of all the addresses in Lake Careyberg?",
            "Return the zip code of Lake Careyberg for all the addresses with city code \"Lake Careyberg\".",
            "What are zip codes of all the cities whose city is Lake Careyberg?",
            "What is the zip code of address of city whose city is Lake Careyberg?",
            "What is the zip code of the address in Lake Careyberg?",
            "What are the zip codes of cities whose city is Lake Careyberg?",
            "What are the zip codes of addresses that are in city Lake Careyberg?",
            "What is the zip code of the address in the city of Lake Careyberg?",
            "What is the zip code of the city of Lake Careyberg?",
            "Find the zip code of the city called Lake Careyberg.",
            "Show the zip code for city name Lake Careyberg.",
            "What are the zip codes of all cities in Lake Careyberg?",
            "How many zip codes is Lake Careyberg located?",
            "Tell us the zip code of the city named Lake Careyberg.",
            "Show zip code for all the addresses in Lake Careyberg.",
            "What are the zip code ids of all the addresses in Lake Careyberg?",
            "Find the zip code corresponding to addresses in the city of Lake Careyberg."
        ],
        "templates": [
            "",
            {
                "question": "Find the name of dorms only for female (F gender).",
                "masked_template": "Find the name of <mask> for <mask> (F <mask>",
                "query": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the location of the club named \"Tennis Club\"?",
                "masked_template": "What is the <mask> of the <mask> named <mask>",
                "query": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What is the description of the club \"Pen and Paper Gaming\"?",
                "masked_template": "What is the <mask> of the <mask> and <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Find the description of the club \"Pen and Paper Gaming\".",
                "masked_template": "Find the <mask> of the <mask> and <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What are the names of all movies directed by Steven Spielberg?",
                "masked_template": "What are the names of all <mask> by <mask>",
                "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies directed by steven spielberg.",
                "masked_template": "Find the <mask> of all <mask> by <mask>",
                "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
                "masked_template": "What is the <mask> for the <mask> with <mask>",
                "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = 'VIOLENCE'",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the description of the club called \"Tennis Club\".",
                "masked_template": "Find the <mask> of the <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Which employees have the role with code \"HR\"? Find their names.",
                "masked_template": "Which <mask> have the <mask> with <mask> Find their <mask>",
                "query": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
                "masked_template": "Return the <mask> numbers of the <mask> with <mask>",
                "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
                "masked_template": "Which <mask> have <mask> me their <mask>",
                "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the names of all the employees with role \"HR\".",
                "masked_template": "Show the names of all the <mask> with <mask>",
                "query": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the id of the employee named Ebba.",
                "masked_template": "Show the id of the <mask> named <mask>",
                "query": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the id of all the files in mp3 format?",
                "masked_template": "What are the id of all the <mask> in mp3 <mask>",
                "query": "SELECT f_id FROM files WHERE formats = 'mp3'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "Return the date of birth for all the guests with gender code \"Male\".",
                "masked_template": "Return the <mask> of <mask> for all the <mask> with <mask>",
                "query": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are dates of birth of all the guests whose gender is \"Male\"?",
                "masked_template": "What are <mask> of <mask> of all the <mask> whose <mask> is <mask>",
                "query": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
                "masked_template": "What is the <mask> of <mask> of <mask> whose <mask> is <mask>",
                "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the id for the employee called Ebba?",
                "masked_template": "What is the id for the <mask>",
                "query": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the id of songs whose format is mp3.",
                "masked_template": "What are the id of <mask> whose <mask> is <mask>",
                "query": "SELECT f_id FROM files WHERE formats = 'mp3'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
                "masked_template": "<mask> are the <mask> of <mask> who are <mask> as <mask>",
                "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the code of the school where the accounting department belongs to?",
                "masked_template": "What is the <mask> of the <mask> the <mask> to?",
                "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the school code of the accounting department?",
                "masked_template": "What is the <mask> of the <mask>",
                "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the department name that is in Building \"Mergenthaler\".",
                "masked_template": "Find the <mask> name that is in <mask>",
                "query": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Show the description for role name \"Proof Reader\".",
                "masked_template": "Show the <mask> for <mask> name <mask>",
                "query": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the names of all songs in English?",
                "masked_template": "What are the names of all <mask> in <mask>",
                "query": "SELECT song_name FROM song WHERE languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "How many milliseconds long is Fast As a Shark?",
                "masked_template": "How many <mask> is <mask> As a <mask>",
                "query": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Where us the club named \"Tennis Club\" located?",
                "masked_template": "<mask> us the <mask> named <mask>",
                "query": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Show ids for all the male faculty.",
                "masked_template": "Show ids for all the <mask>",
                "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty ids of all the male faculty members?",
                "masked_template": "What are the <mask> ids of all the <mask>",
                "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
                "masked_template": "Find the <mask> to <mask> who <mask> in the <mask> of <mask>",
                "query": "SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'",
                "ted": 0.0,
                "db_id": "chinook_1"
            }
        ],
        "best_hyp": "What is the zip code of the city named Lake Careyberg?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the zip code of the address in Lake Careyberg?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "proc_query": "( <col> department description </col> ) that belongs to ( <tab> departments </tab> ) , that have ( ( <col> department name </col> ) like ( <val> %computer% </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the description of the department whose name starts with the word 'computer'?",
            "Which department names have the substring 'computer'?",
            "What is the description of the department whose name has substring \"computer\"?",
            "What is the description of the department with an employee who has a name containing the word 'computer'?",
            "Find the names of all the departments whose name contains the word 'computer'.",
            "Which departments have a department number that starts with the word 'computer'? Show the department description.",
            "List the department descriptions with substring \"computer\".",
            "Return the description corresponding to the department with name containing the word 'computer'.",
            "Which departments have names containing the substring 'computer'?",
            "What are the names of departments that contain the substring 'computer'?",
            "Which department names contain the substring 'computer'?",
            "What are the names of departments that contain the the substring you in?",
            "Find the description of departments whose names contain substring 'computer'.",
            "Find the names of all the departments that contain the word 'computer'.",
            "Find all the department descriptions whose names contain the substring 'computer'.",
            "Find the descriptions of departments whose name starts with the word 'computer'.",
            "Find all the department descriptions whose name starts with the word 'computer'.",
            "What are the names of the departments whose name has the substring 'computer'?",
            "Find the descriptions of departments whose name starts with the word 'computer'.",
            "Find the description of the department whose name starts with the word 'computer'.",
            "What is the description of the department whose name starts with the word 'computer'?",
            "What are the descriptions of all departments whose names start with computer?",
            "Find the description of the department whose name starts with substring 'computer'.",
            "What are the names of the departments that have substring in their names?",
            "Which of the department descriptions contains the substring 'computer'?",
            "List all the department descriptions with substring \"computer\".",
            "Which department name contains the substring 'computer'?",
            "Find the names of all departments that have \"computer\" in their names.",
            "What are the names of departments that have the substring 'a' in their names?",
            "What are the descriptions of departments that have substring in the names of their departments?",
            "Which departments have the substring 'computer' in their names? Return the department descriptions."
        ],
        "templates": [
            "",
            {
                "question": "Which enzyme names have the substring \"ALA\"?",
                "masked_template": "Which <mask> names have the <mask>",
                "query": "SELECT name FROM enzyme WHERE name LIKE '%ALA%'",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
                "masked_template": "What is the id of the <mask> whose name has <mask>",
                "query": "SELECT rID FROM Reviewer WHERE name LIKE '%Mike%'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
                "masked_template": "What is the name of the <mask> with an <mask> who has a name <mask>",
                "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Find the names of all the products whose stock number starts with \"2\".",
                "masked_template": "Find the names of all the <mask> whose <mask> number <mask> with <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
                "masked_template": "Which <mask> have a <mask> number that <mask> Show the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE '2%'",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "List the camera lens names containing substring \"Digital\".",
                "masked_template": "List the <mask> names <mask>",
                "query": "SELECT name FROM camera_lens WHERE name LIKE '%Digital%'",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".",
                "masked_template": "<mask> the <mask> to the <mask> number <mask>",
                "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
                "masked_template": "Which <mask> can <mask> be in?",
                "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE '%6862 Kaitlyn Knolls%'",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of organizations that contain the word \"Party\"?",
                "masked_template": "What are the names of <mask> that <mask> the <mask>",
                "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which location names contain the word \"film\"?",
                "masked_template": "Which <mask> names <mask> the <mask>",
                "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names of tracks that contain the the word you in them?",
                "masked_template": "What are the names of <mask> that <mask> the the <mask> you in <mask>",
                "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Find the name of organizations whose names contain \"Party\".",
                "masked_template": "Find the name of <mask> whose names <mask>",
                "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE '%Party%'",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Find the names of all the tracks that contain the word \"you\".",
                "masked_template": "Find the names of all the <mask> that <mask> the <mask>",
                "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Find all the locations whose names contain the word \"film\".",
                "masked_template": "Find all the <mask> whose names <mask> the <mask>",
                "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE '%film%'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the names of customers whose name contains \"Diana\".",
                "masked_template": "Find the names of <mask> whose name <mask>",
                "query": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%'",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Find all the songs whose name contains the word \"the\".",
                "masked_template": "Find all the <mask> whose name <mask> the <mask>",
                "query": "SELECT title FROM songs WHERE title LIKE '% the %'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What are the names of the songs whose title has the word \"the\"?",
                "masked_template": "What are the names of the <mask> whose <mask> has the <mask>",
                "query": "SELECT title FROM songs WHERE title LIKE '% the %'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "Find the IDs of customers whose name contains \"Diana\".",
                "masked_template": "Find the IDs of <mask> whose name <mask>",
                "query": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Find the founder of the company whose name begins with the letter 'S'.",
                "masked_template": "Find the <mask> of the <mask> whose name <mask> with the <mask>",
                "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "Who is the founders of companies whose first letter is S?",
                "masked_template": "Who is the <mask> of <mask> whose <mask> is S?",
                "query": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the countries of all airlines whose names start with Orbit?",
                "masked_template": "What are the <mask> of all <mask> whose names <mask> with <mask>",
                "query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the country of the airlines whose name starts with 'Orbit'.",
                "masked_template": "Find the <mask> of the <mask> whose name <mask> with <mask>",
                "query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the names of the physicians who have 'senior' in their titles.",
                "masked_template": "What are the names of the <mask> who have <mask> in their <mask>",
                "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Which of the airport names contains the word 'international'?",
                "masked_template": "Which of the <mask> names <mask> the <mask>",
                "query": "SELECT name FROM airport WHERE name LIKE '%international%'",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "List all the document names which contains \"CV\".",
                "masked_template": "List all the <mask> names which <mask>",
                "query": "SELECT document_name FROM documents WHERE document_name LIKE '%CV%'",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Which stadium name contains the substring \"Bank\"?",
                "masked_template": "Which <mask> name <mask> the <mask>",
                "query": "SELECT name FROM stadium WHERE name LIKE '%Bank%'",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "Find the names of all artists that have \"a\" in their names.",
                "masked_template": "Find the names of all <mask> that have \"a\" in their <mask>",
                "query": "SELECT Name FROM ARTIST WHERE Name LIKE '%a%'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the names of artist who have the letter 'a' in their names?",
                "masked_template": "What are the names of <mask> who have the <mask> 'a' in their <mask>",
                "query": "SELECT Name FROM ARTIST WHERE Name LIKE '%a%'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the IDs of customers who have \"Diana\" in part of their names?",
                "masked_template": "What are the IDs of <mask> who have <mask> in <mask> of their <mask>",
                "query": "SELECT customer_id FROM customers WHERE customer_name LIKE '%Diana%'",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
                "masked_template": "Which <mask> have the <mask> in their <mask> Return the <mask>",
                "query": "SELECT customer_details FROM customers WHERE customer_details LIKE '%Diana%'",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            }
        ],
        "best_hyp": "Find the description of the department whose name starts with the word 'computer'.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the description of the department whose name starts with the word 'computer'?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT name FROM Highschooler WHERE grade = 11",
        "proc_query": "( <col> name </col> ) that belongs to ( <tab> high schooler </tab> ) , that have ( ( <col> grade </col> ) equal to ( <val> 11 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of all the students in grade 11?",
            "Who are the students in grade 11?",
            "List the name of the students with grade 11.",
            "What is the name of the youngest student in grade 11?",
            "Find all the names of students whose grade is 11. What are the order of their names?",
            "Find the ids of all the students whose grade is 11.",
            "List all names of students with grade 11.",
            "What is the name of the youngest student in grade 11?",
            "Find the names of all students in grade 11.",
            "What are the names of all the students in grade 11?",
            "Find the name of students in grade 11.",
            "Which grade is grade 255 in?",
            "What are the names of the students in grade 11?",
            "What are the ids of the students who are in grade 11?",
            "What are the names of students in grade 11?",
            "What are the names of students in grade 11?",
            "Find the names of students in grade 11.",
            "Find the name of students in grade 11.",
            "What are the names of students in grade 11?",
            "Who is the youngest student in grade 11?",
            "Find all the high school students in grade 11.",
            "What are the names of students in grade 11?",
            "What are the names of students in grade 11?",
            "What is the name of the high schooler with grade 11?",
            "What are the names of students in grade 11?",
            "Who is the youngest student in grade 11?",
            "Show the name of students in grade 11.",
            "Show ids for all students who are in grade 11.",
            "What are the ids of all students who have grade 11?",
            "Show name for all students with grade 11.",
            "Find the names of students with grade 50."
        ],
        "templates": [
            "",
            {
                "question": "Who advises student 1004?",
                "masked_template": "Who <mask>",
                "query": "SELECT Advisor FROM Student WHERE StuID = 1004",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "List the document type code for the document with the id 2.",
                "masked_template": "List the <mask> for the <mask> with the id 2.",
                "query": "SELECT document_type_code FROM Documents WHERE document_id = 2",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "What is the receipt date of the document with id 3?",
                "masked_template": "What is the <mask> of the <mask> with id 3?",
                "query": "SELECT receipt_date FROM Documents WHERE document_id = 3",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "Find all the order items whose product id is 11. What are the order item ids?",
                "masked_template": "Find all the order <mask> whose <mask> id is 11. What are the order <mask>",
                "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the ids of all the order items whose product id is 11.",
                "masked_template": "Find the ids of all the order <mask> whose <mask> id is 11.",
                "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "List all names of courses with 1 credit?",
                "masked_template": "List all names of <mask> with 1 <mask>",
                "query": "SELECT CName FROM COURSE WHERE Credits = 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What is draft detail of the document with id 7?",
                "masked_template": "What is <mask> of the <mask> with id 7?",
                "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "Find the names of all races held in 2017.",
                "masked_template": "Find the names of all <mask> in <mask>",
                "query": "SELECT name FROM races WHERE YEAR = 2017",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "What are the names of all the races that occurred in the year 2017?",
                "masked_template": "What are the names of all the <mask> that <mask> in the <mask>",
                "query": "SELECT name FROM races WHERE YEAR = 2017",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "Find the city with post code 255.",
                "masked_template": "Find the <mask> with <mask>",
                "query": "SELECT city FROM addresses WHERE zip_postcode = 255",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Which city is post code 255 located in?",
                "masked_template": "Which <mask> is <mask> 255 <mask> in?",
                "query": "SELECT city FROM addresses WHERE zip_postcode = 255",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What are the details of the car with id 1?",
                "masked_template": "What are the <mask> of the car with id 1?",
                "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the ids of the students who registered for course 301?",
                "masked_template": "What are the ids of the <mask> who <mask> for <mask>",
                "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names of festivals held in year 2007?",
                "masked_template": "What are the names of <mask> in <mask>",
                "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007",
                "ted": 0.0,
                "db_id": "entertainment_awards"
            },
            {
                "question": "What are the first names of students in room 108?",
                "masked_template": "What are the <mask> names of <mask> in <mask>",
                "query": "SELECT firstname FROM list WHERE classroom = 108",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "Find the first names of students studying in room 108.",
                "masked_template": "Find the <mask> names of <mask> in <mask>",
                "query": "SELECT firstname FROM list WHERE classroom = 108",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "Give the phones for departments in room 268.",
                "masked_template": "<mask> the <mask> for <mask> in <mask>",
                "query": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "What are the phones of departments in Room 268?",
                "masked_template": "What are the <mask> of <mask> in <mask>",
                "query": "SELECT DPhone FROM DEPARTMENT WHERE Room = 268",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Who is the advisor of student with ID 1004?",
                "masked_template": "Who is the <mask> of <mask> with ID <mask>",
                "query": "SELECT Advisor FROM Student WHERE StuID = 1004",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "Find all the campuses opened in 1958.",
                "masked_template": "Find all the <mask> in <mask>",
                "query": "SELECT campus FROM campuses WHERE YEAR = 1958",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "What are the campuses that opened in 1958?",
                "masked_template": "What are the <mask> that <mask> in <mask>",
                "query": "SELECT campus FROM campuses WHERE YEAR = 1958",
                "ted": 0.0,
                "db_id": "csu_1"
            },
            {
                "question": "What are the id of students who registered course 301?",
                "masked_template": "What are the id of <mask> who <mask>",
                "query": "SELECT student_id FROM student_course_attendance WHERE course_id = 301",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What is the mail date of the document with id 7?",
                "masked_template": "What is the <mask> of the <mask> with id 7?",
                "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7",
                "ted": 0.0,
                "db_id": "cre_Doc_Control_Systems"
            },
            {
                "question": "What are the albums produced in year 2010?",
                "masked_template": "What are the <mask> in <mask>",
                "query": "SELECT * FROM Albums WHERE YEAR = 2010",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "Who is the delegate of district 1 in the elections?",
                "masked_template": "Who is the <mask> of <mask> 1 in the <mask>",
                "query": "SELECT Delegate FROM election WHERE District = 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the delegate from district 1 in election.",
                "masked_template": "Show the <mask> 1 in <mask>",
                "query": "SELECT Delegate FROM election WHERE District = 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show ids for all students who have advisor 1121.",
                "masked_template": "Show ids for all <mask> who have <mask>",
                "query": "SELECT StuID FROM Student WHERE Advisor = 1121",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who have advisor number 1121?",
                "masked_template": "What are the ids of all <mask> who have <mask> number <mask>",
                "query": "SELECT StuID FROM Student WHERE Advisor = 1121",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Show first name for all students with major 600.",
                "masked_template": "Show <mask> name for all <mask> with <mask>",
                "query": "SELECT Fname FROM Student WHERE Major = 600",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "Find the last names of students with major 50.",
                "masked_template": "Find the <mask> names of <mask> with <mask> 50.",
                "query": "SELECT LName FROM STUDENT WHERE Major = 50",
                "ted": 0.0,
                "db_id": "voter_2"
            }
        ],
        "best_hyp": "What are the ids of the students who are in grade 11?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of all the students in grade 11?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT count( DISTINCT department_id ) FROM Degree_Programs",
        "proc_query": "( the number of ( distinct ( ( <col> department id </col> ) ) ) ) that belongs to ( <tab> degree programs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many different departments offer degrees?",
            "How many different departments have had degrees?",
            "How many distinct departments are involved in degrees?",
            "How many different departments of degree programs are there?",
            "What are the ids of departments in the degree programs?",
            "How many departments are involved in degree programs?",
            "How many different departments offer degrees?",
            "How many different departments offer degrees?",
            "Count the number of distinct departments.",
            "How many distinct departments are there for all degree programs?",
            "How many different departments do the degrees offer?",
            "Find the number of different departments.",
            "How many different department ids are there?",
            "What is the number of distinct departments the degrees are offered at?",
            "How many different departments have degrees?",
            "Count the number of different departments.",
            "Find the number of distinct departments in degree programs.",
            "Show the number of different departments",
            "Find the number of distinct departments for degree programs.",
            "Count the number of departments that have some degree program.",
            "How many different departments do we offer degrees?",
            "How many different departments offer degrees?",
            "How many distinct departments are involved in degree programs?",
            "Count the number of different departments that offer degrees.",
            "How many different departments are involved in degree programs?",
            "How many different departments do degrees offer?",
            "What is the count of distinct departments with degrees?",
            "How many distinct departments have degrees?",
            "How many distinct departments are involved in degree programs?",
            "How many different departments are all the degrees offered?",
            "Count the number of different departments offered by degrees."
        ],
        "templates": [
            "",
            {
                "question": "How many different teams have had eliminated wrestlers?",
                "masked_template": "How many different <mask> have had <mask>",
                "query": "SELECT COUNT( DISTINCT team ) FROM elimination",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "How many distinct governors are there?",
                "masked_template": "How many distinct <mask> are <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many different types of rooms are there?",
                "masked_template": "How many different <mask> of <mask> are <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the unique types of player positions in the tryout?",
                "masked_template": "What are the <mask> of <mask> in the <mask>",
                "query": "SELECT count( DISTINCT pPos ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many allergies are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( DISTINCT allergy ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different allergy types exist?",
                "masked_template": "How many different <mask>",
                "query": "SELECT count( DISTINCT allergytype ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different colleges were represented at tryouts?",
                "masked_template": "How many different <mask> at <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of distinct governors.",
                "masked_template": "Count the number of distinct <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many distinct currency codes are there for all drama workshop groups?",
                "masked_template": "How many distinct <mask> are there for all <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "How many different colleges do attend the tryout test?",
                "masked_template": "How many different <mask> do <mask> the <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "masked_template": "<mask> the <mask> find the number of <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different bike ids are there?",
                "masked_template": "How many different <mask> ids are <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "masked_template": "What is the number of distinct <mask> the <mask> are <mask> at?",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different cities have these stations?",
                "masked_template": "How many different <mask> have <mask>",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Count the number of different affected regions.",
                "masked_template": "Count the number of different <mask>",
                "query": "SELECT count( DISTINCT region_id ) FROM affected_region",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Find the number of distinct currency codes used in drama workshop groups.",
                "masked_template": "Find the number of distinct <mask> in <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show the number of transaction types.",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( DISTINCT transaction_type ) FROM Financial_Transactions",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the number of distinct room types available.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Count the number of artists who have had volumes.",
                "masked_template": "Count the number of <mask> who have had <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many different types of sports do we offer?",
                "masked_template": "How many different <mask> of <mask> do we <mask>",
                "query": "SELECT count( DISTINCT sportname ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many students play sports?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many distinct countries are the climbers from?",
                "masked_template": "How many distinct <mask> are the <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of different countries that climbers are from.",
                "masked_template": "Count the number of different <mask> that <mask> are <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "How many different students are involved in sports?",
                "masked_template": "How many different <mask> are <mask> in <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many different levels do members have?",
                "masked_template": "How many different <mask> do <mask>",
                "query": "SELECT count( DISTINCT LEVEL ) FROM member",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "masked_template": "What is the count of distinct <mask> with <mask>",
                "query": "SELECT count( DISTINCT eid ) FROM Certificate",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "How many distinct artists have volumes?",
                "masked_template": "How many distinct <mask> have <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many distinct payment methods are used by parties?",
                "masked_template": "How many distinct <mask> are <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "How many different countries are all the swimmers from?",
                "masked_template": "How many different <mask> are all the <mask>",
                "query": "SELECT count( DISTINCT nationality ) FROM swimmer",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Count the number of different payment method codes used by parties.",
                "masked_template": "Count the number of different <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            }
        ],
        "best_hyp": "How many distinct departments are there for all degree programs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many different departments offer degrees?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_name , section_description FROM Sections",
        "proc_query": "( <col> section name </col> ) , ( <col> section description </col> ) that belongs to ( <tab> sections </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names and descriptions of all the sections?",
            "List all section names and descriptions",
            "Show the name and description of all sections.",
            "What are the names and descriptions for each section?",
            "Show all section names and descriptions.",
            "What are all the section names and descriptions?",
            "Show the ids and names of all sections.",
            "What are the names and descriptions of all sections?",
            "What are all the section names and descriptions?",
            "What are the ids and descriptions of all sections?",
            "What are the names and descriptions of the sections?",
            "What are the names and descriptions of all sections?",
            "Show all section names and descriptions.",
            "What are the names and descriptions of all sections?",
            "Show the name and description for all sections",
            "What are the ids and names for each of the sections?",
            "List all section names and descriptions.",
            "What are the name and description of each section?",
            "Show the name and description of all sections",
            "Show all the section names and descriptions.",
            "What are the names of all sections and their descriptions?",
            "List the names and the descriptions that the sections can contain.",
            "For each section, show the section name and description.",
            "List the tax ids and their descriptions of all the sections",
            "Tell me the name and description of each section.",
            "What are the names and descriptions of all the sections?",
            "Return the low and high names for all sections.",
            "Show all section names and descriptions.",
            "Return the name and description for each section.",
            "Return the lot names and descriptions of all sections.",
            "What are the names and descriptions for all sections?"
        ],
        "templates": [
            "",
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What are the name and description of each section?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names and descriptions of all the sections?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT section_description FROM Sections WHERE section_name = 'a'",
        "proc_query": "( <col> section description </col> ) that belongs to ( <tab> sections </tab> ) , that have ( ( <col> section name </col> ) equal to ( <val> a </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the description of the section with name \"a\"?",
            "Find the name of section for which name (F) is a",
            "What is the description of the section named a?",
            "What is the description of the section with name a?",
            "Find the description of the section with name a.",
            "What are the names of all sections described as a?",
            "Find the description of all sections described by a",
            "What is the description for the section with name a?",
            "Find the description of the section with name a.",
            "Which sections have the name \"a\"? Find their descriptions.",
            "Return the descriptions of the sections with name a",
            "Which sections have names? Tell me their descriptions.",
            "Show the names of all the sections with name a",
            "Show the description of the section named a.",
            "What are the descriptions of all the sections in mp3 format?",
            "Return the description of section for all the sections with name a",
            "What are descriptions of all the sections whose name is a?",
            "What is the description of section of which name is a?",
            "What is the description of the section with name a?",
            "What are the descriptions of sections whose name is a?",
            "What are the descriptions of sections that are described as a?",
            "What is the description of the section the name a belongs to?",
            "What is the description of the section with name a?",
            "Find the section description of section with name \"a\".",
            "Show the section description for section name a",
            "What are the names of all sections in section a?",
            "How many sections is there?",
            "Tell us the section description for section named a.",
            "Show all the section descriptions.",
            "What are the descriptions of all the sections?",
            "Find the description corresponding to sections that are in the name of a"
        ],
        "templates": [
            "",
            {
                "question": "Find the name of dorms only for female (F gender).",
                "masked_template": "Find the name of <mask> for <mask> (F <mask>",
                "query": "SELECT dorm_name FROM dorm WHERE gender = 'F'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the location of the club named \"Tennis Club\"?",
                "masked_template": "What is the <mask> of the <mask> named <mask>",
                "query": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What is the description of the club \"Pen and Paper Gaming\"?",
                "masked_template": "What is the <mask> of the <mask> and <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Find the description of the club \"Pen and Paper Gaming\".",
                "masked_template": "Find the <mask> of the <mask> and <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Pen and Paper Gaming'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What are the names of all movies directed by Steven Spielberg?",
                "masked_template": "What are the names of all <mask> by <mask>",
                "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the titles of all movies directed by steven spielberg.",
                "masked_template": "Find the <mask> of all <mask> by <mask>",
                "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
                "masked_template": "What is the <mask> for the <mask> with <mask>",
                "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = 'VIOLENCE'",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Find the description of the club called \"Tennis Club\".",
                "masked_template": "Find the <mask> of the <mask>",
                "query": "SELECT clubdesc FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Which employees have the role with code \"HR\"? Find their names.",
                "masked_template": "Which <mask> have the <mask> with <mask> Find their <mask>",
                "query": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Return the apartment numbers of the apartments with type code \"Flat\".",
                "masked_template": "Return the <mask> numbers of the <mask> with <mask>",
                "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.",
                "masked_template": "Which <mask> have <mask> me their <mask>",
                "query": "SELECT apt_number FROM Apartments WHERE apt_type_code = 'Flat'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the names of all the employees with role \"HR\".",
                "masked_template": "Show the names of all the <mask> with <mask>",
                "query": "SELECT employee_name FROM Employees WHERE role_code = 'HR'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the id of the employee named Ebba.",
                "masked_template": "Show the id of the <mask> named <mask>",
                "query": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the id of all the files in mp3 format?",
                "masked_template": "What are the id of all the <mask> in mp3 <mask>",
                "query": "SELECT f_id FROM files WHERE formats = 'mp3'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "Return the date of birth for all the guests with gender code \"Male\".",
                "masked_template": "Return the <mask> of <mask> for all the <mask> with <mask>",
                "query": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are dates of birth of all the guests whose gender is \"Male\"?",
                "masked_template": "What are <mask> of <mask> of all the <mask> whose <mask> is <mask>",
                "query": "SELECT date_of_birth FROM Guests WHERE gender_code = 'Male'",
                "ted": 0.0,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What is the date of birth of every customer whose status code is 'Good Customer'?",
                "masked_template": "What is the <mask> of <mask> of <mask> whose <mask> is <mask>",
                "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the id for the employee called Ebba?",
                "masked_template": "What is the id for the <mask>",
                "query": "SELECT employee_ID FROM Employees WHERE employee_name = 'Ebba'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the id of songs whose format is mp3.",
                "masked_template": "What are the id of <mask> whose <mask> is <mask>",
                "query": "SELECT f_id FROM files WHERE formats = 'mp3'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "When are the birthdays of customer who are classified as 'Good Customer' status?",
                "masked_template": "<mask> are the <mask> of <mask> who are <mask> as <mask>",
                "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer'",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What is the code of the school where the accounting department belongs to?",
                "masked_template": "What is the <mask> of the <mask> the <mask> to?",
                "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the school code of the accounting department?",
                "masked_template": "What is the <mask> of the <mask>",
                "query": "SELECT school_code FROM department WHERE dept_name = 'Accounting'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the department name that is in Building \"Mergenthaler\".",
                "masked_template": "Find the <mask> name that is in <mask>",
                "query": "SELECT DName FROM DEPARTMENT WHERE Building = 'Mergenthaler'",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Show the description for role name \"Proof Reader\".",
                "masked_template": "Show the <mask> for <mask> name <mask>",
                "query": "SELECT role_description FROM ROLES WHERE role_name = 'Proof Reader'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the names of all songs in English?",
                "masked_template": "What are the names of all <mask> in <mask>",
                "query": "SELECT song_name FROM song WHERE languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "How many milliseconds long is Fast As a Shark?",
                "masked_template": "How many <mask> is <mask> As a <mask>",
                "query": "SELECT milliseconds FROM tracks WHERE name = 'Fast As a Shark'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Where us the club named \"Tennis Club\" located?",
                "masked_template": "<mask> us the <mask> named <mask>",
                "query": "SELECT clublocation FROM club WHERE clubname = 'Tennis Club'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Show ids for all the male faculty.",
                "masked_template": "Show ids for all the <mask>",
                "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty ids of all the male faculty members?",
                "masked_template": "What are the <mask> ids of all the <mask>",
                "query": "SELECT FacID FROM Faculty WHERE Sex = 'M'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
                "masked_template": "Find the <mask> to <mask> who <mask> in the <mask> of <mask>",
                "query": "SELECT BirthDate FROM EMPLOYEE WHERE City = 'Edmonton'",
                "ted": 0.0,
                "db_id": "chinook_1"
            }
        ],
        "best_hyp": "What is the description of the section named a?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the description of the section with name \"a\"?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "network_1",
        "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = 'Brittany'",
        "proc_query": "( <col> name </col> of <tab> high schooler </tab> ) that belongs to ( ( <tab> friend </tab> ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> student id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) , and ( ( <tab> high schooler </tab> ) satisfied that ( ( <col> friend id </col> of <tab> friend </tab> ) equal to ( <col> id </col> of <tab> high schooler </tab> ) ) ) ) , that have ( ( <col> name </col> of <tab> high schooler </tab> ) equal to ( <val> Brittany </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the names of the friends of Brittany?",
            "Find the names of students who are friends of Brittany",
            "Find the name of the student who is friends with Brittany.",
            "What is the name of the friend of Brittany?",
            "Show the name of friends with name Brittany.",
            "What are the names of the friends of the girl named Brittany?",
            "Who is the friend of the girl named Brittany? Tell me the name of the friend.",
            "Show all high schooler names.",
            "What are the names of students at the school named Brittany?",
            "What are the names of students who are friends with Brittany?",
            "What are the names of the students that are friends with Brittany?",
            "What are the names of students Brittany Wen was friends with?",
            "What are the names of students who are friends with Brittany?",
            "What are the names of all students that are on Brittany's friends list?",
            "What is the name of the high schooler with the name Brittany?",
            "Find the name of high schooler Brittany.",
            "What are the names of all students by the girl with the name Brittany?",
            "Find the names of friends which Brittany Wen was in.",
            "Find all the friends shared by Brittany with name Brittany",
            "What are the names of all students who have a friend who is Brittany?",
            "What are the names of all students that have friends who happen to be Brittany?",
            "Who are the friends of the girl named Brittany? Tell me their names.",
            "Who are the friends of the girl named Brittany? Show the names.",
            "What are the names of the students whose friend is Brittany?",
            "List the name of all students in the school of Brittany",
            "In which school is the student named Brittany from Brittany?",
            "Show the name shared by the student whose name is Brittany",
            "Which students are friends with Brittany?",
            "Show names for all students who have friends of Brittany",
            "What is the name for the student whose name is Brittany?",
            "Return the name for the friend of the student named Brittany"
        ],
        "templates": [
            "",
            {
                "question": "Find the last names of faculties who are members of computer science department.",
                "masked_template": "Find the <mask> names of <mask> who are <mask> of <mask>",
                "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = 'Computer Science'",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find the name of the instructors who taught C Programming course before.",
                "masked_template": "Find the name of the <mask> who <mask> C <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What is the location name of the document \"Robin CV\"?",
                "masked_template": "What is the <mask> name of the <mask>",
                "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the location name for document \"Robin CV\".",
                "masked_template": "Show the <mask> name for <mask>",
                "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = 'Robin CV'",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the last names of the author of the paper titled \"Binders Unbound\"?",
                "masked_template": "What are the <mask> names of the <mask> of the <mask>",
                "query": "SELECT T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title = 'Binders Unbound'",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Who is the author of the paper titled \"Binders Unbound\"? Give me the last name.",
                "masked_template": "Who is the <mask> of the <mask> me the <mask>",
                "query": "SELECT T1.lname FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T3.title = 'Binders Unbound'",
                "ted": 0.0,
                "db_id": "icfp_1"
            },
            {
                "question": "Show all storm names affecting region \"Denmark\".",
                "masked_template": "Show all <mask> names <mask>",
                "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What products are sold at the store named Miramichi?",
                "masked_template": "What <mask> are <mask> at the <mask> named <mask>",
                "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.product_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T3.store_name = 'Miramichi'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What are the names of instructors who have taught C Programming courses?",
                "masked_template": "What are the names of <mask> who have <mask> C <mask>",
                "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming'",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of the storms that affected Denmark?",
                "masked_template": "What are the names of the <mask> that <mask>",
                "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What are the names of procedures physician John Wen was trained in?",
                "masked_template": "What are the names of <mask> Wen was <mask> in?",
                "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What products are available at store named \"Miramichi\"?",
                "masked_template": "What <mask> are <mask> at <mask> named <mask>",
                "query": "SELECT T1.product FROM product AS T1 JOIN store_product AS T2 ON T1.product_id = T2.product_id JOIN store AS T3 ON T2.store_id = T3.store_id WHERE T3.store_name = 'Miramichi'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What are the names of all tracks that are on playlists titled Movies?",
                "masked_template": "What are the names of all <mask> that are on <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What is the code of the course which the student whose last name is Smithson took?",
                "masked_template": "What is the <mask> of the <mask> which the <mask> whose <mask> name is <mask>",
                "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson'",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the name of amenities Smith Hall dorm have.",
                "masked_template": "Find the name of <mask>",
                "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the names of all songs produced by the artist with the first name \"Marianne\"?",
                "masked_template": "What are the names of all <mask> by the <mask> with the <mask> name <mask>",
                "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = 'Marianne'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "Find the names of procedures which physician John Wen was trained in.",
                "masked_template": "Find the names of <mask> which <mask> Wen was <mask> in.",
                "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = 'John Wen'",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find all the songs produced by artists with first name \"Marianne\".",
                "masked_template": "Find all the <mask> by <mask> with <mask> name <mask>",
                "query": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = 'Marianne'",
                "ted": 0.0,
                "db_id": "music_2"
            },
            {
                "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?",
                "masked_template": "What are the names of all <mask> who have a <mask> to fly <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
                "masked_template": "What are the names of all <mask> that <mask> have <mask> to be <mask> to <mask>",
                "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = 'John Williams'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.",
                "masked_template": "Who are the <mask> of the <mask> named <mask> me their <mask>",
                "query": "SELECT T3.lname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T1.clubname = 'Bootup Baltimore'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.",
                "masked_template": "Who are the <mask> of the <mask> named <mask> Show the <mask>",
                "query": "SELECT T3.lname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T1.clubname = 'Hopkins Student Enterprises'",
                "ted": 0.0,
                "db_id": "club_1"
            },
            {
                "question": "What are the result description of the project whose detail is 'sint'?",
                "masked_template": "What are the <mask> of the <mask> whose <mask> is <mask>",
                "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "List the name of all tracks in the playlists of Movies.",
                "masked_template": "List the name of all <mask> in the <mask> of <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = 'Movies'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "In which state is the college that Charles attends?",
                "masked_template": "In which <mask> is the <mask> that <mask>",
                "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
                "masked_template": "Show the <mask> by the <mask> whose <mask> is <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
                "masked_template": "Which <mask> the <mask> with <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = 'Vincent'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Show names for all employees who have certificate of Boeing 737-800.",
                "masked_template": "Show names for all <mask> who have <mask> of <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the description for the results whose project detail is 'sint'?",
                "masked_template": "What is the <mask> for the <mask> whose <mask> is <mask>",
                "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".",
                "masked_template": "Return the <mask> name for the <mask> of the <mask> named <mask>",
                "query": "SELECT T3.lname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T1.clubname = 'Hopkins Student Enterprises'",
                "ted": 0.0,
                "db_id": "club_1"
            }
        ],
        "best_hyp": "Who are the friends of the girl named Brittany? Tell me their names.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the names of the friends of Brittany?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "course_teach",
        "query": "SELECT T2.Name , COUNT( * ) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "proc_query": "( <col> name </col> of <tab> teacher </tab> ) , ( the number of ( all items ) ) that belongs to ( ( <tab> course arrange </tab> ) , and ( ( <tab> teacher </tab> ) satisfied that ( ( <col> teacher id </col> of <tab> course arrange </tab> ) equal to ( <col> teacher id </col> of <tab> teacher </tab> ) ) ) ) , grouped by ( <col> name </col> of <tab> teacher </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "For each teacher, how many courses are they involved in?",
            "List the id of teachers who arrange courses and the number of courses they arrange.",
            "How many courses are taught by each teacher?",
            "List the name of all teachers along with the number of courses that they have arrange.",
            "How many courses do each teacher arrange? List their names and number of courses they arrange.",
            "Show the teacher id of each teacher along with the number of courses he or she arrange.",
            "What are the names of teachers and the number of courses they arrange?",
            "Show all the teacher names and the number of courses arrange by each teacher.",
            "How many courses are arranged by each teacher? List the name and the number of courses.",
            "Find the number of courses each teacher arrange. Show the number with the teacher id.",
            "For each teacher, find their name and the number of courses they arrange.",
            "Show teacher names and the number of courses they arrange for each teacher",
            "How many courses are there for each teacher?",
            "Show all the teacher names and the number of courses they arrange for each teacher.",
            "How many courses are taught by each teacher? Return the teacher names and the number of courses they arrange.",
            "For each teacher, show the name of the teacher and the number of courses they arrange.",
            "Show the names of teachers and the number of courses they arrange.",
            "Show the name of teachers and the number of courses they arrange.",
            "Return the name of each teacher and the number of courses he or she arrange.",
            "How many courses has each teacher arrange?",
            "Show all teacher names and the number of courses they arrange for each teacher.",
            "What are all the different teacher names and how many courses has each teacher arrange?",
            "Show teacher names along with the number of courses arrange for each teacher.",
            "Show the name and number of courses taught by each teacher",
            "What are the different names of teachers and how many courses have they arrange?",
            "Find the name of each teacher and number of courses arrange by each of them.",
            "How many courses are there in each teacher? Return both the name and the count.",
            "For each teacher who is arranging for courses, how many courses are they arranging?",
            "Show the name of teachers and the number of courses they arrange.",
            "How many courses correspond to each teacher? List the teacher name and the number of courses they arrange.",
            "Show all teachers along with the number of courses they arrange for each teacher."
        ],
        "templates": [
            "",
            {
                "question": "List the id of students who registered some courses and the number of their registered courses?",
                "masked_template": "List the id of <mask> who <mask> and the number of their <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "How many members are in each party?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "List the name of all products along with the number of complaints that they have received.",
                "masked_template": "List the name of all <mask> with the number of <mask> that <mask> have <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
                "masked_template": "How many <mask> do each <mask> of? List their names and number of <mask> of.",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
                "masked_template": "Show the <mask> id of each <mask> with the number of <mask> he or she <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the faculty id and the number of students each faculty has?",
                "masked_template": "What are the <mask> id and the number of <mask> each <mask>",
                "query": "SELECT T1.FacID , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show all the faculty ranks and the number of students advised by each rank.",
                "masked_template": "Show all the <mask> and the number of <mask> by each <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
                "masked_template": "How many <mask> are <mask> by each <mask> of <mask> List the <mask> and the number of <mask>",
                "query": "SELECT T1.rank , count( * ) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
                "masked_template": "Find the number of <mask> each <mask> to. Show the number <mask> with the <mask> id.",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "For each user, find their name and the number of reviews written by them.",
                "masked_template": "For each <mask> find their name and the number of <mask> by <mask>",
                "query": "SELECT T1.name , count( * ) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Show party names and the number of events for each party.",
                "masked_template": "Show <mask> names and the number of <mask> for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "How many events are there for each party?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "Show all the activity names and the number of faculty involved in each activity.",
                "masked_template": "Show all the <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
                "masked_template": "How many <mask> in each <mask> Return the <mask> names and the number of <mask>",
                "query": "SELECT T1.activity_name , count( * ) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For each building, show the name of the building and the number of institutions in it.",
                "masked_template": "For each <mask> show the name of the <mask> and the number of <mask> in it.",
                "query": "SELECT T1.name , count( * ) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the names of pilots and the number of records they have.",
                "masked_template": "Show the names of <mask> and the number of <mask>",
                "query": "SELECT T2.Pilot_name , COUNT( * ) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the name of track and the number of races in each track.",
                "masked_template": "Show the name of <mask> and the number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Return the name of each physician and the number of patients he or she treats.",
                "masked_template": "Return the name of each <mask> and the number of <mask> he or she <mask>",
                "query": "SELECT T1.name , count( * ) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many exhibitions has each artist had?",
                "masked_template": "How many <mask> has each <mask>",
                "query": "SELECT T2.name , count( * ) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id",
                "ted": 0.0,
                "db_id": "theme_gallery"
            },
            {
                "question": "Show all party names and the number of members in each party.",
                "masked_template": "Show all <mask> names and the number of <mask> in each <mask>",
                "query": "SELECT T2.party_name , count( * ) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
                "ted": 0.0,
                "db_id": "party_people"
            },
            {
                "question": "What are all the different product names, and how many complains has each received?",
                "masked_template": "What are all the different <mask> and how many <mask> has each <mask>",
                "query": "SELECT T1.product_name , count( * ) FROM products AS T1 JOIN complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "ted": 0.0,
                "db_id": "customer_complaints"
            },
            {
                "question": "Show institution names along with the number of proteins for each institution.",
                "masked_template": "Show <mask> names <mask> with the number of <mask> for each <mask>",
                "query": "SELECT T1.institution , count( * ) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Show the station name and number of trains in each station.",
                "masked_template": "Show the <mask> name and number of <mask> in each <mask>",
                "query": "SELECT T2.name , count( * ) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the different card types, and how many transactions have been made with each?",
                "masked_template": "What are the different <mask> and how many <mask> have <mask> with <mask>",
                "query": "SELECT T2.card_type_code , count( * ) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the name of each user and number of tweets tweeted by each of them.",
                "masked_template": "Find the name of each <mask> and number of <mask> by each of <mask>",
                "query": "SELECT T1.name , count( * ) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
                "masked_template": "How many <mask> are there in each <mask> Return both the <mask> and the <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "For every student who is registered for some course, how many courses are they registered for?",
                "masked_template": "For <mask> who is <mask> for <mask> how many <mask> are <mask>",
                "query": "SELECT T1.student_id , count( * ) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Show the company name with the number of gas station.",
                "masked_template": "Show the <mask> name with the number of gas <mask>",
                "query": "SELECT T2.company , count( * ) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "gas_company"
            },
            {
                "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
                "masked_template": "How many <mask> each <mask> to? List the <mask> id and the number of <mask>",
                "query": "SELECT T1.Claim_id , count( * ) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show all cities along with the number of drama workshop groups in each city.",
                "masked_template": "Show all <mask> with the number of <mask> in each <mask>",
                "query": "SELECT T1.City_Town , count( * ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            }
        ],
        "best_hyp": "How many courses do each teacher arrange? List their names and number of courses they arrange.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "For each teacher, how many courses are they involved in?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "student_transcripts_tracking",
        "query": "SELECT transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "proc_query": "( <col> transcript date </col> ) , ( <col> other details </col> ) that belongs to ( <tab> transcripts </tab> ) , ordered by ( ( <col> transcript date </col> ) in ascending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the date and detail of the most recent transcript?",
            "What is the name and detail of the oldest transcript?",
            "What are the dates and details for the first transcript which was made the earliest?",
            "Show the date and detail of the earliest transcript.",
            "what are the order id and details of the earliest transcript?",
            "Find the order id and detail of the earliest transcript.",
            "What is the start date and end detail for the transcript with the earliest date?",
            "Tell me the start date and end detail for the transcript with the id.",
            "Find the id and details of the transcript with the earliest date.",
            "Show the date and detail of the most recent transcript.",
            "What are the dates and details of the most recent transcript?",
            "What are the dates and details of the transcripts with the earliest date?",
            "What is the name and detail of the oldest transcript?",
            "What is the date and detail of the most recent transcript?",
            "Find the date and detail of the most recent transcript.",
            "For all the transcripts, what is the date in the record with the least recent date? List both the date and detail.",
            "Find the name and details of the oldest transcript by the least number of times.",
            "Find the date in the transcript with the least recent date. Show both the date and detail.",
            "Which date has the oldest transcript? List the date name and the details.",
            "What are the dates and details of the transcripts with the earliest date?",
            "Which date has the oldest corresponding transcript? List the date and detail.",
            "Which transcript date has the least amount of detail? List the date name and the detail of the date.",
            "Which date has the least recent transcript? List the date id and detail.",
            "What are the dates and details of the transcripts with the earliest date of creation?",
            "What are the dates and details of the top 10 most recent transcripts?",
            "List top 10 oldest dates in the transcripts List dates and details",
            "Find the name and detail of the most recent transcript.",
            "What is the date and detail of the earliest transcript?",
            "What is the date with the oldest transcript? Return the date and detail.",
            "What is the id and name of the date that can be accessed the maximum number of times?",
            "Show the id and name of the transcript with the maximum date."
        ],
        "templates": [
            "",
            {
                "question": "Select the name and price of the cheapest product.",
                "masked_template": "<mask> the name and <mask> of the <mask>",
                "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What are the enrollment and primary conference for the university which was founded the earliest?",
                "masked_template": "What are the <mask> and <mask> for the <mask> which was <mask> the <mask>",
                "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "Show the enrollment and primary_conference of the oldest college.",
                "masked_template": "Show the <mask> and <mask> of the <mask>",
                "query": "SELECT enrollment , primary_conference FROM university ORDER BY founded LIMIT 1",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "what are the order id and customer id of the oldest order?",
                "masked_template": "what are the order id and <mask> id of the <mask>",
                "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "Find the order id and customer id associated with the oldest order.",
                "masked_template": "Find the order id and <mask> id <mask> with the <mask>",
                "query": "SELECT order_id , customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_orders"
            },
            {
                "question": "What is the station station and end station for the trips with the three smallest ids?",
                "masked_template": "What is the <mask> and end <mask> for the <mask> with the <mask>",
                "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Give me the start station and end station for the trips with the three oldest id.",
                "masked_template": "<mask> me the <mask> and end <mask> for the <mask> with the <mask> id.",
                "query": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Give the id and product type of the product with the lowest price.",
                "masked_template": "<mask> the id and <mask> of the <mask> with the <mask>",
                "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Show the details and star ratings of the 3 least expensive hotels.",
                "masked_template": "Show the <mask> and <mask> of the 3 least <mask>",
                "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the product id and product type of the cheapest product?",
                "masked_template": "What are the <mask> id and <mask> of the <mask>",
                "query": "SELECT product_id , product_type_code FROM products ORDER BY product_price LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the room name and base price of the room with the lowest base price?",
                "masked_template": "What are the <mask> name and <mask> of the <mask> with the <mask>",
                "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What is the name and price of the cheapest product?",
                "masked_template": "What is the name and <mask> of the <mask>",
                "query": "SELECT name , price FROM Products ORDER BY price ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What is the oldest log id and its corresponding problem id?",
                "masked_template": "What is the <mask> log id and its <mask> id?",
                "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "Find the oldest log id and its corresponding problem id.",
                "masked_template": "Find the <mask> log id and its <mask> id.",
                "query": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
                "masked_template": "<mask> all the <mask> what is the <mask> in the <mask> with the least <mask> List both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the name and email of the user followed by the least number of people.",
                "masked_template": "Find the name and <mask> of the <mask> by the least number of <mask>",
                "query": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.",
                "masked_template": "Find the <mask> in the <mask> with the least <mask> Show both the <mask> and <mask>",
                "query": "SELECT Amount_Settled , Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Which room has cheapest base price? List the room's name and the base price.",
                "masked_template": "Which <mask> has <mask> List the <mask> name and the <mask>",
                "query": "SELECT roomName , basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the <mask>",
                "query": "SELECT other_hotel_details , star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
                "masked_template": "Which <mask> has the <mask> list the <mask> name and its <mask>",
                "query": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
                "masked_template": "Which <mask> has the least <mask> of <mask> List the <mask> name and the <mask> of <mask>",
                "query": "SELECT Model_name , RAM_MiB FROM chip_model ORDER BY RAM_MiB ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "phone_1"
            },
            {
                "question": "Which part has the least chargeable amount? List the part id and amount.",
                "masked_template": "Which <mask> has the least <mask> List the <mask> id and <mask>",
                "query": "SELECT part_id , chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the first and last names of the employee with the earliest date of birth?",
                "masked_template": "What are the <mask> and <mask> names of the <mask> with the <mask> of <mask>",
                "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first and last names of the top 10 longest-serving employees?",
                "masked_template": "What are the <mask> and <mask> names of the top 10 <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "List top 10 employee work longest in the company. List employee's first and last name.",
                "masked_template": "List top 10 <mask> in the <mask> List <mask> and <mask>",
                "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name and component amount of the least popular furniture.",
                "masked_template": "Find the name and <mask> of the least <mask>",
                "query": "SELECT name , Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "What is the first and last name of the oldest employee?",
                "masked_template": "What is the <mask> and <mask> name of the <mask>",
                "query": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is the city with the smallest GDP? Return the city and its GDP.",
                "masked_template": "What is the <mask> with the <mask> Return the <mask> and its <mask>",
                "query": "SELECT city , GDP FROM city ORDER BY GDP LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What is the id and name of the aircraft that can cover the maximum distance?",
                "masked_template": "What is the id and name of the <mask> that can <mask> the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "Show the id and name of the aircraft with the maximum distance.",
                "masked_template": "Show the id and name of the <mask> with the maximum <mask>",
                "query": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "Tell me the start date and end detail for the transcript with the id.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the date and detail of the most recent transcript?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    }
]