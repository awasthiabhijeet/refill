[
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
        "proc_query": "( <col> professional id </col> of <tab> professionals </tab> ) , ( <col> cell number </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> professional id </col> of <tab> professionals </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the ids and cell numbers of the professionals who have at least two treatments?",
                11.033063888549805
            ],
            [
                "Show the ids and cell numbers of the professionals who have at least two treatments.",
                11.019116401672363
            ],
            [
                "What are the ids and cell numbers of the professionals that have at least two treatments?",
                11.015254020690918
            ],
            [
                "Find the ids and cell numbers of the professionals that have at least two treatments?",
                10.941549301147461
            ],
            [
                "Which professionals are involved in at least two treatments? Give me the professional ID and cell number.",
                10.934849739074707
            ],
            [
                "Find the id and cell number of the professionals with at least two treatments?",
                10.736287117004395
            ],
            [
                "Which professionals have more than 2 treatments? Show the professional ID and cell number.",
                10.23769760131836
            ],
            [
                "Which professionals are involved in at least two treatments? Give me their names and cell numbers.",
                8.42291259765625
            ],
            [
                "Which professionals have used at least two treatments? List his or her name and cell number.",
                7.81365966796875
            ],
            [
                "What are the names and cell numbers of the professionals who have at least two treatments?",
                6.112736225128174
            ],
            [
                "Which two or more professionals give me their ids and cell numbers?",
                5.621706008911133
            ],
            [
                "List the name and cell number of the professionals that have at least two treatments.",
                4.735496520996094
            ],
            [
                "Return the ids and cell numbers for orderes with two or more treatments.",
                0.248146653175354
            ],
            [
                "For each id, what are the names of the professionals that can provide two or more treatments?",
                -3.5682942867279053
            ],
            [
                "What are the ids and names of the professionals that can provide two or more treatments?",
                -3.859574794769287
            ],
            [
                "Return the ids and names of the professionals that have more than two treatments in total.",
                -5.156061172485352
            ],
            [
                "What are the ids and names of the professionals who have at least two treatments?",
                -5.866262435913086
            ],
            [
                "Show ids and cell numbers of professionals that are involved with more than one treatment.",
                -5.9212727546691895
            ],
            [
                "What are the ids and names of the professionals that have at least two treatments?",
                -5.96837854385376
            ],
            [
                "Show the name and id for all professionals with at least two treatments.",
                -6.097811222076416
            ],
            [
                "What are the ids and cell numbers of the professionals that can provide at least 3 treatments?",
                -7.880443572998047
            ],
            [
                "Show the names and ids of professionals that are involved in at least two treatments.",
                -7.893951416015625
            ],
            [
                "Find the name and cell number for the professionals who have more than one treatment.",
                -8.04736328125
            ],
            [
                "What is the id and cell number of the professionals who can provide at least 3 treatments?",
                -8.53370475769043
            ],
            [
                "What are the ids and cell numbers of the professionals who have at least 3 treatments?",
                -9.500710487365723
            ],
            [
                "Please show the ids and ids of professionals who have at least two treatments.",
                -10.418841361999512
            ],
            [
                "What are the ids and ids for professionals who have two or more treatments?",
                -10.797207832336426
            ],
            [
                "What are the ids and names of the web technicians that are involved in two or more treatments?",
                -11.035764694213867
            ],
            [
                "Show the names and ids of professionals that are involved in at most two treatments.",
                -11.562396049499512
            ],
            [
                "What is the cmi id that is related to at least one tax treatment? List the ids and cell numbers",
                -11.720502853393555
            ],
            [
                "What are the ids and names of the professionals who have at least 3 treatments?",
                -11.935859680175781
            ]
        ],
        "templates": [
            "",
            {
                "question": "Show the account id and name with at least 4 transactions.",
                "masked_template": "Show the <mask> id and name with at least 4 <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices",
                "query_toks": [
                    "select",
                    "t1.account_id",
                    ",",
                    "t2.account_name",
                    "from",
                    "financial_transactions",
                    "as",
                    "t1",
                    "join",
                    "accounts",
                    "as",
                    "t2",
                    "on",
                    "t1.account_id",
                    "=",
                    "t2.account_id",
                    "group",
                    "by",
                    "t1.account_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "4"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.account_id",
                    ",",
                    "t2.account_name",
                    "from",
                    "financial_transactions",
                    "as",
                    "t1",
                    "join",
                    "accounts",
                    "as",
                    "t2",
                    "on",
                    "t1.account_id",
                    "=",
                    "t2.account_id",
                    "group",
                    "by",
                    "t1.account_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "value"
                ]
            },
            {
                "question": "What are the id and name of the mountains that have at least 2 photos?",
                "masked_template": "What are the id and name of the <mask> that have at least 2 <mask>",
                "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "mountain_photos",
                "query_toks": [
                    "select",
                    "t1.id",
                    ",",
                    "t1.name",
                    "from",
                    "mountain",
                    "as",
                    "t1",
                    "join",
                    "photos",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.mountain_id",
                    "group",
                    "by",
                    "t1.id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "2"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.id",
                    ",",
                    "t1.name",
                    "from",
                    "mountain",
                    "as",
                    "t1",
                    "join",
                    "photos",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.mountain_id",
                    "group",
                    "by",
                    "t1.id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "value"
                ]
            },
            {
                "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
                "masked_template": "Find the <mask> and <mask> IDs of the <mask> that <mask> at least two <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning",
                "query_toks": [
                    "select",
                    "t1.address_line_1",
                    ",",
                    "t2.author_id",
                    "from",
                    "course_authors_and_tutors",
                    "as",
                    "t1",
                    "join",
                    "courses",
                    "as",
                    "t2",
                    "on",
                    "t1.author_id",
                    "=",
                    "t2.author_id",
                    "group",
                    "by",
                    "t2.author_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "2"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.address_line_1",
                    ",",
                    "t2.author_id",
                    "from",
                    "course_authors_and_tutors",
                    "as",
                    "t1",
                    "join",
                    "courses",
                    "as",
                    "t2",
                    "on",
                    "t1.author_id",
                    "=",
                    "t2.author_id",
                    "group",
                    "by",
                    "t2.author_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "value"
                ]
            },
            {
                "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
                "masked_template": "Which <mask> are <mask> in at least two <mask> me the <mask> ID and <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning",
                "query_toks": [
                    "select",
                    "t1.student_id",
                    ",",
                    "t2.personal_name",
                    "from",
                    "student_course_enrolment",
                    "as",
                    "t1",
                    "join",
                    "students",
                    "as",
                    "t2",
                    "on",
                    "t1.student_id",
                    "=",
                    "t2.student_id",
                    "group",
                    "by",
                    "t1.student_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "2"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.student_id",
                    ",",
                    "t2.personal_name",
                    "from",
                    "student_course_enrolment",
                    "as",
                    "t1",
                    "join",
                    "students",
                    "as",
                    "t2",
                    "on",
                    "t1.student_id",
                    "=",
                    "t2.student_id",
                    "group",
                    "by",
                    "t1.student_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "value"
                ]
            },
            {
                "question": "Find the student ID and personal name of the student with at least two enrollments.",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with at least two <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning",
                "query_toks": [
                    "select",
                    "t1.student_id",
                    ",",
                    "t2.personal_name",
                    "from",
                    "student_course_enrolment",
                    "as",
                    "t1",
                    "join",
                    "students",
                    "as",
                    "t2",
                    "on",
                    "t1.student_id",
                    "=",
                    "t2.student_id",
                    "group",
                    "by",
                    "t1.student_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "2"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.student_id",
                    ",",
                    "t2.personal_name",
                    "from",
                    "student_course_enrolment",
                    "as",
                    "t1",
                    "join",
                    "students",
                    "as",
                    "t2",
                    "on",
                    "t1.student_id",
                    "=",
                    "t2.student_id",
                    "group",
                    "by",
                    "t1.student_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "value"
                ]
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
                "masked_template": "Which <mask> a <mask> in more than 30 <mask> List his or her <mask> name and <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.027777777777777776,
                "db_id": "sakila_1"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "List first name and last name of customers that have more than 2 payments.",
                "masked_template": "List <mask> name and <mask> name of <mask> that have more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "driving_school"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
                "masked_template": "For <mask> id, what are the names of the <mask> that can <mask> with more than one <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
                "masked_template": "What are the ids and names of the <mask> that can <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
                "masked_template": "Return the <mask> and names of the <mask> that have more than two <mask> in.",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "What are the ids and names of accounts with 4 or more transactions?",
                "masked_template": "What are the ids and names of <mask> with 4 or more <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "railway"
            },
            {
                "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
                "masked_template": "What are the <mask> and names of the <mask> that have <mask> than 2?",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
                "masked_template": "What are the ids and <mask> names of the <mask> that can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "twitter_1"
            },
            {
                "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
                "masked_template": "What is the id and <mask> name of the <mask> can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the id and details of the customers who have at least 3 events?",
                "masked_template": "What are the id and <mask> of the <mask> who have at least 3 <mask>",
                "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
                "masked_template": "<mask> show the <mask> names and ids of <mask> who <mask> at least 10 <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "masked_template": "What are the ids and names of the web <mask> that are <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at most once.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at most <mask>",
                "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) <= 1",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
                "masked_template": "What is the cmi <mask> id that is <mask> to at least one <mask> tax <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count( * ) >= 1",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the ids and names of the architects who built at least 3 bridges ?",
                "masked_template": "What are the ids and names of the <mask> who <mask> at least 3 <mask> ?",
                "query": "SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "architecture"
            }
        ],
        "best_hyp": "What are the ids and cell numbers of the professionals who have at least 3 treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids and cell numbers of the professionals who have at least two treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "select count( * ) from dogs where dog_id not in ( select dog_id from treatments )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> dogs </tab> ) , that have ( ( <col> dog id </col> ) not in ( ( ( <col> dog id </col> ) that belongs to ( <tab> treatments </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many dogs are not involved in any treatments?",
                -11.333772659301758
            ],
            [
                "Count the number of dogs that are not involved in any treatments.",
                -10.824131965637207
            ],
            [
                "How many dogs are not involved in any treatments?",
                -11.333770751953125
            ],
            [
                "How many dogs are not involved in any treatments?",
                -11.333770751953125
            ],
            [
                "How many dogs are not involved in any treatments?",
                -11.333770751953125
            ],
            [
                "Find the number of dogs who are not used to any treatments.",
                -11.533416748046875
            ],
            [
                "How many dogs do not have an treatment in our record?",
                -11.829161643981934
            ],
            [
                "Count the number of dogs who have not received an treatment.",
                -11.904117584228516
            ],
            [
                "Count the number of dogs who did not receive any treatment.",
                -11.950237274169922
            ],
            [
                "Count the number of dogs who did not receive any treatment.",
                -11.950237274169922
            ],
            [
                "Count the number of dogs who do not have an treatment.",
                -11.971517562866211
            ],
            [
                "Count the number of dogs that are not undergoing treatments.",
                -11.977973937988281
            ],
            [
                "List the number of dogs that did not have any treatments.",
                -11.981106758117676
            ],
            [
                "How many dogs are not undergoing treatments?",
                -12.03520393371582
            ],
            [
                "How many dogs are not undergoing treatments?",
                -12.03520393371582
            ],
            [
                "How many dogs are not undergoing treatments?",
                -12.03520393371582
            ],
            [
                "How many dogs are not undergoing treatments?",
                -12.035204887390137
            ],
            [
                "Count the number of dogs that do not have treatments.",
                -12.039973258972168
            ],
            [
                "Show the number of all dogs without an treatment.",
                -12.064974784851074
            ],
            [
                "How many dogs did not receive any treatment?",
                -12.065428733825684
            ],
            [
                "Find the number of dogs who did not receive any treatment",
                -12.065590858459473
            ],
            [
                "How many dogs do not have any treatments?",
                -12.06994342803955
            ],
            [
                "How many dogs do not have any treatments?",
                -12.06994342803955
            ],
            [
                "How many dogs do not have any treatments?",
                -12.06994342803955
            ],
            [
                "How many dogs do not have any treatments?",
                -12.06994342803955
            ],
            [
                "How many dogs did not have any treatments?",
                -12.070645332336426
            ],
            [
                "Find the number of dogs that did not receive any treatment",
                -12.078330039978027
            ],
            [
                "What is the count of dogs without any treatments?",
                -12.086709022521973
            ],
            [
                "How many dogs that do not have treatments?",
                -12.099658012390137
            ],
            [
                "How many dogs have no treatments?",
                -12.1254243850708
            ],
            [
                "Count the number of dogs without treatments.",
                -12.158039093017578
            ]
        ],
        "templates": [
            "",
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many games are free of injury accidents?",
                "masked_template": "How many <mask> are <mask> of <mask>",
                "query": "SELECT count( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "How many persons are not body builders?",
                "masked_template": "How many <mask> are not <mask>",
                "query": "SELECT count( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder )",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "masked_template": "How many <mask> are led by <mask> who are not <mask>",
                "query": "SELECT count( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many documents do not have any expense?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many students did not have any course enrollment?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "How many customers have no payment histories?",
                "masked_template": "How many <mask> have no <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            }
        ],
        "best_hyp": "How many dogs do not have any treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many dogs are not involved in any treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address , cell_number , home_phone FROM professionals",
        "proc_query": "( <col> email address </col> ) , ( <col> cell number </col> ) , ( <col> home phone </col> ) that belongs to ( <tab> professionals </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the email address, cell number, and home phone number of all professionals?",
                11.090926170349121
            ],
            [
                "What are the email address, cell number and home phone number of all professionals?",
                11.100631713867188
            ],
            [
                "List the email address, cell number, and home phone of all the professionals.",
                11.092482566833496
            ],
            [
                "List the email address, cell number and home phone number of all professionals.",
                11.04082202911377
            ],
            [
                "List the email address, cell number and home phone number of all professionals.",
                11.04082202911377
            ],
            [
                "List the email address, cell number and home phone number of all professionals.",
                11.04082202911377
            ],
            [
                "List the email address, cell number and home phone number for all professionals.",
                11.0370512008667
            ],
            [
                "List the email address, cell number and home phone of all professionals.",
                10.934168815612793
            ],
            [
                "List the email address, cell number and the home phone number of all professionals.",
                10.518396377563477
            ],
            [
                "Show all email addresses, cell numbers, and home phones of all professionals.",
                9.370824813842773
            ],
            [
                "Show email address, cell number and home phone for all professionals.",
                8.746267318725586
            ],
            [
                "What are the email address and phone number for all the professionals?",
                5.245786190032959
            ],
            [
                "What are the email addresses and phone numbers of all the professionals?",
                4.909973621368408
            ],
            [
                "What are all the the email addresses and phone numbers of all the professionals?",
                4.7342729568481445
            ],
            [
                "What are all the email addresses and phone numbers of professionals?",
                4.655693531036377
            ],
            [
                "What are the email addresses and phone numbers of all professionals?",
                4.529433727264404
            ],
            [
                "What are the email addresses and phone numbers of all professionals?",
                4.529433727264404
            ],
            [
                "Show the email address and phone number for all professionals.",
                4.195295333862305
            ],
            [
                "What are the email address and phone number of the professionals?",
                3.9474897384643555
            ],
            [
                "Show the email address and phone number for all the professionals.",
                3.947155237197876
            ],
            [
                "What are each employee's email and cell number and home phone number?",
                3.0599093437194824
            ],
            [
                "List all email addresses and phone numbers of professionals.",
                2.9361257553100586
            ],
            [
                "Show the email address and number of phones for all professionals.",
                -2.3669450283050537
            ],
            [
                "What are the email address and cell number for all professionals?",
                -5.706287384033203
            ],
            [
                "Show email address and cell number for all professionals.",
                -6.3809099197387695
            ],
            [
                "Show the email address and cell number for all professionals.",
                -6.46895694732666
            ],
            [
                "Find the email address and cell number of all professionals.",
                -7.225282192230225
            ],
            [
                "List the email address, cell number and name for all the professionals.",
                -8.203728675842285
            ],
            [
                "Show the email address and cell number in that location for all the professionals",
                -10.346386909484863
            ],
            [
                "Show email address and cell number for each professionals.",
                -10.97655963897705
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the name, origin and owner of each program?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT name , origin , OWNER FROM program",
                "ted": 0.0,
                "db_id": "program_share",
                "query_toks": [
                    "select",
                    "name",
                    ",",
                    "origin",
                    ",",
                    "owner",
                    "from",
                    "program"
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    ",",
                    "origin",
                    ",",
                    "owner",
                    "from",
                    "program"
                ]
            },
            {
                "question": "List the season, home team, away team of all the games.",
                "masked_template": "List the <mask> of all the <mask>",
                "query": "SELECT season , home_team , away_team FROM game",
                "ted": 0.0,
                "db_id": "game_injury",
                "query_toks": [
                    "select",
                    "season",
                    ",",
                    "home_team",
                    ",",
                    "away_team",
                    "from",
                    "game"
                ],
                "query_toks_no_value": [
                    "select",
                    "season",
                    ",",
                    "home_team",
                    ",",
                    "away_team",
                    "from",
                    "game"
                ]
            },
            {
                "question": "List the creation year, name and budget of each department.",
                "masked_template": "List the <mask> name and <mask> of each <mask>",
                "query": "SELECT creation , name , budget_in_billions FROM department",
                "ted": 0.0,
                "db_id": "department_management",
                "query_toks": [
                    "select",
                    "creation",
                    ",",
                    "name",
                    ",",
                    "budget_in_billions",
                    "from",
                    "department"
                ],
                "query_toks_no_value": [
                    "select",
                    "creation",
                    ",",
                    "name",
                    ",",
                    "budget_in_billions",
                    "from",
                    "department"
                ]
            },
            {
                "question": "List the first name middle name and last name of all staff.",
                "masked_template": "List the <mask> name <mask> name and <mask> name of all <mask>",
                "query": "SELECT first_name , middle_name , last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "List the ids, names and market shares of all browsers.",
                "masked_template": "List the <mask> names and <mask> of all <mask>",
                "query": "SELECT id , name , market_share FROM browser",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "List the name, location, mascot for all schools.",
                "masked_template": "List the <mask> for all <mask>",
                "query": "SELECT school_name , LOCATION , mascot FROM school",
                "ted": 0.0,
                "db_id": "school_finance",
                "query_toks": [
                    "select",
                    "school_name",
                    ",",
                    "location",
                    ",",
                    "mascot",
                    "from",
                    "school"
                ],
                "query_toks_no_value": [
                    "select",
                    "school_name",
                    ",",
                    "location",
                    ",",
                    "mascot",
                    "from",
                    "school"
                ]
            },
            {
                "question": "List the name, origin and owner of each program.",
                "masked_template": "List the <mask> and <mask> of each <mask>",
                "query": "SELECT name , origin , OWNER FROM program",
                "ted": 0.0,
                "db_id": "program_share",
                "query_toks": [
                    "select",
                    "name",
                    ",",
                    "origin",
                    ",",
                    "owner",
                    "from",
                    "program"
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    ",",
                    "origin",
                    ",",
                    "owner",
                    "from",
                    "program"
                ]
            },
            {
                "question": "List the customer event id and the corresponding move in date and property id.",
                "masked_template": "List the <mask> id and the <mask> in <mask> and <mask> id.",
                "query": "SELECT customer_event_id , date_moved_in , property_id FROM customer_events",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "Show all document type codes, document type names, document type descriptions.",
                "masked_template": "Show all <mask>",
                "query": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show ids, customer ids, names for all accounts.",
                "masked_template": "Show <mask> names for all <mask>",
                "query": "SELECT account_id , customer_id , account_name FROM Accounts",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the account ids, customer ids, and account names for all the accounts?",
                "masked_template": "What are the <mask> and <mask> names for all the <mask>",
                "query": "SELECT account_id , customer_id , account_name FROM Accounts",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What are the codes, names, and descriptions of the different document types?",
                "masked_template": "What are the <mask> and <mask> of the different <mask>",
                "query": "SELECT document_type_code , document_type_name , document_type_description FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are all the the participant ids, type code and details?",
                "masked_template": "What are all the the <mask> and <mask>",
                "query": "SELECT Participant_ID , Participant_Type_Code , Participant_Details FROM Participants",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "What are all the role codes, role names, and role descriptions?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT role_code , role_name , role_description FROM ROLES",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the first, middle, and last names of all staff?",
                "masked_template": "What are the <mask> and <mask> names of all <mask>",
                "query": "SELECT first_name , middle_name , last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the names, classes, and ranks of all captains?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT name , CLASS , rank FROM captain",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show the name, home city, and age for all drivers.",
                "masked_template": "Show the <mask> and age for all <mask>",
                "query": "SELECT name , home_city , age FROM driver",
                "ted": 0.0,
                "db_id": "school_bus"
            },
            {
                "question": "What are the rank, first name, and last name of the faculty members?",
                "masked_template": "What are the <mask> and <mask> name of the <mask>",
                "query": "SELECT rank , Fname , Lname FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the rank, first name, and last name for all the faculty.",
                "masked_template": "Show the <mask> and <mask> name for all the <mask>",
                "query": "SELECT rank , Fname , Lname FROM Faculty",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are each document's location code, and starting date and ending data in that location?",
                "masked_template": "What are each <mask> and <mask> and <mask> in that <mask>",
                "query": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "List all role codes, role names, and role descriptions.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT role_code , role_name , role_description FROM ROLES",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the name, location, and number of platforms for all stations.",
                "masked_template": "Show the <mask> and number of <mask> for all <mask>",
                "query": "SELECT name , LOCATION , number_of_platforms FROM station",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the names, classes, and dates for all races?",
                "masked_template": "What are the <mask> and <mask> for all <mask>",
                "query": "SELECT name , CLASS , date FROM race",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show name, class, and date for all races.",
                "masked_template": "Show <mask> and <mask> for all <mask>",
                "query": "SELECT name , CLASS , date FROM race",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name, open date, and organizer for all churches.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT name , open_date , organized_by FROM Church",
                "ted": 0.0,
                "db_id": "wedding"
            },
            {
                "question": "Find the name, class and rank of all captains.",
                "masked_template": "Find the <mask> and <mask> of all <mask>",
                "query": "SELECT name , CLASS , rank FROM captain",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "List the id, color scheme, and name for all the photos.",
                "masked_template": "List the id, <mask> and name for all the <mask>",
                "query": "SELECT id , color , name FROM photos",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "Show the location code, the starting date and ending data in that location for all the documents.",
                "masked_template": "Show the <mask> the <mask> and <mask> in that <mask> for all the <mask>",
                "query": "SELECT location_code , date_in_location_from , date_in_locaton_to FROM Document_locations",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show name, opening year, and capacity for each cinema.",
                "masked_template": "Show <mask> and <mask> for each <mask>",
                "query": "SELECT name , openning_year , capacity FROM cinema",
                "ted": 0.0,
                "db_id": "cinema"
            }
        ],
        "best_hyp": "List the email address, cell number and name for all the professionals.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the email address, cell number, and home phone number of all professionals?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "proc_query": "( <col> weight </col> ) that belongs to ( <tab> pets </tab> ) , ordered by ( ( <col> pet age </col> ) ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the weight of the pet with the oldest age?",
                9.285920143127441
            ],
            [
                "Find the weight of the pet that has the oldest age.",
                9.88038158416748
            ],
            [
                "What is the weight of the pet that has the oldest age?",
                9.613649368286133
            ],
            [
                "Find the weight of the pet who is the oldest pet.",
                9.417797088623047
            ],
            [
                "What is the weight of the pet with the oldest age?",
                9.285921096801758
            ],
            [
                "What is the weight of the pet with the oldest age?",
                9.285920143127441
            ],
            [
                "Return the weight of the pet with the oldest age.",
                9.212116241455078
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "What is the weight of the youngest pet?",
                9.007243156433105
            ],
            [
                "Of all the pets, what was the weight of the youngest pet?",
                8.758336067199707
            ],
            [
                "What is the weight at which the pet with the oldest age was born?",
                7.98126220703125
            ],
            [
                "Return the weight of the youngest pet.",
                7.541141510009766
            ],
            [
                "Return the weight of the youngest pet.",
                7.541141033172607
            ],
            [
                "Which pet has the oldest age? Return the pet weight.",
                3.5161619186401367
            ],
            [
                "Find the pet weight of the youngest pet.",
                2.2322726249694824
            ],
            [
                "Show the weight of the pet with oldest age.",
                1.9958691596984863
            ],
            [
                "Tell me the the weight of the youngest pet.",
                1.951642632484436
            ],
            [
                "Show the weight of pet with oldest age.",
                0.3709774613380432
            ],
            [
                "What are the pet weights with top 3 oldest age? List their weights.",
                -6.616949558258057
            ],
            [
                "What are the 3 pet weights that have the oldest pet? Tell me the weight.",
                -9.256933212280273
            ],
            [
                "Which pet has the oldest age?",
                -9.518845558166504
            ],
            [
                "Which pet has the least age?",
                -9.8165922164917
            ],
            [
                "Which pet is the pet that has the oldest age?",
                -10.225286483764648
            ],
            [
                "Show the 3 pet weights with the oldest age.",
                -10.29836368560791
            ],
            [
                "List the weight of pet with 3 oldest age.",
                -10.65850830078125
            ],
            [
                "What is the name of the 3 pet weights who get older than the youngest pet?",
                -11.435392379760742
            ]
        ],
        "templates": [
            "",
            {
                "question": "Find the name of the product that has the smallest capacity.",
                "masked_template": "Find the name of the <mask> that has the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "product_catalog",
                "query_toks": [
                    "select",
                    "catalog_entry_name",
                    "from",
                    "catalog_contents",
                    "order",
                    "by",
                    "capacity",
                    "asc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "catalog_entry_name",
                    "from",
                    "catalog_contents",
                    "order",
                    "by",
                    "capacity",
                    "asc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What is the id of the trip that has the shortest duration?",
                "masked_template": "What is the id of the <mask> that has the <mask>",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1",
                "query_toks": [
                    "select",
                    "id",
                    "from",
                    "trip",
                    "order",
                    "by",
                    "duration",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "id",
                    "from",
                    "trip",
                    "order",
                    "by",
                    "duration",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Find the name of customer who has the lowest credit score.",
                "masked_template": "Find the name of <mask> who has the <mask>",
                "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
                "ted": 0.0,
                "db_id": "loan_1",
                "query_toks": [
                    "select",
                    "cust_name",
                    "from",
                    "customer",
                    "order",
                    "by",
                    "credit_score",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "cust_name",
                    "from",
                    "customer",
                    "order",
                    "by",
                    "credit_score",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What is the id of the candidate with the lowest oppose rate?",
                "masked_template": "What is the id of the <mask> with the <mask>",
                "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
                "ted": 0.0,
                "db_id": "candidate_poll",
                "query_toks": [
                    "select",
                    "candidate_id",
                    "from",
                    "candidate",
                    "order",
                    "by",
                    "oppose_rate",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "candidate_id",
                    "from",
                    "candidate",
                    "order",
                    "by",
                    "oppose_rate",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What is the name of the district with the smallest area?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Give the name of the department with the lowest budget.",
                "masked_template": "<mask> the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2",
                "query_toks": [
                    "select",
                    "dept_name",
                    "from",
                    "department",
                    "order",
                    "by",
                    "budget",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "dept_name",
                    "from",
                    "department",
                    "order",
                    "by",
                    "budget",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What was the date of the earliest payment?",
                "masked_template": "What was the <mask> of the <mask>",
                "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the weight of the shortest person?",
                "masked_template": "What is the <mask> of the <mask>",
                "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "What are the numbers of the shortest flights?",
                "masked_template": "What are the numbers of the <mask>",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the id of the shortest trip?",
                "masked_template": "What is the id of the <mask>",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the joined year of the pilot of the highest rank?",
                "masked_template": "What is the <mask> of the <mask> of the <mask>",
                "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "What are the three most costly procedures?",
                "masked_template": "What are the <mask> most <mask>",
                "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What is the name of the youngest captain?",
                "masked_template": "What is the name of the <mask>",
                "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Of all the claims, what was the earliest date when any claim was made?",
                "masked_template": "Of all the <mask> what was the <mask> any <mask> was <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "What is the winery at which the wine with the highest score was made?",
                "masked_template": "What is the <mask> at which the <mask> with the <mask> was <mask>",
                "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Return the name of the youngest captain.",
                "masked_template": "Return the name of the <mask>",
                "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Return the weight of the shortest person.",
                "masked_template": "Return the <mask> of the <mask>",
                "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
                "masked_template": "Which <mask> has the <mask> Return the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "Find the three most expensive procedures.",
                "masked_template": "Find the <mask> most <mask>",
                "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Show the flight number of flights with three lowest distances.",
                "masked_template": "Show the <mask> number of <mask> with <mask>",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Tell me the the date when the first claim was made.",
                "masked_template": "<mask> me the the <mask> the <mask> was <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Show the name of aircrafts with top three lowest distances.",
                "masked_template": "Show the name of <mask> with top <mask>",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
                "masked_template": "What are the <mask> with top 3 <mask> List their <mask>",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the 3 counties that have the smallest population? Give me the county names.",
                "masked_template": "What are the 3 <mask> that have the <mask> me the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Which department has the lowest budget?",
                "masked_template": "Which <mask> has the <mask>",
                "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Which district has the least area?",
                "masked_template": "Which <mask> has the least <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Which winery is the wine that has the highest score from?",
                "masked_template": "Which <mask> is the <mask> that has the <mask>",
                "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Show the 3 counties with the smallest population.",
                "masked_template": "Show the 3 <mask> with the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "List the publication dates of publications with 3 lowest prices.",
                "masked_template": "List the <mask> of <mask> with 3 <mask>",
                "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What is the name of the 3 employees who get paid the least?",
                "masked_template": "What is the name of the 3 <mask> who get <mask> the <mask>",
                "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What is the weight at which the pet with the oldest age was born?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the weight of the pet with the oldest age?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> dogs </tab> ) , ( <col> first name </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> dogs </tab> ) , and ( ( <tab> owners </tab> ) satisfied that ( ( <col> owner id </col> of <tab> dogs </tab> ) equal to ( <col> owner id </col> of <tab> owners </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> dogs </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the id, first name and last name of the owner who has the most dogs?",
                10.887182235717773
            ],
            [
                "Which owner owns the most number of dogs? List the owner id, first name and last name.",
                11.076964378356934
            ],
            [
                "Which owner owns the most number of dogs? List the owner id, first name and last name.",
                11.076964378356934
            ],
            [
                "What are the id, first name and last name of the owner who owns the greatest number of dogs?",
                11.008672714233398
            ],
            [
                "Find the owner id, first name and last name of the dog with the most owners.",
                10.992923736572266
            ],
            [
                "What are the ids, first names and last names of the owners with the greatest number of dogs?",
                10.96635627746582
            ],
            [
                "What are the owner id, first name and last name who has the most dogs?",
                10.72313404083252
            ],
            [
                "Return the id, first name and last name for the owner with the most dogs.",
                10.64678955078125
            ],
            [
                "What are the ids and full names of the owners who have the most dogs?",
                10.597721099853516
            ],
            [
                "What are the ids and full names of the owners with the most dogs?",
                10.252152442932129
            ],
            [
                "Return the id and full name of the owner who has the most dogs.",
                10.217833518981934
            ],
            [
                "What is the owner id, first name and last name with most number of dogs?",
                10.053892135620117
            ],
            [
                "What is the owner id, first name and last name with least number of dogs?",
                10.017661094665527
            ],
            [
                "Which owner owns the most dogs? List his or her first name and last name.",
                9.975645065307617
            ],
            [
                "Return the id and full name of the owner with the most dogs.",
                9.971549987792969
            ],
            [
                "What is the id and first name of the owner with most number of dogs?",
                9.511344909667969
            ],
            [
                "Return the id and last name of the owner who has the greatest number of dogs.",
                5.590167999267578
            ],
            [
                "Find the id and last name of the owner that owns the most dogs.",
                5.0384955406188965
            ],
            [
                "Find the name and first name of the owner who is the owner of the most number of dogs.",
                5.016747951507568
            ],
            [
                "Find the name and first name of the owner who is the owner for the most number of dogs.",
                4.8286309242248535
            ],
            [
                "What is the name and first name of the owner who owns most of the dogs?",
                4.288277626037598
            ],
            [
                "What is the name and first name of the owner that the most dogs end at?",
                3.8525993824005127
            ],
            [
                "What is the id, name and last name of the owner that had most number of dogs?",
                0.9719275832176208
            ],
            [
                "What is the id, name and last name of the owner who owns the most dogs?",
                0.19897283613681793
            ],
            [
                "Which owner has the most dogs? Tell me the owner id and id.",
                -1.5616962909698486
            ],
            [
                "Which owner owns least number of dogs? List the owner name and the id.",
                -1.8795355558395386
            ],
            [
                "Return the id and id of the owner or owner who owns the greatest number of dogs.",
                -2.6206445693969727
            ],
            [
                "Which owner has the most number of dogs or cats? List the owner id and last name.",
                -3.9995102882385254
            ],
            [
                "Find the owner id, first name and id for the most dogs.",
                -4.31500244140625
            ],
            [
                "Show the owner id, first name and last name.",
                -6.403134346008301
            ],
            [
                "Which 3 owners have the most dogs? List their first name and id.",
                -10.048887252807617
            ]
        ],
        "templates": [
            "",
            {
                "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
                "masked_template": "Which <mask> log <mask> the most number of <mask> List the <mask> log id, <mask> and <mask>",
                "query": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance",
                "query_toks": [
                    "select",
                    "t1.fault_log_entry_id",
                    ",",
                    "t1.fault_description",
                    ",",
                    "t1.fault_log_entry_datetime",
                    "from",
                    "fault_log",
                    "as",
                    "t1",
                    "join",
                    "fault_log_parts",
                    "as",
                    "t2",
                    "on",
                    "t1.fault_log_entry_id",
                    "=",
                    "t2.fault_log_entry_id",
                    "group",
                    "by",
                    "t1.fault_log_entry_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.fault_log_entry_id",
                    ",",
                    "t1.fault_description",
                    ",",
                    "t1.fault_log_entry_datetime",
                    "from",
                    "fault_log",
                    "as",
                    "t1",
                    "join",
                    "fault_log_parts",
                    "as",
                    "t2",
                    "on",
                    "t1.fault_log_entry_id",
                    "=",
                    "t2.fault_log_entry_id",
                    "group",
                    "by",
                    "t1.fault_log_entry_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
                "masked_template": "Which <mask> the most number of <mask> List the <mask> id, <mask> and <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
                "masked_template": "What are the <mask> number and <mask> of the <mask> who <mask> the <mask> number of <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store",
                "query_toks": [
                    "select",
                    "t1.customer_name",
                    ",",
                    "t1.customer_phone",
                    ",",
                    "t1.customer_email",
                    "from",
                    "customers",
                    "as",
                    "t1",
                    "join",
                    "customer_orders",
                    "as",
                    "t2",
                    "on",
                    "t1.customer_id",
                    "=",
                    "t2.customer_id",
                    "group",
                    "by",
                    "t2.customer_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.customer_name",
                    ",",
                    "t1.customer_phone",
                    ",",
                    "t1.customer_email",
                    "from",
                    "customers",
                    "as",
                    "t1",
                    "join",
                    "customer_orders",
                    "as",
                    "t2",
                    "on",
                    "t1.customer_id",
                    "=",
                    "t2.customer_id",
                    "group",
                    "by",
                    "t2.customer_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Give the full name and customer id of the customer with the fewest accounts.",
                "masked_template": "<mask> the <mask> name and <mask> id of the <mask> with the <mask>",
                "query": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions",
                "query_toks": [
                    "select",
                    "t2.customer_first_name",
                    ",",
                    "t2.customer_last_name",
                    ",",
                    "t1.customer_id",
                    "from",
                    "accounts",
                    "as",
                    "t1",
                    "join",
                    "customers",
                    "as",
                    "t2",
                    "on",
                    "t1.customer_id",
                    "=",
                    "t2.customer_id",
                    "group",
                    "by",
                    "t1.customer_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "asc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.customer_first_name",
                    ",",
                    "t2.customer_last_name",
                    ",",
                    "t1.customer_id",
                    "from",
                    "accounts",
                    "as",
                    "t1",
                    "join",
                    "customers",
                    "as",
                    "t2",
                    "on",
                    "t1.customer_id",
                    "=",
                    "t2.customer_id",
                    "group",
                    "by",
                    "t1.customer_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "asc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What are the title, id, and description of the movie with the greatest number of actors?",
                "masked_template": "What are the <mask> id, and <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1",
                "query_toks": [
                    "select",
                    "t2.title",
                    ",",
                    "t2.film_id",
                    ",",
                    "t2.description",
                    "from",
                    "film_actor",
                    "as",
                    "t1",
                    "join",
                    "film",
                    "as",
                    "t2",
                    "on",
                    "t1.film_id",
                    "=",
                    "t2.film_id",
                    "group",
                    "by",
                    "t2.film_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.title",
                    ",",
                    "t2.film_id",
                    ",",
                    "t2.description",
                    "from",
                    "film_actor",
                    "as",
                    "t1",
                    "join",
                    "film",
                    "as",
                    "t2",
                    "on",
                    "t1.film_id",
                    "=",
                    "t2.film_id",
                    "group",
                    "by",
                    "t2.film_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What are the manager's first name, last name and id who won the most manager award?",
                "masked_template": "What are the <mask> name and id who won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1",
                "query_toks": [
                    "select",
                    "t1.name_first",
                    ",",
                    "t1.name_last",
                    ",",
                    "t2.player_id",
                    "from",
                    "player",
                    "as",
                    "t1",
                    "join",
                    "manager_award",
                    "as",
                    "t2",
                    "on",
                    "t1.player_id",
                    "=",
                    "t2.player_id",
                    "group",
                    "by",
                    "t2.player_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.name_first",
                    ",",
                    "t1.name_last",
                    ",",
                    "t2.player_id",
                    "from",
                    "player",
                    "as",
                    "t1",
                    "join",
                    "manager_award",
                    "as",
                    "t2",
                    "on",
                    "t1.player_id",
                    "=",
                    "t2.player_id",
                    "group",
                    "by",
                    "t2.player_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Return the name, phone number and email address for the customer with the most orders.",
                "masked_template": "Return the <mask> number and <mask> for the <mask> with the most <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
                "masked_template": "What are the <mask> and <mask> ID of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the ids, types, and details of the organization with the most research staff?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the most <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Return the id and full name of the customer who has the fewest accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> who has the <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What is the customer id, first and last name with most number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with most number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the customer id, first and last name with least number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with least number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
                "masked_template": "Which <mask> the most <mask> List his or her <mask> name and <mask> id.",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Return the id and full name of the customer with the most accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the customer last name, id and phone number with most number of orders?",
                "masked_template": "What is the <mask> id and <mask> number with most number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
                "masked_template": "Return the <mask> id and <mask> number of the <mask> who has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
                "masked_template": "Find the <mask> and <mask> ID of the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name and city of the airport which is the destination of the most number of routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> of the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Find the name and city of the airport which is the source for the most number of flight routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> for the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and city of the airport from most of the routes start?",
                "masked_template": "What is the name and <mask> of the <mask> most of the <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and city of the airport that the most routes end at?",
                "masked_template": "What is the name and <mask> of the <mask> that the most <mask> end at?",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the id, name and IATA code of the airport that had most number of flights?",
                "masked_template": "What is the id, name and <mask> of the <mask> that had most number of <mask>",
                "query": "SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What is the id, name and nationality of the architect who built most mills?",
                "masked_template": "What is the id, name and <mask> of the <mask> who <mask> most <mask>",
                "query": "SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
                "masked_template": "Which <mask> won the most <mask> me the <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which staff handled least number of payments? List the full name and the id.",
                "masked_template": "Which <mask> least number of <mask> List the <mask> name and the id.",
                "query": "SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "sakila_1"
            },
            {
                "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
                "masked_template": "Return the <mask> name and id of the <mask> or <mask> who <mask> in the <mask> number of <mask>",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
                "masked_template": "Which <mask> has the most number of <mask> or <mask> List the <mask> id and <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the first name, last name and id for the top three players won the most player awards.",
                "masked_template": "Find the <mask> name and id for the top <mask> won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
                "masked_template": "<mask> who have <mask> which <mask> the least number of <mask> List the <mask> id, <mask> name and <mask>",
                "query": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Which 3 players won the most player awards? List their full name and id.",
                "masked_template": "Which 3 <mask> won the most <mask> List their <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            }
        ],
        "best_hyp": "What is the id, name and last name of the owner that had most number of dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id, first name and last name of the owner who has the most dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> dog id </col> of <tab> dogs </tab> ) equal to ( <col> dog id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> owners </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the id and last name of the owner who has the most treatments?",
                9.205025672912598
            ],
            [
                "Find the id and last name of the owner who treats the most number of dogs.",
                10.811723709106445
            ],
            [
                "What is the id and last name of the owner that have treated the most number of dogs?",
                10.77344799041748
            ],
            [
                "Which owner has the most number of treatments related to dogs? List owner id and last name.",
                10.504319190979004
            ],
            [
                "Which owner has the greatest number of treatments? Tell me the owner id and last name.",
                9.948065757751465
            ],
            [
                "What are the ids and last names of all owners who specialized in the most treatments?",
                9.717696189880371
            ],
            [
                "Find the id and last name of the owner who has the most treatments.",
                9.43974781036377
            ],
            [
                "Find the id and last name of the owner who has the most treatments.",
                9.43974781036377
            ],
            [
                "Find the id and last name of the owner who has the most treatments.",
                9.43974781036377
            ],
            [
                "Find the id and last name of the owner who has the most treatments.",
                9.43974781036377
            ],
            [
                "Find the owner id and last name of the dog that has been used in most treatments.",
                9.426115036010742
            ],
            [
                "What is the id and last name of the owner who specialized in the most treatments?",
                9.259259223937988
            ],
            [
                "What are the id and last name of the owner with the most treatments?",
                9.050313949584961
            ],
            [
                "For each owner id, what is the last name of the owner that is involved in the most number of treatments?",
                8.190266609191895
            ],
            [
                "What is the id and last name of the owner who was in the most treatments?",
                7.926483154296875
            ],
            [
                "Return the owner id and last name of the dog that is undergoing most treatments.",
                5.953681468963623
            ],
            [
                "Find the id and name of the owner who has the greatest number of treatments.",
                5.053467273712158
            ],
            [
                "What are the name and last name of the owner with the most ordered number of treatments?",
                4.929011344909668
            ],
            [
                "What are the id and name of the owner who has the most treatments?",
                4.61299991607666
            ],
            [
                "What is the name and last name of the owner with the most number of treatments?",
                3.9826207160949707
            ],
            [
                "What is the name and last name for the owner with most number of treatments in one pet?",
                3.671616315841675
            ],
            [
                "What is the id and last name of the owner in the company which was involved in most treatments?",
                3.5902013778686523
            ],
            [
                "What is the name and last name for the owner that has the most treatments in record?",
                3.510232925415039
            ],
            [
                "Find the name and last name of the owner with least number of treatments.",
                3.028071165084839
            ],
            [
                "Which owner has the most treatments? Find the name of the owner.",
                -1.6956218481063843
            ],
            [
                "Find the name of the owner that has the greatest number of treatments.",
                -2.302361011505127
            ],
            [
                "What is the owner id with the most number of treatments?",
                -2.9821410179138184
            ],
            [
                "Show the name of the owner that has the most treatments.",
                -4.91389274597168
            ],
            [
                "Find the owner with the most number of treatments.",
                -7.275907039642334
            ],
            [
                "Which owner has the most treatments?",
                -7.657720565795898
            ],
            [
                "Show the id and the id of the owner who has the most number of treatments.",
                -9.002229690551758
            ]
        ],
        "templates": [
            "",
            {
                "question": "Find the id and surname of the driver who participated the most number of races?",
                "masked_template": "Find the id and <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1",
                "query_toks": [
                    "select",
                    "t1.driverid",
                    ",",
                    "t1.surname",
                    "from",
                    "drivers",
                    "as",
                    "t1",
                    "join",
                    "results",
                    "as",
                    "t2",
                    "on",
                    "t1.driverid",
                    "=",
                    "t2.driverid",
                    "join",
                    "races",
                    "as",
                    "t3",
                    "on",
                    "t2.raceid",
                    "=",
                    "t3.raceid",
                    "group",
                    "by",
                    "t1.driverid",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.driverid",
                    ",",
                    "t1.surname",
                    "from",
                    "drivers",
                    "as",
                    "t1",
                    "join",
                    "results",
                    "as",
                    "t2",
                    "on",
                    "t1.driverid",
                    "=",
                    "t2.driverid",
                    "join",
                    "races",
                    "as",
                    "t3",
                    "on",
                    "t2.raceid",
                    "=",
                    "t3.raceid",
                    "group",
                    "by",
                    "t1.driverid",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What is the last name of the musician that have produced the most number of songs?",
                "masked_template": "What is the <mask> name of the <mask> that have <mask> the most number of <mask>",
                "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2",
                "query_toks": [
                    "select",
                    "t2.lastname",
                    "from",
                    "performance",
                    "as",
                    "t1",
                    "join",
                    "band",
                    "as",
                    "t2",
                    "on",
                    "t1.bandmate",
                    "=",
                    "t2.id",
                    "join",
                    "songs",
                    "as",
                    "t3",
                    "on",
                    "t3.songid",
                    "=",
                    "t1.songid",
                    "group",
                    "by",
                    "lastname",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.lastname",
                    "from",
                    "performance",
                    "as",
                    "t1",
                    "join",
                    "band",
                    "as",
                    "t2",
                    "on",
                    "t1.bandmate",
                    "=",
                    "t2.id",
                    "join",
                    "songs",
                    "as",
                    "t3",
                    "on",
                    "t3.songid",
                    "=",
                    "t1.songid",
                    "group",
                    "by",
                    "lastname",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Which part fault requires the most number of skills to fix? List part id and name.",
                "masked_template": "Which <mask> the most number of <mask> to <mask> List <mask> id and <mask>",
                "query": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance",
                "query_toks": [
                    "select",
                    "t1.part_id",
                    ",",
                    "t1.part_name",
                    "from",
                    "parts",
                    "as",
                    "t1",
                    "join",
                    "part_faults",
                    "as",
                    "t2",
                    "on",
                    "t1.part_id",
                    "=",
                    "t2.part_id",
                    "join",
                    "skills_required_to_fix",
                    "as",
                    "t3",
                    "on",
                    "t2.part_fault_id",
                    "=",
                    "t3.part_fault_id",
                    "group",
                    "by",
                    "t1.part_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.part_id",
                    ",",
                    "t1.part_name",
                    "from",
                    "parts",
                    "as",
                    "t1",
                    "join",
                    "part_faults",
                    "as",
                    "t2",
                    "on",
                    "t1.part_id",
                    "=",
                    "t2.part_id",
                    "join",
                    "skills_required_to_fix",
                    "as",
                    "t3",
                    "on",
                    "t2.part_fault_id",
                    "=",
                    "t3.part_fault_id",
                    "group",
                    "by",
                    "t1.part_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Which building has the largest number of company offices? Give me the building name.",
                "masked_template": "Which <mask> has the <mask> number of <mask> me the <mask>",
                "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "company_office",
                "query_toks": [
                    "select",
                    "t2.name",
                    "from",
                    "office_locations",
                    "as",
                    "t1",
                    "join",
                    "buildings",
                    "as",
                    "t2",
                    "on",
                    "t1.building_id",
                    "=",
                    "t2.id",
                    "join",
                    "companies",
                    "as",
                    "t3",
                    "on",
                    "t1.company_id",
                    "=",
                    "t3.id",
                    "group",
                    "by",
                    "t1.building_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.name",
                    "from",
                    "office_locations",
                    "as",
                    "t1",
                    "join",
                    "buildings",
                    "as",
                    "t2",
                    "on",
                    "t1.building_id",
                    "=",
                    "t2.id",
                    "join",
                    "companies",
                    "as",
                    "t3",
                    "on",
                    "t1.company_id",
                    "=",
                    "t3.id",
                    "group",
                    "by",
                    "t1.building_id",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "What are the ids and last names of all drivers who participated in the most races?",
                "masked_template": "What are the ids and <mask> names of all <mask> who <mask> in the most <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1",
                "query_toks": [
                    "select",
                    "t1.driverid",
                    ",",
                    "t1.surname",
                    "from",
                    "drivers",
                    "as",
                    "t1",
                    "join",
                    "results",
                    "as",
                    "t2",
                    "on",
                    "t1.driverid",
                    "=",
                    "t2.driverid",
                    "join",
                    "races",
                    "as",
                    "t3",
                    "on",
                    "t2.raceid",
                    "=",
                    "t3.raceid",
                    "group",
                    "by",
                    "t1.driverid",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.driverid",
                    ",",
                    "t1.surname",
                    "from",
                    "drivers",
                    "as",
                    "t1",
                    "join",
                    "results",
                    "as",
                    "t2",
                    "on",
                    "t1.driverid",
                    "=",
                    "t2.driverid",
                    "join",
                    "races",
                    "as",
                    "t3",
                    "on",
                    "t2.raceid",
                    "=",
                    "t3.raceid",
                    "group",
                    "by",
                    "t1.driverid",
                    "order",
                    "by",
                    "count",
                    "(",
                    "*",
                    ")",
                    "desc",
                    "limit",
                    "value"
                ]
            },
            {
                "question": "Find the country that the most papers are affiliated with.",
                "masked_template": "Find the <mask> that the most <mask> are <mask>",
                "query": "SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the names of stadiums that the most swimmers have been to.",
                "masked_template": "Find the names of <mask> that the most <mask> have <mask> to.",
                "query": "SELECT T3.name FROM record AS T1 JOIN event AS T2 ON T1.event_id = T2.id JOIN stadium AS T3 ON T3.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "swimming"
            },
            {
                "question": "Retrieve the country that has published the most papers.",
                "masked_template": "<mask> the <mask> that has <mask> the most <mask>",
                "query": "SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the city where the most customers live.",
                "masked_template": "Find the <mask> the most <mask>",
                "query": "SELECT T3.city FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id GROUP BY T3.city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the first name of the band mate that has performed in most songs.",
                "masked_template": "Find the <mask> name of the <mask> that has <mask> in most <mask>",
                "query": "SELECT T2.firstname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What is the first name of the band mate who perfomed in the most songs?",
                "masked_template": "What is the <mask> name of the <mask> who <mask> in the most <mask>",
                "query": "SELECT T2.firstname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What are the name and id of the team with the most victories in 2008 postseason?",
                "masked_template": "What are the name and id of the <mask> with the most <mask> in <mask>",
                "query": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "baseball_1"
            },
            {
                "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
                "masked_template": "For each <mask> id, what is the <mask> of the <mask> that is <mask> with the most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What is the last name of the musician who was in the most songs?",
                "masked_template": "What is the <mask> name of the <mask> who was in the most <mask>",
                "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "Return the title and inventory id of the film that is rented most often.",
                "masked_template": "Return the <mask> and <mask> id of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
                "masked_template": "Find the id and name of the <mask> the <mask> number of <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "What are the name and phone of the customer with the most ordered product quantity?",
                "masked_template": "What are the name and <mask> of the <mask> with the most ordered <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum( T3.order_quantity ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "What are the id and name of the stadium where the most injury accidents happened?",
                "masked_template": "What are the id and name of the <mask> the most <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
                "masked_template": "What is the name and <mask> of the <mask> with the <mask> of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> with most number of <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
                "masked_template": "What is the <mask> and <mask> id of the <mask> in the <mask> which was <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the name and opening year for the branch that registered the most members in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> that <mask> the most <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "Find the name and capacity of the dorm with least number of amenities.",
                "masked_template": "Find the name and <mask> of the <mask> with least number of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "dorm_1"
            },
            {
                "question": "Which institution has the most papers? Find the name of the institution.",
                "masked_template": "Which <mask> has the most <mask> Find the name of the <mask>",
                "query": "SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the name of the organization that has published the largest number of papers.",
                "masked_template": "Find the name of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the city with the most number of flagship stores?",
                "masked_template": "What is the <mask> with the most number of <mask>",
                "query": "SELECT T3.headquartered_city FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id GROUP BY T3.headquartered_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Show the name of the building that has the most company offices.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "company_office"
            },
            {
                "question": "Find the city with the most number of stores.",
                "masked_template": "Find the <mask> with the most number of <mask>",
                "query": "SELECT T3.headquartered_city FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id GROUP BY T3.headquartered_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Which city has the most customers living in?",
                "masked_template": "Which <mask> has the most <mask> in?",
                "query": "SELECT T3.city FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id GROUP BY T3.city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
                "masked_template": "Show the <mask> and the id of the <mask> in most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            }
        ],
        "best_hyp": "Which owner has the most treatments? Find the name of the owner.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id and last name of the owner who has the most treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( * ) FROM Dogs WHERE age < ( SELECT avg( age ) FROM Dogs )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> dogs </tab> ) , that have ( ( <col> age </col> ) less than ( the average of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many dogs are younger than average?",
                8.816970825195312
            ],
            [
                "What is the total number of dogs for all the dogs that have an age below the average?",
                11.142074584960938
            ],
            [
                "Find the number of dogs whose age is smaller than the average age.",
                10.613301277160645
            ],
            [
                "What is the number of dogs that is younger than the average age?",
                10.518316268920898
            ],
            [
                "What is the count of dogs that are younger than the average number of dogs?",
                10.338447570800781
            ],
            [
                "find the number of dogs whose age is younger than the average age.",
                10.285897254943848
            ],
            [
                "Find the number of dogs with a age that is younger than the average.",
                9.988633155822754
            ],
            [
                "How many dogs have a younger age than the average?",
                8.944832801818848
            ],
            [
                "How many dogs have a younger age than the average?",
                8.944832801818848
            ],
            [
                "How many dogs are younger than average?",
                8.816971778869629
            ],
            [
                "Find the total number of the dogs the average age is younger than the average.",
                2.945033550262451
            ],
            [
                "Find the name of dogs whose age is below the average age of all dogs.",
                -5.839893341064453
            ],
            [
                "Find the count of dogs whose age fee is lower than the average.",
                -8.49020767211914
            ],
            [
                "What are the names of dogs with age smaller than the average?",
                -9.031463623046875
            ],
            [
                "What are the names of dogs who are younger than average?",
                -9.691908836364746
            ],
            [
                "How many dogs have a fee lower than average?",
                -10.588780403137207
            ],
            [
                "How many dogs have a fee lower than the average?",
                -10.951129913330078
            ],
            [
                "How many dogs have more than average number of years of age are there?",
                -11.998616218566895
            ]
        ],
        "templates": [
            "",
            {
                "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
                "masked_template": "What is the total <mask> for all the <mask> that have an <mask> the average <mask>",
                "query": "SELECT sum( city_population ) FROM district WHERE city_area > ( SELECT avg( city_area ) FROM district )",
                "ted": 0.08333333333333333,
                "db_id": "store_product",
                "query_toks": [
                    "select",
                    "sum",
                    "(",
                    "city_population",
                    ")",
                    "from",
                    "district",
                    "where",
                    "city_area",
                    ">",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "city_area",
                    ")",
                    "from",
                    "district",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "sum",
                    "(",
                    "city_population",
                    ")",
                    "from",
                    "district",
                    "where",
                    "city_area",
                    ">",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "city_area",
                    ")",
                    "from",
                    "district",
                    ")"
                ]
            },
            {
                "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
                "masked_template": "Find the names of <mask> whose <mask> is <mask> than the average <mask>",
                "query": "SELECT name FROM stadium WHERE capacity < ( SELECT avg( capacity ) FROM stadium )",
                "ted": 0.08333333333333333,
                "db_id": "swimming",
                "query_toks": [
                    "select",
                    "name",
                    "from",
                    "stadium",
                    "where",
                    "capacity",
                    "<",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "capacity",
                    ")",
                    "from",
                    "stadium",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    "from",
                    "stadium",
                    "where",
                    "capacity",
                    "<",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "capacity",
                    ")",
                    "from",
                    "stadium",
                    ")"
                ]
            },
            {
                "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
                "masked_template": "What is the number of <mask> that has <mask> whose <mask> is <mask> than the average <mask>",
                "query": "SELECT count( DISTINCT state ) FROM college WHERE enr < ( SELECT avg( enr ) FROM college )",
                "ted": 0.07692307692307693,
                "db_id": "soccer_2",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "state",
                    ")",
                    "from",
                    "college",
                    "where",
                    "enr",
                    "<",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "enr",
                    ")",
                    "from",
                    "college",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "state",
                    ")",
                    "from",
                    "college",
                    "where",
                    "enr",
                    "<",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "enr",
                    ")",
                    "from",
                    "college",
                    ")"
                ]
            },
            {
                "question": "What is the number of branches that have more than the average number of memberships?",
                "masked_template": "What is the number of <mask> that have more than the average number of <mask>",
                "query": "SELECT count( * ) FROM branch WHERE membership_amount > ( SELECT avg( membership_amount ) FROM branch )",
                "ted": 0.041666666666666664,
                "db_id": "shop_membership",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "branch",
                    "where",
                    "membership_amount",
                    ">",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "membership_amount",
                    ")",
                    "from",
                    "branch",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "branch",
                    "where",
                    "membership_amount",
                    ">",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "membership_amount",
                    ")",
                    "from",
                    "branch",
                    ")"
                ]
            },
            {
                "question": "find the name of people whose height is lower than the average.",
                "masked_template": "find the name of <mask> whose <mask> is <mask> than the <mask>",
                "query": "SELECT name FROM people WHERE height < ( SELECT avg( height ) FROM people )",
                "ted": 0.08333333333333333,
                "db_id": "candidate_poll",
                "query_toks": [
                    "select",
                    "name",
                    "from",
                    "people",
                    "where",
                    "height",
                    "<",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "height",
                    ")",
                    "from",
                    "people",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    "from",
                    "people",
                    "where",
                    "height",
                    "<",
                    "(",
                    "select",
                    "avg",
                    "(",
                    "height",
                    ")",
                    "from",
                    "people",
                    ")"
                ]
            },
            {
                "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.",
                "masked_template": "Find the number of <mask> with a <mask> that is <mask> than the average <mask>",
                "query": "SELECT count( * ) FROM savings WHERE balance > ( SELECT avg( balance ) FROM savings )",
                "ted": 0.041666666666666664,
                "db_id": "small_bank_1"
            },
            {
                "question": "How many accounts have a savings balance above the average savings balance?",
                "masked_template": "How many <mask> have a <mask> the average <mask>",
                "query": "SELECT count( * ) FROM savings WHERE balance > ( SELECT avg( balance ) FROM savings )",
                "ted": 0.041666666666666664,
                "db_id": "small_bank_1"
            },
            {
                "question": "How many products have a price higher than the average?",
                "masked_template": "How many <mask> have a <mask> than the <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_price > ( SELECT avg( product_price ) FROM products )",
                "ted": 0.041666666666666664,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "How many states have smaller colleges than average?",
                "masked_template": "How many <mask> have <mask> than <mask>",
                "query": "SELECT count( DISTINCT state ) FROM college WHERE enr < ( SELECT avg( enr ) FROM college )",
                "ted": 0.07692307692307693,
                "db_id": "soccer_2"
            },
            {
                "question": "Find the total population of the districts where the area is bigger than the average city area.",
                "masked_template": "Find the total <mask> of the <mask> the <mask> is <mask> than the average <mask>",
                "query": "SELECT sum( city_population ) FROM district WHERE city_area > ( SELECT avg( city_area ) FROM district )",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
                "masked_template": "Find the name of <mask> whose <mask> is <mask> the average <mask> of all <mask>",
                "query": "SELECT cust_name FROM customer WHERE credit_score < ( SELECT avg( credit_score ) FROM customer )",
                "ted": 0.08333333333333333,
                "db_id": "loan_1"
            },
            {
                "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
                "masked_template": "Find the count of <mask> whose <mask> fee is <mask> than the average <mask>",
                "query": "SELECT count( * ) FROM csu_fees WHERE campusfee > ( SELECT avg( campusfee ) FROM csu_fees )",
                "ted": 0.041666666666666664,
                "db_id": "csu_1"
            },
            {
                "question": "What are the names of customers with credit score less than the average credit score across customers?",
                "masked_template": "What are the names of <mask> with <mask> than the average <mask>",
                "query": "SELECT cust_name FROM customer WHERE credit_score < ( SELECT avg( credit_score ) FROM customer )",
                "ted": 0.08333333333333333,
                "db_id": "loan_1"
            },
            {
                "question": "What are the names of people who are shorter than average?",
                "masked_template": "What are the names of <mask> who are <mask> than <mask>",
                "query": "SELECT name FROM people WHERE height < ( SELECT avg( height ) FROM people )",
                "ted": 0.08333333333333333,
                "db_id": "candidate_poll"
            },
            {
                "question": "How many universities have a campus fee higher than average?",
                "masked_template": "How many <mask> have a <mask> fee <mask> than <mask>",
                "query": "SELECT count( * ) FROM csu_fees WHERE campusfee > ( SELECT avg( campusfee ) FROM csu_fees )",
                "ted": 0.041666666666666664,
                "db_id": "csu_1"
            },
            {
                "question": "How many universities have a campus fee greater than the average?",
                "masked_template": "How many <mask> have a <mask> fee <mask> than the <mask>",
                "query": "SELECT count( * ) FROM csu_fees WHERE campusfee > ( SELECT avg( campusfee ) FROM csu_fees )",
                "ted": 0.041666666666666664,
                "db_id": "csu_1"
            },
            {
                "question": "How many branches where have more than average number of memberships are there?",
                "masked_template": "How many <mask> have more than average number of <mask> are <mask>",
                "query": "SELECT count( * ) FROM branch WHERE membership_amount > ( SELECT avg( membership_amount ) FROM branch )",
                "ted": 0.041666666666666664,
                "db_id": "shop_membership"
            }
        ],
        "best_hyp": "What are the names of dogs who are younger than average?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many dogs are younger than average?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
        "proc_query": "( <col> first name </col> ) , ( <col> last name </col> ) , ( <col> email address </col> ) that belongs to ( <tab> owners </tab> ) , that have ( ( <col> state </col> ) like ( <val> %North% </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the first name, last name, and email address of the owners whose state contains the word \"North\"?",
                11.157042503356934
            ],
            [
                "What is the full name and email address of the owner whose state is North?",
                10.11038875579834
            ],
            [
                "Show the first name and last name and email address for all owners in North state.",
                5.572635650634766
            ],
            [
                "Return the full names and emails of owners with state North.",
                4.080906867980957
            ],
            [
                "display the first name and last name and email address for owners whose state name is North with the letter m.",
                2.4149491786956787
            ],
            [
                "Which owners live in state with North? List the owner's first name, last name and email address.",
                2.071578025817871
            ],
            [
                "Tell me the Id, the last name and the email address for all the owners with state North.",
                1.7843714952468872
            ],
            [
                "Return the full names and emails for owners with state names that end with the letter North.",
                1.6095420122146606
            ],
            [
                "What is the first and last name corresponding to the owners which live in the North state?",
                -1.847873330116272
            ],
            [
                "What are the first name and last name of owners of the state named North?",
                -4.4465532302856445
            ],
            [
                "Show the first name and last name of owners for the state with name North.",
                -5.180957317352295
            ],
            [
                "What are the first name and last name of all the owners in North state?",
                -7.435523509979248
            ],
            [
                "What are the first name and last name and email address for all owners who do not have any state code for North?",
                -9.367140769958496
            ],
            [
                "What are the full names and emails of owners who do not belong to the North state?",
                -10.2972993850708
            ],
            [
                "What are the full names and emails for owners who do not live in state of North?",
                -10.444682121276855
            ],
            [
                "Show full name and email address for all owners whose state is North. Their sex is F.",
                -11.380112648010254
            ],
            [
                "What are the full names and emails for all owners whose sex is F?",
                -12.1240816116333
            ]
        ],
        "templates": [
            "",
            {
                "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
                "masked_template": "What is the <mask> and <mask> of the <mask> at <mask>",
                "query": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
                "ted": 0.08333333333333333,
                "db_id": "medicine_enzyme_interaction",
                "query_toks": [
                    "select",
                    "product",
                    ",",
                    "chromosome",
                    ",",
                    "porphyria",
                    "from",
                    "enzyme",
                    "where",
                    "location",
                    "=",
                    "\"Cytosol\""
                ],
                "query_toks_no_value": [
                    "select",
                    "product",
                    ",",
                    "chromosome",
                    ",",
                    "porphyria",
                    "from",
                    "enzyme",
                    "where",
                    "location",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Show the first name, last name, and phone number for all female faculty members.",
                "masked_template": "Show the <mask> and <mask> number for all <mask>",
                "query": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "activity_1",
                "query_toks": [
                    "select",
                    "fname",
                    ",",
                    "lname",
                    ",",
                    "phone",
                    "from",
                    "faculty",
                    "where",
                    "sex",
                    "=",
                    "\"F\""
                ],
                "query_toks_no_value": [
                    "select",
                    "fname",
                    ",",
                    "lname",
                    ",",
                    "phone",
                    "from",
                    "faculty",
                    "where",
                    "sex",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Return the full names and salaries of employees with null commissions.",
                "masked_template": "Return the <mask> names and <mask> of <mask> with <mask>",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = 'null'",
                "ted": 0.08333333333333333,
                "db_id": "hr_1"
            },
            {
                "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
                "masked_template": "<mask> the <mask> and <mask> and <mask> for <mask> whose <mask> name is <mask> with the <mask> m.",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
                "masked_template": "Which <mask> with <mask> List the <mask> Id, the <mask> and the <mask>",
                "query": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
                "ted": 0.08333333333333333,
                "db_id": "insurance_policies"
            },
            {
                "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
                "masked_template": "<mask> me the <mask> Id, the <mask> and the <mask> for all the <mask> with <mask>",
                "query": "SELECT Payment_ID , Date_Payment_Made , Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'",
                "ted": 0.08333333333333333,
                "db_id": "insurance_policies"
            },
            {
                "question": "Return the full names and salaries for employees with first names that end with the letter m.",
                "masked_template": "Return the <mask> names and <mask> for <mask> with <mask> names that end with the <mask> m.",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE first_name LIKE '%m'",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
                "masked_template": "What is the <mask> and <mask> to the <mask> which <mask> at the <mask>",
                "query": "SELECT product , chromosome , porphyria FROM enzyme WHERE LOCATION = 'Cytosol'",
                "ted": 0.08333333333333333,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What are the name, role code, and date of birth of the employee named 'Armani'?",
                "masked_template": "What are the <mask> and <mask> of <mask> of the <mask> named <mask>",
                "query": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
                "ted": 0.08333333333333333,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
                "masked_template": "Show the <mask> and <mask> of <mask> for the <mask> with name <mask>",
                "query": "SELECT employee_name , role_code , date_of_birth FROM Employees WHERE employee_Name = 'Armani'",
                "ted": 0.08333333333333333,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the first name, last name, and phone number of all the female faculty members?",
                "masked_template": "What are the <mask> and <mask> number of all the <mask>",
                "query": "SELECT Fname , Lname , phone FROM Faculty WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "activity_1"
            },
            {
                "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
                "masked_template": "What are the <mask> name <mask> and <mask> and <mask> for all <mask> who <mask> not have any <mask> for <mask>",
                "query": "SELECT first_name , last_name , salary FROM employees WHERE commission_pct = 'null'",
                "ted": 0.08333333333333333,
                "db_id": "hr_1"
            },
            {
                "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
                "masked_template": "What are the <mask> and <mask> of <mask> which do not <mask> to the <mask>",
                "query": "SELECT name , height , prominence FROM mountain WHERE range != 'Aberdare Range'",
                "ted": 0.08333333333333333,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
                "masked_template": "What are the <mask> number of <mask> and <mask> for <mask> who do not <mask> of <mask>",
                "query": "SELECT player , number_of_matches , SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
                "ted": 0.08333333333333333,
                "db_id": "game_injury"
            },
            {
                "question": "Show first name, last name, age for all female students. Their sex is F.",
                "masked_template": "Show <mask> age for all <mask> Their sex is F.",
                "query": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "allergy_1"
            },
            {
                "question": "What are the full names and ages for all female students whose sex is F?",
                "masked_template": "What are the <mask> names and <mask> for all <mask> whose sex is F?",
                "query": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F'",
                "ted": 0.08333333333333333,
                "db_id": "allergy_1"
            }
        ],
        "best_hyp": "What are the first name and last name and email address for all owners who do not have any state code for North?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first name, last name, and email address of the owners whose state contains the word \"North\"?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( * ) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> owners </tab> ) , that have ( ( <col> owner id </col> ) not in ( ( <col> owner id </col> ) that belongs to ( <tab> dogs </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many owners do not have any dogs?",
                10.378143310546875
            ],
            [
                "Count the number of owners who do not have any dogs.",
                10.748234748840332
            ],
            [
                "Count the number of owners that do not have any dogs.",
                10.727575302124023
            ],
            [
                "Count the number of owners that do not have any dogs.",
                10.727575302124023
            ],
            [
                "Count the number of owners who did not have any dogs.",
                10.658733367919922
            ],
            [
                "Count the number of owners who did not have any dogs.",
                10.658732414245605
            ],
            [
                "Count the number of owners who do not have a dog.",
                10.644309997558594
            ],
            [
                "How many owners are not associated with the dogs listed?",
                10.635383605957031
            ],
            [
                "List the number of owners that did not have any dogs.",
                10.547918319702148
            ],
            [
                "How many owners do not have any dogs?",
                10.378140449523926
            ],
            [
                "How many owners do not have any dogs?",
                10.378140449523926
            ],
            [
                "How many owners do not have any dogs?",
                10.378140449523926
            ],
            [
                "How many owners do not have any dogs?",
                10.378140449523926
            ],
            [
                "How many owners do not have a dog?",
                10.345137596130371
            ],
            [
                "How many owners do not have a dog?",
                10.345137596130371
            ],
            [
                "How many owners are not related to any dog?",
                10.310370445251465
            ],
            [
                "Count the number of owners that are not involved in any dogs.",
                10.167679786682129
            ],
            [
                "Find the number of owners who are not related to any dog.",
                10.146821022033691
            ],
            [
                "How many owners did not have any dogs?",
                10.122435569763184
            ],
            [
                "How many owners did not have any dogs?",
                10.122435569763184
            ],
            [
                "Find the number of owners who did not have any dogs.",
                10.11757755279541
            ],
            [
                "Find the number of owners that did not have any dogs.",
                10.077068328857422
            ],
            [
                "How many owners are not involved in any dogs?",
                9.886960983276367
            ],
            [
                "How many owners are not involved in any dogs?",
                9.886960983276367
            ],
            [
                "What is the count of owners without any dogs?",
                8.716880798339844
            ],
            [
                "How many owners are not owners of dogs?",
                7.447535514831543
            ],
            [
                "How many owners have no dogs?",
                6.757715225219727
            ],
            [
                "How many owners are not dogs?",
                1.8314390182495117
            ],
            [
                "How many owners do not have an animal in our record?",
                -1.1775476932525635
            ],
            [
                "Count the number of owners who have not owned an animal.",
                -3.6926445960998535
            ],
            [
                "Show the number of all owners without an animal.",
                -7.167874813079834
            ]
        ],
        "templates": [
            "",
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "course",
                    "where",
                    "course_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "course_id",
                    "from",
                    "prereq",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "course",
                    "where",
                    "course_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "course_id",
                    "from",
                    "prereq",
                    ")"
                ]
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "documents",
                    "where",
                    "document_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "document_id",
                    "from",
                    "documents_with_expenses",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "documents",
                    "where",
                    "document_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "document_id",
                    "from",
                    "documents_with_expenses",
                    ")"
                ]
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "visitors",
                    "where",
                    "tourist_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "tourist_id",
                    "from",
                    "visits",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "visitors",
                    "where",
                    "tourist_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "tourist_id",
                    "from",
                    "visits",
                    ")"
                ]
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "customers",
                    "where",
                    "customer_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "customer_id",
                    "from",
                    "accounts",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "customers",
                    "where",
                    "customer_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "customer_id",
                    "from",
                    "accounts",
                    ")"
                ]
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.0,
                "db_id": "browser_web",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "web_client_accelerator",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "accelerator_id",
                    "from",
                    "accelerator_compatible_browser",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "web_client_accelerator",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "accelerator_id",
                    "from",
                    "accelerator_compatible_browser",
                    ")"
                ]
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "How many documents do not have any expense?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "masked_template": "How many <mask> are led by <mask> who are not <mask>",
                "query": "SELECT count( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "How many students did not have any course enrollment?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many games are free of injury accidents?",
                "masked_template": "How many <mask> are <mask> of <mask>",
                "query": "SELECT count( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "How many customers have no payment histories?",
                "masked_template": "How many <mask> have no <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many persons are not body builders?",
                "masked_template": "How many <mask> are not <mask>",
                "query": "SELECT count( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder )",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            }
        ],
        "best_hyp": "How many owners do not have any dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many owners do not have any dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT breed_code , size_code FROM dogs",
        "proc_query": "( distinct ( ( <col> breed code </col> ) , ( <col> size code </col> ) ) ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the different breed codes and sizes of dogs?",
                7.870968818664551
            ],
            [
                "Return the breed code and size code of all the dogs.",
                10.504095077514648
            ],
            [
                "List all the distinct breed codes and the sizes of dogs.",
                7.777396202087402
            ],
            [
                "What are the breed codes and sizes of all the dogs?",
                6.899736404418945
            ],
            [
                "What are the breed codes and sizes of each dog in the database?",
                6.84967041015625
            ],
            [
                "What are the distinct breed codes and the sizes of dogs?",
                5.003289699554443
            ],
            [
                "Show each breed code and size code.",
                2.8954646587371826
            ],
            [
                "For each breed code, return the code that is used in it. Also return the breed number and the size.",
                1.7896418571472168
            ],
            [
                "Show the distinct breed codes and the sizes.",
                1.2961745262145996
            ]
        ],
        "templates": [
            "",
            {
                "question": "Report the first name and last name of all the students.",
                "masked_template": "<mask> the <mask> name and <mask> name of all the <mask>",
                "query": "SELECT DISTINCT firstname , lastname FROM list",
                "ted": 0.0,
                "db_id": "student_1",
                "query_toks": [
                    "select",
                    "distinct",
                    "firstname",
                    ",",
                    "lastname",
                    "from",
                    "list"
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "firstname",
                    ",",
                    "lastname",
                    "from",
                    "list"
                ]
            },
            {
                "question": "List all the distinct president votes and the vice president votes.",
                "masked_template": "List all the distinct <mask> and the <mask>",
                "query": "SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD",
                "ted": 0.0,
                "db_id": "voter_2",
                "query_toks": [
                    "select",
                    "distinct",
                    "president_vote",
                    ",",
                    "vice_president_vote",
                    "from",
                    "voting_record"
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "president_vote",
                    ",",
                    "vice_president_vote",
                    "from",
                    "voting_record"
                ]
            },
            {
                "question": "What are the first name and last name of all the teachers?",
                "masked_template": "What are the <mask> name and <mask> name of all the <mask>",
                "query": "SELECT DISTINCT firstname , lastname FROM teachers",
                "ted": 0.0,
                "db_id": "student_1",
                "query_toks": [
                    "select",
                    "distinct",
                    "firstname",
                    ",",
                    "lastname",
                    "from",
                    "teachers"
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "firstname",
                    ",",
                    "lastname",
                    "from",
                    "teachers"
                ]
            },
            {
                "question": "What are the grade number and classroom number of each class in the list?",
                "masked_template": "What are the <mask> number and <mask> number of each <mask> in the <mask>",
                "query": "SELECT DISTINCT classroom , grade FROM list",
                "ted": 0.0,
                "db_id": "student_1",
                "query_toks": [
                    "select",
                    "distinct",
                    "classroom",
                    ",",
                    "grade",
                    "from",
                    "list"
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "classroom",
                    ",",
                    "grade",
                    "from",
                    "list"
                ]
            },
            {
                "question": "What are the distinct registration dates and the election cycles?",
                "masked_template": "What are the distinct <mask> and the <mask>",
                "query": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
                "ted": 0.0,
                "db_id": "voter_2",
                "query_toks": [
                    "select",
                    "distinct",
                    "registration_date",
                    ",",
                    "election_cycle",
                    "from",
                    "voting_record"
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "registration_date",
                    ",",
                    "election_cycle",
                    "from",
                    "voting_record"
                ]
            },
            {
                "question": "Show each student's first name and last name.",
                "masked_template": "Show each <mask> name and <mask>",
                "query": "SELECT DISTINCT firstname , lastname FROM list",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
                "masked_template": "For each <mask> the <mask> that is <mask> in it. <mask> the <mask> number and the <mask>",
                "query": "SELECT DISTINCT classroom , grade FROM list",
                "ted": 0.0,
                "db_id": "student_1"
            },
            {
                "question": "Report the distinct registration date and the election cycle.",
                "masked_template": "<mask> the distinct <mask> and the <mask>",
                "query": "SELECT DISTINCT Registration_Date , Election_Cycle FROM VOTING_RECORD",
                "ted": 0.0,
                "db_id": "voter_2"
            }
        ],
        "best_hyp": "What are the breed codes and sizes of all the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the different breed codes and sizes of dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
        "proc_query": "( <col> last name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( ( <col> pet age </col> of <tab> pets </tab> ) equal to ( <val> 3 </val> ) ) and ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the last name of the student who has a pet of age 3 and cat?",
                2.1831676959991455
            ],
            [
                "What are the last names of students in the age of 3 and their pet type is cat?",
                10.807703971862793
            ],
            [
                "What are the last names of all students who are 3 years old and have a cat?",
                10.76889419555664
            ],
            [
                "What are the last names of the students who are 3 years old and have a cat?",
                10.718911170959473
            ],
            [
                "What are the last names of the students in the age of 3 that have cat as their pet?",
                10.60573959350586
            ],
            [
                "What is the last name of students who are 3 years old and have cat type?",
                10.086441040039062
            ],
            [
                "Show the last names of all the students who are 3 years old and have cat.",
                8.476043701171875
            ],
            [
                "Find the last names of all the students who are 3 years old and have cat.",
                8.46639633178711
            ],
            [
                "Find all the last names of students who are 3 years old and have cat.",
                7.987081050872803
            ],
            [
                "What are the last names of all students that are 3 years old and have cat?",
                7.714138984680176
            ],
            [
                "List the last name of students who are 3 years old or cat is their pet.",
                7.6482391357421875
            ],
            [
                "List the last name of students who are 3 years old and have cat.",
                7.495387077331543
            ],
            [
                "What are the last names of students with pet age 3 whose pet type is cat?",
                7.146462917327881
            ],
            [
                "What are the last names of students with pet age 3 and cat type 3?",
                5.403544902801514
            ],
            [
                "What is the last name of the student named 3 and the pet named cat?",
                4.3703107833862305
            ],
            [
                "What is the last name of the student who has a pet of age 3 and cat?",
                2.1831648349761963
            ],
            [
                "Find the last name of the student who has a pet of age 3 and cat.",
                2.1494944095611572
            ],
            [
                "What is the last name of student for the student named 3 and the pet named cat?",
                2.1156346797943115
            ],
            [
                "Find the last name of the students who have a pet of age 3 and cat.",
                2.105156183242798
            ],
            [
                "What are the last names of the students who have a pet of age 3 and cat?",
                2.0229454040527344
            ],
            [
                "What are the last names of the students whose pet is age 3 and cat?",
                0.9706712365150452
            ],
            [
                "List all last names of students with pet age 3 and cat type 3",
                -0.06761782616376877
            ],
            [
                "What are the last names of students that the pet with the age 3 name is cat?",
                -2.650228977203369
            ],
            [
                "What are the last names of students that the pet with the age 3 name cat is living in?",
                -3.2851555347442627
            ],
            [
                "Find the last names of students who have a cat as their pet.",
                -9.91621208190918
            ],
            [
                "Which student has a cat? Give me the last name of the student.",
                -10.468510627746582
            ],
            [
                "Which student has a cat? Give me the last name of the student.",
                -10.468511581420898
            ],
            [
                "Which student has a cat? Give me the last name of the student.",
                -10.468511581420898
            ],
            [
                "Show all student last names with pet type 3.",
                -10.594428062438965
            ],
            [
                "What are the last names of all students who have a cat?",
                -10.877859115600586
            ],
            [
                "Which students have cat as a pet?",
                -11.565340042114258
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
                "masked_template": "What are the names of <mask> in the <mask> named <mask> that can <mask> as an <mask>",
                "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction",
                "query_toks": [
                    "select",
                    "t1.name",
                    "from",
                    "enzyme",
                    "as",
                    "t1",
                    "join",
                    "medicine_enzyme_interaction",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.enzyme_id",
                    "join",
                    "medicine",
                    "as",
                    "t3",
                    "on",
                    "t2.medicine_id",
                    "=",
                    "t3.id",
                    "where",
                    "t3.name",
                    "=",
                    "\"Amisulpride\"",
                    "and",
                    "t2.interaction_type",
                    "=",
                    "\"inhibitor\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.name",
                    "from",
                    "enzyme",
                    "as",
                    "t1",
                    "join",
                    "medicine_enzyme_interaction",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.enzyme_id",
                    "join",
                    "medicine",
                    "as",
                    "t3",
                    "on",
                    "t2.medicine_id",
                    "=",
                    "t3.id",
                    "where",
                    "t3.name",
                    "=",
                    "value",
                    "and",
                    "t2.interaction_type",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the first names of all students who took ACCT-211 and received a C?",
                "masked_template": "What are the <mask> names of all <mask> who <mask> and <mask> a C?",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
                "ted": 0.04,
                "db_id": "college_1",
                "query_toks": [
                    "select",
                    "t3.stu_fname",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "enroll",
                    "as",
                    "t2",
                    "on",
                    "t1.class_code",
                    "=",
                    "t2.class_code",
                    "join",
                    "student",
                    "as",
                    "t3",
                    "on",
                    "t2.stu_num",
                    "=",
                    "t3.stu_num",
                    "where",
                    "t1.crs_code",
                    "=",
                    "\"ACCT-211\"",
                    "and",
                    "t2.enroll_grade",
                    "=",
                    "\"C\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t3.stu_fname",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "enroll",
                    "as",
                    "t2",
                    "on",
                    "t1.class_code",
                    "=",
                    "t2.class_code",
                    "join",
                    "student",
                    "as",
                    "t3",
                    "on",
                    "t2.stu_num",
                    "=",
                    "t3.stu_num",
                    "where",
                    "t1.crs_code",
                    "=",
                    "value",
                    "and",
                    "t2.enroll_grade",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
                "masked_template": "What are the names of the <mask> of the <mask> that have the <mask>",
                "query": "SELECT T3.characteristic_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id JOIN CHARACTERISTICS AS T3 ON T2.characteristic_id = T3.characteristic_id WHERE T1.product_name = 'sesame' AND T3.characteristic_type_code = 'Grade'",
                "ted": 0.04,
                "db_id": "products_gen_characteristics",
                "query_toks": [
                    "select",
                    "t3.characteristic_name",
                    "from",
                    "products",
                    "as",
                    "t1",
                    "join",
                    "product_characteristics",
                    "as",
                    "t2",
                    "on",
                    "t1.product_id",
                    "=",
                    "t2.product_id",
                    "join",
                    "characteristics",
                    "as",
                    "t3",
                    "on",
                    "t2.characteristic_id",
                    "=",
                    "t3.characteristic_id",
                    "where",
                    "t1.product_name",
                    "=",
                    "\"sesame\"",
                    "and",
                    "t3.characteristic_type_code",
                    "=",
                    "\"Grade\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t3.characteristic_name",
                    "from",
                    "products",
                    "as",
                    "t1",
                    "join",
                    "product_characteristics",
                    "as",
                    "t2",
                    "on",
                    "t1.product_id",
                    "=",
                    "t2.product_id",
                    "join",
                    "characteristics",
                    "as",
                    "t3",
                    "on",
                    "t2.characteristic_id",
                    "=",
                    "t3.characteristic_id",
                    "where",
                    "t1.product_name",
                    "=",
                    "value",
                    "and",
                    "t3.characteristic_type_code",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
                "masked_template": "What are the names of the <mask> in the <mask> that <mask> as <mask>",
                "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction",
                "query_toks": [
                    "select",
                    "t1.name",
                    "from",
                    "enzyme",
                    "as",
                    "t1",
                    "join",
                    "medicine_enzyme_interaction",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.enzyme_id",
                    "join",
                    "medicine",
                    "as",
                    "t3",
                    "on",
                    "t2.medicine_id",
                    "=",
                    "t3.id",
                    "where",
                    "t3.name",
                    "=",
                    "\"Amisulpride\"",
                    "and",
                    "t2.interaction_type",
                    "=",
                    "\"inhibitor\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.name",
                    "from",
                    "enzyme",
                    "as",
                    "t1",
                    "join",
                    "medicine_enzyme_interaction",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.enzyme_id",
                    "join",
                    "medicine",
                    "as",
                    "t3",
                    "on",
                    "t2.medicine_id",
                    "=",
                    "t3.id",
                    "where",
                    "t3.name",
                    "=",
                    "value",
                    "and",
                    "t2.interaction_type",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
                "masked_template": "What is the <mask> name of <mask> in <mask> and got <mask> C?",
                "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C'",
                "ted": 0.04,
                "db_id": "college_1",
                "query_toks": [
                    "select",
                    "t3.stu_fname",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "enroll",
                    "as",
                    "t2",
                    "on",
                    "t1.class_code",
                    "=",
                    "t2.class_code",
                    "join",
                    "student",
                    "as",
                    "t3",
                    "on",
                    "t2.stu_num",
                    "=",
                    "t3.stu_num",
                    "where",
                    "t1.crs_code",
                    "=",
                    "\"ACCT-211\"",
                    "and",
                    "t2.enroll_grade",
                    "=",
                    "\"C\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t3.stu_fname",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "enroll",
                    "as",
                    "t2",
                    "on",
                    "t1.class_code",
                    "=",
                    "t2.class_code",
                    "join",
                    "student",
                    "as",
                    "t3",
                    "on",
                    "t2.stu_num",
                    "=",
                    "t3.stu_num",
                    "where",
                    "t1.crs_code",
                    "=",
                    "value",
                    "and",
                    "t2.enroll_grade",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Show the names of all the activities Mark Giuliano participates in.",
                "masked_template": "Show the names of all the <mask> in.",
                "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
                "ted": 0.04,
                "db_id": "activity_1"
            },
            {
                "question": "Find the titles of all the papers written by \"Aaron Turon\".",
                "masked_template": "Find the <mask> of all the <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Aaron' AND T1.lname = 'Turon'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "Find all the papers published by \"Aaron Turon\".",
                "masked_template": "Find all the <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Aaron' AND T1.lname = 'Turon'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
                "masked_template": "What are the names of all <mask> that are <mask> on <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file'",
                "ted": 0.04,
                "db_id": "store_1"
            },
            {
                "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> or <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.06,
                "db_id": "store_1"
            },
            {
                "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> and whose <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' AND T3.name = 'MPEG audio file'",
                "ted": 0.04,
                "db_id": "store_1"
            },
            {
                "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?",
                "masked_template": "What are the lot <mask> of <mask> with <mask> whose <mask> count is <mask> than 100 and whose <mask> is <mask>",
                "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = 'PUR'",
                "ted": 0.020833333333333332,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the titles of papers published by \"Jeremy Gibbons\"?",
                "masked_template": "What are the <mask> of <mask> by <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Jeremy' AND T1.lname = 'Gibbons'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
                "masked_template": "What is the <mask> of the <mask> named <mask> and the <mask> named <mask>",
                "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
                "masked_template": "What is the <mask> of the <mask> Cup <mask> by <mask> ( <mask> )\"?",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.04,
                "db_id": "city_record"
            },
            {
                "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
                "masked_template": "Find the <mask> of the <mask> Cup <mask> which was <mask> by <mask> ( <mask> )\".",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.04,
                "db_id": "city_record"
            },
            {
                "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
                "masked_template": "What is the <mask> of <mask> for the <mask> named <mask> and the <mask> named <mask>",
                "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole'",
                "ted": 0.04,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
                "masked_template": "Find the <mask> of the <mask> the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
                "masked_template": "<mask> did the web <mask> and <mask>",
                "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'",
                "ted": 0.04,
                "db_id": "browser_web"
            },
            {
                "question": "What are the names of the activities Mark Giuliano is involved in",
                "masked_template": "What are the names of the <mask> is <mask> in",
                "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = 'Mark' AND T1.lname = 'Giuliano'",
                "ted": 0.04,
                "db_id": "activity_1"
            },
            {
                "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
                "masked_template": "List all <mask> of <mask> named <mask> with <mask>",
                "query": "SELECT T3.characteristic_name FROM products AS T1 JOIN product_characteristics AS T2 ON T1.product_id = T2.product_id JOIN CHARACTERISTICS AS T3 ON T2.characteristic_id = T3.characteristic_id WHERE T1.product_name = 'sesame' AND T3.characteristic_type_code = 'Grade'",
                "ted": 0.04,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
                "masked_template": "What are the <mask> of <mask> that the <mask> with the <mask> name <mask> in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = 'Heilo' AND T2.title = 'Der Kapitan'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
                "masked_template": "What are the <mask> of <mask> that the <mask> with the <mask> name <mask> in the <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "Find the papers which have \"Olin Shivers\" as an author.",
                "masked_template": "Find the <mask> which have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = 'Heilo' AND T2.title = 'Der Kapitan'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
                "masked_template": "Which <mask> did the <mask> me the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.04,
                "db_id": "icfp_1"
            },
            {
                "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.04,
                "db_id": "music_2"
            },
            {
                "question": "Show all game names played by Linda Smith",
                "masked_template": "Show all <mask> names <mask> by <mask>",
                "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
                "ted": 0.04,
                "db_id": "game_1"
            },
            {
                "question": "What are the names of all games played by Linda Smith?",
                "masked_template": "What are the names of all <mask> by <mask>",
                "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = 'Smith' AND T3.Fname = 'Linda'",
                "ted": 0.04,
                "db_id": "game_1"
            },
            {
                "question": "Which papers have \"Stephanie Weirich\" as an author?",
                "masked_template": "Which <mask> have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.04,
                "db_id": "icfp_1"
            }
        ],
        "best_hyp": "What are the last names of all students who are 3 years old and have a cat?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the last name of the student who has a pet of age 3 and cat?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) FROM pets WHERE weight > 11",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> pets </tab> ) , that have ( ( <col> weight </col> ) greater than ( <val> 11 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many pets have a weight higher than 11?",
                10.523859977722168
            ],
            [
                "How many pets have more than 11 pounds of weight?",
                10.885364532470703
            ],
            [
                "How many pets has a weight greater than 11?",
                10.667478561401367
            ],
            [
                "How many pets have a weight greater than 11?",
                10.55768871307373
            ],
            [
                "What is the number of pets with a weight greater than 11?",
                10.412220001220703
            ],
            [
                "Count the number of pets that have a number of weights higher than 11.",
                10.411256790161133
            ],
            [
                "How many pets are there with weight above 11?",
                10.278350830078125
            ],
            [
                "How many pets have weight of at least 11?",
                10.241803169250488
            ],
            [
                "Count the number of pets that have weight above 11.",
                10.193791389465332
            ],
            [
                "Count the number of pets that are over 11 pounds.",
                10.126446723937988
            ],
            [
                "How many pets are bigger than 11?",
                9.790839195251465
            ],
            [
                "How many pets are bigger than 11?",
                9.790839195251465
            ],
            [
                "How many pets are bigger than 11?",
                9.790839195251465
            ],
            [
                "How many pets are bigger than 11?",
                9.790839195251465
            ],
            [
                "How many pets have weight above 11?",
                9.408745765686035
            ],
            [
                "How many pets have weight above 11?",
                9.408745765686035
            ],
            [
                "How many pets have weight above 11?",
                9.408745765686035
            ],
            [
                "How many pets have weight above 11?",
                9.408744812011719
            ],
            [
                "How many pets has more than 11 pounds?",
                9.3104829788208
            ],
            [
                "Count the number of pets in which at least one weight is greater than 11.",
                9.099190711975098
            ],
            [
                "How many pets are over 11 pounds?",
                8.975656509399414
            ],
            [
                "How many pets are over 11 pounds?",
                8.975656509399414
            ],
            [
                "How many different pets have weight above 11?",
                8.48608684539795
            ],
            [
                "How many pets are there with weight above 11 or above 11?",
                -6.791297435760498
            ],
            [
                "Count the number of pets that are either in or under 11 pounds.",
                -9.746649742126465
            ],
            [
                "Count the number of pets with more than 2 pounds.",
                -11.90058422088623
            ],
            [
                "How many pets have more than 3 pounds?",
                -11.979674339294434
            ],
            [
                "What is the total number of pets that has more than 3 pounds?",
                -11.980318069458008
            ],
            [
                "How many pets whose weight is at least 5 pounds?",
                -12.013909339904785
            ],
            [
                "How many pets have a weight greater than 15 mm?",
                -12.016357421875
            ],
            [
                "How many pets have more than 2 pounds?",
                -12.019387245178223
            ]
        ],
        "templates": [
            "",
            {
                "question": "How many players have more than 1000 hours of training?",
                "masked_template": "How many <mask> have more than <mask> of <mask>",
                "query": "SELECT count( * ) FROM Player WHERE HS > 1000",
                "ted": 0.0,
                "db_id": "soccer_2",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "player",
                    "where",
                    "hs",
                    ">",
                    "1000"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "player",
                    "where",
                    "hs",
                    ">",
                    "value"
                ]
            },
            {
                "question": "How many budget record has a budget amount smaller than the invested amount?",
                "masked_template": "How many <mask> has a <mask> than the <mask>",
                "query": "SELECT count( * ) FROM budget WHERE budgeted < invested",
                "ted": 0.0625,
                "db_id": "school_finance",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "budget",
                    "where",
                    "budgeted",
                    "<",
                    "invested"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "budget",
                    "where",
                    "budgeted",
                    "<",
                    "invested"
                ]
            },
            {
                "question": "How many flights have a velocity larger than 200?",
                "masked_template": "How many <mask> have a <mask> than <mask>",
                "query": "SELECT count( * ) FROM flight WHERE velocity > 200",
                "ted": 0.0,
                "db_id": "flight_company",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "flight",
                    "where",
                    "velocity",
                    ">",
                    "200"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "flight",
                    "where",
                    "velocity",
                    ">",
                    "value"
                ]
            },
            {
                "question": "What is the number of colleges with a student population greater than 15000?",
                "masked_template": "What is the number of <mask> with a <mask> than <mask>",
                "query": "SELECT count( * ) FROM College WHERE enr > 15000",
                "ted": 0.0,
                "db_id": "soccer_2",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "college",
                    "where",
                    "enr",
                    ">",
                    "15000"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "college",
                    "where",
                    "enr",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Count the number of markets that have a number of cities lower than 300.",
                "masked_template": "Count the number of <mask> that have a number of <mask> than <mask>",
                "query": "SELECT count( * ) FROM market WHERE Number_cities < 300",
                "ted": 0.0625,
                "db_id": "film_rank",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "market",
                    "where",
                    "number_cities",
                    "<",
                    "300"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "market",
                    "where",
                    "number_cities",
                    "<",
                    "value"
                ]
            },
            {
                "question": "How many weddings are there in year 2016?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM wedding WHERE YEAR = 2016",
                "ted": 0.0625,
                "db_id": "wedding"
            },
            {
                "question": "How many products have prices of at least 180?",
                "masked_template": "How many <mask> have <mask> of at least <mask>",
                "query": "SELECT count( * ) FROM products WHERE price >= 180",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "Count the number of items store 1 has in stock.",
                "masked_template": "Count the number of <mask> 1 has in <mask>",
                "query": "SELECT count( * ) FROM inventory WHERE store_id = 1",
                "ted": 0.0625,
                "db_id": "sakila_1"
            },
            {
                "question": "Count the number of users that are logged in.",
                "masked_template": "Count the number of <mask> that are <mask> in.",
                "query": "SELECT count( * ) FROM users WHERE user_login = 1",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "How many users are logged in?",
                "masked_template": "How many <mask> are <mask> in?",
                "query": "SELECT count( * ) FROM users WHERE user_login = 1",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "How many movies were made before 2000?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Movie WHERE YEAR < 2000",
                "ted": 0.0625,
                "db_id": "movie_1"
            },
            {
                "question": "How many games are held after season 2007?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM game WHERE season > 2007",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "How many heads of the departments are older than 56 ?",
                "masked_template": "How many <mask> of the <mask> are <mask> than 56 ?",
                "query": "SELECT count( * ) FROM head WHERE age > 56",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many storms had death records?",
                "masked_template": "How many <mask> had <mask>",
                "query": "SELECT count( * ) FROM storm WHERE Number_Deaths > 0",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "How many items in inventory does store 1 have?",
                "masked_template": "How many <mask> in <mask> 1 <mask>",
                "query": "SELECT count( * ) FROM inventory WHERE store_id = 1",
                "ted": 0.0625,
                "db_id": "sakila_1"
            },
            {
                "question": "Advisor 1121 has how many students?",
                "masked_template": "<mask> has how many <mask>",
                "query": "SELECT count( * ) FROM Student WHERE Advisor = 1121",
                "ted": 0.0625,
                "db_id": "restaurant_1"
            },
            {
                "question": "How many patients stay in room 112?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( patient ) FROM stay WHERE room = 112",
                "ted": 0.0625,
                "db_id": "hospital_1"
            },
            {
                "question": "How many colleges has more than 15000 students?",
                "masked_template": "How many <mask> has more than <mask>",
                "query": "SELECT count( * ) FROM College WHERE enr > 15000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of storms in which at least 1 person died.",
                "masked_template": "Count the number of <mask> in which at least 1 <mask>",
                "query": "SELECT count( * ) FROM storm WHERE Number_Deaths > 0",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "How many students are age 18?",
                "masked_template": "How many <mask> are age 18?",
                "query": "SELECT count( * ) FROM Student WHERE age = 18",
                "ted": 0.0625,
                "db_id": "allergy_1"
            },
            {
                "question": "How many students are 18 years old?",
                "masked_template": "How many <mask> are 18 <mask>",
                "query": "SELECT count( * ) FROM Student WHERE age = 18",
                "ted": 0.0625,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different players trained for more than 1000 hours?",
                "masked_template": "How many different <mask> for more than <mask>",
                "query": "SELECT count( * ) FROM Player WHERE HS > 1000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many exhibition are there in year 2005 or after?",
                "masked_template": "How many <mask> are there in <mask> or <mask>",
                "query": "SELECT count( * ) FROM exhibition WHERE YEAR >= 2005",
                "ted": 0.0625,
                "db_id": "theme_gallery"
            },
            {
                "question": "Count the number of exhibitions that happened in or after 2005.",
                "masked_template": "Count the number of <mask> that <mask> in or <mask>",
                "query": "SELECT count( * ) FROM exhibition WHERE YEAR >= 2005",
                "ted": 0.0625,
                "db_id": "theme_gallery"
            },
            {
                "question": "Count the number of courses with more than 2 credits.",
                "masked_template": "Count the number of <mask> with more than 2 <mask>",
                "query": "SELECT count( * ) FROM COURSE WHERE Credits > 2",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "How many movie ratings have more than 3 stars?",
                "masked_template": "How many <mask> have more than 3 <mask>",
                "query": "SELECT count( * ) FROM Rating WHERE stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "What is the total number of ratings that has more than 3 stars?",
                "masked_template": "What is the total number of <mask> that has more than 3 <mask>",
                "query": "SELECT count( * ) FROM Rating WHERE stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "How many main stream browsers whose market share is at least 5 exist?",
                "masked_template": "How many <mask> whose <mask> is at least 5 <mask>",
                "query": "SELECT count( * ) FROM browser WHERE market_share >= 5",
                "ted": 0.0625,
                "db_id": "browser_web"
            },
            {
                "question": "How many camera lenses have a focal length longer than 15 mm?",
                "masked_template": "How many <mask> have a <mask> than 15 mm?",
                "query": "SELECT count( * ) FROM camera_lens WHERE focal_length_mm > 15",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many courses have more than 2 credits?",
                "masked_template": "How many <mask> have more than 2 <mask>",
                "query": "SELECT count( * ) FROM COURSE WHERE Credits > 2",
                "ted": 0.0,
                "db_id": "college_3"
            }
        ],
        "best_hyp": "How many pets have more than 11 pounds of weight?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many pets have a weight higher than 11?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg( age ) FROM Dogs",
        "proc_query": "( the average of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the average age of all dogs?",
                10.8834867477417
            ],
            [
                "What is the average age for all the dogs?",
                11.17574691772461
            ],
            [
                "What is the average age of all the dogs?",
                11.16367244720459
            ],
            [
                "What is the average age for all dogs?",
                10.951150894165039
            ],
            [
                "What is the average age of all dogs?",
                10.8834867477417
            ],
            [
                "What is the average age of all dogs?",
                10.8834867477417
            ],
            [
                "What is the average age of all dogs?",
                10.8834867477417
            ],
            [
                "What is the average age of all dogs?",
                10.8834867477417
            ],
            [
                "Show the average age of all dogs.",
                10.845288276672363
            ],
            [
                "What is the average age for all dogs in the database?",
                10.739089965820312
            ],
            [
                "What is the average age for a dog?",
                10.699228286743164
            ],
            [
                "What is the average age across all dogs?",
                10.677925109863281
            ],
            [
                "Compute the average age of all the dogs.",
                10.579986572265625
            ],
            [
                "What is the average age of the dogs?",
                10.41457748413086
            ],
            [
                "Find the average age of all dogs.",
                10.238912582397461
            ],
            [
                "Find the average age of all dogs.",
                10.238912582397461
            ],
            [
                "Find the average age for a dog.",
                9.686972618103027
            ],
            [
                "What is the average age for dogs?",
                9.61577320098877
            ],
            [
                "What is the average age of dogs?",
                9.477657318115234
            ],
            [
                "What is the average age of dogs?",
                9.477657318115234
            ],
            [
                "What is the average age of dogs?",
                9.477657318115234
            ],
            [
                "What is the average age of dogs?",
                9.477656364440918
            ],
            [
                "Compute the average age of the dogs.",
                8.484652519226074
            ],
            [
                "Compute the average age of dogs.",
                7.048417568206787
            ],
            [
                "Compute the average number of years for dogs.",
                7.032369613647461
            ],
            [
                "Find the average age of dogs.",
                6.799127578735352
            ],
            [
                "Find the average age of dogs.",
                6.799127578735352
            ],
            [
                "What is the average age of dogs ordered in ascending order?",
                -9.379815101623535
            ],
            [
                "What is the average number of dogs as a pet?",
                -11.785991668701172
            ],
            [
                "How many dogs do we have?",
                -12.018025398254395
            ],
            [
                "How many dogs are there?",
                -12.0756196975708
            ]
        ],
        "templates": [
            "",
            {
                "question": "What is the average amount due for all the payments?",
                "masked_template": "What is the average <mask> due for all the <mask>",
                "query": "SELECT avg( amount_due ) FROM payments",
                "ted": 0.0,
                "db_id": "products_for_hire",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "amount_due",
                    ")",
                    "from",
                    "payments"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "amount_due",
                    ")",
                    "from",
                    "payments"
                ]
            },
            {
                "question": "What is the average unit price of all the tracks?",
                "masked_template": "What is the average <mask> of all the <mask>",
                "query": "SELECT AVG( UnitPrice ) FROM TRACK",
                "ted": 0.0,
                "db_id": "chinook_1",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "unitprice",
                    ")",
                    "from",
                    "track"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "unitprice",
                    ")",
                    "from",
                    "track"
                ]
            },
            {
                "question": "What is the average number of international passengers for an airport?",
                "masked_template": "What is the average number of <mask> for an <mask>",
                "query": "SELECT avg( International_Passengers ) FROM airport",
                "ted": 0.0,
                "db_id": "aircraft",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "international_passengers",
                    ")",
                    "from",
                    "airport"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "international_passengers",
                    ")",
                    "from",
                    "airport"
                ]
            },
            {
                "question": "What is the average enrollment number?",
                "masked_template": "What is the average <mask>",
                "query": "SELECT avg( enr ) FROM College",
                "ted": 0.0,
                "db_id": "soccer_2",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "enr",
                    ")",
                    "from",
                    "college"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "enr",
                    ")",
                    "from",
                    "college"
                ]
            },
            {
                "question": "What is the average number of international passengers of all airports?",
                "masked_template": "What is the average number of <mask> of all <mask>",
                "query": "SELECT avg( International_Passengers ) FROM airport",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the average training hours of all players?",
                "masked_template": "What is the average <mask> of all <mask>",
                "query": "SELECT avg( HS ) FROM Player",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the average number of bank customers?",
                "masked_template": "What is the average number of <mask>",
                "query": "SELECT avg( no_of_customers ) FROM bank",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Show the average population of all counties.",
                "masked_template": "Show the average <mask> of all <mask>",
                "query": "SELECT avg( Population ) FROM county",
                "ted": 0.0,
                "db_id": "election",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "population",
                    ")",
                    "from",
                    "county"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "population",
                    ")",
                    "from",
                    "county"
                ]
            },
            {
                "question": "What is the average age for all people in the table?",
                "masked_template": "What is the average age for all <mask> in the <mask>",
                "query": "SELECT avg( age ) FROM Person",
                "ted": 0.0,
                "db_id": "network_2"
            },
            {
                "question": "What is the average number of gold medals for a club?",
                "masked_template": "What is the average number of <mask> for a <mask>",
                "query": "SELECT avg( Gold ) FROM club_rank",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What is the average hours across all projects?",
                "masked_template": "What is the average <mask> all <mask>",
                "query": "SELECT avg( hours ) FROM projects",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Compute the average price of all the products.",
                "masked_template": "<mask> the average <mask> of all the <mask>",
                "query": "SELECT avg( price ) FROM products",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "What is the average length in feet of the bridges?",
                "masked_template": "What is the average <mask> in <mask> of the <mask>",
                "query": "SELECT avg( length_feet ) FROM bridge",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "Find the average hours of all projects.",
                "masked_template": "Find the average <mask> of all <mask>",
                "query": "SELECT avg( hours ) FROM projects",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the average number of customers cross all banks.",
                "masked_template": "Find the average number of <mask> all <mask>",
                "query": "SELECT avg( no_of_customers ) FROM bank",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "Find the average unit price for a track.",
                "masked_template": "Find the average <mask> for a <mask>",
                "query": "SELECT AVG( UnitPrice ) FROM TRACK",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "What is the average number of hosts for parties?",
                "masked_template": "What is the average number of <mask> for <mask>",
                "query": "SELECT avg( Number_of_hosts ) FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What is the average pages per minute color?",
                "masked_template": "What is the average <mask> per <mask>",
                "query": "SELECT avg( pages_per_minute_color ) FROM product",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What is the average enrollment of schools?",
                "masked_template": "What is the average <mask> of <mask>",
                "query": "SELECT avg( Enrollment ) FROM school",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What is the average balance in checking accounts?",
                "masked_template": "What is the average <mask> in <mask>",
                "query": "SELECT avg( balance ) FROM checking",
                "ted": 0.0,
                "db_id": "small_bank_1"
            },
            {
                "question": "What is the average number of pages per minute color?",
                "masked_template": "What is the average number of <mask> per <mask>",
                "query": "SELECT avg( pages_per_minute_color ) FROM product",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Take the average of the school enrollment.",
                "masked_template": "<mask> the average of the <mask>",
                "query": "SELECT avg( Enrollment ) FROM school",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Compute the average score of submissions.",
                "masked_template": "<mask> the average <mask> of <mask>",
                "query": "SELECT avg( Scores ) FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "Compute the average number of hosts for parties.",
                "masked_template": "<mask> the average number of <mask> for <mask>",
                "query": "SELECT avg( Number_of_hosts ) FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "Find the average order quantity per order.",
                "masked_template": "Find the average order <mask> per <mask>",
                "query": "SELECT avg( order_quantity ) FROM order_items",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the average checking balance.",
                "masked_template": "Find the average <mask>",
                "query": "SELECT avg( balance ) FROM checking",
                "ted": 0.0,
                "db_id": "small_bank_1"
            },
            {
                "question": "What is the average amount of items ordered in each order?",
                "masked_template": "What is the average <mask> of <mask> ordered in each <mask>",
                "query": "SELECT avg( order_quantity ) FROM order_items",
                "ted": 0.0,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What is the average number of years spent working as a journalist?",
                "masked_template": "What is the average number of <mask> as a <mask>",
                "query": "SELECT avg( Years_working ) FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "How many hours do the players train on average?",
                "masked_template": "How many <mask> do the <mask> on <mask>",
                "query": "SELECT avg( HS ) FROM Player",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many students, on average, does each college have enrolled?",
                "masked_template": "How many <mask> on <mask> each <mask> have <mask>",
                "query": "SELECT avg( enr ) FROM College",
                "ted": 0.0,
                "db_id": "soccer_2"
            }
        ],
        "best_hyp": "What is the average age of all the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average age of all dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg( cost_of_treatment ) FROM Treatments )",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> professionals </tab> ) , ( <col> last name </col> of <tab> professionals </tab> ) ) ) that belongs to ( ( <tab> professionals </tab> ) join ( ( <tab> treatments </tab> ) ) ) , that have ( ( <col> cost of treatment </col> ) less than ( the average of ( <col> cost of treatment </col> ) ) that belongs to ( <tab> treatments </tab> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the distinct first names and last names of the professionals who are involved in treatments that cost less than the average?",
                11.042898178100586
            ]
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the distinct first names and last names of the professionals who are involved in treatments that cost less than the average?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the distinct first names and last names of the professionals who are involved in treatments that cost less than the average?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
        "proc_query": "( <col> first name </col> of <tab> owners </tab> ) , ( <col> name </col> of <tab> dogs </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the first names and names of the owners of the dogs?",
                3.707545042037964
            ],
            [
                "What are the first names of all owners who have a dog and the name of the owner?",
                10.627296447753906
            ],
            [
                "Find the first names of all owners who have a dog and the name of the owner.",
                10.5542631149292
            ],
            [
                "Find the names of all owners who have a dog and the owner's first name.",
                10.486008644104004
            ],
            [
                "What are the first names of owners and the names of the dogs they are related to?",
                10.116463661193848
            ],
            [
                "What are the first names of owners as well as the names of the dogs they are related to?",
                10.089046478271484
            ],
            [
                "Show the first names of owners and the names of their dogs.",
                9.714226722717285
            ],
            [
                "What are the first names and names of all the dogs owned by each owner?",
                6.390523433685303
            ],
            [
                "Tell me the first name and name of the owner of each dog.",
                5.795868396759033
            ],
            [
                "Tell me all the first names and names of the dogs they are owned.",
                5.1320648193359375
            ],
            [
                "Show first names of owners and the names of dogs they are in.",
                4.03940486907959
            ],
            [
                "What are the first names and last names of all the dogs?",
                3.4754481315612793
            ],
            [
                "What are the first names and names of owners in which dogs are owned?",
                3.3184497356414795
            ],
            [
                "what are the first name and last name of all the dogs?",
                3.2573611736297607
            ],
            [
                "What are the first name and last name of all the dogs?",
                3.151196241378784
            ],
            [
                "What are the first name and last name for each owner?",
                2.7521214485168457
            ],
            [
                "What are all the first names and the names of all the dogs in the family?",
                2.2347681522369385
            ],
            [
                "Show the first names and the names of all the dogs.",
                1.2994592189788818
            ],
            [
                "List all first names and last names of all dogs.",
                1.2841284275054932
            ],
            [
                "Return the first name and last name for all the dogs.",
                1.2395532131195068
            ],
            [
                "Show the first name and last name for all dogs.",
                0.15020519495010376
            ],
            [
                "What is the first name and name of all the dogs?",
                -0.10347755253314972
            ],
            [
                "What are the first names and names of all the dogs?",
                -0.3972165286540985
            ],
            [
                "What are the first names and names of all the dogs?",
                -0.3972165882587433
            ],
            [
                "Show the first name and the last name of the owner.",
                -0.41126012802124023
            ],
            [
                "What are the names of all owners who have a dog as well as the owner id?",
                -0.7361228466033936
            ],
            [
                "For each owner, find the names of the dogs they are in charge of.",
                -2.209541082382202
            ],
            [
                "Show first names and last names of owners.",
                -3.6890385150909424
            ],
            [
                "What are the ids of all owners for their dogs and what are the names of their dogs?",
                -7.268919944763184
            ],
            [
                "What are the names and names of the owners that have a dog?",
                -8.398101806640625
            ],
            [
                "Tell me the names and names of owners which dogs are owned by",
                -10.814167022705078
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1",
                "query_toks": [
                    "select",
                    "t2.emp_fname",
                    ",",
                    "t1.crs_code",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "employee",
                    "as",
                    "t2",
                    "on",
                    "t1.prof_num",
                    "=",
                    "t2.emp_num"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.emp_fname",
                    ",",
                    "t1.crs_code",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "employee",
                    "as",
                    "t2",
                    "on",
                    "t1.prof_num",
                    "=",
                    "t2.emp_num"
                ]
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1",
                "query_toks": [
                    "select",
                    "t2.emp_fname",
                    ",",
                    "t1.crs_code",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "employee",
                    "as",
                    "t2",
                    "on",
                    "t1.prof_num",
                    "=",
                    "t2.emp_num"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.emp_fname",
                    ",",
                    "t1.crs_code",
                    "from",
                    "class",
                    "as",
                    "t1",
                    "join",
                    "employee",
                    "as",
                    "t2",
                    "on",
                    "t1.prof_num",
                    "=",
                    "t2.emp_num"
                ]
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2",
                "query_toks": [
                    "select",
                    "name",
                    ",",
                    "course_id",
                    "from",
                    "instructor",
                    "as",
                    "t1",
                    "join",
                    "teaches",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.id"
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    ",",
                    "course_id",
                    "from",
                    "instructor",
                    "as",
                    "t1",
                    "join",
                    "teaches",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.id"
                ]
            },
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety",
                "query_toks": [
                    "select",
                    "t1.white",
                    ",",
                    "t2.crime_rate",
                    "from",
                    "city",
                    "as",
                    "t1",
                    "join",
                    "county_public_safety",
                    "as",
                    "t2",
                    "on",
                    "t1.county_id",
                    "=",
                    "t2.county_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.white",
                    ",",
                    "t2.crime_rate",
                    "from",
                    "city",
                    "as",
                    "t1",
                    "join",
                    "county_public_safety",
                    "as",
                    "t2",
                    "on",
                    "t1.county_id",
                    "=",
                    "t2.county_id"
                ]
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety",
                "query_toks": [
                    "select",
                    "t1.name",
                    ",",
                    "t2.name",
                    "from",
                    "city",
                    "as",
                    "t1",
                    "join",
                    "county_public_safety",
                    "as",
                    "t2",
                    "on",
                    "t1.county_id",
                    "=",
                    "t2.county_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.name",
                    ",",
                    "t2.name",
                    "from",
                    "city",
                    "as",
                    "t1",
                    "join",
                    "county_public_safety",
                    "as",
                    "t2",
                    "on",
                    "t1.county_id",
                    "=",
                    "t2.county_id"
                ]
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            }
        ],
        "best_hyp": "What are all the first names and the names of all the dogs in the family?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and names of the owners of the dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
        "proc_query": "( the number of ( distinct ( ( <col> dog id </col> ) ) ) ) that belongs to ( <tab> treatments </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many distinct dogs are there for all treatments?",
                10.71743106842041
            ],
            [
                "How many different dogs do we have?",
                9.933810234069824
            ],
            [
                "Find the number of distinct dogs who are undergoing treatments.",
                9.8073091506958
            ],
            [
                "How many different kinds of dogs are involved in treatments?",
                9.605552673339844
            ],
            [
                "How many different kinds of dogs are involved in treatments?",
                9.605552673339844
            ],
            [
                "How many different dogs have been involved in treatments?",
                9.413900375366211
            ],
            [
                "How many different dog ids are involved in treatments?",
                9.346319198608398
            ],
            [
                "How many distinct dogs have been involved in treatments?",
                9.286248207092285
            ],
            [
                "Count the number of different dogs involved in treatments.",
                9.156553268432617
            ],
            [
                "How many different dogs have had treatments?",
                9.037650108337402
            ],
            [
                "Count the number of distinct dogs involved in treatments.",
                9.006611824035645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many different dogs are involved in treatments?",
                8.924092292785645
            ],
            [
                "How many distinct dogs are involved in treatments?",
                8.80968189239502
            ],
            [
                "How many distinct dogs are involved in treatments?",
                8.809680938720703
            ],
            [
                "Count the number of different dogs used in treatments.",
                8.670446395874023
            ],
            [
                "Find the number of different dogs used in treatments.",
                8.11535930633545
            ],
            [
                "How many distinct dogs are affected by treatments?",
                7.323731899261475
            ],
            [
                "Count the number of different dogs that are involved in treatments",
                7.221248626708984
            ],
            [
                "Count the number of dogs who have had treatments.",
                6.97866153717041
            ],
            [
                "Show the number of different dogs for treatments.",
                5.401153564453125
            ],
            [
                "What is the number of distinct dogs the treatments are aimed at?",
                4.906457901000977
            ],
            [
                "Find the number of distinct dogs involved in treatments",
                4.841020107269287
            ],
            [
                "What is the count of distinct dogs with treatments?",
                4.372879505157471
            ],
            [
                "What are the ids of all dogs involved in the treatments?",
                2.857970952987671
            ]
        ],
        "templates": [
            "",
            {
                "question": "How many distinct currency codes are there for all drama workshop groups?",
                "masked_template": "How many distinct <mask> are there for all <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "currency_code",
                    ")",
                    "from",
                    "drama_workshop_groups"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "currency_code",
                    ")",
                    "from",
                    "drama_workshop_groups"
                ]
            },
            {
                "question": "How many different colleges do attend the tryout test?",
                "masked_template": "How many different <mask> do <mask> the <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "cname",
                    ")",
                    "from",
                    "tryout"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "cname",
                    ")",
                    "from",
                    "tryout"
                ]
            },
            {
                "question": "Find the number of distinct room types available.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "roomtype",
                    ")",
                    "from",
                    "room"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "roomtype",
                    ")",
                    "from",
                    "room"
                ]
            },
            {
                "question": "How many different types of rooms are there?",
                "masked_template": "How many different <mask> of <mask> are <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "roomtype",
                    ")",
                    "from",
                    "room"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "roomtype",
                    ")",
                    "from",
                    "room"
                ]
            },
            {
                "question": "How many different types of sports do we offer?",
                "masked_template": "How many different <mask> of <mask> do we <mask>",
                "query": "SELECT count( DISTINCT sportname ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many different cities have these stations?",
                "masked_template": "How many different <mask> have <mask>",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "city",
                    ")",
                    "from",
                    "station"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "distinct",
                    "city",
                    ")",
                    "from",
                    "station"
                ]
            },
            {
                "question": "How many different bike ids are there?",
                "masked_template": "How many different <mask> ids are <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many distinct artists have volumes?",
                "masked_template": "How many distinct <mask> have <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Count the number of different affected regions.",
                "masked_template": "Count the number of different <mask>",
                "query": "SELECT count( DISTINCT region_id ) FROM affected_region",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "How many different teams have had eliminated wrestlers?",
                "masked_template": "How many different <mask> have had <mask>",
                "query": "SELECT COUNT( DISTINCT team ) FROM elimination",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Count the number of distinct governors.",
                "masked_template": "Count the number of distinct <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many different colleges were represented at tryouts?",
                "masked_template": "How many different <mask> at <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many different allergy types exist?",
                "masked_template": "How many different <mask>",
                "query": "SELECT count( DISTINCT allergytype ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different countries are all the swimmers from?",
                "masked_template": "How many different <mask> are all the <mask>",
                "query": "SELECT count( DISTINCT nationality ) FROM swimmer",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "How many different levels do members have?",
                "masked_template": "How many different <mask> do <mask>",
                "query": "SELECT count( DISTINCT LEVEL ) FROM member",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "How many different students are involved in sports?",
                "masked_template": "How many different <mask> are <mask> in <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many allergies are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( DISTINCT allergy ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many students play sports?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many distinct governors are there?",
                "masked_template": "How many distinct <mask> are <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many distinct countries are the climbers from?",
                "masked_template": "How many distinct <mask> are the <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of different payment method codes used by parties.",
                "masked_template": "Count the number of different <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "masked_template": "<mask> the <mask> find the number of <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many distinct payment methods are used by parties?",
                "masked_template": "How many distinct <mask> are <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Count the number of different countries that climbers are from.",
                "masked_template": "Count the number of different <mask> that <mask> are <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of artists who have had volumes.",
                "masked_template": "Count the number of <mask> who have had <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "Show the number of transaction types.",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( DISTINCT transaction_type ) FROM Financial_Transactions",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "masked_template": "What is the number of distinct <mask> the <mask> are <mask> at?",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Find the number of distinct currency codes used in drama workshop groups.",
                "masked_template": "Find the number of distinct <mask> in <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "masked_template": "What is the count of distinct <mask> with <mask>",
                "query": "SELECT count( DISTINCT eid ) FROM Certificate",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the unique types of player positions in the tryout?",
                "masked_template": "What are the <mask> of <mask> in the <mask>",
                "query": "SELECT count( DISTINCT pPos ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            }
        ],
        "best_hyp": "How many different dogs have had treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many different dogs are involved in treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "proc_query": "( <col> cost of treatment </col> of <tab> treatments </tab> ) , ( <col> treatment type description </col> of <tab> treatment types </tab> ) that belongs to ( ( <tab> treatments </tab> ) , and ( ( <tab> treatment types </tab> ) satisfied that ( ( <col> treatment type code </col> of <tab> treatments </tab> ) equal to ( <col> treatment type code </col> of <tab> treatment types </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the cost of treatment and description of the treatment type?",
                6.9675798416137695
            ],
            [
                "What are the cost of treatments and the description of the treatment type they correspond to?",
                10.093806266784668
            ],
            [
                "Show the cost of treatment and the treatment type description.",
                9.387436866760254
            ],
            [
                "Tell me the cost and description for each treatment type.",
                9.144615173339844
            ],
            [
                "What are the cost and description of each treatment type?",
                8.857264518737793
            ],
            [
                "Find the cost of treatment and description of each treatment type.",
                8.188275337219238
            ],
            [
                "Show the cost of treatments and the description of their treatment types",
                7.581850528717041
            ],
            [
                "Tell me all the cost of treatment and description of the treatment type.",
                7.48460054397583
            ],
            [
                "What are the cost and description of treatments in which type codes are used?",
                7.348062515258789
            ],
            [
                "Show cost of treatments and the description of the treatment type they are in.",
                6.036170482635498
            ],
            [
                "Show cost of treatments and description of treatment type.",
                3.7806785106658936
            ],
            [
                "List all cost of treatments and description of treatment type.",
                3.080148935317993
            ],
            [
                "What are all the cost of treatments and the description of all the treatments in the database?",
                1.1323041915893555
            ],
            [
                "Find the names of all treatments who have cost and the description of the treatment type.",
                1.1065318584442139
            ],
            [
                "Find the names of all treatments who have cost and the description of the treatment type.",
                1.1065318584442139
            ],
            [
                "What are the cost and description of all the treatments?",
                -0.8299221396446228
            ],
            [
                "Show the cost of treatment and description for all treatments.",
                -0.9277568459510803
            ],
            [
                "What are the cost of treatment and description of all treatments?",
                -2.213940143585205
            ],
            [
                "what are the cost of treatment and description of all treatments?",
                -2.348562479019165
            ],
            [
                "Tell me the names and descriptions of treatments which are expensive?",
                -3.2536046504974365
            ],
            [
                "What are the names and descriptions of the treatments that have been described as a treatment type?",
                -6.123764991760254
            ],
            [
                "What are the names of treatments as well as the descriptions of the treatment types they correspond to?",
                -6.580660343170166
            ],
            [
                "What are the names of treatments and their type descriptions?",
                -8.754611015319824
            ],
            [
                "For each treatment type, find the names of the treatments they are part of.",
                -9.993083953857422
            ],
            [
                "What are the ids of all treatments and what are the names of their types?",
                -11.374524116516113
            ],
            [
                "What are the names of all patients who have received a treatment and the treatment type description?",
                -11.447179794311523
            ],
            [
                "What are the names of all patients who have received a treatment as well as the treatment type description?",
                -11.51994514465332
            ],
            [
                "What are the names and descriptions of all the treatments?",
                -11.957525253295898
            ],
            [
                "Please show the names and the descriptions of treatments.",
                -12.126540184020996
            ],
            [
                "What is the day Number and description of all the treatments?",
                -12.195706367492676
            ],
            [
                "Return the day Number and description for all the treatments.",
                -12.200560569763184
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety",
                "query_toks": [
                    "select",
                    "t1.white",
                    ",",
                    "t2.crime_rate",
                    "from",
                    "city",
                    "as",
                    "t1",
                    "join",
                    "county_public_safety",
                    "as",
                    "t2",
                    "on",
                    "t1.county_id",
                    "=",
                    "t2.county_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.white",
                    ",",
                    "t2.crime_rate",
                    "from",
                    "city",
                    "as",
                    "t1",
                    "join",
                    "county_public_safety",
                    "as",
                    "t2",
                    "on",
                    "t1.county_id",
                    "=",
                    "t2.county_id"
                ]
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute",
                "query_toks": [
                    "select",
                    "t2.protein_name",
                    ",",
                    "t1.institution",
                    "from",
                    "institution",
                    "as",
                    "t1",
                    "join",
                    "protein",
                    "as",
                    "t2",
                    "on",
                    "t1.institution_id",
                    "=",
                    "t2.institution_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.protein_name",
                    ",",
                    "t1.institution",
                    "from",
                    "institution",
                    "as",
                    "t1",
                    "join",
                    "protein",
                    "as",
                    "t2",
                    "on",
                    "t1.institution_id",
                    "=",
                    "t2.institution_id"
                ]
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park",
                "query_toks": [
                    "select",
                    "t1.museum_details",
                    ",",
                    "t2.opening_hours",
                    "from",
                    "museums",
                    "as",
                    "t1",
                    "join",
                    "tourist_attractions",
                    "as",
                    "t2",
                    "on",
                    "t1.museum_id",
                    "=",
                    "t2.tourist_attraction_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.museum_details",
                    ",",
                    "t2.opening_hours",
                    "from",
                    "museums",
                    "as",
                    "t1",
                    "join",
                    "tourist_attractions",
                    "as",
                    "t2",
                    "on",
                    "t1.museum_id",
                    "=",
                    "t2.tourist_attraction_id"
                ]
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player",
                "query_toks": [
                    "select",
                    "t1.location",
                    ",",
                    "t2.nickname",
                    "from",
                    "school",
                    "as",
                    "t1",
                    "join",
                    "school_details",
                    "as",
                    "t2",
                    "on",
                    "t1.school_id",
                    "=",
                    "t2.school_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.location",
                    ",",
                    "t2.nickname",
                    "from",
                    "school",
                    "as",
                    "t1",
                    "join",
                    "school_details",
                    "as",
                    "t2",
                    "on",
                    "t1.school_id",
                    "=",
                    "t2.school_id"
                ]
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1",
                "query_toks": [
                    "select",
                    "t1.first_name",
                    ",",
                    "t2.department_name",
                    "from",
                    "employees",
                    "as",
                    "t1",
                    "join",
                    "departments",
                    "as",
                    "t2",
                    "on",
                    "t1.department_id",
                    "=",
                    "t2.department_id"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.first_name",
                    ",",
                    "t2.department_name",
                    "from",
                    "employees",
                    "as",
                    "t1",
                    "join",
                    "departments",
                    "as",
                    "t2",
                    "on",
                    "t1.department_id",
                    "=",
                    "t2.department_id"
                ]
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            }
        ],
        "best_hyp": "What are the names and descriptions of all the treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the cost of treatment and description of the treatment type?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT charge_type , charge_amount FROM Charges",
        "proc_query": "( <col> charge type </col> ) , ( <col> charge amount </col> ) that belongs to ( <tab> charges </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the charge type and charge amount for each charge?",
                10.520517349243164
            ],
            [
                "What are the charge type and amount of all the charges?",
                10.743504524230957
            ],
            [
                "List the charge type and their corresponding charge amount of all the charges",
                10.444812774658203
            ],
            [
                "What are the charge types and amounts of all the charges?",
                10.203949928283691
            ],
            [
                "Tell me the charge type and amount of each charge.",
                10.054852485656738
            ],
            [
                "Show the charge type and amount of all charges.",
                9.611248970031738
            ],
            [
                "Show the charge type and amount of all charges.",
                9.611248016357422
            ],
            [
                "What are the charge type and amount for each charge?",
                9.127828598022461
            ],
            [
                "Show all charge types and charge amounts.",
                8.96773910522461
            ],
            [
                "List all charge types and charge amounts.",
                8.83023738861084
            ],
            [
                "Return the charge type and amount for each charge.",
                8.169532775878906
            ],
            [
                "Show all charge type and charge amount.",
                7.223173141479492
            ],
            [
                "What are all the charge types and amounts?",
                6.442531108856201
            ],
            [
                "Return the charge type and charge amount.",
                6.377894401550293
            ],
            [
                "What are the charge types and amount of the charges?",
                6.1622419357299805
            ],
            [
                "Show all the charge types and amounts.",
                5.853001594543457
            ],
            [
                "What are the types of charge and their amount?",
                5.749051094055176
            ],
            [
                "List all charge types and charge amounts",
                3.770667552947998
            ],
            [
                "For each charge type, show the charge amount and their corresponding charge type.",
                -0.5115745067596436
            ],
            [
                "Return the low and high charge types for all charges.",
                -5.6744561195373535
            ],
            [
                "What are all the charge types and day amounts?",
                -6.0787835121154785
            ],
            [
                "Show all charge types and day amounts.",
                -8.940739631652832
            ],
            [
                "What are the low and high charge types?",
                -9.969457626342773
            ],
            [
                "What are the ids and charge amounts of all the charges?",
                -11.200740814208984
            ],
            [
                "What are the names and charge amounts of all the charges?",
                -11.294258117675781
            ],
            [
                "What are the names and charge amounts for all charges?",
                -11.305887222290039
            ],
            [
                "Show the name and charge amount for all charges.",
                -11.437052726745605
            ],
            [
                "What are the name and charge amount of each charge?",
                -11.51086139678955
            ],
            [
                "What are the ids and names for each charge type?",
                -11.702272415161133
            ],
            [
                "Show the ids and names of all charges.",
                -12.02415943145752
            ],
            [
                "List the names and the amount that the charge can be made in an hour.",
                -12.084842681884766
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler",
                "query_toks": [
                    "select",
                    "reign",
                    ",",
                    "days_held",
                    "from",
                    "wrestler"
                ],
                "query_toks_no_value": [
                    "select",
                    "reign",
                    ",",
                    "days_held",
                    "from",
                    "wrestler"
                ]
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm",
                "query_toks": [
                    "select",
                    "council_tax_id",
                    ",",
                    "cmi_cross_ref_id",
                    "from",
                    "parking_fines"
                ],
                "query_toks_no_value": [
                    "select",
                    "council_tax_id",
                    ",",
                    "cmi_cross_ref_id",
                    "from",
                    "parking_fines"
                ]
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report",
                "query_toks": [
                    "select",
                    "nationality",
                    ",",
                    "age",
                    "from",
                    "journalist"
                ],
                "query_toks_no_value": [
                    "select",
                    "nationality",
                    ",",
                    "age",
                    "from",
                    "journalist"
                ]
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host",
                "query_toks": [
                    "select",
                    "party_theme",
                    ",",
                    "location",
                    "from",
                    "party"
                ],
                "query_toks_no_value": [
                    "select",
                    "party_theme",
                    ",",
                    "location",
                    "from",
                    "party"
                ]
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election",
                "query_toks": [
                    "select",
                    "delegate",
                    ",",
                    "committee",
                    "from",
                    "election"
                ],
                "query_toks_no_value": [
                    "select",
                    "delegate",
                    ",",
                    "committee",
                    "from",
                    "election"
                ]
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            }
        ],
        "best_hyp": "Tell me the charge type and amount of each charge.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the charge type and charge amount for each charge?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
        "proc_query": "( <col> student id </col> ) that belongs to ( <tab> student </tab> ), and except that ( ( <col> student id </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the ids of the students who do not have a cat?",
                10.16027545928955
            ],
            [
                "Find the id of students that do not have a cat.",
                5.517009258270264
            ],
            [
                "Show ids for all students who do not have pet of type cat.",
                5.218643665313721
            ],
            [
                "What are the ids of all students that are not cats?",
                5.10831356048584
            ],
            [
                "Find the names of students who are not living in the pet category of cat.",
                4.314530372619629
            ],
            [
                "Find the ids of all students who are not cats.",
                3.397777557373047
            ],
            [
                "What are the names of the students that do not have a cat?",
                2.9330697059631348
            ],
            [
                "Find the names of students who are not holding the pet of cat.",
                1.472510576248169
            ],
            [
                "What are the names of all students who are not able to fly cats?",
                1.4714964628219604
            ],
            [
                "What are the names of students who are not holding the pet of cat?",
                1.4643747806549072
            ]
        ],
        "templates": [
            "",
            {
                "question": "Find the name of dorms that do not have amenity TV Lounge.",
                "masked_template": "Find the name of <mask> that do not have <mask> TV <mask>",
                "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
                "ted": 0.0,
                "db_id": "dorm_1",
                "query_toks": [
                    "select",
                    "dorm_name",
                    "from",
                    "dorm",
                    "except",
                    "select",
                    "t1.dorm_name",
                    "from",
                    "dorm",
                    "as",
                    "t1",
                    "join",
                    "has_amenity",
                    "as",
                    "t2",
                    "on",
                    "t1.dormid",
                    "=",
                    "t2.dormid",
                    "join",
                    "dorm_amenity",
                    "as",
                    "t3",
                    "on",
                    "t2.amenid",
                    "=",
                    "t3.amenid",
                    "where",
                    "t3.amenity_name",
                    "=",
                    "\"TV Lounge\""
                ],
                "query_toks_no_value": [
                    "select",
                    "dorm_name",
                    "from",
                    "dorm",
                    "except",
                    "select",
                    "t1.dorm_name",
                    "from",
                    "dorm",
                    "as",
                    "t1",
                    "join",
                    "has_amenity",
                    "as",
                    "t2",
                    "on",
                    "t1.dormid",
                    "=",
                    "t2.dormid",
                    "join",
                    "dorm_amenity",
                    "as",
                    "t3",
                    "on",
                    "t2.amenid",
                    "=",
                    "t3.amenid",
                    "where",
                    "t3.amenity_name",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
                "masked_template": "Show names for all <mask> who do not have <mask> of <mask>",
                "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
                "ted": 0.0,
                "db_id": "flight_1",
                "query_toks": [
                    "select",
                    "name",
                    "from",
                    "employee",
                    "except",
                    "select",
                    "t1.name",
                    "from",
                    "employee",
                    "as",
                    "t1",
                    "join",
                    "certificate",
                    "as",
                    "t2",
                    "on",
                    "t1.eid",
                    "=",
                    "t2.eid",
                    "join",
                    "aircraft",
                    "as",
                    "t3",
                    "on",
                    "t3.aid",
                    "=",
                    "t2.aid",
                    "where",
                    "t3.name",
                    "=",
                    "\"Boeing 737-800\""
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    "from",
                    "employee",
                    "except",
                    "select",
                    "t1.name",
                    "from",
                    "employee",
                    "as",
                    "t1",
                    "join",
                    "certificate",
                    "as",
                    "t2",
                    "on",
                    "t1.eid",
                    "=",
                    "t2.eid",
                    "join",
                    "aircraft",
                    "as",
                    "t3",
                    "on",
                    "t3.aid",
                    "=",
                    "t2.aid",
                    "where",
                    "t3.name",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the titles of all movies that were not reviewed by Chris Jackson?",
                "masked_template": "What are the <mask> of all <mask> that <mask> not <mask> by <mask>",
                "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
                "ted": 0.037037037037037035,
                "db_id": "movie_1",
                "query_toks": [
                    "select",
                    "distinct",
                    "title",
                    "from",
                    "movie",
                    "except",
                    "select",
                    "t2.title",
                    "from",
                    "rating",
                    "as",
                    "t1",
                    "join",
                    "movie",
                    "as",
                    "t2",
                    "on",
                    "t1.mid",
                    "=",
                    "t2.mid",
                    "join",
                    "reviewer",
                    "as",
                    "t3",
                    "on",
                    "t1.rid",
                    "=",
                    "t3.rid",
                    "where",
                    "t3.name",
                    "=",
                    "\"Chris Jackson\""
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "title",
                    "from",
                    "movie",
                    "except",
                    "select",
                    "t2.title",
                    "from",
                    "rating",
                    "as",
                    "t1",
                    "join",
                    "movie",
                    "as",
                    "t2",
                    "on",
                    "t1.mid",
                    "=",
                    "t2.mid",
                    "join",
                    "reviewer",
                    "as",
                    "t3",
                    "on",
                    "t1.rid",
                    "=",
                    "t3.rid",
                    "where",
                    "t3.name",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Find the names of customers who are not living in the state of California.",
                "masked_template": "Find the names of <mask> who are not <mask> in the <mask> of <mask>",
                "query": "SELECT customer_name FROM customers EXCEPT SELECT T1.customer_name FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id WHERE T3.state_province_county = 'California'",
                "ted": 0.0,
                "db_id": "customer_deliveries"
            },
            {
                "question": "Find the titles of all movies not reviewed by Chris Jackson.",
                "masked_template": "Find the <mask> of all <mask> not <mask> by <mask>",
                "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson'",
                "ted": 0.037037037037037035,
                "db_id": "movie_1"
            },
            {
                "question": "What are the names of the dorm that does not have a TV Lounge?",
                "masked_template": "What are the names of the <mask> that <mask> not have a TV <mask>",
                "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the names of patients who are not using the medication of Procrastin-X.",
                "masked_template": "Find the names of <mask> who are not <mask> the <mask> of <mask>",
                "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?",
                "masked_template": "What are the names of all <mask> who are not <mask> to fly <mask>",
                "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
                "masked_template": "What are the names of <mask> who are not <mask> the <mask> of <mask>",
                "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X'",
                "ted": 0.0,
                "db_id": "hospital_1"
            }
        ],
        "best_hyp": "What are the names of the students that do not have a cat?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids of the students who do not have a cat?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 19",
        "proc_query": "( the number of ( all items ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> age </col> of <tab> student </tab> ) greater than ( <val> 19 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many students are older than 19?",
                8.105437278747559
            ],
            [
                "What is the total number of pets of the students with age more than 19?",
                11.0274076461792
            ],
            [
                "What is the total number of pets owned by students with age more than 19?",
                11.027393341064453
            ],
            [
                "Count the total number of pet owned by students who are older than 19",
                10.57306957244873
            ],
            [
                "Count the number of students who have a pet of age above 19.",
                8.053542137145996
            ],
            [
                "Find the number of pets for the students with age above 19",
                7.780913352966309
            ],
            [
                "What are the numbers of students with pet older than 19?",
                6.578816890716553
            ],
            [
                "What are the numbers of students who are older than 19?",
                6.457202911376953
            ],
            [
                "What are the numbers of students that have pet with age above 19?",
                4.587252616882324
            ],
            [
                "Show the number of students with pet having age greater than 19",
                2.1199452877044678
            ],
            [
                "Count the number of distinct students who are older than 19",
                1.798961877822876
            ],
            [
                "How many distinct students are older than 19?",
                0.7174463272094727
            ],
            [
                "What are the names of students who have a pet of more than 19 years old?",
                -0.24722537398338318
            ],
            [
                "How many distinct students have pet of age above 19?",
                -1.0539830923080444
            ],
            [
                "What are the names of students whose total pet ownership is older than 19?",
                -1.760852575302124
            ],
            [
                "What are the numbers of students at age 19 related to pets that are more than 2 years old on average?",
                -6.546101093292236
            ],
            [
                "What are the names of students that are older than 19?",
                -6.657713890075684
            ],
            [
                "What are the names of the students with more than 19 years old pet?",
                -7.325076580047607
            ],
            [
                "What is the average total number of pet owners for students older than 19?",
                -7.3493218421936035
            ],
            [
                "What are the names of students with more than 19 years old pet?",
                -8.81945514678955
            ],
            [
                "Count the number of students that had a pet younger than 19.",
                -10.74483585357666
            ],
            [
                "Find the the name of the students who have a pet with age more than 19",
                -11.042743682861328
            ],
            [
                "Show number of all students if any student with pet count greater than 19",
                -11.522259712219238
            ],
            [
                "Which students have pet that have more than two years old? Tell me the count of the students.",
                -11.657247543334961
            ],
            [
                "Show the number of students with more than 4 pet.",
                -11.772915840148926
            ],
            [
                "What are the total pet numbers for students aged above 6?",
                -11.85062026977539
            ],
            [
                "How many pets does the student with id 171 have?",
                -11.8865327835083
            ],
            [
                "Show the number of pets of the students that are older than 2 on average",
                -11.902873992919922
            ],
            [
                "What is the total number of pet for students with age above 6?",
                -11.950394630432129
            ],
            [
                "How many pet do the students whose id is 171 have?",
                -11.9688081741333
            ],
            [
                "What is the average number of pets of students with low age than 19?",
                -12.027495384216309
            ]
        ],
        "templates": [
            "",
            {
                "question": "What is the total kills of the perpetrators with height more than 1.84.",
                "masked_template": "What is the total <mask> of the <mask> with <mask> more than <mask>",
                "query": "SELECT sum( T2.Killed ) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84",
                "ted": 0.03571428571428571,
                "db_id": "perpetrator",
                "query_toks": [
                    "select",
                    "sum",
                    "(",
                    "t2.killed",
                    ")",
                    "from",
                    "people",
                    "as",
                    "t1",
                    "join",
                    "perpetrator",
                    "as",
                    "t2",
                    "on",
                    "t1.people_id",
                    "=",
                    "t2.people_id",
                    "where",
                    "t1.height",
                    ">",
                    "1.84"
                ],
                "query_toks_no_value": [
                    "select",
                    "sum",
                    "(",
                    "t2.killed",
                    ")",
                    "from",
                    "people",
                    "as",
                    "t1",
                    "join",
                    "perpetrator",
                    "as",
                    "t2",
                    "on",
                    "t1.people_id",
                    "=",
                    "t2.people_id",
                    "where",
                    "t1.height",
                    ">",
                    "value"
                ]
            },
            {
                "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
                "masked_template": "What is the total <mask> by <mask> with <mask> more than <mask>",
                "query": "SELECT sum( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
                "ted": 0.03571428571428571,
                "db_id": "entrepreneur",
                "query_toks": [
                    "select",
                    "sum",
                    "(",
                    "t1.money_requested",
                    ")",
                    "from",
                    "entrepreneur",
                    "as",
                    "t1",
                    "join",
                    "people",
                    "as",
                    "t2",
                    "on",
                    "t1.people_id",
                    "=",
                    "t2.people_id",
                    "where",
                    "t2.height",
                    ">",
                    "1.85"
                ],
                "query_toks_no_value": [
                    "select",
                    "sum",
                    "(",
                    "t1.money_requested",
                    ")",
                    "from",
                    "entrepreneur",
                    "as",
                    "t1",
                    "join",
                    "people",
                    "as",
                    "t2",
                    "on",
                    "t1.people_id",
                    "=",
                    "t2.people_id",
                    "where",
                    "t2.height",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
                "masked_template": "<mask> the total <mask> by <mask> who are <mask> than <mask>",
                "query": "SELECT sum( T1.Money_Requested ) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85",
                "ted": 0.03571428571428571,
                "db_id": "entrepreneur",
                "query_toks": [
                    "select",
                    "sum",
                    "(",
                    "t1.money_requested",
                    ")",
                    "from",
                    "entrepreneur",
                    "as",
                    "t1",
                    "join",
                    "people",
                    "as",
                    "t2",
                    "on",
                    "t1.people_id",
                    "=",
                    "t2.people_id",
                    "where",
                    "t2.height",
                    ">",
                    "1.85"
                ],
                "query_toks_no_value": [
                    "select",
                    "sum",
                    "(",
                    "t1.money_requested",
                    ")",
                    "from",
                    "entrepreneur",
                    "as",
                    "t1",
                    "join",
                    "people",
                    "as",
                    "t2",
                    "on",
                    "t1.people_id",
                    "=",
                    "t2.people_id",
                    "where",
                    "t2.height",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Show names of ships involved in a mission launched after 1928.",
                "masked_template": "Show names of <mask> in a <mask>",
                "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
                "ted": 0.07142857142857142,
                "db_id": "ship_mission",
                "query_toks": [
                    "select",
                    "t2.name",
                    "from",
                    "mission",
                    "as",
                    "t1",
                    "join",
                    "ship",
                    "as",
                    "t2",
                    "on",
                    "t1.ship_id",
                    "=",
                    "t2.ship_id",
                    "where",
                    "t1.launched_year",
                    ">",
                    "1928"
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.name",
                    "from",
                    "mission",
                    "as",
                    "t1",
                    "join",
                    "ship",
                    "as",
                    "t2",
                    "on",
                    "t1.ship_id",
                    "=",
                    "t2.ship_id",
                    "where",
                    "t1.launched_year",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Find the order detail for the products with price above 2000.",
                "masked_template": "Find the order <mask> for the <mask> with <mask>",
                "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000",
                "ted": 0.07142857142857142,
                "db_id": "cre_Drama_Workshop_Groups",
                "query_toks": [
                    "select",
                    "t1.other_item_details",
                    "from",
                    "order_items",
                    "as",
                    "t1",
                    "join",
                    "products",
                    "as",
                    "t2",
                    "on",
                    "t1.product_id",
                    "=",
                    "t2.product_id",
                    "where",
                    "t2.product_price",
                    ">",
                    "2000"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.other_item_details",
                    "from",
                    "order_items",
                    "as",
                    "t1",
                    "join",
                    "products",
                    "as",
                    "t2",
                    "on",
                    "t1.product_id",
                    "=",
                    "t2.product_id",
                    "where",
                    "t2.product_price",
                    ">",
                    "value"
                ]
            },
            {
                "question": "What are the purchase details of transactions with amount bigger than 10000?",
                "masked_template": "What are the <mask> of <mask> with <mask> than <mask>",
                "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000",
                "ted": 0.07142857142857142,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the star rating descriptions of the hotels with price above 10000?",
                "masked_template": "What are the <mask> of the <mask> with <mask>",
                "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000",
                "ted": 0.07142857142857142,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?",
                "masked_template": "What are the <mask> of <mask> that have <mask> with more than <mask>",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
                "ted": 0.07142857142857142,
                "db_id": "farm"
            },
            {
                "question": "Please show the themes of competitions with host cities having populations larger than 1000.",
                "masked_template": "<mask> show the <mask> of <mask> with <mask> having <mask> than <mask>",
                "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000",
                "ted": 0.07142857142857142,
                "db_id": "farm"
            },
            {
                "question": "Count the number of distinct delegates who are from counties with population above 50000.",
                "masked_template": "Count the number of distinct <mask> who are <mask> with <mask>",
                "query": "SELECT count( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
                "ted": 0.06666666666666667,
                "db_id": "election"
            },
            {
                "question": "How many distinct delegates are from counties with population larger than 50000?",
                "masked_template": "How many distinct <mask> are <mask> with <mask> than <mask>",
                "query": "SELECT count( DISTINCT T2.Delegate ) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000",
                "ted": 0.06666666666666667,
                "db_id": "election"
            },
            {
                "question": "What are the names of customers who have a loan of more than 3000 in amount?",
                "masked_template": "What are the names of <mask> who have a <mask> of more than <mask> in <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
                "ted": 0.07142857142857142,
                "db_id": "loan_1"
            },
            {
                "question": "How many distinct kinds of injuries happened after season 2010?",
                "masked_template": "How many distinct <mask> of <mask>",
                "query": "SELECT count( DISTINCT T1.injury ) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010",
                "ted": 0.06666666666666667,
                "db_id": "game_injury"
            },
            {
                "question": "What are the names of body builders whose total score is higher than 300?",
                "masked_template": "What are the names of <mask> whose total <mask> is <mask> than <mask>",
                "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300",
                "ted": 0.07142857142857142,
                "db_id": "body_builder"
            },
            {
                "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
                "masked_template": "What are the <mask> of <mask> at <mask> to <mask> that <mask> more than 2 <mask> on <mask>",
                "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.07142857142857142,
                "db_id": "music_4"
            },
            {
                "question": "What are the names of ships that were involved in a mission launched after 1928?",
                "masked_template": "What are the names of <mask> that <mask> in a <mask>",
                "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928",
                "ted": 0.07142857142857142,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the facility codes of the apartments with more than four bedrooms?",
                "masked_template": "What are the <mask> of the <mask> with more than <mask>",
                "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What is the average total score of body builders with height bigger than 200?",
                "masked_template": "What is the average total <mask> of <mask> with <mask> than <mask>",
                "query": "SELECT avg( T1.Total ) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
                "ted": 0.03571428571428571,
                "db_id": "body_builder"
            },
            {
                "question": "What are the names of representatives with more than 10000 votes in election?",
                "masked_template": "What are the names of <mask> with more than <mask> in <mask>",
                "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000",
                "ted": 0.07142857142857142,
                "db_id": "election_representative"
            },
            {
                "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
                "masked_template": "<mask> the average number of <mask> that had a low <mask> than <mask>",
                "query": "SELECT avg( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
                "ted": 0.03571428571428571,
                "db_id": "film_rank"
            },
            {
                "question": "Find the the name of the customers who have a loan with amount more than 3000.",
                "masked_template": "Find the the name of the <mask> who have a <mask> with <mask> more than <mask>",
                "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000",
                "ted": 0.07142857142857142,
                "db_id": "loan_1"
            },
            {
                "question": "Show details of all investors if they make any transaction with share count greater than 100.",
                "masked_template": "Show <mask> of all <mask> if <mask> any <mask> with <mask> count <mask> than <mask>",
                "query": "SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100",
                "ted": 0.07142857142857142,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.",
                "masked_template": "Which <mask> have <mask> that have more than two <mask> me the <mask> of the <mask>",
                "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "Show the facility codes of apartments with more than 4 bedrooms.",
                "masked_template": "Show the <mask> of <mask> with more than 4 <mask>",
                "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4",
                "ted": 0.07142857142857142,
                "db_id": "apartment_rentals"
            },
            {
                "question": "What are the total purchases for members rated at level 6?",
                "masked_template": "What are the total <mask> for <mask> at <mask> 6?",
                "query": "SELECT count( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6",
                "ted": 0.03571428571428571,
                "db_id": "shop_membership"
            },
            {
                "question": "How many courses does the student with id 171 actually attend?",
                "masked_template": "How many <mask> the <mask> with id 171 <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
                "ted": 0.03571428571428571,
                "db_id": "student_assessment"
            },
            {
                "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
                "masked_template": "<mask> show the <mask> of <mask> of the <mask> that <mask> more than 2 <mask> on <mask>",
                "query": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2",
                "ted": 0.07142857142857142,
                "db_id": "music_4"
            },
            {
                "question": "What is the total number of purchases for members with level 6?",
                "masked_template": "What is the total number of <mask> for <mask> with <mask> 6?",
                "query": "SELECT count( * ) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6",
                "ted": 0.03571428571428571,
                "db_id": "shop_membership"
            },
            {
                "question": "How many courses do the student whose id is 171 attend?",
                "masked_template": "How many <mask> do the <mask> whose id is 171 <mask>",
                "query": "SELECT count( * ) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171",
                "ted": 0.03571428571428571,
                "db_id": "student_assessment"
            },
            {
                "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
                "masked_template": "What is the average number of <mask> of <mask> with low <mask> than <mask>",
                "query": "SELECT avg( T2.Number_cities ) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000",
                "ted": 0.03571428571428571,
                "db_id": "film_rank"
            }
        ],
        "best_hyp": "Find the the name of the students who have a pet with age more than 19",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many students are older than 19?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count( * ) > 1",
        "proc_query": "( <col> first name </col> of <tab> student </tab> ) , ( <col> sex </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> student </tab> ) , that have ( ( the number of ( all items ) ) greater than ( <val> 1 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the first names and genders of all students who have more than one pet?",
                10.849080085754395
            ],
            [
                "Show the first name and gender of all students who have at least one pet.",
                10.862553596496582
            ],
            [
                "Who are the students that had more than one pet? List the student first name and gender.",
                10.749585151672363
            ],
            [
                "Which students have more than one pet? Tell me the name and gender of these students.",
                10.63833236694336
            ],
            [
                "Find the first name and gender for the students who have more than one pet.",
                10.633543968200684
            ],
            [
                "Return the first names and genders of the students that have more than one pet.",
                10.590185165405273
            ],
            [
                "What are the names and genders of students that have had more than one pet?",
                10.512758255004883
            ],
            [
                "Which students have at least one pet? Tell me their first names and genders.",
                10.488240242004395
            ],
            [
                "What is the first name and gender for the students who have more than one pet?",
                10.29969310760498
            ],
            [
                "Which students have pets as well as more than one student? Return their first names and genders.",
                9.430841445922852
            ],
            [
                "What are the names and genders for students who have a total pet of more than one pet in their record?",
                8.612923622131348
            ],
            [
                "Show first names and genders of students that are associated with more than one pet.",
                8.252242088317871
            ],
            [
                "Find the the first name and gender for the students who had more than one pet.",
                7.2330522537231445
            ],
            [
                "Find the name and gender of the students who have pet with a total pet value of more than 1.",
                7.015317916870117
            ],
            [
                "What are the ids and genders of students that have more than one pet?",
                5.188021183013916
            ],
            [
                "what are name and gender of students who had more than one pet?",
                1.1428065299987793
            ],
            [
                "What are the first names and genders of the students that have pet as a pet more than once?",
                -0.48673322796821594
            ],
            [
                "Which students have two or more pets? Tell me their first names and genders.",
                -6.613643646240234
            ],
            [
                "What is the first name and gender for the students with at least two pet?",
                -7.452068328857422
            ],
            [
                "What are the ids and names of the students that have more than one pet?",
                -8.687288284301758
            ],
            [
                "What are the first names and genders of all students with more than 2 pet?",
                -8.709765434265137
            ],
            [
                "Which students have a pet in more than 30 days? List his or her first name and gender.",
                -8.91634750366211
            ],
            [
                "Return the ids and genders corresponding to students for which there are more than two pets.",
                -8.985895156860352
            ],
            [
                "List first name and gender name of students that have more than 2 pet.",
                -9.53885269165039
            ],
            [
                "What are the first names and genders of students who had pet in more than 30 days?",
                -10.477537155151367
            ],
            [
                "What are the first names and genders of the students that have pet more than 2?",
                -10.990036964416504
            ],
            [
                "What are the first names and ids for students who have two or more pets?",
                -11.120227813720703
            ],
            [
                "Which students have more than 2 pet? Show the student first name and id.",
                -11.400736808776855
            ],
            [
                "What are the first names and gender rep ids for students with 10 or more pets?",
                -11.46576976776123
            ],
            [
                "Show first name and id for all students with at least two pet.",
                -11.788667678833008
            ],
            [
                "Return the order ids and genders for orderes with two or more pets.",
                -12.160841941833496
            ]
        ],
        "templates": [
            "",
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park",
                "query_toks": [
                    "select",
                    "t1.name",
                    ",",
                    "t2.tourist_attraction_id",
                    "from",
                    "tourist_attractions",
                    "as",
                    "t1",
                    "join",
                    "visits",
                    "as",
                    "t2",
                    "on",
                    "t1.tourist_attraction_id",
                    "=",
                    "t2.tourist_attraction_id",
                    "group",
                    "by",
                    "t2.tourist_attraction_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "2"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.name",
                    ",",
                    "t2.tourist_attraction_id",
                    "from",
                    "tourist_attractions",
                    "as",
                    "t1",
                    "join",
                    "visits",
                    "as",
                    "t2",
                    "on",
                    "t1.tourist_attraction_id",
                    "=",
                    "t2.tourist_attraction_id",
                    "group",
                    "by",
                    "t2.tourist_attraction_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">=",
                    "value"
                ]
            },
            {
                "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
                "masked_template": "Who are the <mask> that had more than 1 <mask> List the <mask> and id.",
                "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "insurance_policies",
                "query_toks": [
                    "select",
                    "t1.customer_details",
                    ",",
                    "t1.customer_id",
                    "from",
                    "customers",
                    "as",
                    "t1",
                    "join",
                    "customer_policies",
                    "as",
                    "t2",
                    "on",
                    "t1.customer_id",
                    "=",
                    "t2.customer_id",
                    "group",
                    "by",
                    "t1.customer_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.customer_details",
                    ",",
                    "t1.customer_id",
                    "from",
                    "customers",
                    "as",
                    "t1",
                    "join",
                    "customer_policies",
                    "as",
                    "t2",
                    "on",
                    "t1.customer_id",
                    "=",
                    "t2.customer_id",
                    "group",
                    "by",
                    "t1.customer_id",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
                "masked_template": "Which <mask> more than one <mask> me the name and <mask> number of <mask>",
                "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1",
                "query_toks": [
                    "select",
                    "name",
                    ",",
                    "phone",
                    "from",
                    "appointment",
                    "as",
                    "t1",
                    "join",
                    "patient",
                    "as",
                    "t2",
                    "on",
                    "t1.patient",
                    "=",
                    "t2.ssn",
                    "group",
                    "by",
                    "t1.patient",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    ",",
                    "phone",
                    "from",
                    "appointment",
                    "as",
                    "t1",
                    "join",
                    "patient",
                    "as",
                    "t2",
                    "on",
                    "t1.patient",
                    "=",
                    "t2.ssn",
                    "group",
                    "by",
                    "t1.patient",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "twitter_1",
                "query_toks": [
                    "select",
                    "t1.name",
                    ",",
                    "t1.email",
                    "from",
                    "user_profiles",
                    "as",
                    "t1",
                    "join",
                    "follows",
                    "as",
                    "t2",
                    "on",
                    "t1.uid",
                    "=",
                    "t2.f1",
                    "group",
                    "by",
                    "t2.f1",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "1"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.name",
                    ",",
                    "t1.email",
                    "from",
                    "user_profiles",
                    "as",
                    "t1",
                    "join",
                    "follows",
                    "as",
                    "t2",
                    "on",
                    "t1.uid",
                    "=",
                    "t2.f1",
                    "group",
                    "by",
                    "t2.f1",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "value"
                ]
            },
            {
                "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
                "masked_template": "Return the <mask> and names of the <mask> that have more than two <mask> in.",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.0,
                "db_id": "e_learning",
                "query_toks": [
                    "select",
                    "t1.course_description",
                    ",",
                    "t1.course_name",
                    "from",
                    "courses",
                    "as",
                    "t1",
                    "join",
                    "student_course_enrolment",
                    "as",
                    "t2",
                    "on",
                    "t1.course_id",
                    "=",
                    "t2.course_id",
                    "group",
                    "by",
                    "t1.course_name",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "2"
                ],
                "query_toks_no_value": [
                    "select",
                    "t1.course_description",
                    ",",
                    "t1.course_name",
                    "from",
                    "courses",
                    "as",
                    "t1",
                    "join",
                    "student_course_enrolment",
                    "as",
                    "t2",
                    "on",
                    "t1.course_id",
                    "=",
                    "t2.course_id",
                    "group",
                    "by",
                    "t1.course_name",
                    "having",
                    "count",
                    "(",
                    "*",
                    ")",
                    ">",
                    "value"
                ]
            },
            {
                "question": "What are the names and locations of tracks that have had exactly 1 race?",
                "masked_template": "What are the names and <mask> of <mask> that have had <mask> 1 <mask>",
                "query": "SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count( * ) = 1",
                "ted": 0.027777777777777776,
                "db_id": "race_track"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What is the order id and order details for the order more than two invoices.",
                "masked_template": "What is the order id and order <mask> for the order more than two <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
                "masked_template": "Which <mask> have <mask> as <mask> more than <mask> Return me their GDP and <mask>",
                "query": "SELECT T1.gdp , T1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.Host_City HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
                "masked_template": "What are the names and <mask> for <mask> who have <mask> a total <mask> of more than <mask> in <mask>",
                "query": "SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum( T2.amount ) > 5000",
                "ted": 0.027777777777777776,
                "db_id": "loan_1"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.0,
                "db_id": "railway"
            },
            {
                "question": "Find the the customer details and id for the customers who had more than one policy.",
                "masked_template": "Find the the <mask> and id for the <mask> who had more than one <mask>",
                "query": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
                "masked_template": "Find the name and <mask> of the <mask> who have <mask> with a total <mask> of more than <mask>",
                "query": "SELECT T1.cust_name , T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING sum( T2.amount ) > 5000",
                "ted": 0.027777777777777776,
                "db_id": "loan_1"
            },
            {
                "question": "What are the ids and details of events that have more than one participants?",
                "masked_template": "What are the ids and <mask> of <mask> that have more than one <mask>",
                "query": "SELECT T1.event_id , T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "local_govt_in_alabama"
            },
            {
                "question": "what are name and phone number of patients who had more than one appointment?",
                "masked_template": "what are name and <mask> number of <mask> who had more than one <mask>",
                "query": "SELECT name , phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the GDP and population of the city that already served as a host more than once?",
                "masked_template": "What are the GDP and <mask> of the <mask> that <mask> as a <mask> more than <mask>",
                "query": "SELECT T1.gdp , T1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.Host_City HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "What is the project id and detail for the project with at least two documents?",
                "masked_template": "What is the <mask> id and <mask> for the <mask> with at least two <mask>",
                "query": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the ids and names of the companies that operated more than one flight?",
                "masked_template": "What are the ids and names of the <mask> that <mask> more than one <mask>",
                "query": "SELECT T1.id , T1.name FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.id HAVING count( * ) > 1",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What are the first and last names of all customers with more than 2 payments?",
                "masked_template": "What are the <mask> and <mask> names of all <mask> with more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
                "masked_template": "Which <mask> a <mask> in more than 30 <mask> List his or her <mask> name and <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
                "masked_template": "Return the ids and <mask> to <mask> for which there are more than two <mask>",
                "query": "SELECT T1.project_id , T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List first name and last name of customers that have more than 2 payments.",
                "masked_template": "List <mask> name and <mask> name of <mask> that have more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the full names of actors who had roles in more than 30 films?",
                "masked_template": "What are the <mask> names of <mask> who had <mask> in more than 30 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
                "masked_template": "What are the <mask> and names of the <mask> that have <mask> than 2?",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.027777777777777776,
                "db_id": "chinook_1"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            }
        ],
        "best_hyp": "What are the ids and genders of students that have more than one pet?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names and genders of all students who have more than one pet?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT avg( age ) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
        "proc_query": "( the average of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> ) , that have ( ( <col> dog id </col> ) in ( ( <col> dog id </col> ) that belongs to ( <tab> treatments </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the average age of the dogs who are undergoing treatments?",
                10.815038681030273
            ],
            [
                "Find the average age of the dogs that are treated by any treatment.",
                10.53447437286377
            ],
            [
                "What is the average age for dogs who have been given a treatment?",
                10.479085922241211
            ],
            [
                "What is the average age of dogs undergoing any treatment?",
                10.167067527770996
            ],
            [
                "Count the average age of dogs that are undergoing treatments.",
                9.821852684020996
            ],
            [
                "Find the average age of dogs who are undergoing any treatment.",
                9.768363952636719
            ],
            [
                "Find the average age of dogs who are undergoing treatments.",
                9.319316864013672
            ],
            [
                "Find the average age for the dogs who had treatments.",
                9.114701271057129
            ],
            [
                "Find the average age of the dogs who have treatments.",
                8.622668266296387
            ],
            [
                "How old are the dogs who are undergoing treatments?",
                1.579736590385437
            ],
            [
                "Find the average age of the dogs who do not have any treatments.",
                -10.397239685058594
            ],
            [
                "Find the average age for the dogs who do not have any treatments.",
                -10.454344749450684
            ],
            [
                "Count the average age of dogs who do not have any treatments.",
                -10.841758728027344
            ],
            [
                "Find the average age of dogs that did not receive any treatment.",
                -10.870171546936035
            ],
            [
                "List the average age of dogs that did not have any treatments.",
                -10.925957679748535
            ],
            [
                "Find the average age of dogs who did not receive any treatment.",
                -10.970172882080078
            ],
            [
                "Count the average age of dogs that do not have treatments.",
                -11.022549629211426
            ],
            [
                "Count the average age of dogs who did not receive any treatments.",
                -11.08627700805664
            ],
            [
                "Compute the average age of dogs who have not received an treatment.",
                -11.234455108642578
            ],
            [
                "Find the average age of dogs who are not subjected to any treatments.",
                -11.360685348510742
            ],
            [
                "Count the average age of dogs that are not involved in any treatments.",
                -11.444119453430176
            ],
            [
                "Count the average age of dogs that are not involved in any treatments.",
                -11.444119453430176
            ],
            [
                "How old are the dogs that do not have treatments?",
                -11.542398452758789
            ],
            [
                "How many dogs are affected by any treatment?",
                -12.138145446777344
            ],
            [
                "How many dogs do not have any treatments?",
                -12.146632194519043
            ],
            [
                "How many dogs do not have any treatments?",
                -12.146632194519043
            ],
            [
                "How many dogs do not have an treatment in our record?",
                -12.151902198791504
            ],
            [
                "How many dogs did not have any treatments?",
                -12.169414520263672
            ],
            [
                "How many dogs do not receive treatments in the past?",
                -12.17514705657959
            ],
            [
                "How many dogs did not receive any treatments?",
                -12.185251235961914
            ],
            [
                "How many dogs are not involved in any treatments?",
                -12.190909385681152
            ]
        ],
        "templates": [
            "",
            {
                "question": "Find the average ram mib size of the chip models that are never used by any phone.",
                "masked_template": "Find the average ram mib <mask> of the <mask> that are <mask> by any <mask>",
                "query": "SELECT avg( RAM_MiB ) FROM chip_model WHERE model_name NOT IN ( SELECT chip_model FROM phone )",
                "ted": 0.045454545454545456,
                "db_id": "phone_1",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "ram_mib",
                    ")",
                    "from",
                    "chip_model",
                    "where",
                    "model_name",
                    "not",
                    "in",
                    "(",
                    "select",
                    "chip_model",
                    "from",
                    "phone",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "ram_mib",
                    ")",
                    "from",
                    "chip_model",
                    "where",
                    "model_name",
                    "not",
                    "in",
                    "(",
                    "select",
                    "chip_model",
                    "from",
                    "phone",
                    ")"
                ]
            },
            {
                "question": "What is the average credit score for customers who have taken a loan?",
                "masked_template": "What is the average <mask> for <mask> who have <mask> a <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan )",
                "ted": 0.0,
                "db_id": "loan_1",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "credit_score",
                    ")",
                    "from",
                    "customer",
                    "where",
                    "cust_id",
                    "in",
                    "(",
                    "select",
                    "cust_id",
                    "from",
                    "loan",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "credit_score",
                    ")",
                    "from",
                    "customer",
                    "where",
                    "cust_id",
                    "in",
                    "(",
                    "select",
                    "cust_id",
                    "from",
                    "loan",
                    ")"
                ]
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.09090909090909091,
                "db_id": "medicine_enzyme_interaction",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "enzyme",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "enzyme_id",
                    "from",
                    "medicine_enzyme_interaction",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "enzyme",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "enzyme_id",
                    "from",
                    "medicine_enzyme_interaction",
                    ")"
                ]
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "products",
                    "where",
                    "product_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "product_id",
                    "from",
                    "order_items",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "products",
                    "where",
                    "product_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "product_id",
                    "from",
                    "order_items",
                    ")"
                ]
            },
            {
                "question": "Find the number of items without any review.",
                "masked_template": "Find the number of <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.09090909090909091,
                "db_id": "epinions_1",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "item",
                    "where",
                    "i_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "i_id",
                    "from",
                    "review",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "item",
                    "where",
                    "i_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "i_id",
                    "from",
                    "review",
                    ")"
                ]
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "Find the average number of followers for the users who had some tweets.",
                "masked_template": "Find the average number of <mask> for the <mask> who had <mask>",
                "query": "SELECT avg( followers ) FROM user_profiles WHERE UID IN ( SELECT UID FROM tweets )",
                "ted": 0.0,
                "db_id": "twitter_1"
            },
            {
                "question": "Find the average credit score of the customers who have some loan.",
                "masked_template": "Find the average <mask> of the <mask> who have <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id IN ( SELECT cust_id FROM loan )",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the average credit score of the customers who do not have any loan.",
                "masked_template": "Find the average <mask> of the <mask> who do not have any <mask>",
                "query": "SELECT avg( credit_score ) FROM customer WHERE cust_id NOT IN ( SELECT cust_id FROM loan )",
                "ted": 0.045454545454545456,
                "db_id": "loan_1"
            },
            {
                "question": "Find the average number of followers for the users who do not have any tweet.",
                "masked_template": "Find the average number of <mask> for the <mask> who do not have any <mask>",
                "query": "SELECT avg( followers ) FROM user_profiles WHERE UID NOT IN ( SELECT UID FROM tweets )",
                "ted": 0.045454545454545456,
                "db_id": "twitter_1"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.09090909090909091,
                "db_id": "epinions_1"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.09090909090909091,
                "db_id": "driving_school"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.09090909090909091,
                "db_id": "epinions_1"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.09090909090909091,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.09090909090909091,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.09090909090909091,
                "db_id": "chinook_1"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.09090909090909091,
                "db_id": "scientist_1"
            },
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.09090909090909091,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "Count the number of universities that do not participate in the baketball match.",
                "masked_template": "Count the number of <mask> that do not <mask> in the <mask>",
                "query": "SELECT count( * ) FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match )",
                "ted": 0.09090909090909091,
                "db_id": "university_basketball"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "How many colors are never used by any product?",
                "masked_template": "How many <mask> are <mask> by any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.09090909090909091,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many enzymes do not have any interactions?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.09090909090909091,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.09090909090909091,
                "db_id": "scientist_1"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.09090909090909091,
                "db_id": "protein_institute"
            },
            {
                "question": "How many customers did not have any event?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )",
                "ted": 0.09090909090909091,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "How many schools do not participate in the basketball match?",
                "masked_template": "How many <mask> do not <mask> in the <mask>",
                "query": "SELECT count( * ) FROM university WHERE school_id NOT IN ( SELECT school_id FROM basketball_match )",
                "ted": 0.09090909090909091,
                "db_id": "university_basketball"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.09090909090909091,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.09090909090909091,
                "db_id": "customers_and_invoices"
            }
        ],
        "best_hyp": "Find the average age of the dogs who do not have any treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average age of the dogs who are undergoing treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "select count( * ) , T1.stuid from student as T1 join has_pet as T2 on T1.stuid = T2.stuid group by T1.stuid",
        "proc_query": "( the number of ( all items ) ) , ( <col> student id </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) ) , grouped by ( <col> student id </col> of <tab> student </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many pet does each student have?",
                -11.350193977355957
            ],
            [
                "Find the number of pets which each student is living on and has.",
                -6.8072309494018555
            ],
            [
                "What are the ids of all the students and how many pets correspond to each of them?",
                -7.933603763580322
            ],
            [
                "What are the names of the students and how many pets are each of them living on?",
                -8.682393074035645
            ],
            [
                "Find the number of pets possessed by each student as well as the student id.",
                -8.86657428741455
            ],
            [
                "For each student id, how many pet does he or she have?",
                -8.892026901245117
            ],
            [
                "Find the number of pets for each student and the student id.",
                -8.983489036560059
            ],
            [
                "For each student id, how many pet does that student have?",
                -9.442527770996094
            ],
            [
                "How many pet does each student have? List the count and the student id.",
                -9.778038024902344
            ],
            [
                "How many different pet owners are there for each student?",
                -9.814375877380371
            ],
            [
                "How many pet does each student have? List the number and the student id.",
                -9.903709411621094
            ],
            [
                "Find the number of pets for each student showing the name of each student.",
                -10.040904998779297
            ],
            [
                "How many pets are there in each student?",
                -10.05119800567627
            ],
            [
                "What are the names of students with pet and how many pets do each of them have?",
                -10.058233261108398
            ],
            [
                "For each student id which has pet, what are the number of pets and the student id?",
                -10.06667423248291
            ],
            [
                "How many pet students have? List the student count and the student id.",
                -10.146326065063477
            ],
            [
                "How many pets are there for each student?",
                -10.219858169555664
            ],
            [
                "How many pets are there for each student?",
                -10.219858169555664
            ],
            [
                "For each student with pet, list the count of pet and the student id.",
                -10.232810974121094
            ],
            [
                "For each student id, how many pets are there?",
                -10.365479469299316
            ],
            [
                "What is the number of pets for different students?",
                -10.397573471069336
            ],
            [
                "Find the total number of pets for each student.",
                -10.534611701965332
            ],
            [
                "What are the total number of pets for each student?",
                -10.554004669189453
            ],
            [
                "What are the names of students with pet and what are the total ids for each student?",
                -11.211115837097168
            ],
            [
                "Find number of pets for each student.",
                -11.497156143188477
            ],
            [
                "Find the number of pet students have.",
                -11.789097785949707
            ],
            [
                "What is the number of pet students have?",
                -11.791633605957031
            ],
            [
                "How many pet students are there?",
                -11.808834075927734
            ],
            [
                "How many pet students have?",
                -11.850278854370117
            ],
            [
                "Find the number of pet students for each id.",
                -11.917673110961914
            ],
            [
                "Find the average number of pets for each student and list each student id.",
                -12.016071319580078
            ]
        ],
        "templates": [
            "",
            {
                "question": "Find the number of projects which each scientist is working on and scientist's name.",
                "masked_template": "Find the number of <mask> which each <mask> is <mask> on and <mask>",
                "query": "SELECT count( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
                "masked_template": "What are the <mask> of all the <mask> and how many <mask> to each of <mask>",
                "query": "SELECT count( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "What are the names of the scientists, and how many projects are each of them working on?",
                "masked_template": "What are the names of the <mask> and how many <mask> are each of <mask> on?",
                "query": "SELECT count( * ) , T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
                "masked_template": "Find the number of <mask> by each <mask> as <mask> as the <mask>",
                "query": "SELECT count( * ) , T1.name FROM manufacturer AS T1 JOIN furniture_manufacte AS T2 ON T1.manufacturer_id = T2.manufacturer_id GROUP BY T1.manufacturer_id",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "For each director, how many reviews have they received?",
                "masked_template": "For each <mask> how many <mask> have <mask>",
                "query": "SELECT count( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the number of routes for each source airport and the airport name.",
                "masked_template": "Find the number of <mask> for each <mask> and the <mask>",
                "query": "SELECT count( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "For each airport name, how many routes start at that airport?",
                "masked_template": "For each <mask> how many <mask> at that <mask>",
                "query": "SELECT count( * ) , T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "How many assets does each third party company supply? List the count and the company id.",
                "masked_template": "How many <mask> each <mask> List the count and the <mask> id.",
                "query": "SELECT count( * ) , T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "How many different professors are there for the different schools?",
                "masked_template": "How many different <mask> are there for the different <mask>",
                "query": "SELECT count( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
                "masked_template": "How many <mask> each <mask> List the number and the <mask> id.",
                "query": "SELECT count( * ) , T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Find the number of products for each manufacturer, showing the name of each company.",
                "masked_template": "Find the number of <mask> for each <mask> showing the name of each <mask>",
                "query": "SELECT count( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many classes are held in each department?",
                "masked_template": "How many <mask> are <mask> in each <mask>",
                "query": "SELECT count( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
                "masked_template": "What are the names of <mask> with <mask> and how many <mask> do each of <mask>",
                "query": "SELECT count( * ) , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "small_bank_1"
            },
            {
                "question": "For each product which has problems, what are the number of problems and the product id?",
                "masked_template": "For each <mask> which has <mask> what are the number of <mask> and the <mask> id?",
                "query": "SELECT count( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "How many tasks does each project have? List the task count and the project detail.",
                "masked_template": "How many <mask> each <mask> List the <mask> count and the <mask>",
                "query": "SELECT count( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "How many medications are prescribed for each brand?",
                "masked_template": "How many <mask> are <mask> for each <mask>",
                "query": "SELECT count( * ) , T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "How many products are there for each manufacturer?",
                "masked_template": "How many <mask> are there for each <mask>",
                "query": "SELECT count( * ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
                "ted": 0.0,
                "db_id": "manufactory_1"
            },
            {
                "question": "For each product with some problems, list the count of problems and the product id.",
                "masked_template": "For each <mask> with <mask> list the count of <mask> and the <mask> id.",
                "query": "SELECT count( * ) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "For each project id, how many tasks are there?",
                "masked_template": "For each <mask> id, how many <mask> are <mask>",
                "query": "SELECT count( * ) , T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What is the number of professors for different school?",
                "masked_template": "What is the number of <mask> for different <mask>",
                "query": "SELECT count( * ) , T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "Find the total saving balance for each account name.",
                "masked_template": "Find the total <mask> for each <mask>",
                "query": "SELECT sum( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                "ted": 0.03571428571428571,
                "db_id": "small_bank_1"
            },
            {
                "question": "What are the total number of credits offered by each department?",
                "masked_template": "What are the total number of <mask> by each <mask>",
                "query": "SELECT sum( T1.crs_credit ) , T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code",
                "ted": 0.03571428571428571,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
                "masked_template": "What are the names of <mask> with <mask> and what are the total <mask> for <mask>",
                "query": "SELECT sum( T2.balance ) , T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name",
                "ted": 0.03571428571428571,
                "db_id": "small_bank_1"
            },
            {
                "question": "Find number of tracks in each genre?",
                "masked_template": "Find number of <mask> in each <mask>",
                "query": "SELECT count( * ) , T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the number of classes in each department.",
                "masked_template": "Find the number of <mask> in each <mask>",
                "query": "SELECT count( * ) , dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What is minimum hours of the students playing in different position?",
                "masked_template": "What is <mask> of the <mask> in different <mask>",
                "query": "SELECT min( T2.HS ) , T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos",
                "ted": 0.03571428571428571,
                "db_id": "soccer_2"
            },
            {
                "question": "How many tracks are in each genre?",
                "masked_template": "How many <mask> are in each <mask>",
                "query": "SELECT count( * ) , T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "How many movie reviews does each director get?",
                "masked_template": "How many <mask> each <mask>",
                "query": "SELECT count( * ) , T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "Find the number of scientists involved for each project name.",
                "masked_template": "Find the number of <mask> for each <mask>",
                "query": "SELECT count( * ) , T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the average prices of all products from each manufacture, and list each company's name.",
                "masked_template": "Find the average <mask> of all <mask> each <mask> and list each <mask>",
                "query": "SELECT avg( T1.price ) , T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
                "ted": 0.03571428571428571,
                "db_id": "manufactory_1"
            }
        ],
        "best_hyp": "For each student with pet, list the count of pet and the student id.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many pet does each student have?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'cat' intersect select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
        "proc_query": "( <col> first name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ), and intersect with ( ( <col> first name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the first names of all students who have both cat and dog as pet types?",
                -10.344637870788574
            ],
            [
                "What are the names of the students that have both the cat type and the dog type pet?",
                -9.148253440856934
            ],
            [
                "For students that have pet types of cat and dog, what are their first names?",
                -9.38460922241211
            ],
            [
                "Find the name of the students who have pets of cat type and a pet of dog type.",
                -9.51214599609375
            ],
            [
                "List the names of the students that are cats and dogs.",
                -9.780774116516113
            ],
            [
                "For students with both cat as type and dog as type, list its first names.",
                -9.864270210266113
            ],
            [
                "What are the names of the students that have pets with a type both cat and dog?",
                -9.885046005249023
            ],
            [
                "List the first names of students that have both a pet of type cat and a pet with type dog.",
                -9.918095588684082
            ],
            [
                "What are the first names for both cat and dog students?",
                -9.938462257385254
            ],
            [
                "Which students have both the cat type and the dog type? Give me their first names.",
                -9.985697746276855
            ],
            [
                "What is the name of the student with both a cat and a dog listed as pets?",
                -9.992759704589844
            ],
            [
                "What are the names of any students who are cats or dogs?",
                -10.047252655029297
            ],
            [
                "Which students do the cat and dog types have? Tell me the names of the students.",
                -10.087915420532227
            ],
            [
                "Show the names of students that are friends with both an animal named cat and an animal type named dog.",
                -10.159006118774414
            ],
            [
                "List the name of the students who have both the cat and the dog types.",
                -10.231182098388672
            ],
            [
                "What are the names of all the students that are in both the cat and dog types?",
                -10.246853828430176
            ],
            [
                "What are the names of all students who can fly both the cat and the dog types?",
                -10.280051231384277
            ],
            [
                "List the first names of students who have both the cat type and the dog type.",
                -10.344244956970215
            ],
            [
                "What are the first names of the students who have both cat and dog as pets?",
                -10.352750778198242
            ],
            [
                "Find the names of students who have both cat and dog pets.",
                -10.390545845031738
            ],
            [
                "Find the first names of students that have pets of both the cat and dog types.",
                -10.405021667480469
            ],
            [
                "Find the first names of the students who have cat and dog types.",
                -10.527273178100586
            ],
            [
                "What are the names of the students that have both cat and dog as pet types?",
                -10.611410140991211
            ],
            [
                "What are the names of the students who have both cat and dog as pet types?",
                -10.636129379272461
            ],
            [
                "What are the first names of the students who have cat and dog types?",
                -10.646895408630371
            ],
            [
                "Find the name of the students that have both cat and dog as pet types.",
                -10.696626663208008
            ],
            [
                "What are the names of all students that are pets with both cat and dog types?",
                -10.702398300170898
            ],
            [
                "Find the name of students who have both cat and dog as pet types.",
                -10.816147804260254
            ],
            [
                "Find the name of students who have both cat and dog as pet types.",
                -10.816147804260254
            ],
            [
                "Find the name of students have pets whose type is cat and type is dog.",
                -11.157689094543457
            ],
            [
                "Show names for all students who have pets of cat type and pet type.",
                -11.97257137298584
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
                "masked_template": "What are the names of the <mask> that <mask> both the <mask> of <mask> and <mask>",
                "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
                "masked_template": "For <mask> that have <mask> of <mask> and <mask> what are their <mask>",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
                "masked_template": "Find the name of the <mask> who <mask> on both a <mask> named <mask> of <mask> and a <mask> named 'A <mask>",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
                "masked_template": "List the names of the <mask> that are <mask> with both <mask> and <mask>",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
                "masked_template": "For <mask> with both <mask> as <mask> and <mask> as <mask> list its <mask>",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
                "masked_template": "What are the names of the <mask> that have <mask> with a <mask> in <mask> and <mask>",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
                "masked_template": "List the <mask> of <mask> that <mask> both a <mask> of <mask> with <mask> and a <mask> of <mask> with <mask>",
                "query": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
                "masked_template": "What are the <mask> for <mask> both <mask> and <mask>",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
                "masked_template": "Which <mask> have <mask> both the <mask> named <mask> a <mask> and the <mask> named <mask> a <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'New policy application'",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
                "masked_template": "What is the name of the <mask> with both a TV <mask> and <mask> listed as <mask>",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
                "masked_template": "What are the names of any <mask> who <mask> on <mask> named <mask> of <mask> and 'A <mask>",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
                "masked_template": "Which <mask> do the <mask> and <mask> me the names of the <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
                "masked_template": "Show the names of <mask> that are <mask> with both an <mask> named <mask> and an <mask> named <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
                "masked_template": "List the name of the <mask> both the <mask> and the <mask> got <mask>",
                "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
                "masked_template": "What are the names of all the <mask> that are in both the <mask> and <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
                "masked_template": "What are the names of all <mask> who can fly both the <mask> and the <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
                "masked_template": "List the <mask> both the <mask> of <mask> and the <mask> of <mask>",
                "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?",
                "masked_template": "What are the <mask> names of the <mask> both <mask> and <mask>",
                "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the names of districts where have both city mall and village store type stores.",
                "masked_template": "Find the names of <mask> have both <mask> and <mask>",
                "query": "SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'City Mall' INTERSECT SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'Village Store'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
                "masked_template": "Find the <mask> of <mask> that <mask> of both the <mask> and <mask>",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
                "masked_template": "Find the <mask> names of the <mask> who <mask> in <mask> and <mask>",
                "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the names of the districts that have both mall and village store style shops?",
                "masked_template": "What are the names of the <mask> that have both <mask> and <mask>",
                "query": "SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'City Mall' INTERSECT SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'Village Store'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
                "masked_template": "What are the names of the <mask> which <mask> both <mask> and <mask>",
                "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Guruvayur Express'",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
                "masked_template": "What are the names of the <mask> and <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
                "masked_template": "Find the name of the <mask> that <mask> both <mask> and <mask>",
                "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
                "masked_template": "What are the names of all <mask> that are <mask> with both <mask> and <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
                "masked_template": "Find the name of <mask> which have both TV <mask> and <mask> as <mask>",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the name of tracks which are in both Movies and music playlists.",
                "masked_template": "Find the name of <mask> which are in both <mask> and <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
                "masked_template": "Find the name of <mask> have <mask> whose <mask> is in <mask> and <mask> in <mask>",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
                "masked_template": "Show names for all <mask> who have <mask> on both <mask> and <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What is the name of the student with both a cat and a dog listed as pets?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of all students who have both cat and dog as pet types?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT avg( pet_age ) , max( pet_age ) , pettype FROM pets GROUP BY pettype",
        "proc_query": "( the average of ( <col> pet age </col> ) ) , ( the maximum of ( <col> pet age </col> ) ) , ( <col> pet type </col> ) that belongs to ( <tab> pets </tab> ) , grouped by ( <col> pet type </col> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the average, maximum, and pet type for each pet type?",
                -0.473653107881546
            ],
            [
                "What are the average and maximum pet age for each pet type?",
                10.938525199890137
            ],
            [
                "What are the average and maximum pet age for each pet type?",
                10.938525199890137
            ],
            [
                "What are the average and maximum pet age for each pet type?",
                10.938525199890137
            ],
            [
                "What are the average and maximum ages of pets for each pet type?",
                10.934253692626953
            ],
            [
                "What is the average and maximum pet age for each pet type?",
                10.874089241027832
            ],
            [
                "What are the average and maximum ages of pets in each pet type?",
                10.664493560791016
            ],
            [
                "Find the average and maximum pet age for each pet type.",
                10.574707984924316
            ],
            [
                "Find the average and maximum pet age for each pet type.",
                10.574707984924316
            ],
            [
                "Find the average and maximum pet age for each pet type.",
                10.574707984924316
            ],
            [
                "Return the average and maximum age of pets in each pet type.",
                10.415668487548828
            ],
            [
                "What are the average and maximum ages of pets grouped by pet type?",
                10.323975563049316
            ],
            [
                "What are the average and maximum age of pets in different pet type?",
                10.157735824584961
            ],
            [
                "Find the average and maximum age for pets with different pet type.",
                9.369851112365723
            ],
            [
                "Find the average, maximum, and pet type for each pet type.",
                1.86081063747406
            ],
            [
                "Find the average, maximum, and pet type for each pet type.",
                1.8608105182647705
            ],
            [
                "How many pets are there in each pet type and what are their average ages?",
                1.449634075164795
            ],
            [
                "What are the average, maximum, and pet type for each pet type?",
                0.1084311306476593
            ],
            [
                "How old are there and what is the total pet age for each pet type?",
                -8.727729797363281
            ]
        ],
        "templates": [
            "",
            {
                "question": "What are the average and minimum weights for people of each sex?",
                "masked_template": "What are the average and <mask> for <mask> of each <mask>",
                "query": "SELECT avg( weight ) , min( weight ) , sex FROM people GROUP BY sex",
                "ted": 0.045454545454545456,
                "db_id": "candidate_poll",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "min",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "sex",
                    "from",
                    "people",
                    "group",
                    "by",
                    "sex"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "min",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "sex",
                    "from",
                    "people",
                    "group",
                    "by",
                    "sex"
                ]
            },
            {
                "question": "What are the greatest and average capacity for rooms in each building?",
                "masked_template": "What are the <mask> and average <mask> for <mask> in each <mask>",
                "query": "SELECT max( capacity ) , avg( capacity ) , building FROM classroom GROUP BY building",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "What are the maximum price and score of wines for each year?",
                "masked_template": "What are the maximum <mask> and <mask> of <mask> for each <mask>",
                "query": "SELECT max( Price ) , max( Score ) , YEAR FROM WINE GROUP BY YEAR",
                "ted": 0.045454545454545456,
                "db_id": "wine_1"
            },
            {
                "question": "What are the average price and score of wines for each appelation?",
                "masked_template": "What are the average <mask> and <mask> of <mask> for each <mask>",
                "query": "SELECT avg( Price ) , avg( Score ) , Appelation FROM WINE GROUP BY Appelation",
                "ted": 0.045454545454545456,
                "db_id": "wine_1",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "price",
                    ")",
                    ",",
                    "avg",
                    "(",
                    "score",
                    ")",
                    ",",
                    "appelation",
                    "from",
                    "wine",
                    "group",
                    "by",
                    "appelation"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "price",
                    ")",
                    ",",
                    "avg",
                    "(",
                    "score",
                    ")",
                    ",",
                    "appelation",
                    "from",
                    "wine",
                    "group",
                    "by",
                    "appelation"
                ]
            },
            {
                "question": "What is the average and oldest age for each gender of student?",
                "masked_template": "What is the average and <mask> age for each <mask> of <mask>",
                "query": "SELECT avg( age ) , max( age ) , sex FROM student GROUP BY sex",
                "ted": 0.0,
                "db_id": "dorm_1",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "age",
                    ")",
                    ",",
                    "max",
                    "(",
                    "age",
                    ")",
                    ",",
                    "sex",
                    "from",
                    "student",
                    "group",
                    "by",
                    "sex"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "age",
                    ")",
                    ",",
                    "max",
                    "(",
                    "age",
                    ")",
                    ",",
                    "sex",
                    "from",
                    "student",
                    "group",
                    "by",
                    "sex"
                ]
            },
            {
                "question": "What are the maximum price and score of wines in each year?",
                "masked_template": "What are the maximum <mask> and <mask> of <mask> in each <mask>",
                "query": "SELECT max( Price ) , max( Score ) , YEAR FROM WINE GROUP BY YEAR",
                "ted": 0.045454545454545456,
                "db_id": "wine_1",
                "query_toks": [
                    "select",
                    "max",
                    "(",
                    "price",
                    ")",
                    ",",
                    "max",
                    "(",
                    "score",
                    ")",
                    ",",
                    "year",
                    "from",
                    "wine",
                    "group",
                    "by",
                    "year"
                ],
                "query_toks_no_value": [
                    "select",
                    "max",
                    "(",
                    "price",
                    ")",
                    ",",
                    "max",
                    "(",
                    "score",
                    ")",
                    ",",
                    "year",
                    "from",
                    "wine",
                    "group",
                    "by",
                    "year"
                ]
            },
            {
                "question": "Find the average and minimum weight for each gender.",
                "masked_template": "Find the average and <mask> for each <mask>",
                "query": "SELECT avg( weight ) , min( weight ) , sex FROM people GROUP BY sex",
                "ted": 0.045454545454545456,
                "db_id": "candidate_poll",
                "query_toks": [
                    "select",
                    "avg",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "min",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "sex",
                    "from",
                    "people",
                    "group",
                    "by",
                    "sex"
                ],
                "query_toks_no_value": [
                    "select",
                    "avg",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "min",
                    "(",
                    "weight",
                    ")",
                    ",",
                    "sex",
                    "from",
                    "people",
                    "group",
                    "by",
                    "sex"
                ]
            },
            {
                "question": "Find the number of dorms and total capacity for each gender.",
                "masked_template": "Find the number of <mask> and total <mask> for each <mask>",
                "query": "SELECT count( * ) , sum( student_capacity ) , gender FROM dorm GROUP BY gender",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the number and average age of students living in each city.",
                "masked_template": "Find the number and average age of <mask> in each <mask>",
                "query": "SELECT count( * ) , avg( age ) , city_code FROM student GROUP BY city_code",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "Return the average and minimum age of captains in each class.",
                "masked_template": "Return the average and <mask> age of <mask> in each <mask>",
                "query": "SELECT avg( age ) , min( age ) , CLASS FROM captain GROUP BY CLASS",
                "ted": 0.045454545454545456,
                "db_id": "ship_1"
            },
            {
                "question": "What are the average price and score of wines grouped by appelation?",
                "masked_template": "What are the average <mask> and <mask> of <mask> by <mask>",
                "query": "SELECT avg( Price ) , avg( Score ) , Appelation FROM WINE GROUP BY Appelation",
                "ted": 0.045454545454545456,
                "db_id": "wine_1"
            },
            {
                "question": "What are the average and minimum age of captains in different class?",
                "masked_template": "What are the average and <mask> age of <mask> in different <mask>",
                "query": "SELECT avg( age ) , min( age ) , CLASS FROM captain GROUP BY CLASS",
                "ted": 0.045454545454545456,
                "db_id": "ship_1"
            },
            {
                "question": "Find the average and oldest age for students with different sex.",
                "masked_template": "Find the average and <mask> age for <mask> with different <mask>",
                "query": "SELECT avg( age ) , max( age ) , sex FROM student GROUP BY sex",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
                "masked_template": "Find the name and <mask> of the <mask> that <mask> the <mask> in each <mask>",
                "query": "SELECT name , max( revenue ) , Headquarter FROM manufacturers GROUP BY Headquarter",
                "ted": 0.09090909090909091,
                "db_id": "manufactory_1"
            },
            {
                "question": "Find the maximum and average capacity among rooms in each building.",
                "masked_template": "Find the maximum and average <mask> in each <mask>",
                "query": "SELECT max( capacity ) , avg( capacity ) , building FROM classroom GROUP BY building",
                "ted": 0.09090909090909091,
                "db_id": "college_2"
            },
            {
                "question": "How many students live in each city and what are their average ages?",
                "masked_template": "How many <mask> in each <mask> and what are their average <mask>",
                "query": "SELECT count( * ) , avg( age ) , city_code FROM student GROUP BY city_code",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
                "masked_template": "What are the names and <mask> of the <mask> with the <mask> in each <mask>",
                "query": "SELECT name , max( revenue ) , Headquarter FROM manufacturers GROUP BY Headquarter",
                "ted": 0.09090909090909091,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many dorms are there and what is the total capacity for each gender?",
                "masked_template": "How many <mask> are there and what is the total <mask> for each <mask>",
                "query": "SELECT count( * ) , sum( student_capacity ) , gender FROM dorm GROUP BY gender",
                "ted": 0.09090909090909091,
                "db_id": "dorm_1"
            }
        ],
        "best_hyp": "Find the average and maximum pet age for each pet type.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the average, maximum, and pet type for each pet type?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived , date_departed FROM Dogs",
        "proc_query": "( <col> date arrived </col> ) , ( <col> date departed </col> ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "When did the dogs depart and when did they depart?",
                1.757676362991333
            ],
            [
                "Show the arrival date and departure date of all dogs.",
                10.914836883544922
            ],
            [
                "Show the arrival date and departure date of all dogs.",
                10.914836883544922
            ],
            [
                "Tell me the arrival date and departure date of each dog.",
                10.896778106689453
            ],
            [
                "What are the dates of arrival and departure for all dogs?",
                10.73628044128418
            ],
            [
                "Return the arrival date and departure date for each dog.",
                10.683964729309082
            ],
            [
                "What are the arrival and departure dates of all dogs?",
                10.65045166015625
            ],
            [
                "What are the arrival and departure dates of all dogs?",
                10.65045166015625
            ],
            [
                "Show all the arrival and departure dates of dogs.",
                10.348334312438965
            ],
            [
                "What are the arrival and departure dates for each dog?",
                10.305196762084961
            ],
            [
                "What are the arrival and departure dates of the dogs?",
                9.885348320007324
            ],
            [
                "What are all the arrival and departure dates?",
                8.608508110046387
            ],
            [
                "What are the ids and dates of departure for each of the dogs?",
                2.6354153156280518
            ],
            [
                "What are the ids and dates of departure of all dogs?",
                2.0923306941986084
            ],
            [
                "Show the date arrived and departure for all dogs.",
                1.7170993089675903
            ],
            [
                "Show all date arrived and departure for all dogs.",
                -0.3153114914894104
            ],
            [
                "List all date arrived and departure dates for all dogs.",
                -0.4996057450771332
            ],
            [
                "Show all dates arrived and day departed.",
                -0.5815434455871582
            ],
            [
                "List all date arrived and departure for all dogs.",
                -0.8536057472229004
            ],
            [
                "What are all the dates arrived and day departed?",
                -1.2106529474258423
            ],
            [
                "Show all date arrived and departure count of dogs.",
                -3.1601927280426025
            ],
            [
                "For each dog, show the departure date and their departure date.",
                -6.264290809631348
            ],
            [
                "List the tax ids and their corresponding dates of departure of all the dogs.",
                -9.195411682128906
            ],
            [
                "What are the name and departure date of each dog?",
                -9.385114669799805
            ],
            [
                "What are the low and high dates of departure for all dogs?",
                -10.033624649047852
            ],
            [
                "Return the low and high dates for all dogs.",
                -10.039430618286133
            ],
            [
                "What are the names and dates of departure of all dogs?",
                -10.230306625366211
            ],
            [
                "What are the names and dates of departure for all dogs?",
                -10.291868209838867
            ],
            [
                "Return the lot number and departure date for all the dogs.",
                -10.382380485534668
            ],
            [
                "Show the ids and dates of all the dogs.",
                -11.036910057067871
            ],
            [
                "List the names and the dates that the dogs can leave an apartment.",
                -12.045587539672852
            ]
        ],
        "templates": [
            "",
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election",
                "query_toks": [
                    "select",
                    "delegate",
                    ",",
                    "committee",
                    "from",
                    "election"
                ],
                "query_toks_no_value": [
                    "select",
                    "delegate",
                    ",",
                    "committee",
                    "from",
                    "election"
                ]
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host",
                "query_toks": [
                    "select",
                    "party_theme",
                    ",",
                    "location",
                    "from",
                    "party"
                ],
                "query_toks_no_value": [
                    "select",
                    "party_theme",
                    ",",
                    "location",
                    "from",
                    "party"
                ]
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper",
                "query_toks": [
                    "select",
                    "author",
                    ",",
                    "college",
                    "from",
                    "submission"
                ],
                "query_toks_no_value": [
                    "select",
                    "author",
                    ",",
                    "college",
                    "from",
                    "submission"
                ]
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical",
                "query_toks": [
                    "select",
                    "character",
                    ",",
                    "duration",
                    "from",
                    "actor"
                ],
                "query_toks_no_value": [
                    "select",
                    "character",
                    ",",
                    "duration",
                    "from",
                    "actor"
                ]
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler",
                "query_toks": [
                    "select",
                    "reign",
                    ",",
                    "days_held",
                    "from",
                    "wrestler"
                ],
                "query_toks_no_value": [
                    "select",
                    "reign",
                    ",",
                    "days_held",
                    "from",
                    "wrestler"
                ]
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            }
        ],
        "best_hyp": "What are the ids and dates of departure for each of the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "When did the dogs depart and when did they depart?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "proc_query": "( <col> first name </col> ) that belongs to ( <tab> professionals </tab> ) and ( <col> first name </col> ) that belongs to ( <tab> owners </tab> ), and except that ( ( <col> name </col> ) that belongs to ( <tab> dogs </tab> ))",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the first names of the professionals and the dogs?",
                -12.057367324829102
            ]
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the first names of the professionals and the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of the professionals and the dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state = 'Alabama' OR state = 'Florida'",
        "proc_query": "( <col> email address </col> ) that belongs to ( <tab> professionals </tab> ) , that have ( ( ( <col> state </col> ) equal to ( <val> Alabama </val> ) ) or ( ( <col> state </col> ) equal to ( <val> Florida </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the email of the professionals who are from Alabama or Florida?",
                4.072268486022949
            ],
            [
                "List the email addresses of all the professionals from Alabama or Florida.",
                10.54667854309082
            ],
            [
                "Show the email addresses of the professionals living in state \"Alabama\" or \"Florida\".",
                10.353649139404297
            ],
            [
                "What are the email addresses of the professionals that are from Alabama or Florida?",
                9.767894744873047
            ],
            [
                "Find the email addresses of the professionals whose state name is Alabama or Florida.",
                9.494175910949707
            ],
            [
                "Show the email addresses of professionals in the state of Alabama or Florida.",
                9.446319580078125
            ],
            [
                "What are the emails of all professionals living in Alabama or Florida?",
                9.155351638793945
            ],
            [
                "What are the email addresses of the professionals from Alabama or Florida?",
                9.056950569152832
            ],
            [
                "What is the email address of the professionals from Alabama or Florida?",
                8.975293159484863
            ],
            [
                "What are the email addresses of professionals that are from Alabama or Florida?",
                8.963772773742676
            ],
            [
                "What are the email addresses of professionals that are from Alabama or Florida?",
                8.963772773742676
            ],
            [
                "Show the email addresses of professionals whose state is Alabama or Florida.",
                8.774956703186035
            ],
            [
                "Show the email addresses of professionals whose state is Alabama or Florida.",
                8.774956703186035
            ],
            [
                "Show the email addresses of professionals whose state is Alabama or Florida.",
                8.774956703186035
            ],
            [
                "Show the email addresses of the professionals from Alabama or Florida.",
                8.645626068115234
            ],
            [
                "What are the email addresses of professionals from Alabama or Florida?",
                8.293954849243164
            ],
            [
                "Find the email addresses of professionals whose state is Alabama or Florida.",
                8.226317405700684
            ],
            [
                "List the email addresses of professionals from Alabama or Florida.",
                8.13329792022705
            ],
            [
                "Show the email addresses of professionals from Alabama or Florida.",
                8.067036628723145
            ],
            [
                "Show the email addresses of professionals from Alabama or Florida.",
                8.067036628723145
            ],
            [
                "Show the email addresses of professionals from Alabama or Florida.",
                8.067036628723145
            ],
            [
                "Show the email addresses of professionals from Alabama or Florida.",
                8.067036628723145
            ],
            [
                "Find the email addresses of professionals whose states are Alabama or Florida.",
                7.918834686279297
            ],
            [
                "What are the emails of the professionals of the state with name Alabama or Florida?",
                7.549318790435791
            ],
            [
                "Show the email addresses of professionals whose state is Alabama or Florida",
                7.501391887664795
            ],
            [
                "What are the emails of professionals for any state in which the company was either owned by Alabama or Florida?",
                6.439542770385742
            ],
            [
                "Who are the professionals who worked for either the state of Alabama or Florida?",
                5.538917541503906
            ],
            [
                "Find the email of the professionals living in Alabama or Florida.",
                4.109936237335205
            ],
            [
                "Which professionals with address are from Alabama or Florida?",
                -4.153002738952637
            ],
            [
                "Tell me the names of professionals whose state is in Alabama or Florida.",
                -4.433808326721191
            ],
            [
                "What are the email addresses of the professionals that are from the US or the UK?",
                -11.945572853088379
            ]
        ],
        "templates": [
            "",
            {
                "question": "List the names of all the channels owned by either CCTV or HBS",
                "masked_template": "List the names of all the <mask> by <mask> or HBS",
                "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
                "ted": 0.0,
                "db_id": "program_share",
                "query_toks": [
                    "select",
                    "name",
                    "from",
                    "channel",
                    "where",
                    "owner",
                    "=",
                    "\"CCTV\"",
                    "or",
                    "owner",
                    "=",
                    "\"HBS\""
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    "from",
                    "channel",
                    "where",
                    "owner",
                    "=",
                    "value",
                    "or",
                    "owner",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
                "masked_template": "Show the <mask> of the <mask> at <mask> \"TD <mask> or <mask>",
                "query": "SELECT Attendance FROM performance WHERE LOCATION = 'TD Garden' OR LOCATION = 'Bell Centre'",
                "ted": 0.0,
                "db_id": "performance_attendance",
                "query_toks": [
                    "select",
                    "attendance",
                    "from",
                    "performance",
                    "where",
                    "location",
                    "=",
                    "\"TD Garden\"",
                    "or",
                    "location",
                    "=",
                    "\"Bell Centre\""
                ],
                "query_toks_no_value": [
                    "select",
                    "attendance",
                    "from",
                    "performance",
                    "where",
                    "location",
                    "=",
                    "value",
                    "or",
                    "location",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the names of the songs that are modern or sung in English?",
                "masked_template": "What are the names of the <mask> that are <mask> or <mask> in <mask>",
                "query": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1",
                "query_toks": [
                    "select",
                    "song_name",
                    "from",
                    "song",
                    "where",
                    "genre_is",
                    "=",
                    "\"modern\"",
                    "or",
                    "languages",
                    "=",
                    "\"english\""
                ],
                "query_toks_no_value": [
                    "select",
                    "song_name",
                    "from",
                    "song",
                    "where",
                    "genre_is",
                    "=",
                    "value",
                    "or",
                    "languages",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
                "masked_template": "Find the <mask> of the <mask> whose <mask> name is <mask> or <mask>",
                "query": "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'",
                "ted": 0.0,
                "db_id": "e_learning",
                "query_toks": [
                    "select",
                    "date_of_latest_logon",
                    "from",
                    "students",
                    "where",
                    "family_name",
                    "=",
                    "\"Jaskolski\"",
                    "or",
                    "family_name",
                    "=",
                    "\"Langosh\""
                ],
                "query_toks_no_value": [
                    "select",
                    "date_of_latest_logon",
                    "from",
                    "students",
                    "where",
                    "family_name",
                    "=",
                    "value",
                    "or",
                    "family_name",
                    "=",
                    "value"
                ]
            },
            {
                "question": "Show the names of companies in the banking or retailing industry?",
                "masked_template": "Show the names of <mask> in the <mask> or <mask>",
                "query": "SELECT Name FROM company WHERE Industry = 'Banking' OR Industry = 'Retailing'",
                "ted": 0.0,
                "db_id": "company_employee",
                "query_toks": [
                    "select",
                    "name",
                    "from",
                    "company",
                    "where",
                    "industry",
                    "=",
                    "\"Banking\"",
                    "or",
                    "industry",
                    "=",
                    "\"Retailing\""
                ],
                "query_toks_no_value": [
                    "select",
                    "name",
                    "from",
                    "company",
                    "where",
                    "industry",
                    "=",
                    "value",
                    "or",
                    "industry",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the names of all airports in Cuba or Argentina?",
                "masked_template": "What are the names of all <mask> in <mask> or <mask>",
                "query": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the names of the channels owned by CCTV or HBS?",
                "masked_template": "What are the names of the <mask> by <mask> or <mask>",
                "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
                "masked_template": "What is the <mask> of the <mask> named <mask> or <mask>",
                "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What are the names of circuits that belong to UK or Malaysia?",
                "masked_template": "What are the names of <mask> that <mask> to UK or <mask>",
                "query": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "What are the names of rooms that have either king or queen bed?",
                "masked_template": "What are the names of <mask> that have <mask> or <mask>",
                "query": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
                "masked_template": "Show the name of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
                "masked_template": "Show the names of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Name FROM member WHERE Country = 'United States' OR Country = 'Canada'",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
                "masked_template": "Show the names of <mask> of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Sponsor_name FROM player WHERE Residence = 'Brandon' OR Residence = 'Birtle'",
                "ted": 0.0,
                "db_id": "riding_club"
            },
            {
                "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
                "masked_template": "Show the <mask> of the <mask> named <mask> or <mask>",
                "query": "SELECT Product_Price FROM Products WHERE Product_Name = 'Dining' OR Product_Name = 'Trading Policy'",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "What are the life spans of representatives from New York state or Indiana state?",
                "masked_template": "What are the <mask> of <mask> New <mask> or <mask>",
                "query": "SELECT Lifespan FROM representative WHERE State = 'New York' OR State = 'Indiana'",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "Find the names of songs whose genre is modern or language is English.",
                "masked_template": "Find the names of <mask> whose <mask> is <mask> or <mask> is <mask>",
                "query": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "List the name of rooms with king or queen bed.",
                "masked_template": "List the name of <mask> with <mask> or <mask>",
                "query": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
                "masked_template": "Show the <mask> with <mask> or <mask>",
                "query": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
                "masked_template": "Show the <mask> of <mask> by <mask> or <mask>",
                "query": "SELECT TIME FROM elimination WHERE Eliminated_By = 'Punk' OR Eliminated_By = 'Orton'",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
                "masked_template": "Show the names of <mask> or <mask>",
                "query": "SELECT Pilot_name FROM pilot WHERE Team = 'Bradley' OR Team = 'Fordham'",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
                "masked_template": "Show the names of <mask> with <mask> or <mask>",
                "query": "SELECT Name FROM phone WHERE Carrier = 'Sprint' OR Carrier = 'TMobile'",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
                "masked_template": "Find the name of <mask> whose <mask> are <mask> or <mask>",
                "query": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
                "masked_template": "What are the <mask> of the <mask> of the <mask> with <mask> name <mask> or <mask>",
                "query": "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
                "masked_template": "Show the <mask> of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Price FROM publication WHERE Publisher = 'Person' OR Publisher = 'Wiley'",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
                "masked_template": "What are the <mask> of <mask> for any <mask> in which the <mask> was <mask> by <mask> or <mask>",
                "query": "SELECT TIME FROM elimination WHERE Eliminated_By = 'Punk' OR Eliminated_By = 'Orton'",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
                "masked_template": "Who are the <mask> who <mask> for <mask> of the Bob <mask> or <mask>",
                "query": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Find the name of the airports located in Cuba or Argentina.",
                "masked_template": "Find the name of the <mask> in <mask> or <mask>",
                "query": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
                "masked_template": "Which <mask> with <mask> are <mask> or <mask>",
                "query": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "Give me the names of members whose address is in Harford or Waterbury.",
                "masked_template": "<mask> me the names of <mask> whose <mask> is in <mask> or <mask>",
                "query": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
                "ted": 0.0,
                "db_id": "coffee_shop"
            },
            {
                "question": "What are the names of the ships  that are from either the US or the UK?",
                "masked_template": "What are the names of the <mask> that are <mask> the US or the UK?",
                "query": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'",
                "ted": 0.0,
                "db_id": "ship_mission"
            }
        ],
        "best_hyp": "What are the emails of the professionals of the state with name Alabama or Florida?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the email of the professionals who are from Alabama or Florida?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "proc_query": "( <col> role code </col> ) , ( <col> street </col> ) , ( <col> city </col> ) , ( <col> state </col> ) that belongs to ( <tab> professionals </tab> ) , that have ( ( <col> city </col> ) like ( <val> %West% </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What is the role code, street, city, and state of the professionals whose city name starts with the letter W?",
                2.2637338638305664
            ],
            [
                "What is the role code, street, and state for professionals living in the city of New York?",
                -11.29377555847168
            ],
            [
                "Find the role code, street, and state of the professionals living in the city of New York.",
                -11.460705757141113
            ]
        ],
        "templates": [
            "",
            {
                "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
                "masked_template": "What is the <mask> and <mask> for <mask> in the <mask> of New <mask>",
                "query": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            },
            {
                "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
                "masked_template": "Find the <mask> and <mask> (or <mask> of the <mask> in the <mask> of New <mask>",
                "query": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            }
        ],
        "best_hyp": "What is the role code, street, and state for professionals living in the city of New York?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the role code, street, city, and state of the professionals whose city name starts with the letter W?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( * ) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> professionals </tab> ) , that have ( ( <col> professional id </col> ) not in ( ( <col> professional id </col> ) that belongs to ( <tab> treatments </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "How many physicians do not have any treatments?",
                9.607397079467773
            ],
            [
                "Count the number of professionals that are not involved in any treatments.",
                10.966495513916016
            ],
            [
                "How many physicians are not involved in the treatments listed?",
                10.881535530090332
            ],
            [
                "Show the number of all professionals without any treatment.",
                10.8677978515625
            ],
            [
                "How many professionals are not involved in any treatments?",
                10.846322059631348
            ],
            [
                "How many professionals are not involved in any treatments?",
                10.846321105957031
            ],
            [
                "How many professionals are not involved in any treatments?",
                10.846321105957031
            ],
            [
                "Count the number of professionals who do not have any treatments.",
                10.730907440185547
            ],
            [
                "Count the number of professionals who did not participate in any treatments.",
                10.728428840637207
            ],
            [
                "Count the number of professionals without any treatments.",
                10.68375015258789
            ],
            [
                "Count the number of professionals that do not have any treatments.",
                10.65889835357666
            ],
            [
                "Count the number of professionals that do not have any treatments.",
                10.65889835357666
            ],
            [
                "How many physicians are not involved in any treatments?",
                10.549715995788574
            ],
            [
                "Find the number of professionals who are not involved in any treatments.",
                10.538033485412598
            ],
            [
                "List the number of professionals that did not have any treatments.",
                10.41135025024414
            ],
            [
                "How many professionals do not have any treatments?",
                10.205160140991211
            ],
            [
                "How many professionals do not have any treatments?",
                10.205160140991211
            ],
            [
                "How many professionals do not have any treatments?",
                10.205160140991211
            ],
            [
                "Count the number of professionals who did not provide any treatments.",
                10.176837921142578
            ],
            [
                "How many professionals that do not have any treatments?",
                10.0662841796875
            ],
            [
                "How many professionals did not have any treatments?",
                9.709554672241211
            ],
            [
                "How many physicians do not have any treatments?",
                9.607398986816406
            ],
            [
                "Find the number of professionals who did not provide any treatments.",
                9.575883865356445
            ],
            [
                "Find the number of professionals that did not provide any treatments.",
                9.542719841003418
            ],
            [
                "What is the count of professionals without any treatments?",
                9.40239143371582
            ],
            [
                "How many professionals did not provide any treatments?",
                9.218741416931152
            ],
            [
                "How many physicians are not involved in treatments?",
                9.164281845092773
            ],
            [
                "How many professionals have no treatments?",
                8.257660865783691
            ],
            [
                "Count the number of professionals who have not provided an treatment.",
                7.866554260253906
            ],
            [
                "How many treatments are led by professionals who are not using treatments?",
                5.490600109100342
            ],
            [
                "How many physicians do not have an ids in our records?",
                -5.225779056549072
            ]
        ],
        "templates": [
            "",
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.0,
                "db_id": "products_gen_characteristics",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "ref_colors",
                    "where",
                    "color_code",
                    "not",
                    "in",
                    "(",
                    "select",
                    "color_code",
                    "from",
                    "products",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "ref_colors",
                    "where",
                    "color_code",
                    "not",
                    "in",
                    "(",
                    "select",
                    "color_code",
                    "from",
                    "products",
                    ")"
                ]
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.0,
                "db_id": "browser_web",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "web_client_accelerator",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "accelerator_id",
                    "from",
                    "accelerator_compatible_browser",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "web_client_accelerator",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "accelerator_id",
                    "from",
                    "accelerator_compatible_browser",
                    ")"
                ]
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "customers",
                    "where",
                    "customer_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "customer_id",
                    "from",
                    "accounts",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "customers",
                    "where",
                    "customer_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "customer_id",
                    "from",
                    "accounts",
                    ")"
                ]
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.0,
                "db_id": "mountain_photos",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "camera_lens",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "camera_lens_id",
                    "from",
                    "photos",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "camera_lens",
                    "where",
                    "id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "camera_lens_id",
                    "from",
                    "photos",
                    ")"
                ]
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "customers",
                    "where",
                    "customer_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "customer_id",
                    "from",
                    "accounts",
                    ")"
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "customers",
                    "where",
                    "customer_id",
                    "not",
                    "in",
                    "(",
                    "select",
                    "customer_id",
                    "from",
                    "accounts",
                    ")"
                ]
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many games are free of injury accidents?",
                "masked_template": "How many <mask> are <mask> of <mask>",
                "query": "SELECT count( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "How many documents do not have any expense?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "How many students did not have any course enrollment?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many persons are not body builders?",
                "masked_template": "How many <mask> are not <mask>",
                "query": "SELECT count( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder )",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "How many customers have no payment histories?",
                "masked_template": "How many <mask> have no <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "masked_template": "How many <mask> are led by <mask> who are not <mask>",
                "query": "SELECT count( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.0,
                "db_id": "protein_institute"
            }
        ],
        "best_hyp": "Count the number of professionals that are not involved in any treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many physicians do not have any treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> student </tab> ) ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ) or ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            [
                "What are the first names of all the students who have a cat or a dog?",
                10.688047409057617
            ],
            [
                "What are the first names of all the students who have a cat or a dog?",
                10.6880464553833
            ],
            [
                "What are the first names of all the students who have a cat or a dog?",
                10.6880464553833
            ],
            [
                "What are the first names of all students who have a cat or a dog?",
                10.268314361572266
            ],
            [
                "What are the first names of all students who have a cat or a dog?",
                10.268314361572266
            ],
            [
                "What are the first names of all students who have a cat or a dog?",
                10.268314361572266
            ],
            [
                "Which students have either cat or dog as their pet type? Give me their first names.",
                10.230712890625
            ],
            [
                "What are the names of all students that have cat or dog as their pet type?",
                10.060882568359375
            ],
            [
                "What are the names of all students that belong to the cat type and whose pet type is dog?",
                9.919730186462402
            ],
            [
                "What are the names of the students that have either cat or dog as a pet?",
                9.766082763671875
            ],
            [
                "Find the first names of the students who have a cat or a dog.",
                9.52131462097168
            ],
            [
                "What is the first name of the student who has a cat or a dog?",
                9.52027416229248
            ],
            [
                "What is the first name of the student who has a cat or a dog?",
                9.52027416229248
            ],
            [
                "Find the first names of the students who have either cat or dog.",
                9.300695419311523
            ],
            [
                "What is the first name of the students whose pet type is cat or dog?",
                8.931514739990234
            ],
            [
                "List the name of students who have cat or dog as their pet type.",
                8.860486030578613
            ],
            [
                "Find the first names of the students who are either cat or dog.",
                8.838014602661133
            ],
            [
                "Find the first names of the students that are either cat or dog.",
                8.821128845214844
            ],
            [
                "Find the first names of students who are either cat or dog.",
                8.15848159790039
            ],
            [
                "Find the students who have either cat or dog as their pet type.",
                7.579830646514893
            ],
            [
                "Which students are either cat or dog? Tell me their first names.",
                7.498769760131836
            ],
            [
                "Which students are either cat or dog? Tell me their first names.",
                7.498769760131836
            ],
            [
                "Which students have either cat or dog as their pet type?",
                7.476322174072266
            ],
            [
                "Find the names of students who have either a cat or the dog as a pet type.",
                5.175220012664795
            ],
            [
                "What is the total first names for students that are either cat or dog?",
                4.834561824798584
            ],
            [
                "Which students have either the pet named a cat or a dog? Tell me the student first names.",
                4.48178243637085
            ],
            [
                "List the first names of students having cat as a pet.",
                -7.597131252288818
            ],
            [
                "Which students have cat as an pet?",
                -8.06453800201416
            ],
            [
                "Count the number of students for which the pet type is a cat or dog.",
                -9.454612731933594
            ],
            [
                "Which student is the pet type student belongs to? Tell me the name of the student.",
                -9.925788879394531
            ],
            [
                "Find the number of students whose pet type is a cat or a dog.",
                -10.3182954788208
            ]
        ],
        "templates": [
            "",
            {
                "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
                "masked_template": "Which <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Katsuhiro' AND T1.lname = 'Ueno'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1",
                "query_toks": [
                    "select",
                    "distinct",
                    "t3.name",
                    "from",
                    "authors",
                    "as",
                    "t1",
                    "join",
                    "authorship",
                    "as",
                    "t2",
                    "on",
                    "t1.authid",
                    "=",
                    "t2.authid",
                    "join",
                    "inst",
                    "as",
                    "t3",
                    "on",
                    "t2.instid",
                    "=",
                    "t3.instid",
                    "where",
                    "t1.fname",
                    "=",
                    "\"Katsuhiro\"",
                    "and",
                    "t1.lname",
                    "=",
                    "\"Ueno\""
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "t3.name",
                    "from",
                    "authors",
                    "as",
                    "t1",
                    "join",
                    "authorship",
                    "as",
                    "t2",
                    "on",
                    "t1.authid",
                    "=",
                    "t2.authid",
                    "join",
                    "inst",
                    "as",
                    "t3",
                    "on",
                    "t2.instid",
                    "=",
                    "t3.instid",
                    "where",
                    "t1.fname",
                    "=",
                    "value",
                    "and",
                    "t1.lname",
                    "=",
                    "value"
                ]
            },
            {
                "question": "How many clubs does the student named \"Eric Tai\" belong to?",
                "masked_template": "How many <mask> the <mask> named <mask> to?",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.05555555555555555,
                "db_id": "club_1"
            },
            {
                "question": "How many clubs does \"Linda Smith\" belong to?",
                "masked_template": "How many <mask> to?",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.057692307692307696,
                "db_id": "club_1",
                "query_toks": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "club",
                    "as",
                    "t1",
                    "join",
                    "member_of_club",
                    "as",
                    "t2",
                    "on",
                    "t1.clubid",
                    "=",
                    "t2.clubid",
                    "join",
                    "student",
                    "as",
                    "t3",
                    "on",
                    "t2.stuid",
                    "=",
                    "t3.stuid",
                    "where",
                    "t3.fname",
                    "=",
                    "\"Linda\"",
                    "and",
                    "t3.lname",
                    "=",
                    "\"Smith\""
                ],
                "query_toks_no_value": [
                    "select",
                    "count",
                    "(",
                    "*",
                    ")",
                    "from",
                    "club",
                    "as",
                    "t1",
                    "join",
                    "member_of_club",
                    "as",
                    "t2",
                    "on",
                    "t1.clubid",
                    "=",
                    "t2.clubid",
                    "join",
                    "student",
                    "as",
                    "t3",
                    "on",
                    "t2.stuid",
                    "=",
                    "t3.stuid",
                    "where",
                    "t3.fname",
                    "=",
                    "value",
                    "and",
                    "t3.lname",
                    "=",
                    "value"
                ]
            },
            {
                "question": "How many clubs does \"Linda Smith\" have membership for?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "How many female students live in Smith Hall?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
                "ted": 0.057692307692307696,
                "db_id": "dorm_1"
            },
            {
                "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
                "masked_template": "Which <mask> did the <mask> me the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1",
                "query_toks": [
                    "select",
                    "t3.title",
                    "from",
                    "authors",
                    "as",
                    "t1",
                    "join",
                    "authorship",
                    "as",
                    "t2",
                    "on",
                    "t1.authid",
                    "=",
                    "t2.authid",
                    "join",
                    "papers",
                    "as",
                    "t3",
                    "on",
                    "t2.paperid",
                    "=",
                    "t3.paperid",
                    "where",
                    "t1.fname",
                    "=",
                    "\"Olin\"",
                    "and",
                    "t1.lname",
                    "=",
                    "\"Shivers\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t3.title",
                    "from",
                    "authors",
                    "as",
                    "t1",
                    "join",
                    "authorship",
                    "as",
                    "t2",
                    "on",
                    "t1.authid",
                    "=",
                    "t2.authid",
                    "join",
                    "papers",
                    "as",
                    "t3",
                    "on",
                    "t2.paperid",
                    "=",
                    "t3.paperid",
                    "where",
                    "t1.fname",
                    "=",
                    "value",
                    "and",
                    "t1.lname",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
                "masked_template": "What are the names of all <mask> that <mask> or <mask> by <mask>",
                "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
                "ted": 0.057692307692307696,
                "db_id": "movie_1",
                "query_toks": [
                    "select",
                    "distinct",
                    "t2.title",
                    "from",
                    "rating",
                    "as",
                    "t1",
                    "join",
                    "movie",
                    "as",
                    "t2",
                    "on",
                    "t1.mid",
                    "=",
                    "t2.mid",
                    "join",
                    "reviewer",
                    "as",
                    "t3",
                    "on",
                    "t1.rid",
                    "=",
                    "t3.rid",
                    "where",
                    "t3.name",
                    "=",
                    "\"Brittany Harris\"",
                    "or",
                    "t2.year",
                    ">",
                    "2000"
                ],
                "query_toks_no_value": [
                    "select",
                    "distinct",
                    "t2.title",
                    "from",
                    "rating",
                    "as",
                    "t1",
                    "join",
                    "movie",
                    "as",
                    "t2",
                    "on",
                    "t1.mid",
                    "=",
                    "t2.mid",
                    "join",
                    "reviewer",
                    "as",
                    "t3",
                    "on",
                    "t1.rid",
                    "=",
                    "t3.rid",
                    "where",
                    "t3.name",
                    "=",
                    "value",
                    "or",
                    "t2.year",
                    ">",
                    "value"
                ]
            },
            {
                "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
                "masked_template": "What are the names of all <mask> that <mask> to the <mask> and whose <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.038461538461538464,
                "db_id": "store_1",
                "query_toks": [
                    "select",
                    "t2.name",
                    "from",
                    "genres",
                    "as",
                    "t1",
                    "join",
                    "tracks",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.genre_id",
                    "join",
                    "media_types",
                    "as",
                    "t3",
                    "on",
                    "t3.id",
                    "=",
                    "t2.media_type_id",
                    "where",
                    "t1.name",
                    "=",
                    "\"Rock\"",
                    "or",
                    "t3.name",
                    "=",
                    "\"MPEG audio file\""
                ],
                "query_toks_no_value": [
                    "select",
                    "t2.name",
                    "from",
                    "genres",
                    "as",
                    "t1",
                    "join",
                    "tracks",
                    "as",
                    "t2",
                    "on",
                    "t1.id",
                    "=",
                    "t2.genre_id",
                    "join",
                    "media_types",
                    "as",
                    "t3",
                    "on",
                    "t3.id",
                    "=",
                    "t2.media_type_id",
                    "where",
                    "t1.name",
                    "=",
                    "value",
                    "or",
                    "t3.name",
                    "=",
                    "value"
                ]
            },
            {
                "question": "What are the names of the clubs that have \"Davis Steven\" as a member?",
                "masked_template": "What are the names of the <mask> that have <mask> as a <mask>",
                "query": "SELECT DISTINCT T1.clubname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Davis' AND T3.lname = 'Steven'",
                "ted": 0.019230769230769232,
                "db_id": "club_1"
            },
            {
                "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
                "masked_template": "Find the <mask> of the <mask> Cup <mask> which was <mask> by <mask> ( <mask> )\".",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.057692307692307696,
                "db_id": "city_record"
            },
            {
                "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
                "masked_template": "What is the name of the <mask> that <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
                "masked_template": "What is the name of the <mask> the <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Katsuhiro' AND T1.lname = 'Ueno'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
                "masked_template": "Find the <mask> of the <mask> the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
                "masked_template": "What is the number of <mask> by the <mask> whose <mask> are in <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
                "ted": 0.057692307692307696,
                "db_id": "flight_4"
            },
            {
                "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> or <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.038461538461538464,
                "db_id": "store_1"
            },
            {
                "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
                "masked_template": "Find the <mask> names of the <mask> who are <mask> or <mask>",
                "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
                "masked_template": "Find the total <mask> of the <mask> that <mask> named <mask> or <mask> are <mask> to.",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
                "masked_template": "Find the name of <mask> who are <mask> with <mask> or <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
                "ted": 0.038461538461538464,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the papers which have \"Olin Shivers\" as an author.",
                "masked_template": "Find the <mask> which have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
                "masked_template": "Which <mask> are <mask> with <mask> or <mask> me their <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
                "ted": 0.038461538461538464,
                "db_id": "hospital_1"
            },
            {
                "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
                "masked_template": "Which <mask> are <mask> or <mask> me their <mask>",
                "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.057692307692307696,
                "db_id": "music_2"
            },
            {
                "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
                "masked_template": "Find the names of <mask> who have <mask> the <mask> a <mask> or the <mask> a <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' OR T3.service_name = 'Upgrade a policy'",
                "ted": 0.038461538461538464,
                "db_id": "insurance_fnol"
            },
            {
                "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
                "masked_template": "What is the sum of <mask> for <mask> that <mask> with the name <mask> or <mask> are <mask> to?",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
                "masked_template": "Which <mask> have <mask> the <mask> named <mask> a <mask> or <mask> a <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' OR T3.service_name = 'Upgrade a policy'",
                "ted": 0.038461538461538464,
                "db_id": "insurance_fnol"
            },
            {
                "question": "List the clubs having \"Davis Steven\" as a member.",
                "masked_template": "List the <mask> having <mask> as a <mask>",
                "query": "SELECT DISTINCT T1.clubname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Davis' AND T3.lname = 'Steven'",
                "ted": 0.019230769230769232,
                "db_id": "club_1"
            },
            {
                "question": "Which papers have \"Stephanie Weirich\" as an author?",
                "masked_template": "Which <mask> have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
                "masked_template": "Count the number of <mask> for which the <mask> named <mask> is a <mask>",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.05555555555555555,
                "db_id": "club_1"
            },
            {
                "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
                "masked_template": "Which <mask> is the <mask> to? <mask> me the name of the <mask>",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
                "masked_template": "Find the number of <mask> is a <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Tracy' AND T3.lname = 'Kim'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            }
        ],
        "best_hyp": "Find the first names of the students who are either cat or dog.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of all the students who have a cat or a dog?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    }
]