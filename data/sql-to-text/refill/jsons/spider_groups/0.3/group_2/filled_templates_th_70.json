[
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count( * ) ASC LIMIT 1 )",
        "proc_query": "( <col> name </col> of <tab> dogs </tab> ) , ( <col> date of treatment </col> of <tab> treatments </tab> ) that belongs to ( ( <tab> dogs </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> dog id </col> of <tab> dogs </tab> ) equal to ( <col> dog id </col> of <tab> treatments </tab> ) ) ) ) , that have ( ( <col> breed code </col> of <tab> dogs </tab> ) equal to ( <col> breed code </col> ) that belongs to ( <tab> dogs </tab> ) , grouped by ( <col> breed code </col> ) , ordered by ( ( the number of ( all items ) ) in ascending order ) , limited to the top ( <val> 1 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name and date of treatment for the dog with the most treatments?",
            "Find the name of the dog with the most treatments.",
            "Find the names of the dogs with the treatment that have the most number of treatments.",
            "What are the names of the dogs with the most treatments by most common breed?",
            "What are the names and dates of treatments for the dogs that is the most common breed among treatments?"
        ],
        "templates": [
            "",
            {
                "question": "Find the emails of parties with the most popular party form.",
                "masked_template": "Find the <mask> of <mask> with the most <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_forms AS T2 ON T1.party_id = T2.party_id WHERE T2.form_id = ( SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count( * ) DESC LIMIT 1 )",
                "ted": 0.1,
                "db_id": "e_government"
            },
            {
                "question": "Find the entry names of the catalog with the attribute that have the most entries.",
                "masked_template": "Find the <mask> names of the <mask> with the <mask> that have the most <mask>",
                "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id WHERE T2.attribute_value = ( SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count( * ) DESC LIMIT 1 )",
                "ted": 0.1,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the entry names of catalog with the attribute possessed by most entries.",
                "masked_template": "What are the <mask> names of <mask> with the <mask> by most <mask>",
                "query": "SELECT T1.catalog_entry_name FROM Catalog_Contents AS T1 JOIN Catalog_Contents_Additional_Attributes AS T2 ON T1.catalog_entry_id = T2.catalog_entry_id WHERE T2.attribute_value = ( SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count( * ) DESC LIMIT 1 )",
                "ted": 0.1,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the party emails associated with parties that used the party form that is the most common?",
                "masked_template": "What are the <mask> with <mask> that <mask> the <mask> that is the most <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_forms AS T2 ON T1.party_id = T2.party_id WHERE T2.form_id = ( SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count( * ) DESC LIMIT 1 )",
                "ted": 0.1,
                "db_id": "e_government"
            }
        ],
        "best_hyp": "Find the name of the dog with the most treatments.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name and date of treatment for the dog with the most treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT max( age ) FROM Dogs",
        "proc_query": "( the maximum of ( <col> age </col> ) ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the maximum age of all dogs?",
            "Find the maximum age of all the dogs.",
            "What is the maximum age in Man of the dogs?",
            "What is the maximum age in the dogs?",
            "When is the last day any dog was in?",
            "In which age did the most dogs grow?",
            "Return the maximum age across all dogs.",
            "Show the maximum age of dogs.",
            "What is maximum age of the dogs?",
            "What is the maximum age across all dogs?",
            "What is the oldest age of the dogs?"
        ],
        "templates": [
            "",
            {
                "question": "Find the maximum age of all the students.",
                "masked_template": "Find the maximum age of all the <mask>",
                "query": "SELECT max( Age ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            },
            {
                "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
                "masked_template": "What is the maximum <mask> in Man <mask> of the <mask>",
                "query": "SELECT max( OMIM ) FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the maximum OMIM value in the database?",
                "masked_template": "What is the maximum <mask> in the <mask>",
                "query": "SELECT max( OMIM ) FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "When is the last day any resident moved in?",
                "masked_template": "<mask> is the <mask> day any <mask> in?",
                "query": "SELECT max( date_moved_in ) FROM Residents",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "In which year did the most recent crime happen?",
                "masked_template": "In which <mask> did the most <mask>",
                "query": "SELECT max( YEAR ) FROM perpetrator",
                "ted": 0.0,
                "db_id": "perpetrator"
            },
            {
                "question": "Return the maximum enrollment across all schools.",
                "masked_template": "Return the maximum <mask> all <mask>",
                "query": "SELECT max( Enrollment ) FROM university",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "Show the maximum amount of transaction.",
                "masked_template": "Show the maximum <mask> of <mask>",
                "query": "SELECT max( amount_of_transaction ) FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What is maximum group equity shareholding of the companies?",
                "masked_template": "What is maximum <mask> of the <mask>",
                "query": "SELECT max( group_equity_shareholding ) FROM operate_company",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What is the maximum enrollment across all schools?",
                "masked_template": "What is the maximum <mask> all <mask>",
                "query": "SELECT max( Enrollment ) FROM university",
                "ted": 0.0,
                "db_id": "university_basketball"
            },
            {
                "question": "What is the oldest age among the students?",
                "masked_template": "What is the <mask> age <mask> the <mask>",
                "query": "SELECT max( Age ) FROM STUDENT",
                "ted": 0.0,
                "db_id": "voter_2"
            }
        ],
        "best_hyp": "Find the maximum age of all the dogs.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the maximum age of all dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT email_address FROM Professionals WHERE state = 'Utah' OR state = 'Indiana'",
        "proc_query": "( <col> email address </col> ) that belongs to ( <tab> professionals </tab> ) , that have ( ( ( <col> state </col> ) equal to ( <val> Utah </val> ) ) or ( ( <col> state </col> ) equal to ( <val> Indiana </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the email of the professionals from Utah or Indiana?",
            "Show the email addresses of professionals whose state is Utah or Indiana.",
            "Show the email addresses of professionals from Utah or Indiana.",
            "What are the email addresses of the professionals that are from Utah or Indiana?",
            "Tell me the names of professionals whose state is Utah or Indiana.",
            "Find the email addresses of professionals whose state is Utah or Indiana.",
            "Show the email addresses of the professionals from Utah or Indiana.",
            "What are the email addresses of the professionals that are from Utah or Indiana?",
            "What are the email addresses of professionals from Utah or Indiana?",
            "Find the email of the professionals living in Utah or Indiana.",
            "What are the email addresses of all professionals living in Utah or Indiana?",
            "Show the email addresses of professionals from Utah or Indiana.",
            "What are the email addresses of the professionals from Utah or Indiana?",
            "List the email addresses of all the professionals from Utah or Indiana.",
            "Show the email addresses of professionals from Utah or Indiana.",
            "Show the email addresses of professionals whose state is Utah or Indiana",
            "What are the email addresses of the professionals from Utah or Indiana?",
            "Show the email addresses of professionals whose state is Utah or Indiana",
            "Find the email address of the professionals whose state name is Utah or Indiana",
            "Show the email addresses of the professionals living at state \"Utah\" or Indiana",
            "List the email addresses of professionals from Utah or Indiana.",
            "Who are the professionals who work for either Utah or Indiana?",
            "What is the email address of the professionals from Utah or Indiana?",
            "What are the emails of professionals that live in Utah or Indiana?",
            "Which professionals live in Utah or Indiana?",
            "What are the emails of professionals for any state in which the company was either headquartered in Utah or Indiana?",
            "Show the email addresses of professionals whose state is Utah or Indiana.",
            "Show the email addresses of professionals from Utah or Indiana.",
            "What are the email addresses of professionals from Utah or Indiana?",
            "Show the email addresses of professionals living in Utah or Indiana.",
            "Find the email addresses of professionals whose states are Utah or Indiana."
        ],
        "templates": [
            "",
            {
                "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
                "masked_template": "Show the name of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
                "masked_template": "Show the <mask> with <mask> or <mask>",
                "query": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "What are the names of the songs that are modern or sung in English?",
                "masked_template": "What are the names of the <mask> that are <mask> or <mask> in <mask>",
                "query": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "Give me the names of members whose address is in Harford or Waterbury.",
                "masked_template": "<mask> me the names of <mask> whose <mask> is in <mask> or <mask>",
                "query": "SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury'",
                "ted": 0.0,
                "db_id": "coffee_shop"
            },
            {
                "question": "Find the names of songs whose genre is modern or language is English.",
                "masked_template": "Find the names of <mask> whose <mask> is <mask> or <mask> is <mask>",
                "query": "SELECT song_name FROM song WHERE genre_is = 'modern' OR languages = 'english'",
                "ted": 0.0,
                "db_id": "music_1"
            },
            {
                "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
                "masked_template": "Show the <mask> of the <mask> named <mask> or <mask>",
                "query": "SELECT Product_Price FROM Products WHERE Product_Name = 'Dining' OR Product_Name = 'Trading Policy'",
                "ted": 0.0,
                "db_id": "solvency_ii"
            },
            {
                "question": "What are the names of the ships  that are from either the US or the UK?",
                "masked_template": "What are the names of the <mask> that are <mask> the US or the UK?",
                "query": "SELECT Name FROM ship WHERE Nationality = 'United States' OR Nationality = 'United Kingdom'",
                "ted": 0.0,
                "db_id": "ship_mission"
            },
            {
                "question": "What are the life spans of representatives from New York state or Indiana state?",
                "masked_template": "What are the <mask> of <mask> New <mask> or <mask>",
                "query": "SELECT Lifespan FROM representative WHERE State = 'New York' OR State = 'Indiana'",
                "ted": 0.0,
                "db_id": "election_representative"
            },
            {
                "question": "Find the name of the airports located in Cuba or Argentina.",
                "masked_template": "Find the name of the <mask> in <mask> or <mask>",
                "query": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the names of all airports in Cuba or Argentina?",
                "masked_template": "What are the names of all <mask> in <mask> or <mask>",
                "query": "SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina'",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
                "masked_template": "Show the names of <mask> or <mask>",
                "query": "SELECT Pilot_name FROM pilot WHERE Team = 'Bradley' OR Team = 'Fordham'",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "What are the names of the channels owned by CCTV or HBS?",
                "masked_template": "What are the names of the <mask> by <mask> or <mask>",
                "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "List the names of all the channels owned by either CCTV or HBS",
                "masked_template": "List the names of all the <mask> by <mask> or HBS",
                "query": "SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS'",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
                "masked_template": "Show the names of <mask> with <mask> or <mask>",
                "query": "SELECT Name FROM phone WHERE Carrier = 'Sprint' OR Carrier = 'TMobile'",
                "ted": 0.0,
                "db_id": "phone_market"
            },
            {
                "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
                "masked_template": "Show the names of <mask> of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Sponsor_name FROM player WHERE Residence = 'Brandon' OR Residence = 'Birtle'",
                "ted": 0.0,
                "db_id": "riding_club"
            },
            {
                "question": "What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?",
                "masked_template": "What are the <mask> of the <mask> of the <mask> with <mask> name <mask> or <mask>",
                "query": "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"",
                "masked_template": "Show the <mask> of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Price FROM publication WHERE Publisher = 'Person' OR Publisher = 'Wiley'",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".",
                "masked_template": "Find the <mask> of the <mask> whose <mask> name is <mask> or <mask>",
                "query": "SELECT date_of_latest_logon FROM Students WHERE family_name = 'Jaskolski' OR family_name = 'Langosh'",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
                "masked_template": "Show the <mask> of the <mask> at <mask> \"TD <mask> or <mask>",
                "query": "SELECT Attendance FROM performance WHERE LOCATION = 'TD Garden' OR LOCATION = 'Bell Centre'",
                "ted": 0.0,
                "db_id": "performance_attendance"
            },
            {
                "question": "List the name of rooms with king or queen bed.",
                "masked_template": "List the name of <mask> with <mask> or <mask>",
                "query": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
                "masked_template": "Who are the <mask> who <mask> for <mask> of the Bob <mask> or <mask>",
                "query": "SELECT Nominee FROM musical WHERE Award = 'Tony Award' OR Award = 'Cleavant Derricks'",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
                "masked_template": "What is the <mask> of the <mask> named <mask> or <mask>",
                "query": "SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge'",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What are the names of rooms that have either king or queen bed?",
                "masked_template": "What are the names of <mask> that have <mask> or <mask>",
                "query": "SELECT roomName FROM Rooms WHERE bedType = 'King' OR bedType = 'Queen'",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
                "masked_template": "Which <mask> with <mask> are <mask> or <mask>",
                "query": "SELECT Author FROM submission WHERE College = 'Florida' OR College = 'Temple'",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
                "masked_template": "What are the <mask> of <mask> for any <mask> in which the <mask> was <mask> by <mask> or <mask>",
                "query": "SELECT TIME FROM elimination WHERE Eliminated_By = 'Punk' OR Eliminated_By = 'Orton'",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
                "masked_template": "Show the names of <mask> whose <mask> is <mask> or <mask>",
                "query": "SELECT Name FROM member WHERE Country = 'United States' OR Country = 'Canada'",
                "ted": 0.0,
                "db_id": "decoration_competition"
            },
            {
                "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
                "masked_template": "Show the <mask> of <mask> by <mask> or <mask>",
                "query": "SELECT TIME FROM elimination WHERE Eliminated_By = 'Punk' OR Eliminated_By = 'Orton'",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are the names of circuits that belong to UK or Malaysia?",
                "masked_template": "What are the names of <mask> that <mask> to UK or <mask>",
                "query": "SELECT name FROM circuits WHERE country = 'UK' OR country = 'Malaysia'",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "Show the names of companies in the banking or retailing industry?",
                "masked_template": "Show the names of <mask> in the <mask> or <mask>",
                "query": "SELECT Name FROM company WHERE Industry = 'Banking' OR Industry = 'Retailing'",
                "ted": 0.0,
                "db_id": "company_employee"
            },
            {
                "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.",
                "masked_template": "Find the name of <mask> whose <mask> are <mask> or <mask>",
                "query": "SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant'",
                "ted": 0.0,
                "db_id": "ship_1"
            }
        ],
        "best_hyp": "Find the email addresses of professionals whose state is Utah or Indiana.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the email of the professionals from Utah or Indiana?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT date_arrived , date_departed FROM Dogs",
        "proc_query": "( <col> date arrived </col> ) , ( <col> date departed </col> ) that belongs to ( <tab> dogs </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "When did the dogs depart and when did they depart?",
            "List all date arrived and departure dates for all dogs.",
            "Show the arrival date and departure date of all dogs.",
            "What are the arrival and departure dates for each dog?",
            "Show all dates arrived and day departed.",
            "What are all the dates arrived and day departed?",
            "Show the ids and dates of all the dogs.",
            "What are the arrival and departure dates of all dogs?",
            "What are all the arrival and departure dates?",
            "What are the ids and dates of departure of all dogs?",
            "What are the arrival and departure dates of the dogs?",
            "What are the arrival and departure dates of all dogs?",
            "Show all date arrived and departure count of dogs.",
            "What are the names and dates of departure of all dogs?",
            "Show the date arrived and departure for all dogs.",
            "What are the ids and dates of departure for each of the dogs?",
            "List all date arrived and departure for all dogs.",
            "What are the name and departure date of each dog?",
            "Show the arrival date and departure date of all dogs.",
            "Show all the arrival and departure dates of dogs.",
            "What are the dates of arrival and departure for all dogs?",
            "List the names and the dates that the dogs can leave an apartment.",
            "For each dog, show the departure date and their departure date.",
            "List the tax ids and their corresponding dates of departure of all the dogs.",
            "Tell me the arrival date and departure date of each dog.",
            "What are the low and high dates of departure for all dogs?",
            "Return the low and high dates for all dogs.",
            "Show all date arrived and departure for all dogs.",
            "Return the arrival date and departure date for each dog.",
            "Return the lot number and departure date for all the dogs.",
            "What are the names and dates of departure for all dogs?"
        ],
        "templates": [
            "",
            {
                "question": "List all document type codes and document type names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the delegate and committee information of elections.",
                "masked_template": "Show the <mask> and <mask> of <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the delegate and committee information for each election record?",
                "masked_template": "What are the <mask> and <mask> for each <mask>",
                "query": "SELECT Delegate , Committee FROM election",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all calendar dates and day Numbers.",
                "masked_template": "Show all <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are all the calendar dates and day Numbers?",
                "masked_template": "What are all the <mask> and day <mask>",
                "query": "SELECT calendar_date , day_Number FROM Ref_calendar",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids and names of all documents.",
                "masked_template": "Show the ids and names of all <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the reigns and days held of all wrestlers?",
                "masked_template": "What are the <mask> and <mask> of all <mask>",
                "query": "SELECT Reign , Days_held FROM wrestler",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "What are all the document type codes and document type names?",
                "masked_template": "What are all the <mask> and <mask>",
                "query": "SELECT document_type_code , document_type_name FROM Ref_document_types",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids and details of all statements?",
                "masked_template": "What are the ids and <mask> of all <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the title and issues of the books?",
                "masked_template": "What are the <mask> and <mask> of the <mask>",
                "query": "SELECT Title , Issues FROM book",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What are the nationalities and ages of journalists?",
                "masked_template": "What are the <mask> and <mask> of <mask>",
                "query": "SELECT Nationality , Age FROM journalist",
                "ted": 0.0,
                "db_id": "news_report"
            },
            {
                "question": "Show all date and share count of transactions.",
                "masked_template": "Show all <mask> and <mask> count of <mask>",
                "query": "SELECT date_of_transaction , share_count FROM TRANSACTIONS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and locations of all tracks?",
                "masked_template": "What are the names and <mask> of all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "Show the name and location for all tracks.",
                "masked_template": "Show the name and <mask> for all <mask>",
                "query": "SELECT name , LOCATION FROM track",
                "ted": 0.0,
                "db_id": "race_track"
            },
            {
                "question": "What are the ids and names for each of the documents?",
                "masked_template": "What are the ids and names for each of the <mask>",
                "query": "SELECT document_id , document_name FROM Documents",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "List all statement ids and statement details.",
                "masked_template": "List all <mask> ids and <mask>",
                "query": "SELECT STATEMENT_ID , statement_details FROM Statements",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "What are the name and population of each county?",
                "masked_template": "What are the name and <mask> of each <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show the county name and population of all counties.",
                "masked_template": "Show the <mask> name and <mask> of all <mask>",
                "query": "SELECT County_name , Population FROM county",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
                "masked_template": "Show all the <mask> and <mask> of <mask>",
                "query": "SELECT Planned_Delivery_Date , Actual_Delivery_Date FROM BOOKINGS",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the authors of submissions and their colleges?",
                "masked_template": "What are the <mask> of <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the names and the locations that the enzymes can make an effect.",
                "masked_template": "List the names and the <mask> that the <mask> can <mask> an <mask>",
                "query": "SELECT name , LOCATION FROM enzyme",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For each submission, show the author and their affiliated college.",
                "masked_template": "For each <mask> show the <mask> and their <mask>",
                "query": "SELECT Author , College FROM submission",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
                "masked_template": "List the <mask> tax ids and their <mask> cmi <mask> of all the <mask>",
                "query": "SELECT council_tax_id , cmi_cross_ref_id FROM parking_fines",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "Give me the theme and location of each party.",
                "masked_template": "<mask> me the <mask> and <mask> of each <mask>",
                "query": "SELECT Party_Theme , LOCATION FROM party",
                "ted": 0.0,
                "db_id": "party_host"
            },
            {
                "question": "What are the low and high estimates of film markets?",
                "masked_template": "What are the low and <mask> of <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Return the low and high estimates for all film markets.",
                "masked_template": "Return the low and <mask> for all <mask>",
                "query": "SELECT Low_Estimate , High_Estimate FROM film_market_estimation",
                "ted": 0.0,
                "db_id": "film_rank"
            },
            {
                "question": "Show all account ids and account details.",
                "masked_template": "Show all <mask> ids and <mask>",
                "query": "SELECT account_id , account_details FROM Accounts",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Return the characters and durations for each actor.",
                "masked_template": "Return the <mask> and <mask> for each <mask>",
                "query": "SELECT Character , Duration FROM actor",
                "ted": 0.0,
                "db_id": "musical"
            },
            {
                "question": "Return the lot details and investor ids.",
                "masked_template": "Return the lot <mask> and <mask>",
                "query": "SELECT lot_details , investor_id FROM LOTS",
                "ted": 0.0,
                "db_id": "tracking_share_transactions"
            },
            {
                "question": "What are the names and distances for all airplanes?",
                "masked_template": "What are the names and <mask> for all <mask>",
                "query": "SELECT name , distance FROM Aircraft",
                "ted": 0.0,
                "db_id": "flight_1"
            }
        ],
        "best_hyp": "What are the ids and dates of departure for each of the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "When did the dogs depart and when did they depart?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
        "proc_query": "( <col> professional id </col> ) , ( <col> role code </col> ) , ( <col> email address </col> ) that belongs to ( <tab> professionals </tab> ), and except that ( ( <col> professional id </col> of <tab> professionals </tab> ) , ( <col> role code </col> of <tab> professionals </tab> ) , ( <col> email address </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids, role codes, and email addresses of the professionals who are not involved in any treatments?",
            "Find the ids and role codes of professionals that are not involved in any treatments.",
            "List the ids and role codes of the professionals which did not have any of the listed treatments on record.",
            "What are the ids and role codes of the professionals who are not involved in any treatments?"
        ],
        "templates": [
            "",
            {
                "question": "Give the names, details, and data types of characteristics that are not found in any product.",
                "masked_template": "<mask> the <mask> and <mask> of <mask> that are not <mask> in any <mask>",
                "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM CHARACTERISTICS AS T1 JOIN product_characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
                "masked_template": "List the <mask> and <mask> of the <mask> which did not have any of the listed <mask> on <mask>",
                "query": "SELECT date , theme , sales FROM journal EXCEPT SELECT T1.date , T1.theme , T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID",
                "ted": 0.0,
                "db_id": "journal_committee"
            },
            {
                "question": "What are the names, details and data types of the characteristics which are never used by any product?",
                "masked_template": "What are the <mask> and <mask> of the <mask> which are <mask> by any <mask>",
                "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM CHARACTERISTICS AS T1 JOIN product_characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            }
        ],
        "best_hyp": "What are the ids and role codes of the professionals who are not involved in any treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids, role codes, and email addresses of the professionals who are not involved in any treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog' INTERSECT select T1.fname from student as T1 join has_pet as T2 on T1.stuid = T2.stuid join pets as T3 on T3.petid = T2.petid where T3.pettype = 'dog'",
        "proc_query": "( <col> first name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ), and intersect with ( ( <col> first name </col> of <tab> student </tab> ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of all students who have both a pet of type 'dog' and a pet with type 'cat'?",
            "What are the names of the students that have both the pet type of dog and the type of cat?",
            "Show names for all students who have pet type both dogs and cats.",
            "What are the names of any students who have pets of type 'dog' and 'A cat'?",
            "Find the name of the students who have pets of both a type named 'dog' and a type called 'A cat'.",
            "Find the name of students who have pets whose type is both dog and cat.",
            "What are the names of the students who have both a dog and a cat?",
            "For students that have pet types of dog and cat, what are their first names?",
            "What are the names of the students that have pets with a type both in dog and cat types?",
            "Which students have both a dog and a cat? Give me the first names of the students.",
            "What are the names of all students who can fly both the dog and the cat types?",
            "Find the name of the students that have both a dog and a cat.",
            "Show the names of students that are friends with both an animal type named 'dog' and an animal types named 'cat'.",
            "What are the names of all students that are students with both a dog and a cat?",
            "Find the name of students who have both a dog and a cat as pets.",
            "What is the name of the student with both a TV pet and a pet type listed as 'dog'?",
            "Find the name of students who have both a dog and a cat.",
            "What are the names of all the students that are in both the dog and cat types?",
            "What are the names of the students who have both a dog and a cat?",
            "Find the names of students who have both a dog and a cat.",
            "List the names of the students that are students with both a dog and a cat.",
            "What are the first names of the students who have both a dog and a cat?",
            "For students with both pet types as pets and pet type as pets, list its first names.",
            "What are the first names of the students who have both a dog and a cat?",
            "List the name of the students who have both the dog and the cat types.",
            "List the first names of students that have both a pet of type with type 'dog' and a student of type 'cat'.",
            "Find the first names of the students who have both dogs and cats.",
            "What are the first names for students who have both a dog and a cat?",
            "List the first names of students who have both the pet type of dog and the type of cat.",
            "Find the first names of students that have pets of both the pet type 'dog' and the type 'cat'.",
            "Which students have both the pet named a dog and the pet name named a cat? Tell me the student first names."
        ],
        "templates": [
            "",
            {
                "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?",
                "masked_template": "What are the names of the <mask> that <mask> both the <mask> of <mask> and <mask>",
                "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.",
                "masked_template": "Show names for all <mask> who have <mask> on both <mask> and <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
                "masked_template": "What are the names of any <mask> who <mask> on <mask> named <mask> of <mask> and 'A <mask>",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
                "masked_template": "Find the name of the <mask> who <mask> on both a <mask> named <mask> of <mask> and a <mask> named 'A <mask>",
                "query": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax'",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
                "masked_template": "Find the name of <mask> have <mask> whose <mask> is in <mask> and <mask> in <mask>",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What are the names of the districts that have both mall and village store style shops?",
                "masked_template": "What are the names of the <mask> that have both <mask> and <mask>",
                "query": "SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'City Mall' INTERSECT SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'Village Store'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
                "masked_template": "For <mask> that have <mask> of <mask> and <mask> what are their <mask>",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
                "masked_template": "What are the names of the <mask> that have <mask> with a <mask> in <mask> and <mask>",
                "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville , Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram , Georgia'",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
                "masked_template": "Which <mask> do the <mask> and <mask> me the names of the <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?",
                "masked_template": "What are the names of all <mask> who can fly both the <mask> and the <mask>",
                "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Boeing 737-800' INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = 'Airbus A340-300'",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
                "masked_template": "Find the name of the <mask> that <mask> both <mask> and <mask>",
                "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
                "masked_template": "Show the names of <mask> that are <mask> with both an <mask> named <mask> and an <mask> named <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
                "masked_template": "What are the names of all <mask> that are <mask> with both <mask> and <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Heathrow' INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = 'London Gatwick'",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
                "masked_template": "Find the name of <mask> which have both TV <mask> and <mask> as <mask>",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
                "masked_template": "What is the name of the <mask> with both a TV <mask> and <mask> listed as <mask>",
                "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room'",
                "ted": 0.0,
                "db_id": "dorm_1"
            },
            {
                "question": "Find the name of tracks which are in both Movies and music playlists.",
                "masked_template": "Find the name of <mask> which are in both <mask> and <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
                "masked_template": "What are the names of all the <mask> that are in both the <mask> and <mask>",
                "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music'",
                "ted": 0.0,
                "db_id": "store_1"
            },
            {
                "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
                "masked_template": "What are the names of the <mask> which <mask> both <mask> and <mask>",
                "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Ananthapuri Express' INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = 'Guruvayur Express'",
                "ted": 0.0,
                "db_id": "train_station"
            },
            {
                "question": "Find the names of districts where have both city mall and village store type stores.",
                "masked_template": "Find the names of <mask> have both <mask> and <mask>",
                "query": "SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'City Mall' INTERSECT SELECT T3.District_name FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.Type = 'Village Store'",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
                "masked_template": "List the names of the <mask> that are <mask> with both <mask> and <mask>",
                "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox'",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?",
                "masked_template": "What are the <mask> names of the <mask> both <mask> and <mask>",
                "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
                "masked_template": "For <mask> with both <mask> as <mask> and <mask> as <mask> list its <mask>",
                "query": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application'",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
                "masked_template": "What are the names of the <mask> and <mask>",
                "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Vincent' INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = 'Marcelle'",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
                "masked_template": "List the name of the <mask> both the <mask> and the <mask> got <mask>",
                "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta'",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
                "masked_template": "List the <mask> of <mask> that <mask> both a <mask> of <mask> with <mask> and a <mask> of <mask> with <mask>",
                "query": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif'",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
                "masked_template": "Find the <mask> names of the <mask> who <mask> in <mask> and <mask>",
                "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
                "masked_template": "What are the <mask> for <mask> both <mask> and <mask>",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
                "masked_template": "List the <mask> both the <mask> of <mask> and the <mask> of <mask>",
                "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
                "masked_template": "Find the <mask> of <mask> that <mask> of both the <mask> and <mask>",
                "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock'",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
                "masked_template": "Which <mask> have <mask> both the <mask> named <mask> a <mask> and the <mask> named <mask> a <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'New policy application'",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            }
        ],
        "best_hyp": "For students that have pet types of dog and cat, what are their first names?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of all students who have both a pet of type 'dog' and a pet with type 'cat'?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' OR T3.pettype = 'cat'",
        "proc_query": "( distinct ( ( <col> first name </col> of <tab> student </tab> ) ) ) that belongs to ( ( <tab> student </tab> ) , and ( ( <tab> has pet </tab> ) satisfied that ( ( <col> student id </col> of <tab> student </tab> ) equal to ( <col> student id </col> of <tab> has pet </tab> ) ) ) , and ( ( <tab> pets </tab> ) satisfied that ( ( <col> pet id </col> of <tab> pets </tab> ) equal to ( <col> pet id </col> of <tab> has pet </tab> ) ) ) ) , that have ( ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> dog </val> ) ) or ( ( <col> pet type </col> of <tab> pets </tab> ) equal to ( <val> cat </val> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of all the students who have a pet of type 'dog' or cat?",
            "Find the first names of the students who are either a dog or cat.",
            "Which students are either pet or cat? Tell me their first names.",
            "What is the first name of the students who have either a cat or a cat?",
            "Which student is the cat owner? Tell me the name of the student.",
            "What are the first names of all students who have a pet of type 'dog' or cat?",
            "What is the first name of the student who has either a pet of type 'dog' or cat?",
            "What are the first names of the students that have pet as a pet?",
            "List the first names of students having pet as a pet.",
            "What is the total first names for students that are either with the name dog or cat are related to?",
            "What are the names of all students that belong to the pet type and whose pet type is cat?",
            "Find the first names of students who are either a pet or cat.",
            "Find the names of students who have either the pet type of a dog or the cat type.",
            "Which students are students with pet type or cat? Tell me their first names.",
            "Which students have either the pet named a cat or a cat? Tell me the first names.",
            "List the name of students who have either a cat or a cat.",
            "Find the first names of the students that have either a pet of type 'dog' or cat.",
            "How many students have a pet of type 'dog' or cat?",
            "Count the number of students for which the pet type is a cat.",
            "Find the first names of the students who have either a cat or a cat.",
            "Find the number of students whose pet type is a cat.",
            "What are the first names of all students who have a pet of type 'dog' or cat?",
            "What are the first names of all students who have a pet of type 'dog' or cat?",
            "Which students have either a pet or cat? Give me their first names.",
            "What is the first name of the students whose pet type is either cat or cat?",
            "Find the first names of the students who have either a cat or a cat.",
            "Which students have cat as an pet?",
            "What are the first names of all students that have either a pet type or cat?",
            "What are the first names of all students who have a pet of type 'dog' or cat?",
            "Which students have either a cat or a cat? Give me their first names.",
            "Find the students who have either a pet of type 'dog' or cat."
        ],
        "templates": [
            "",
            {
                "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
                "masked_template": "Find the <mask> names of the <mask> who are <mask> or <mask>",
                "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
                "masked_template": "Which <mask> are <mask> or <mask> me their <mask>",
                "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking'",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "What is the name of the institution that \"Matthias Blume\" belongs to?",
                "masked_template": "What is the name of the <mask> that <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "Which institution is the author \"Matthias Blume\" belong to? Give me the name of the institution.",
                "masked_template": "Which <mask> is the <mask> to? <mask> me the name of the <mask>",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Matthias' AND T1.lname = 'Blume'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "Which institution does \"Katsuhiro Ueno\" belong to?",
                "masked_template": "Which <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Katsuhiro' AND T1.lname = 'Ueno'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?",
                "masked_template": "What is the name of the <mask> the <mask> to?",
                "query": "SELECT DISTINCT T3.name FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN inst AS T3 ON T2.instid = T3.instid WHERE T1.fname = 'Katsuhiro' AND T1.lname = 'Ueno'",
                "ted": 0.019230769230769232,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of the clubs that have \"Davis Steven\" as a member?",
                "masked_template": "What are the names of the <mask> that have <mask> as a <mask>",
                "query": "SELECT DISTINCT T1.clubname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Davis' AND T3.lname = 'Steven'",
                "ted": 0.019230769230769232,
                "db_id": "club_1"
            },
            {
                "question": "List the clubs having \"Davis Steven\" as a member.",
                "masked_template": "List the <mask> having <mask> as a <mask>",
                "query": "SELECT DISTINCT T1.clubname FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Davis' AND T3.lname = 'Steven'",
                "ted": 0.019230769230769232,
                "db_id": "club_1"
            },
            {
                "question": "What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?",
                "masked_template": "What is the sum of <mask> for <mask> that <mask> with the name <mask> or <mask> are <mask> to?",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
                "masked_template": "What are the names of all <mask> that <mask> to the <mask> and whose <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.038461538461538464,
                "db_id": "store_1"
            },
            {
                "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
                "masked_template": "Find the name of <mask> who are <mask> with <mask> or <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
                "ted": 0.038461538461538464,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
                "masked_template": "Find the names of <mask> who have <mask> the <mask> a <mask> or the <mask> a <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' OR T3.service_name = 'Upgrade a policy'",
                "ted": 0.038461538461538464,
                "db_id": "insurance_fnol"
            },
            {
                "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
                "masked_template": "Which <mask> are <mask> with <mask> or <mask> me their <mask>",
                "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry'",
                "ted": 0.038461538461538464,
                "db_id": "hospital_1"
            },
            {
                "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
                "masked_template": "Which <mask> have <mask> the <mask> named <mask> a <mask> or <mask> a <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN first_notification_of_loss AS T2 ON T1.customer_id = T2.customer_id JOIN services AS T3 ON T2.service_id = T3.service_id WHERE T3.service_name = 'Close a policy' OR T3.service_name = 'Upgrade a policy'",
                "ted": 0.038461538461538464,
                "db_id": "insurance_fnol"
            },
            {
                "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
                "masked_template": "List the name of <mask> to <mask> or <mask> is <mask>",
                "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = 'Rock' OR T3.name = 'MPEG audio file'",
                "ted": 0.038461538461538464,
                "db_id": "store_1"
            },
            {
                "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.",
                "masked_template": "Find the total <mask> of the <mask> that <mask> named <mask> or <mask> are <mask> to.",
                "query": "SELECT sum( T2.hours ) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith'",
                "ted": 0.038461538461538464,
                "db_id": "scientist_1"
            },
            {
                "question": "How many clubs does the student named \"Eric Tai\" belong to?",
                "masked_template": "How many <mask> the <mask> named <mask> to?",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.05555555555555555,
                "db_id": "club_1"
            },
            {
                "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
                "masked_template": "Count the number of <mask> for which the <mask> named <mask> is a <mask>",
                "query": "SELECT count( DISTINCT T1.clubname ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Eric' AND T3.lname = 'Tai'",
                "ted": 0.05555555555555555,
                "db_id": "club_1"
            },
            {
                "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
                "masked_template": "Find the <mask> of the <mask> Cup <mask> which was <mask> by <mask> ( <mask> )\".",
                "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = 'Nanjing ( Jiangsu ) ' AND T3.competition = '1994 FIFA World Cup qualification'",
                "ted": 0.057692307692307696,
                "db_id": "city_record"
            },
            {
                "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
                "masked_template": "Find the number of <mask> is a <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Tracy' AND T3.lname = 'Kim'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "How many female students live in Smith Hall?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( * ) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F'",
                "ted": 0.057692307692307696,
                "db_id": "dorm_1"
            },
            {
                "question": "How many clubs does \"Linda Smith\" have membership for?",
                "masked_template": "How many <mask> have <mask>",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?",
                "masked_template": "Which <mask> did the <mask> with <mask> name <mask> in the <mask> with <mask> \"A Bar in <mask>",
                "query": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = 'Solveig' AND T2.title = 'A Bar In Amsterdam'",
                "ted": 0.057692307692307696,
                "db_id": "music_2"
            },
            {
                "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
                "masked_template": "What is the number of <mask> by the <mask> whose <mask> are in <mask>",
                "query": "SELECT count( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines'",
                "ted": 0.057692307692307696,
                "db_id": "flight_4"
            },
            {
                "question": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.",
                "masked_template": "Find the <mask> of the <mask> the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "Which papers have \"Stephanie Weirich\" as an author?",
                "masked_template": "Which <mask> have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Stephanie' AND T1.lname = 'Weirich'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
                "masked_template": "What are the names of all <mask> that <mask> or <mask> by <mask>",
                "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000",
                "ted": 0.057692307692307696,
                "db_id": "movie_1"
            },
            {
                "question": "How many clubs does \"Linda Smith\" belong to?",
                "masked_template": "How many <mask> to?",
                "query": "SELECT count( * ) FROM club AS T1 JOIN member_of_club AS T2 ON T1.clubid = T2.clubid JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.fname = 'Linda' AND T3.lname = 'Smith'",
                "ted": 0.057692307692307696,
                "db_id": "club_1"
            },
            {
                "question": "Which papers did the author \"Olin Shivers\" write? Give me the paper titles.",
                "masked_template": "Which <mask> did the <mask> me the <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the papers which have \"Olin Shivers\" as an author.",
                "masked_template": "Find the <mask> which have <mask> as an <mask>",
                "query": "SELECT T3.title FROM authors AS T1 JOIN authorship AS T2 ON T1.authid = T2.authid JOIN papers AS T3 ON T2.paperid = T3.paperid WHERE T1.fname = 'Olin' AND T1.lname = 'Shivers'",
                "ted": 0.057692307692307696,
                "db_id": "icfp_1"
            }
        ],
        "best_hyp": "What are the names of all students that belong to the pet type and whose pet type is cat?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of all the students who have a pet of type 'dog' or cat?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "proc_query": "( <col> state </col> ) that belongs to ( <tab> owners </tab> ), and intersect with ( ( <col> state </col> ) that belongs to ( <tab> professionals </tab> ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "Show the states that have both owners and professionals.",
            "Find the name of states where both owners and professionals live.",
            "What are ids of the states that not only have an owner but also a manager?",
            "Show the ids of all the states where owners live in an apartment and professionals live in a building",
            "Show ids of states where owners and professionals live.",
            "What are the ids of all states that have both owners and professionals?",
            "What are the states that are shared by owners and professionals?",
            "Which states are both shared by owners and by professionals?",
            "What are the states that have both owners and professionals?",
            "What are the names of all states that have both owners and professionals?",
            "Which states do not have any owners? Tell me their states.",
            "Show the ids of the states that have both owners and professionals.",
            "What are the ids of states that have both owners and professionals?",
            "Which states do not have any owners? Find their states.",
            "Find the id of states that have both owners and professionals.",
            "Find the name of all the states that have both owners and professionals.",
            "Show states that have both owners and professionals.",
            "What are the ids of all states that have both owners and professionals?",
            "What are the ids of all states that have both owners and professionals?",
            "Show the ids of all states that have both owners and professionals.",
            "Which states do not have any professionals? Find their states.",
            "Show the ids of all states who have either a owner or an employee to do business",
            "Which states have either a company or an owner to do so? Return their states.",
            "Find the id of the states that do not have any professionals.",
            "What are the names of all the states that have both owners and professionals?",
            "Show the ids of the states that have both owners and professionals.",
            "What are the names of all states that have both owners and professionals?",
            "What are the ids of the states that have both owners and professionals?",
            "What are the ids of states that have both owners and professionals?",
            "Show ids for all states that have both owners and professionals.",
            "Return all owners names and corresponding state names in a single state"
        ],
        "templates": [
            "",
            {
                "question": "Find the common personal name of course authors and students.",
                "masked_template": "Find the <mask> name of <mask> and <mask>",
                "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
                "masked_template": "What are ids of the <mask> who not <mask> in an <mask> but <mask> a <mask>",
                "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
                "masked_template": "Show the ids of all the <mask> who <mask> in an <mask> and <mask> a <mask>",
                "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
                "ted": 0.0,
                "db_id": "activity_1"
            },
            {
                "question": "Show ids of students who play video game and play sports.",
                "masked_template": "Show ids of <mask> who <mask> and <mask>",
                "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who played video games and sports?",
                "masked_template": "What are the ids of all <mask> who <mask> and <mask>",
                "query": "SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "What are the last names that are used by customers and staff?",
                "masked_template": "What are the <mask> names that are <mask> by <mask> and <mask>",
                "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "Which last names are both used by customers and by staff?",
                "masked_template": "Which <mask> names are both <mask> by <mask> and by <mask>",
                "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "What are the personal names used both by some course authors and some students?",
                "masked_template": "What are the <mask> names <mask> both by <mask> and <mask>",
                "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the names of all cities and states?",
                "masked_template": "What are the names of all <mask> and <mask>",
                "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
                "masked_template": "Which <mask> do not <mask> for any <mask> me their <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids of the employees who don't authorize destruction for any document.",
                "masked_template": "Show the ids of the <mask> who <mask> for any <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What are the ids of instructors who didnt' teach?",
                "masked_template": "What are the ids of <mask> who <mask>",
                "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Which faculty do not participate in any activity? Find their faculty ids.",
                "masked_template": "Which <mask> do not <mask> in any <mask> Find their <mask>",
                "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "Find the id of instructors who didn't teach any courses?",
                "masked_template": "Find the id of <mask> who <mask> any <mask>",
                "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Find the name of all the cities and states.",
                "masked_template": "Find the name of all the <mask> and <mask>",
                "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                "ted": 0.05555555555555555,
                "db_id": "e_government"
            },
            {
                "question": "Show ids of students who don't play video game.",
                "masked_template": "Show ids of <mask> who <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who don't play sports?",
                "masked_template": "What are the ids of all <mask> who <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "What are the ids of all students who are not video game players?",
                "masked_template": "What are the ids of all <mask> who are not <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                "ted": 0.05555555555555555,
                "db_id": "game_1"
            },
            {
                "question": "Show the ids of all employees who don't destroy any document.",
                "masked_template": "Show the ids of all <mask> who <mask> any <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which employees do not destroy any document? Find their employee ids.",
                "masked_template": "Which <mask> do not <mask> any <mask> Find their <mask>",
                "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
                "masked_template": "Show the ids of all <mask> who have <mask> a <mask> or <mask> an <mask> to do <mask>",
                "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
                "masked_template": "Which <mask> have <mask> a <mask> or <mask> an <mask> to do so? Return their <mask>",
                "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                "ted": 0.05555555555555555,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Find the id of the courses that do not have any prerequisite?",
                "masked_template": "Find the id of the <mask> that do not have any <mask>",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "What are the names of all the reviewers and movie names?",
                "masked_template": "What are the names of all the <mask> and <mask>",
                "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                "ted": 0.05555555555555555,
                "db_id": "movie_1"
            },
            {
                "question": "Show the ids of the students who don't participate in any activity.",
                "masked_template": "Show the ids of the <mask> who <mask> in any <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "What are the names of all people who do not have friends?",
                "masked_template": "What are the names of all <mask> who do not have <mask>",
                "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                "ted": 0.05555555555555555,
                "db_id": "network_2"
            },
            {
                "question": "What are the ids of the students who are not involved in any activity",
                "masked_template": "What are the ids of the <mask> who are not <mask> in any <mask>",
                "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                "ted": 0.05555555555555555,
                "db_id": "activity_1"
            },
            {
                "question": "What are the ids of courses without prerequisites?",
                "masked_template": "What are the ids of <mask>",
                "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                "ted": 0.05555555555555555,
                "db_id": "college_2"
            },
            {
                "question": "Show ids for all employees who don't have a certificate.",
                "masked_template": "Show ids for all <mask> who <mask> have a <mask>",
                "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                "ted": 0.05555555555555555,
                "db_id": "flight_1"
            },
            {
                "question": "Return all reviewer names and movie names together in a single list.",
                "masked_template": "Return all <mask> names and <mask> names <mask> in a <mask>",
                "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                "ted": 0.05555555555555555,
                "db_id": "movie_1"
            }
        ],
        "best_hyp": "What are the states that are shared by owners and professionals?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "Show the states that have both owners and professionals.",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count( * ) >= 2",
        "proc_query": "( <col> professional id </col> of <tab> professionals </tab> ) , ( <col> cell number </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> professionals </tab> ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> professional id </col> of <tab> professionals </tab> ) equal to ( <col> professional id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> professional id </col> of <tab> professionals </tab> ) , that have ( ( the number of ( all items ) ) greater than or equal to ( <val> 2 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the ids and cell numbers of the professionals who have at least two treatments?",
            "Show the ids and cell numbers of the professionals who have at least two treatments.",
            "What are the ids and names of the professionals who have at least 3 treatments?",
            "Which professionals are involved in at least two treatments? Give me the professional ID and cell number.",
            "What are the ids and cell numbers of the professionals who have at least 3 treatments?",
            "What is the cmi id that is related to at least one tax treatment? List the ids and cell numbers",
            "What are the ids and names of the web technicians that are involved in two or more treatments?",
            "Which professionals are involved in at least two treatments? Give me their names and cell numbers.",
            "Find the id and cell number of the professionals with at least two treatments?",
            "Show the names and ids of professionals that are involved in at least two treatments.",
            "What are the names and cell numbers of the professionals who have at least two treatments?",
            "Which two or more professionals give me their ids and cell numbers?",
            "Find the ids and cell numbers of the professionals that have at least two treatments?",
            "What are the ids and names of the professionals that can provide two or more treatments?",
            "Please show the ids and ids of professionals who have at least two treatments.",
            "Show the name and id for all professionals with at least two treatments.",
            "What are the ids and cell numbers of the professionals that have at least two treatments?",
            "What are the ids and names of the professionals who have at least two treatments?",
            "What are the ids and ids for professionals who have two or more treatments?",
            "What are the ids and cell numbers of the professionals that can provide at least 3 treatments?",
            "For each id, what are the names of the professionals that can provide two or more treatments?",
            "What is the id and cell number of the professionals who can provide at least 3 treatments?",
            "Which professionals have used at least two treatments? List his or her name and cell number.",
            "Which professionals have more than 2 treatments? Show the professional ID and cell number.",
            "Show ids and cell numbers of professionals that are involved with more than one treatment.",
            "List the name and cell number of the professionals that have at least two treatments.",
            "Show the names and ids of professionals that are involved in at most two treatments.",
            "Return the ids and cell numbers for orderes with two or more treatments.",
            "Return the ids and names of the professionals that have more than two treatments in total.",
            "Find the name and cell number for the professionals who have more than one treatment.",
            "What are the ids and names of the professionals that have at least two treatments?"
        ],
        "templates": [
            "",
            {
                "question": "Show the account id and name with at least 4 transactions.",
                "masked_template": "Show the <mask> id and name with at least 4 <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and names of the architects who built at least 3 bridges ?",
                "masked_template": "What are the ids and names of the <mask> who <mask> at least 3 <mask> ?",
                "query": "SELECT T1.id , T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name.",
                "masked_template": "Which <mask> are <mask> in at least two <mask> me the <mask> ID and <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the id and details of the customers who have at least 3 events?",
                "masked_template": "What are the id and <mask> of the <mask> who have at least 3 <mask>",
                "query": "SELECT T1.customer_id , T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 3",
                "ted": 0.0,
                "db_id": "local_govt_and_lot"
            },
            {
                "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
                "masked_template": "What is the cmi <mask> id that is <mask> to at least one <mask> tax <mask> List the <mask> id and <mask>",
                "query": "SELECT T1.cmi_cross_ref_id , T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count( * ) >= 1",
                "ted": 0.0,
                "db_id": "local_govt_mdm"
            },
            {
                "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
                "masked_template": "What are the ids and names of the web <mask> that are <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
                "masked_template": "Which <mask> are <mask> at least <mask> me their names and <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Find the student ID and personal name of the student with at least two enrollments.",
                "masked_template": "Find the <mask> ID and <mask> name of the <mask> with at least two <mask>",
                "query": "SELECT T1.student_id , T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at least two times.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at least two <mask>",
                "query": "SELECT T1.Name , T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
                "masked_template": "What are the <mask> names and <mask> rep ids for <mask> 10 or more <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Which course authors teach two or more courses? Give me their addresses and author IDs.",
                "masked_template": "Which <mask> two or more <mask> me their <mask> and <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the addresses and author IDs of the course authors that teach at least two courses.",
                "masked_template": "Find the <mask> and <mask> IDs of the <mask> that <mask> at least two <mask>",
                "query": "SELECT T1.address_line_1 , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING Count( * ) >= 2",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
                "masked_template": "What are the ids and names of the <mask> that can <mask> with two or more <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
                "masked_template": "<mask> show the <mask> names and ids of <mask> who <mask> at least 10 <mask>",
                "query": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT( * ) >= 10",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "Show first name and id for all customers with at least 2 accounts.",
                "masked_template": "Show <mask> name and id for all <mask> with at least 2 <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the id and name of the mountains that have at least 2 photos?",
                "masked_template": "What are the id and name of the <mask> that have at least 2 <mask>",
                "query": "SELECT T1.id , T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What are the ids and names of accounts with 4 or more transactions?",
                "masked_template": "What are the ids and names of <mask> with 4 or more <mask>",
                "query": "SELECT T1.account_id , T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING count( * ) >= 4",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the first names and ids for customers who have two or more accounts?",
                "masked_template": "What are the <mask> names and ids for <mask> who have two or more <mask>",
                "query": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
                "masked_template": "What are the ids and <mask> names of the <mask> that can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
                "masked_template": "For <mask> id, what are the names of the <mask> that can <mask> with more than one <mask>",
                "query": "SELECT T1.id , T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING count( * ) >= 2",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
                "masked_template": "What is the id and <mask> name of the <mask> can <mask> with at least 3 <mask>",
                "query": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT( * ) >= 3",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
                "masked_template": "Which <mask> a <mask> in more than 30 <mask> List his or her <mask> name and <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING count( * ) > 30",
                "ted": 0.027777777777777776,
                "db_id": "sakila_1"
            },
            {
                "question": "Which parts have more than 2 faults? Show the part name and id.",
                "masked_template": "Which <mask> have more than 2 <mask> Show the <mask> name and id.",
                "query": "SELECT T1.part_name , T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Show id and location of railways that are associated with more than one train.",
                "masked_template": "Show id and <mask> of <mask> that are <mask> with more than one <mask>",
                "query": "SELECT T2.Railway_ID , T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "railway"
            },
            {
                "question": "List first name and last name of customers that have more than 2 payments.",
                "masked_template": "List <mask> name and <mask> name of <mask> that have more than 2 <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "driving_school"
            },
            {
                "question": "Show the names and ids of tourist attractions that are visited at most once.",
                "masked_template": "Show the names and ids of <mask> that are <mask> at most <mask>",
                "query": "SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count( * ) <= 1",
                "ted": 0.027777777777777776,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "Return the order ids and details for orderes with two or more invoices.",
                "masked_template": "Return the order ids and <mask> for orderes with two or more <mask>",
                "query": "SELECT T2.order_id , T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING count( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the descriptions and names of the courses that have more than two students enrolled in.",
                "masked_template": "Return the <mask> and names of the <mask> that have more than two <mask> in.",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name and email for the users who have more than one follower.",
                "masked_template": "Find the name and <mask> for the <mask> who have more than one <mask>",
                "query": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count( * ) > 1",
                "ted": 0.027777777777777776,
                "db_id": "twitter_1"
            },
            {
                "question": "What are the descriptions and names of the courses that have student enrollment bigger than 2?",
                "masked_template": "What are the <mask> and names of the <mask> that have <mask> than 2?",
                "query": "SELECT T1.course_description , T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT( * ) > 2",
                "ted": 0.027777777777777776,
                "db_id": "e_learning"
            }
        ],
        "best_hyp": "What are the ids and cell numbers of the professionals who have at least 3 treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the ids and cell numbers of the professionals who have at least two treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT count( * ) FROM pets WHERE weight > 10",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> pets </tab> ) , that have ( ( <col> weight </col> ) greater than ( <val> 10 </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many pets have a weight higher than 10?",
            "How many pets are bigger than 10?",
            "How many pets have more than 2 pounds?",
            "Count the number of pets with more than 2 pounds.",
            "How many pets have a weight greater than 15 mm?",
            "How many pets have a weight greater than 10?",
            "What is the total number of pets that has more than 3 pounds?",
            "How many pets have more than 3 pounds?",
            "How many different pets are bigger than 10?",
            "How many pets has more than 10 weight?",
            "What is the number of pets with a weight greater than 10?",
            "How many pets have weight above 10?",
            "Count the number of pets in which at least one weight is greater than 10.",
            "How many pets are over 10 pounds?",
            "How many pets have more than 10 pounds of weight?",
            "Count the number of pets that have a number of weights higher than 10.",
            "How many pets are over 10 pounds?",
            "Count the number of pets that have weight above 10.",
            "How many pets are bigger than 10?",
            "Count the number of pets that are over 10 pounds.",
            "How many pets have weight above 10?",
            "How many pets have weight above 10?",
            "How many pets are over 10 pounds?",
            "How many pets whose weight is at least 10 are there?",
            "Count the number of pets that are either in or under 10 pounds.",
            "How many pets are there with weight above 10 or above 10?",
            "How many pets are bigger than 10?",
            "How many pets are there with weight above 10?",
            "How many pets have weight of at least 10?",
            "How many pets have weight above 10?",
            "How many pets has a weight greater than 10?"
        ],
        "templates": [
            "",
            {
                "question": "How many heads of the departments are older than 56 ?",
                "masked_template": "How many <mask> of the <mask> are <mask> than 56 ?",
                "query": "SELECT count( * ) FROM head WHERE age > 56",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many courses have more than 2 credits?",
                "masked_template": "How many <mask> have more than 2 <mask>",
                "query": "SELECT count( * ) FROM COURSE WHERE Credits > 2",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Count the number of courses with more than 2 credits.",
                "masked_template": "Count the number of <mask> with more than 2 <mask>",
                "query": "SELECT count( * ) FROM COURSE WHERE Credits > 2",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "How many camera lenses have a focal length longer than 15 mm?",
                "masked_template": "How many <mask> have a <mask> than 15 mm?",
                "query": "SELECT count( * ) FROM camera_lens WHERE focal_length_mm > 15",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many flights have a velocity larger than 200?",
                "masked_template": "How many <mask> have a <mask> than <mask>",
                "query": "SELECT count( * ) FROM flight WHERE velocity > 200",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "What is the total number of ratings that has more than 3 stars?",
                "masked_template": "What is the total number of <mask> that has more than 3 <mask>",
                "query": "SELECT count( * ) FROM Rating WHERE stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "How many movie ratings have more than 3 stars?",
                "masked_template": "How many <mask> have more than 3 <mask>",
                "query": "SELECT count( * ) FROM Rating WHERE stars > 3",
                "ted": 0.0,
                "db_id": "movie_1"
            },
            {
                "question": "How many different players trained for more than 1000 hours?",
                "masked_template": "How many different <mask> for more than <mask>",
                "query": "SELECT count( * ) FROM Player WHERE HS > 1000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many colleges has more than 15000 students?",
                "masked_template": "How many <mask> has more than <mask>",
                "query": "SELECT count( * ) FROM College WHERE enr > 15000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "What is the number of colleges with a student population greater than 15000?",
                "masked_template": "What is the number of <mask> with a <mask> than <mask>",
                "query": "SELECT count( * ) FROM College WHERE enr > 15000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many storms had death records?",
                "masked_template": "How many <mask> had <mask>",
                "query": "SELECT count( * ) FROM storm WHERE Number_Deaths > 0",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Count the number of storms in which at least 1 person died.",
                "masked_template": "Count the number of <mask> in which at least 1 <mask>",
                "query": "SELECT count( * ) FROM storm WHERE Number_Deaths > 0",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "How many games are held after season 2007?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( * ) FROM game WHERE season > 2007",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "How many players have more than 1000 hours of training?",
                "masked_template": "How many <mask> have more than <mask> of <mask>",
                "query": "SELECT count( * ) FROM Player WHERE HS > 1000",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of markets that have a number of cities lower than 300.",
                "masked_template": "Count the number of <mask> that have a number of <mask> than <mask>",
                "query": "SELECT count( * ) FROM market WHERE Number_cities < 300",
                "ted": 0.0625,
                "db_id": "film_rank"
            },
            {
                "question": "How many students are 18 years old?",
                "masked_template": "How many <mask> are 18 <mask>",
                "query": "SELECT count( * ) FROM Student WHERE age = 18",
                "ted": 0.0625,
                "db_id": "allergy_1"
            },
            {
                "question": "Count the number of items store 1 has in stock.",
                "masked_template": "Count the number of <mask> 1 has in <mask>",
                "query": "SELECT count( * ) FROM inventory WHERE store_id = 1",
                "ted": 0.0625,
                "db_id": "sakila_1"
            },
            {
                "question": "How many users are logged in?",
                "masked_template": "How many <mask> are <mask> in?",
                "query": "SELECT count( * ) FROM users WHERE user_login = 1",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "Count the number of users that are logged in.",
                "masked_template": "Count the number of <mask> that are <mask> in.",
                "query": "SELECT count( * ) FROM users WHERE user_login = 1",
                "ted": 0.0625,
                "db_id": "document_management"
            },
            {
                "question": "How many items in inventory does store 1 have?",
                "masked_template": "How many <mask> in <mask> 1 <mask>",
                "query": "SELECT count( * ) FROM inventory WHERE store_id = 1",
                "ted": 0.0625,
                "db_id": "sakila_1"
            },
            {
                "question": "Advisor 1121 has how many students?",
                "masked_template": "<mask> has how many <mask>",
                "query": "SELECT count( * ) FROM Student WHERE Advisor = 1121",
                "ted": 0.0625,
                "db_id": "restaurant_1"
            },
            {
                "question": "How many students are age 18?",
                "masked_template": "How many <mask> are age 18?",
                "query": "SELECT count( * ) FROM Student WHERE age = 18",
                "ted": 0.0625,
                "db_id": "allergy_1"
            },
            {
                "question": "How many main stream browsers whose market share is at least 5 exist?",
                "masked_template": "How many <mask> whose <mask> is at least 5 <mask>",
                "query": "SELECT count( * ) FROM browser WHERE market_share >= 5",
                "ted": 0.0625,
                "db_id": "browser_web"
            },
            {
                "question": "Count the number of exhibitions that happened in or after 2005.",
                "masked_template": "Count the number of <mask> that <mask> in or <mask>",
                "query": "SELECT count( * ) FROM exhibition WHERE YEAR >= 2005",
                "ted": 0.0625,
                "db_id": "theme_gallery"
            },
            {
                "question": "How many exhibition are there in year 2005 or after?",
                "masked_template": "How many <mask> are there in <mask> or <mask>",
                "query": "SELECT count( * ) FROM exhibition WHERE YEAR >= 2005",
                "ted": 0.0625,
                "db_id": "theme_gallery"
            },
            {
                "question": "How many movies were made before 2000?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( * ) FROM Movie WHERE YEAR < 2000",
                "ted": 0.0625,
                "db_id": "movie_1"
            },
            {
                "question": "How many weddings are there in year 2016?",
                "masked_template": "How many <mask> are there in <mask>",
                "query": "SELECT count( * ) FROM wedding WHERE YEAR = 2016",
                "ted": 0.0625,
                "db_id": "wedding"
            },
            {
                "question": "How many products have prices of at least 180?",
                "masked_template": "How many <mask> have <mask> of at least <mask>",
                "query": "SELECT count( * ) FROM products WHERE price >= 180",
                "ted": 0.0625,
                "db_id": "manufactory_1"
            },
            {
                "question": "How many patients stay in room 112?",
                "masked_template": "How many <mask> in <mask>",
                "query": "SELECT count( patient ) FROM stay WHERE room = 112",
                "ted": 0.0625,
                "db_id": "hospital_1"
            },
            {
                "question": "How many budget record has a budget amount smaller than the invested amount?",
                "masked_template": "How many <mask> has a <mask> than the <mask>",
                "query": "SELECT count( * ) FROM budget WHERE budgeted < invested",
                "ted": 0.0625,
                "db_id": "school_finance"
            }
        ],
        "best_hyp": "How many pets have more than 10 pounds of weight?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many pets have a weight higher than 10?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "pets_1",
        "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
        "proc_query": "( <col> weight </col> ) that belongs to ( <tab> pets </tab> ) , ordered by ( ( <col> pet age </col> ) ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the weight of the pet with the oldest age?",
            "What is the weight of the youngest pet?",
            "What is the weight of the youngest pet?",
            "Find the pet weight of the youngest pet.",
            "Which pet has the oldest age? Return the pet weight.",
            "What are the pet weights with top 3 oldest age? List their weights.",
            "What is the weight of the pet that has the oldest age?",
            "List the weight of pet with 3 oldest age.",
            "What is the weight of the youngest pet?",
            "What is the name of the 3 pet weights who get older than the youngest pet?",
            "What is the weight of the youngest pet?",
            "Show the 3 pet weights with the oldest age.",
            "What is the weight of the youngest pet?",
            "Show the weight of the pet with oldest age.",
            "Of all the pets, what was the weight of the youngest pet?",
            "Tell me the the weight of the youngest pet.",
            "What are the 3 pet weights that have the oldest pet? Tell me the weight.",
            "What is the weight of the youngest pet?",
            "Return the weight of the youngest pet.",
            "Return the weight of the pet with the oldest age.",
            "Which pet has the oldest age?",
            "Which pet has the least age?",
            "Find the weight of the pet that has the oldest age.",
            "What is the weight of the pet with the oldest age?",
            "Return the weight of the youngest pet.",
            "What is the weight of the youngest pet?",
            "Which pet is the pet that has the oldest age?",
            "Find the weight of the pet who is the oldest pet.",
            "What is the weight at which the pet with the oldest age was born?",
            "Show the weight of pet with oldest age.",
            "What is the weight of the pet with the oldest age?"
        ],
        "templates": [
            "",
            {
                "question": "What is the id of the shortest trip?",
                "masked_template": "What is the id of the <mask>",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What are the three most costly procedures?",
                "masked_template": "What are the <mask> most <mask>",
                "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Find the three most expensive procedures.",
                "masked_template": "Find the <mask> most <mask>",
                "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
                "masked_template": "Which <mask> has the <mask> Return the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
                "masked_template": "What are the <mask> with top 3 <mask> List their <mask>",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the id of the trip that has the shortest duration?",
                "masked_template": "What is the id of the <mask> that has the <mask>",
                "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "List the publication dates of publications with 3 lowest prices.",
                "masked_template": "List the <mask> of <mask> with 3 <mask>",
                "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "book_2"
            },
            {
                "question": "What is the joined year of the pilot of the highest rank?",
                "masked_template": "What is the <mask> of the <mask> of the <mask>",
                "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "pilot_record"
            },
            {
                "question": "What is the name of the 3 employees who get paid the least?",
                "masked_template": "What is the name of the 3 <mask> who get <mask> the <mask>",
                "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the name of the youngest captain?",
                "masked_template": "What is the name of the <mask>",
                "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "Show the 3 counties with the smallest population.",
                "masked_template": "Show the 3 <mask> with the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What are the numbers of the shortest flights?",
                "masked_template": "What are the numbers of the <mask>",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Show the flight number of flights with three lowest distances.",
                "masked_template": "Show the <mask> number of <mask> with <mask>",
                "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "Of all the claims, what was the earliest date when any claim was made?",
                "masked_template": "Of all the <mask> what was the <mask> any <mask> was <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "Tell me the the date when the first claim was made.",
                "masked_template": "<mask> me the the <mask> the <mask> was <mask>",
                "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_policies"
            },
            {
                "question": "What are the 3 counties that have the smallest population? Give me the county names.",
                "masked_template": "What are the 3 <mask> that have the <mask> me the <mask>",
                "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "What is the weight of the shortest person?",
                "masked_template": "What is the <mask> of the <mask>",
                "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Return the weight of the shortest person.",
                "masked_template": "Return the <mask> of the <mask>",
                "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "entrepreneur"
            },
            {
                "question": "Give the name of the department with the lowest budget.",
                "masked_template": "<mask> the name of the <mask> with the <mask>",
                "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Which department has the lowest budget?",
                "masked_template": "Which <mask> has the <mask>",
                "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Which district has the least area?",
                "masked_template": "Which <mask> has the least <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Find the name of the product that has the smallest capacity.",
                "masked_template": "Find the name of the <mask> that has the <mask>",
                "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "product_catalog"
            },
            {
                "question": "What is the name of the district with the smallest area?",
                "masked_template": "What is the name of the <mask> with the <mask>",
                "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "store_product"
            },
            {
                "question": "Return the name of the youngest captain.",
                "masked_template": "Return the name of the <mask>",
                "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                "ted": 0.0,
                "db_id": "ship_1"
            },
            {
                "question": "What was the date of the earliest payment?",
                "masked_template": "What was the <mask> of the <mask>",
                "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which winery is the wine that has the highest score from?",
                "masked_template": "Which <mask> is the <mask> that has the <mask>",
                "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Find the name of customer who has the lowest credit score.",
                "masked_template": "Find the name of <mask> who has the <mask>",
                "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
                "ted": 0.0,
                "db_id": "loan_1"
            },
            {
                "question": "What is the winery at which the wine with the highest score was made?",
                "masked_template": "What is the <mask> at which the <mask> with the <mask> was <mask>",
                "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
                "ted": 0.0,
                "db_id": "wine_1"
            },
            {
                "question": "Show the name of aircrafts with top three lowest distances.",
                "masked_template": "Show the name of <mask> with top <mask>",
                "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "What is the id of the candidate with the lowest oppose rate?",
                "masked_template": "What is the id of the <mask> with the <mask>",
                "query": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
                "ted": 0.0,
                "db_id": "candidate_poll"
            }
        ],
        "best_hyp": "What is the weight at which the pet with the oldest age was born?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the weight of the pet with the oldest age?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
        "proc_query": "( <col> role code </col> ) , ( <col> street </col> ) , ( <col> city </col> ) , ( <col> state </col> ) that belongs to ( <tab> professionals </tab> ) , that have ( ( <col> city </col> ) like ( <val> %West% </val> ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the role code, street, city, and state of the professionals whose city name starts with the letter W?",
            "What is the role code, street, and state for professionals living in the city of New York?",
            "Find the role code, street, and state of the professionals living in the city of New York."
        ],
        "templates": [
            "",
            {
                "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
                "masked_template": "What is the <mask> and <mask> for <mask> in the <mask> of New <mask>",
                "query": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            },
            {
                "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
                "masked_template": "Find the <mask> and <mask> (or <mask> of the <mask> in the <mask> of New <mask>",
                "query": "SELECT name , city , country , elevation FROM airports WHERE city = 'New York'",
                "ted": 0.07142857142857142,
                "db_id": "flight_4"
            }
        ],
        "best_hyp": "What is the role code, street, and state for professionals living in the city of New York?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the role code, street, city, and state of the professionals whose city name starts with the letter W?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> owners </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> owner id </col> of <tab> owners </tab> ) equal to ( <col> owner id </col> of <tab> dogs </tab> ) ) ) , and ( ( <tab> treatments </tab> ) satisfied that ( ( <col> dog id </col> of <tab> dogs </tab> ) equal to ( <col> dog id </col> of <tab> treatments </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> owners </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id and last name of the owner who has the most treatments?",
            "Find the id and last name of the owner who treats the most number of dogs.",
            "What are the ids and last names of all owners who specialized in the most treatments?",
            "Find the id and name of the owner who has the greatest number of treatments.",
            "What are the id and name of the owner who has the most treatments?",
            "For each owner id, what is the last name of the owner that is involved in the most number of treatments?",
            "Which owner has the most number of treatments related to dogs? List owner id and last name.",
            "Show the id and the id of the owner who has the most number of treatments.",
            "What is the id and last name of the owner in the company which was involved in most treatments?",
            "Return the owner id and last name of the dog that is undergoing most treatments.",
            "Find the name and last name of the owner with least number of treatments.",
            "What is the name and last name of the owner with the most number of treatments?",
            "What are the name and last name of the owner with the most ordered number of treatments?",
            "What is the owner id with the most number of treatments?",
            "Which owner has the most treatments?",
            "Find the id and last name of the owner who has the most treatments.",
            "What is the name and last name for the owner with most number of treatments in one pet?",
            "Which owner has the most treatments? Find the name of the owner.",
            "Find the name of the owner that has the greatest number of treatments.",
            "Show the name of the owner that has the most treatments.",
            "Which owner has the greatest number of treatments? Tell me the owner id and last name.",
            "Find the id and last name of the owner who has the most treatments.",
            "What is the name and last name for the owner that has the most treatments in record?",
            "Find the owner with the most number of treatments.",
            "Find the id and last name of the owner who has the most treatments.",
            "Find the id and last name of the owner who has the most treatments.",
            "Find the owner id and last name of the dog that has been used in most treatments.",
            "What is the id and last name of the owner who specialized in the most treatments?",
            "What are the id and last name of the owner with the most treatments?",
            "What is the id and last name of the owner that have treated the most number of dogs?",
            "What is the id and last name of the owner who was in the most treatments?"
        ],
        "templates": [
            "",
            {
                "question": "Find the id and surname of the driver who participated the most number of races?",
                "masked_template": "Find the id and <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "What are the ids and last names of all drivers who participated in the most races?",
                "masked_template": "What are the ids and <mask> names of all <mask> who <mask> in the most <mask>",
                "query": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "formula_1"
            },
            {
                "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
                "masked_template": "Find the id and name of the <mask> the <mask> number of <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "What are the id and name of the stadium where the most injury accidents happened?",
                "masked_template": "What are the id and name of the <mask> the most <mask>",
                "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "For each staff id, what is the description of the role that is involved with the most number of projects?",
                "masked_template": "For each <mask> id, what is the <mask> of the <mask> that is <mask> with the most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Which part fault requires the most number of skills to fix? List part id and name.",
                "masked_template": "Which <mask> the most number of <mask> to <mask> List <mask> id and <mask>",
                "query": "SELECT T1.part_id , T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
                "masked_template": "Show the <mask> and the id of the <mask> in most number of <mask>",
                "query": "SELECT T1.role_description , T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
                "masked_template": "What is the <mask> and <mask> id of the <mask> in the <mask> which was <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Return the title and inventory id of the film that is rented most often.",
                "masked_template": "Return the <mask> and <mask> id of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Find the name and capacity of the dorm with least number of amenities.",
                "masked_template": "Find the name and <mask> of the <mask> with least number of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "dorm_1"
            },
            {
                "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
                "masked_template": "What is the name and <mask> of the <mask> with the <mask> of <mask>",
                "query": "SELECT T1.dorm_name , T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY count( * ) LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "dorm_1"
            },
            {
                "question": "What are the name and phone of the customer with the most ordered product quantity?",
                "masked_template": "What are the name and <mask> of the <mask> with the most ordered <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY sum( T3.order_quantity ) DESC LIMIT 1",
                "ted": 0.020833333333333332,
                "db_id": "customers_and_products_contacts"
            },
            {
                "question": "What is the city with the most number of flagship stores?",
                "masked_template": "What is the <mask> with the most number of <mask>",
                "query": "SELECT T3.headquartered_city FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id GROUP BY T3.headquartered_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Which city has the most customers living in?",
                "masked_template": "Which <mask> has the most <mask> in?",
                "query": "SELECT T3.city FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id GROUP BY T3.city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "Find the city where the most customers live.",
                "masked_template": "Find the <mask> the most <mask>",
                "query": "SELECT T3.city FROM customers AS T1 JOIN customer_addresses AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T2.address_id = T3.address_id GROUP BY T3.city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "customers_and_addresses"
            },
            {
                "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> with most number of <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "Which institution has the most papers? Find the name of the institution.",
                "masked_template": "Which <mask> has the most <mask> Find the name of the <mask>",
                "query": "SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the name of the organization that has published the largest number of papers.",
                "masked_template": "Find the name of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.name FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Show the name of the building that has the most company offices.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "company_office"
            },
            {
                "question": "Which building has the largest number of company offices? Give me the building name.",
                "masked_template": "Which <mask> has the <mask> number of <mask> me the <mask>",
                "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "company_office"
            },
            {
                "question": "Retrieve the country that has published the most papers.",
                "masked_template": "<mask> the <mask> that has <mask> the most <mask>",
                "query": "SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "What is the name and opening year for the branch that registered the most members in 2016?",
                "masked_template": "What is the name and <mask> for the <mask> that <mask> the most <mask> in <mask>",
                "query": "SELECT T2.name , T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "shop_membership"
            },
            {
                "question": "Find the city with the most number of stores.",
                "masked_template": "Find the <mask> with the most number of <mask>",
                "query": "SELECT T3.headquartered_city FROM store AS T1 JOIN store_district AS T2 ON T1.store_id = T2.store_id JOIN district AS T3 ON T2.district_id = T3.district_id GROUP BY T3.headquartered_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "store_product"
            },
            {
                "question": "Find the names of stadiums that the most swimmers have been to.",
                "masked_template": "Find the names of <mask> that the most <mask> have <mask> to.",
                "query": "SELECT T3.name FROM record AS T1 JOIN event AS T2 ON T1.event_id = T2.id JOIN stadium AS T3 ON T3.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "swimming"
            },
            {
                "question": "Find the country that the most papers are affiliated with.",
                "masked_template": "Find the <mask> that the most <mask> are <mask>",
                "query": "SELECT T1.country FROM inst AS T1 JOIN authorship AS T2 ON T1.instid = T2.instid JOIN papers AS T3 ON T2.paperid = T3.paperid GROUP BY T1.country ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "icfp_1"
            },
            {
                "question": "Find the first name of the band mate that has performed in most songs.",
                "masked_template": "Find the <mask> name of the <mask> that has <mask> in most <mask>",
                "query": "SELECT T2.firstname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What is the first name of the band mate who perfomed in the most songs?",
                "masked_template": "What is the <mask> name of the <mask> who <mask> in the most <mask>",
                "query": "SELECT T2.firstname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What are the name and id of the team with the most victories in 2008 postseason?",
                "masked_template": "What are the name and id of the <mask> with the most <mask> in <mask>",
                "query": "SELECT T2.name , T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "baseball_1"
            },
            {
                "question": "What is the last name of the musician that have produced the most number of songs?",
                "masked_template": "What is the <mask> name of the <mask> that have <mask> the most number of <mask>",
                "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            },
            {
                "question": "What is the last name of the musician who was in the most songs?",
                "masked_template": "What is the <mask> name of the <mask> who was in the most <mask>",
                "query": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.08333333333333333,
                "db_id": "music_2"
            }
        ],
        "best_hyp": "Which owner has the most treatments? Find the name of the owner.",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id and last name of the owner who has the most treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
        "proc_query": "( <col> date of treatment </col> of <tab> treatments </tab> ) , ( <col> first name </col> of <tab> professionals </tab> ) that belongs to ( ( <tab> treatments </tab> ) , and ( ( <tab> professionals </tab> ) satisfied that ( ( <col> professional id </col> of <tab> treatments </tab> ) equal to ( <col> professional id </col> of <tab> professionals </tab> ) ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the dates of treatments and first names of all the professionals?",
            "List all dates of treatments and first names of all the professionals.",
            "Find the dates of treatments and first names of all professionals who have been involved in treatments.",
            "What are the dates of treatments and first names of all the professionals who have been involved in a treatment?",
            "What are the names of all physicians who have treated a patient as well as the patient id?",
            "What are the ids of all treatments for patients and what are the names of their physicians?",
            "Find the dates of all treatments and the first names of all the professionals involved.",
            "Please show the dates of treatments and the first names of all the professionals.",
            "Show dates of treatments and first names of all the professionals.",
            "What are the dates of treatments and first names of all the professionals?",
            "what are the date of treatment and first name of all the professionals?",
            "What are the dates of treatments and first names of all the professionals?",
            "Tell me the names and first names of the professionals which are involved in treatments.",
            "Return the date of treatment and first name for each of the professionals.",
            "What are the date of treatment and first name of all the professionals?",
            "What are the dates of treatments and first names of all the professionals?",
            "Return the day Number and first name for all the treatments.",
            "What is the date of treatment and first name of all the professionals?",
            "Show the dates of treatments and the first names of their professionals.",
            "What are the dates of treatments and the first names of the professionals they correspond to?",
            "Show dates of treatments and the first names of professionals they are in.",
            "Tell me all the dates of treatment and first names of the professionals they are treating.",
            "What are the dates of treatments as well as the names of the professionals they correspond to?",
            "What are the dates of treatment and first names of the professionals in which they are involved?",
            "Tell me the date of treatment and first name for each of the professionals.",
            "What are the dates of treatments and first names of all the professionals?",
            "Show the date of treatment and the first name of the professionals involved.",
            "What are the names and first names of the professionals that have treated a patient?",
            "Show the date of treatment and first name for all professionals.",
            "What are all the dates of treatments and the first names of all the professionals involved in the treatments?",
            "For each treatment, find the names of the physicians they are in charge of."
        ],
        "templates": [
            "",
            {
                "question": "List all country and league names.",
                "masked_template": "List all <mask> and <mask>",
                "query": "SELECT T1.name , T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id",
                "ted": 0.0,
                "db_id": "soccer_1"
            },
            {
                "question": "Find the first names of all instructors who have taught some course and the course code.",
                "masked_template": "Find the <mask> names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
                "masked_template": "What are the <mask> names of all <mask> who have <mask> a <mask> and the <mask>",
                "query": "SELECT T2.emp_fname , T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num",
                "ted": 0.0,
                "db_id": "college_1"
            },
            {
                "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
                "masked_template": "What are the names of all <mask> who have <mask> a <mask> as <mask> as the <mask> id?",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "What are the ids of all students for courses and what are the names of those courses?",
                "masked_template": "What are the ids of all <mask> for <mask> and what are the names of <mask>",
                "query": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Find the names of all instructors who have taught some course and the course_id.",
                "masked_template": "Find the names of all <mask> who have <mask> and the <mask>",
                "query": "SELECT name , course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Please show the names and the players of clubs.",
                "masked_template": "<mask> show the names and the <mask> of <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Show locations and nicknames of schools.",
                "masked_template": "Show <mask> and <mask> of <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "What are the first and last names of all the candidates?",
                "masked_template": "What are the <mask> and <mask> names of all the <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "what are the first name and last name of all candidates?",
                "masked_template": "what are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What are the names and players of all the clubs?",
                "masked_template": "What are the names and <mask> of all the <mask>",
                "query": "SELECT T1.name , T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID",
                "ted": 0.0,
                "db_id": "sports_competition"
            },
            {
                "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
                "masked_template": "<mask> me the names and <mask> of <mask> which <mask> are <mask>",
                "query": "SELECT T1.name , T2.price_in_dollar FROM furniture AS T1 JOIN furniture_manufacte AS T2 ON T1.Furniture_ID = T2.Furniture_ID",
                "ted": 0.0,
                "db_id": "manufacturer"
            },
            {
                "question": "Display the first name and department name for each employee.",
                "masked_template": "<mask> the <mask> name and <mask> name for each <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "What are the first name and department name of all employees?",
                "masked_template": "What are the <mask> name and <mask> name of all <mask>",
                "query": "SELECT T1.first_name , T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id",
                "ted": 0.0,
                "db_id": "hr_1"
            },
            {
                "question": "Give the names of wrestlers and their elimination moves.",
                "masked_template": "<mask> the names of <mask> and their <mask>",
                "query": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "Return the day Number and stored date for all the documents.",
                "masked_template": "Return the day Number and <mask> for all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "What is the day Number and date of all the documents?",
                "masked_template": "What is the day Number and <mask> of all the <mask>",
                "query": "SELECT T2.day_Number , T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date",
                "ted": 0.0,
                "db_id": "cre_Doc_Tracking_DB"
            },
            {
                "question": "Show the authors of submissions and the acceptance results of their submissions.",
                "masked_template": "Show the <mask> of <mask> and the <mask> of their <mask>",
                "query": "SELECT T2.Author , T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
                "ted": 0.0,
                "db_id": "workshop_paper"
            },
            {
                "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?",
                "masked_template": "What are the <mask> of <mask> and the <mask> of the <mask> to?",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Show white percentages of cities and the crime rates of counties they are in.",
                "masked_template": "Show <mask> of <mask> and the <mask> of <mask> are in.",
                "query": "SELECT T1.White , T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
                "masked_template": "<mask> me all the <mask> numbers and <mask> of the <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "What are the names of cities, as well as the names of the counties they correspond to?",
                "masked_template": "What are the names of <mask> as <mask> as the names of the <mask> to?",
                "query": "SELECT T1.Name , T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID",
                "ted": 0.0,
                "db_id": "county_public_safety"
            },
            {
                "question": "What are the phones and emails of workshop groups in which services are performed?",
                "masked_template": "What are the <mask> and <mask> of <mask> in which <mask> are <mask>",
                "query": "SELECT T1.Store_Phone , T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Give me the detail and opening hour for each museum.",
                "masked_template": "<mask> me the <mask> and <mask> for each <mask>",
                "query": "SELECT T1.Museum_Details , T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "What are the location and nickname of each school?",
                "masked_template": "What are the <mask> and <mask> of each <mask>",
                "query": "SELECT T1.Location , T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID",
                "ted": 0.0,
                "db_id": "school_player"
            },
            {
                "question": "Show the protein name and the institution name.",
                "masked_template": "Show the <mask> name and the <mask>",
                "query": "SELECT T2.protein_name , T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "What are the names and types of the companies that have ever operated a flight?",
                "masked_template": "What are the names and <mask> of the <mask> that have <mask> a <mask>",
                "query": "SELECT T1.name , T1.type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Show the premise type and address type code for all customer addresses.",
                "masked_template": "Show the <mask> and <mask> for all <mask>",
                "query": "SELECT T2.premises_type , T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id",
                "ted": 0.0,
                "db_id": "customers_campaigns_ecommerce"
            },
            {
                "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
                "masked_template": "What are all the <mask> and the <mask> of all the <mask> in the <mask>",
                "query": "SELECT T1.fault_description , T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "For each delegate, find the names of the party they are part of.",
                "masked_template": "For each <mask> find the names of the <mask> are <mask> of.",
                "query": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID",
                "ted": 0.0,
                "db_id": "election"
            }
        ],
        "best_hyp": "What are the dates of treatments and the first names of the professionals they correspond to?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the dates of treatments and first names of all the professionals?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "proc_query": "( <col> first name </col> ) that belongs to ( <tab> professionals </tab> ) and ( <col> first name </col> ) that belongs to ( <tab> owners </tab> ), and except that ( ( <col> name </col> ) that belongs to ( <tab> dogs </tab> ))",
        "references": [
            ""
        ],
        "hypotheses": [
            "What are the first names of the professionals and the dogs?"
        ],
        "templates": [
            ""
        ],
        "best_hyp": "What are the first names of the professionals and the dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What are the first names of the professionals and the dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( DISTINCT dog_id ) FROM Treatments",
        "proc_query": "( the number of ( distinct ( ( <col> dog id </col> ) ) ) ) that belongs to ( <tab> treatments </tab> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many different dogs are involved in treatments?",
            "How many different dogs have had treatments?",
            "How many distinct dogs are involved in treatments?",
            "How many different kinds of dogs are involved in treatments?",
            "What are the ids of all dogs involved in the treatments?",
            "How many different dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "Count the number of distinct dogs involved in treatments.",
            "How many distinct dogs are there for all treatments?",
            "How many different dogs do we have?",
            "Find the number of different dogs used in treatments.",
            "How many different dog ids are involved in treatments?",
            "What is the number of distinct dogs the treatments are aimed at?",
            "How many different dogs have been involved in treatments?",
            "Count the number of different dogs involved in treatments.",
            "Find the number of distinct dogs involved in treatments",
            "Show the number of different dogs for treatments.",
            "Find the number of distinct dogs who are undergoing treatments.",
            "Count the number of dogs who have had treatments.",
            "How many different kinds of dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "How many distinct dogs are involved in treatments?",
            "Count the number of different dogs that are involved in treatments",
            "How many different dogs are involved in treatments?",
            "How many different dogs are involved in treatments?",
            "What is the count of distinct dogs with treatments?",
            "How many distinct dogs have been involved in treatments?",
            "How many distinct dogs are affected by treatments?",
            "How many different dogs are involved in treatments?",
            "Count the number of different dogs used in treatments."
        ],
        "templates": [
            "",
            {
                "question": "How many different teams have had eliminated wrestlers?",
                "masked_template": "How many different <mask> have had <mask>",
                "query": "SELECT COUNT( DISTINCT team ) FROM elimination",
                "ted": 0.0,
                "db_id": "wrestler"
            },
            {
                "question": "How many distinct governors are there?",
                "masked_template": "How many distinct <mask> are <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many different types of rooms are there?",
                "masked_template": "How many different <mask> of <mask> are <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "What are the unique types of player positions in the tryout?",
                "masked_template": "What are the <mask> of <mask> in the <mask>",
                "query": "SELECT count( DISTINCT pPos ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "How many allergies are there?",
                "masked_template": "How many <mask> are <mask>",
                "query": "SELECT count( DISTINCT allergy ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different allergy types exist?",
                "masked_template": "How many different <mask>",
                "query": "SELECT count( DISTINCT allergytype ) FROM Allergy_type",
                "ted": 0.0,
                "db_id": "allergy_1"
            },
            {
                "question": "How many different colleges were represented at tryouts?",
                "masked_template": "How many different <mask> at <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "Count the number of distinct governors.",
                "masked_template": "Count the number of distinct <mask>",
                "query": "SELECT count( DISTINCT Governor ) FROM party",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "How many distinct currency codes are there for all drama workshop groups?",
                "masked_template": "How many distinct <mask> are there for all <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "How many different colleges do attend the tryout test?",
                "masked_template": "How many different <mask> do <mask> the <mask>",
                "query": "SELECT count( DISTINCT cName ) FROM tryout",
                "ted": 0.0,
                "db_id": "soccer_2"
            },
            {
                "question": "From the trip record, find the number of unique bikes.",
                "masked_template": "<mask> the <mask> find the number of <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different bike ids are there?",
                "masked_template": "How many different <mask> ids are <mask>",
                "query": "SELECT count( DISTINCT bike_id ) FROM trip",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "What is the number of distinct cities the stations are located at?",
                "masked_template": "What is the number of distinct <mask> the <mask> are <mask> at?",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "How many different cities have these stations?",
                "masked_template": "How many different <mask> have <mask>",
                "query": "SELECT count( DISTINCT city ) FROM station",
                "ted": 0.0,
                "db_id": "bike_1"
            },
            {
                "question": "Count the number of different affected regions.",
                "masked_template": "Count the number of different <mask>",
                "query": "SELECT count( DISTINCT region_id ) FROM affected_region",
                "ted": 0.0,
                "db_id": "storm_record"
            },
            {
                "question": "Find the number of distinct currency codes used in drama workshop groups.",
                "masked_template": "Find the number of distinct <mask> in <mask>",
                "query": "SELECT count( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups",
                "ted": 0.0,
                "db_id": "cre_Drama_Workshop_Groups"
            },
            {
                "question": "Show the number of transaction types.",
                "masked_template": "Show the number of <mask>",
                "query": "SELECT count( DISTINCT transaction_type ) FROM Financial_Transactions",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Find the number of distinct room types available.",
                "masked_template": "Find the number of distinct <mask>",
                "query": "SELECT count( DISTINCT roomtype ) FROM room",
                "ted": 0.0,
                "db_id": "hospital_1"
            },
            {
                "question": "Count the number of artists who have had volumes.",
                "masked_template": "Count the number of <mask> who have had <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many different types of sports do we offer?",
                "masked_template": "How many different <mask> of <mask> do we <mask>",
                "query": "SELECT count( DISTINCT sportname ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many students play sports?",
                "masked_template": "How many <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many distinct countries are the climbers from?",
                "masked_template": "How many distinct <mask> are the <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "Count the number of different countries that climbers are from.",
                "masked_template": "Count the number of different <mask> that <mask> are <mask>",
                "query": "SELECT COUNT( DISTINCT Country ) FROM climber",
                "ted": 0.0,
                "db_id": "climbing"
            },
            {
                "question": "How many different students are involved in sports?",
                "masked_template": "How many different <mask> are <mask> in <mask>",
                "query": "SELECT count( DISTINCT StuID ) FROM Sportsinfo",
                "ted": 0.0,
                "db_id": "game_1"
            },
            {
                "question": "How many different levels do members have?",
                "masked_template": "How many different <mask> do <mask>",
                "query": "SELECT count( DISTINCT LEVEL ) FROM member",
                "ted": 0.0,
                "db_id": "shop_membership"
            },
            {
                "question": "What is the count of distinct employees with certificates?",
                "masked_template": "What is the count of distinct <mask> with <mask>",
                "query": "SELECT count( DISTINCT eid ) FROM Certificate",
                "ted": 0.0,
                "db_id": "flight_1"
            },
            {
                "question": "How many distinct artists have volumes?",
                "masked_template": "How many distinct <mask> have <mask>",
                "query": "SELECT COUNT( DISTINCT Artist_ID ) FROM volume",
                "ted": 0.0,
                "db_id": "music_4"
            },
            {
                "question": "How many distinct payment methods are used by parties?",
                "masked_template": "How many distinct <mask> are <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "How many different countries are all the swimmers from?",
                "masked_template": "How many different <mask> are all the <mask>",
                "query": "SELECT count( DISTINCT nationality ) FROM swimmer",
                "ted": 0.0,
                "db_id": "swimming"
            },
            {
                "question": "Count the number of different payment method codes used by parties.",
                "masked_template": "Count the number of different <mask> by <mask>",
                "query": "SELECT count( DISTINCT payment_method_code ) FROM parties",
                "ted": 0.0,
                "db_id": "e_government"
            }
        ],
        "best_hyp": "How many different dogs have had treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many different dogs are involved in treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> owner id </col> of <tab> dogs </tab> ) , ( <col> first name </col> of <tab> owners </tab> ) , ( <col> last name </col> of <tab> owners </tab> ) that belongs to ( ( <tab> dogs </tab> ) , and ( ( <tab> owners </tab> ) satisfied that ( ( <col> owner id </col> of <tab> dogs </tab> ) equal to ( <col> owner id </col> of <tab> owners </tab> ) ) ) ) , grouped by ( <col> owner id </col> of <tab> dogs </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the id, first name and last name of the owner who has the most dogs?",
            "Return the id and last name of the owner who has the greatest number of dogs.",
            "What are the ids, first names and last names of the owners with the greatest number of dogs?",
            "Which owner has the most number of dogs or cats? List the owner id and last name.",
            "What is the id, name and last name of the owner who owns the most dogs?",
            "What are the owner id, first name and last name who has the most dogs?",
            "Which owner has the most dogs? Tell me the owner id and id.",
            "Which 3 owners have the most dogs? List their first name and id.",
            "Find the owner id, first name and id for the most dogs.",
            "Find the id and last name of the owner that owns the most dogs.",
            "What are the ids and full names of the owners who have the most dogs?",
            "Which owner owns the most dogs? List his or her first name and last name.",
            "Which owner owns the most number of dogs? List the owner id, first name and last name.",
            "Find the name and first name of the owner who is the owner for the most number of dogs.",
            "What are the id, first name and last name of the owner who owns the greatest number of dogs?",
            "Return the id, first name and last name for the owner with the most dogs.",
            "What is the id and first name of the owner with most number of dogs?",
            "Return the id and full name of the owner with the most dogs.",
            "What is the owner id, first name and last name with most number of dogs?",
            "What is the id, name and last name of the owner that had most number of dogs?",
            "Find the name and first name of the owner who is the owner of the most number of dogs.",
            "What is the name and first name of the owner that the most dogs end at?",
            "What are the ids and full names of the owners with the most dogs?",
            "Return the id and id of the owner or owner who owns the greatest number of dogs.",
            "What is the name and first name of the owner who owns most of the dogs?",
            "Which owner owns the most number of dogs? List the owner id, first name and last name.",
            "Show the owner id, first name and last name.",
            "Return the id and full name of the owner who has the most dogs.",
            "Which owner owns least number of dogs? List the owner name and the id.",
            "What is the owner id, first name and last name with least number of dogs?",
            "Find the owner id, first name and last name of the dog with the most owners."
        ],
        "templates": [
            "",
            {
                "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
                "masked_template": "Return the <mask> id and <mask> number of the <mask> who has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What are the title, id, and description of the movie with the greatest number of actors?",
                "masked_template": "What are the <mask> id, and <mask> of the <mask> with the <mask> number of <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
                "masked_template": "Which <mask> has the most number of <mask> or <mask> List the <mask> id and <mask>",
                "query": "SELECT T2.title , T2.film_id , T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the id, name and nationality of the architect who built most mills?",
                "masked_template": "What is the id, name and <mask> of the <mask> who <mask> most <mask>",
                "query": "SELECT T1.id , T1.name , T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "architecture"
            },
            {
                "question": "What are the manager's first name, last name and id who won the most manager award?",
                "masked_template": "What are the <mask> name and id who won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which manager won the most manager award? Give me the manager's first name, last name and id.",
                "masked_template": "Which <mask> won the most <mask> me the <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Which 3 players won the most player awards? List their full name and id.",
                "masked_template": "Which 3 <mask> won the most <mask> List their <mask> name and id.",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the first name, last name and id for the top three players won the most player awards.",
                "masked_template": "Find the <mask> name and id for the top <mask> won the most <mask>",
                "query": "SELECT T1.name_first , T1.name_last , T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "baseball_1"
            },
            {
                "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
                "masked_template": "Find the <mask> and <mask> ID of the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
                "masked_template": "What are the <mask> and <mask> ID of the <mask> who <mask> the most <mask>",
                "query": "SELECT T1.personal_name , T1.family_name , T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
                "masked_template": "Which <mask> the most <mask> List his or her <mask> name and <mask> id.",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
                "masked_template": "Which <mask> the most number of <mask> List the <mask> id, <mask> and <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Find the name and city of the airport which is the source for the most number of flight routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> for the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
                "masked_template": "What are the <mask> number and <mask> of the <mask> who <mask> the <mask> number of <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "Return the name, phone number and email address for the customer with the most orders.",
                "masked_template": "Return the <mask> number and <mask> for the <mask> with the most <mask>",
                "query": "SELECT T1.customer_name , T1.customer_phone , T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "department_store"
            },
            {
                "question": "What is the customer last name, id and phone number with most number of orders?",
                "masked_template": "What is the <mask> id and <mask> number with most number of <mask>",
                "query": "SELECT T2.customer_last_name , T1.customer_id , T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Return the id and full name of the customer with the most accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> with the most <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the customer id, first and last name with most number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with most number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "What is the id, name and IATA code of the airport that had most number of flights?",
                "masked_template": "What is the id, name and <mask> of the <mask> that had most number of <mask>",
                "query": "SELECT T1.id , T1.name , T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_company"
            },
            {
                "question": "Find the name and city of the airport which is the destination of the most number of routes.",
                "masked_template": "Find the name and <mask> of the <mask> which is the <mask> of the most number of <mask>",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What is the name and city of the airport that the most routes end at?",
                "masked_template": "What is the name and <mask> of the <mask> that the most <mask> end at?",
                "query": "SELECT T1.name , T1.city , T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "What are the ids, types, and details of the organization with the most research staff?",
                "masked_template": "What are the <mask> and <mask> of the <mask> with the most <mask>",
                "query": "SELECT T1.organisation_id , T1.organisation_type , T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "tracking_grants_for_research"
            },
            {
                "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
                "masked_template": "Return the <mask> name and id of the <mask> or <mask> who <mask> in the <mask> number of <mask>",
                "query": "SELECT T2.first_name , T2.last_name , T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the name and city of the airport from most of the routes start?",
                "masked_template": "What is the name and <mask> of the <mask> most of the <mask>",
                "query": "SELECT T1.name , T1.city , T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "flight_4"
            },
            {
                "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
                "masked_template": "Which <mask> log <mask> the most number of <mask> List the <mask> log id, <mask> and <mask>",
                "query": "SELECT T1.fault_log_entry_id , T1.fault_description , T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
                "masked_template": "<mask> who have <mask> which <mask> the least number of <mask> List the <mask> id, <mask> name and <mask>",
                "query": "SELECT T1.engineer_id , T1.first_name , T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "assets_maintenance"
            },
            {
                "question": "Return the id and full name of the customer who has the fewest accounts.",
                "masked_template": "Return the id and <mask> name of the <mask> who has the <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Which staff handled least number of payments? List the full name and the id.",
                "masked_template": "Which <mask> least number of <mask> List the <mask> name and the id.",
                "query": "SELECT T1.first_name , T1.last_name , T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "sakila_1"
            },
            {
                "question": "What is the customer id, first and last name with least number of accounts.",
                "masked_template": "What is the <mask> id, <mask> and <mask> name with least number of <mask>",
                "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "Give the full name and customer id of the customer with the fewest accounts.",
                "masked_template": "<mask> the <mask> name and <mask> id of the <mask> with the <mask>",
                "query": "SELECT T2.customer_first_name , T2.customer_last_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count( * ) ASC LIMIT 1",
                "ted": 0.025,
                "db_id": "customers_card_transactions"
            }
        ],
        "best_hyp": "What is the id, name and last name of the owner that had most number of dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the id, first name and last name of the owner who has the most dogs?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count( * ) DESC LIMIT 1",
        "proc_query": "( <col> breed name </col> of <tab> breeds </tab> ) that belongs to ( ( <tab> breeds </tab> ) , and ( ( <tab> dogs </tab> ) satisfied that ( ( <col> breed code </col> of <tab> breeds </tab> ) equal to ( <col> breed code </col> of <tab> dogs </tab> ) ) ) ) , grouped by ( <col> breed name </col> of <tab> breeds </tab> ) , ordered by ( ( the number of ( all items ) ) in descending order ) , limited to the top ( <val> 1 </val> )",
        "references": [
            ""
        ],
        "hypotheses": [
            "What is the name of the most common breed?",
            "Find the name of the breed that the people who have the greatest number of dogs are in.",
            "Find the most common breed name in the UK. The most common is the breed that had the greatest number of dogs.",
            "Which breed has the most number of dogs?",
            "Which breed has the greatest number of dogs?",
            "Which breed is most common? Tell me the breed name.",
            "Return the name of the breed which has the most dogs.",
            "What are the names of the breeds that are used for the most number of dogs?",
            "What is the name of the breed that breeds the most number of dogs?",
            "Which breed has the most dogs? Tell me the breed name.",
            "What is the name of the breed that has the greatest number of dogs?",
            "Return the breed name that has been used the greatest number of times.",
            "Which is the name of the breed that has produced the most number of dogs?",
            "List the name of the breed that has been named the most number of times.",
            "Find the name of the breed that is used most often.",
            "What are the names of the breeds that have the most dogs?",
            "What is the name of the breed that is most common?",
            "Find the name of the most common breed.",
            "What are the names of the breeds that have the most dogs?",
            "What is the name of the breed with the least number of dogs?",
            "Find the name of the breed that breeds the most dogs.",
            "Which breed has the most dogs?",
            "Return the name of the breed that has the greatest number of dogs.",
            "Which breed has the most dogs? Tell me the breed name.",
            "Return the name of the breed that has the most dogs.",
            "Show the name of the breed that has the most dogs.",
            "Find the top 3 breeds which have the greatest number of dogs.",
            "What is the name of the breed that has won an award the most times?",
            "What is the name of the breed that has the most dogs?",
            "Which breed is used in by the most dogs? Tell me the breed name.",
            "Find the name of the breed that has the greatest number of dogs."
        ],
        "templates": [
            "",
            {
                "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
                "masked_template": "<mask> the <mask> that the <mask> who <mask> the <mask> number of <mask> in.",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
                "masked_template": "Find the most <mask> in the <mask> The most <mask> is the <mask> that had <mask> the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which building does the instructor who teaches the most number of courses live in?",
                "masked_template": "Which <mask> the <mask> who <mask> the most number of <mask> in?",
                "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "college_3"
            },
            {
                "question": "Which room has the largest number of reservations?",
                "masked_template": "Which <mask> has the <mask> number of <mask>",
                "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "inn_1"
            },
            {
                "question": "Which program is broadcast most frequently? Give me the program name.",
                "masked_template": "Which <mask> is <mask> most <mask> me the <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "Return the name of the organization which has the most contact individuals.",
                "masked_template": "Return the name of the <mask> which has the most <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the details of the student who registered for the most number of courses?",
                "masked_template": "What are the <mask> of the <mask> who <mask> for the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "What is detail of the student who registered the most number of courses?",
                "masked_template": "What is <mask> of the <mask> who <mask> the most number of <mask>",
                "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "student_assessment"
            },
            {
                "question": "Which customer uses the most policies? Give me the customer name.",
                "masked_template": "Which <mask> the most <mask> me the <mask>",
                "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customers_policies AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_fnol"
            },
            {
                "question": "What is the name of organization that has the greatest number of contact individuals?",
                "masked_template": "What is the name of <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.organization_name FROM organizations AS T1 JOIN organization_contact_individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_name ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Return the party email that has used party services the greatest number of times.",
                "masked_template": "Return the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Which is the email of the party that has used the services the most number of times?",
                "masked_template": "Which is the <mask> of the <mask> that has <mask> the <mask> the most number of <mask>",
                "query": "SELECT T1.party_email FROM parties AS T1 JOIN party_services AS T2 ON T1.party_id = T2.customer_id GROUP BY T1.party_email ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
                "masked_template": "List the name of the <mask> that has <mask> named <mask> the most number of <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "Find the name of the program that is broadcast most frequently.",
                "masked_template": "Find the name of the <mask> that is <mask> most <mask>",
                "query": "SELECT T1.name FROM program AS T1 JOIN broadcast AS T2 ON T1.program_id = T2.program_id GROUP BY T2.program_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "program_share"
            },
            {
                "question": "What are the three products that have the most problems?s",
                "masked_template": "What are the <mask> that have the most <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the party form that is most common?",
                "masked_template": "What is the name of the <mask> that is most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "Find the name of the most popular party form.",
                "masked_template": "Find the name of the most <mask>",
                "query": "SELECT T1.form_name FROM forms AS T1 JOIN party_forms AS T2 ON T1.form_id = T2.form_id GROUP BY T2.form_id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_government"
            },
            {
                "question": "What are the names of the cameras that have taken picture of the most mountains?",
                "masked_template": "What are the names of the <mask> that have <mask> of the most <mask>",
                "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "What is the structure of the document with the least number of accesses?",
                "masked_template": "What is the <mask> of the <mask> with the least number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Find the city that hosted the most events.",
                "masked_template": "Find the <mask> that <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Which city has hosted the most events?",
                "masked_template": "Which <mask> has <mask> the most <mask>",
                "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "city_record"
            },
            {
                "question": "Return the structure description of the document that has been accessed the fewest number of times.",
                "masked_template": "Return the <mask> of the <mask> that has <mask> the <mask> number of <mask>",
                "query": "SELECT T2.document_structure_description FROM documents AS T1 JOIN document_structures AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Which customer have the most policies? Give me the customer details.",
                "masked_template": "Which <mask> have the most <mask> me the <mask>",
                "query": "SELECT T2.customer_details FROM policies AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_details ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "insurance_and_eClaims"
            },
            {
                "question": "Return the name of the document that has the most sections.",
                "masked_template": "Return the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.document_name FROM documents AS T1 JOIN document_sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_code ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "document_management"
            },
            {
                "question": "Show the name of the party that has the most delegates.",
                "masked_template": "Show the name of the <mask> that has the most <mask>",
                "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "election"
            },
            {
                "question": "Find the top 3 products which have the largest number of problems?",
                "masked_template": "Find the top 3 <mask> which have the <mask> number of <mask>",
                "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count( * ) DESC LIMIT 3",
                "ted": 0.0,
                "db_id": "tracking_software_problems"
            },
            {
                "question": "What is the name of the aircraft that has won an award the most?",
                "masked_template": "What is the name of the <mask> that has won an <mask> the <mask>",
                "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "aircraft"
            },
            {
                "question": "What is the name of the course that has the most student enrollment?",
                "masked_template": "What is the name of the <mask> that has the most <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Which course is enrolled in by the most students? Give me the course name.",
                "masked_template": "Which <mask> is <mask> in by the most <mask> me the <mask>",
                "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "Find the name of the activity that has the largest number of student participants.",
                "masked_template": "Find the name of the <mask> that has the <mask> number of <mask>",
                "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count( * ) DESC LIMIT 1",
                "ted": 0.0,
                "db_id": "activity_1"
            }
        ],
        "best_hyp": "What is the name of the breed with the least number of dogs?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "What is the name of the most common breed?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    },
    {
        "db_id": "dog_kennels",
        "query": "SELECT count( * ) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
        "proc_query": "( the number of ( all items ) ) that belongs to ( <tab> dogs </tab> ) , that have ( ( <col> dog id </col> ) not in ( ( <col> dog id </col> ) that belongs to ( <tab> treatments </tab> ) ) )",
        "references": [
            ""
        ],
        "hypotheses": [
            "How many dogs are not involved in any treatments?",
            "How many dogs did not have any treatments?",
            "How many dogs do not have any treatments?",
            "Count the number of dogs that do not have treatments.",
            "Count the number of dogs without treatments.",
            "Count the number of dogs who did not receive any treatment.",
            "How many dogs have no treatments?",
            "List the number of dogs that did not have any treatments.",
            "How many dogs do not have any treatments?",
            "What is the count of dogs without any treatments?",
            "Find the number of dogs who are not used to any treatments.",
            "Show the number of all dogs without an treatment.",
            "How many dogs are not involved in any treatments?",
            "How many dogs do not have an treatment in our record?",
            "How many dogs do not have any treatments?",
            "Find the number of dogs that did not receive any treatment.",
            "How many dogs do not have any treatments?",
            "Count the number of dogs who do not have any treatments.",
            "Count the number of dogs that are not involved in any treatments.",
            "How many dogs are not involved in any treatments?",
            "Count the number of dogs that are not undergoing treatments.",
            "Find the number of dogs who did not receive any treatment",
            "Count the number of dogs who did not receive any treatment.",
            "How many dogs that do not have treatments?",
            "How many dogs are not involved in treatments?",
            "Count the number of dogs who have not received an treatment.",
            "How many dogs are not involved in any treatments?",
            "How many dogs are not involved in any treatments listed?",
            "How many dogs are not undergoing treatments?",
            "How many dogs are not undergoing treatments?",
            "How many dogs did not receive any treatment?"
        ],
        "templates": [
            "",
            {
                "question": "How many students did not have any course enrollment?",
                "masked_template": "How many <mask> did not have any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many documents do not have any expense?",
                "masked_template": "How many <mask> do not have any <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of documents that do not have expenses.",
                "masked_template": "Count the number of <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                "ted": 0.0,
                "db_id": "cre_Docs_and_Epenses"
            },
            {
                "question": "Count the number of courses without prerequisites.",
                "masked_template": "Count the number of <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "Count the number of students who did not enroll in any course.",
                "masked_template": "Count the number of <mask> who did not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Course_Enrolment )",
                "ted": 0.0,
                "db_id": "e_learning"
            },
            {
                "question": "How many customers have no payment histories?",
                "masked_template": "How many <mask> have no <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "List the number of customers that did not have any payment history.",
                "masked_template": "List the number of <mask> that did not have any <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments ) ",
                "ted": 0.0,
                "db_id": "driving_school"
            },
            {
                "question": "How many customers do not have an account?",
                "masked_template": "How many <mask> do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "What is the count of enzymes without any interactions?",
                "masked_template": "What is the count of <mask> any <mask>",
                "query": "SELECT count( * ) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction ) ",
                "ted": 0.0,
                "db_id": "medicine_enzyme_interaction"
            },
            {
                "question": "Find the number of scientists who are not assigned to any project.",
                "masked_template": "Find the number of <mask> who are not <mask> to any <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Show the number of all customers without an account.",
                "masked_template": "Show the number of all <mask> an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_card_transactions"
            },
            {
                "question": "How many students are not involved in any behavior incident?",
                "masked_template": "How many <mask> are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )",
                "ted": 0.0,
                "db_id": "behavior_monitoring"
            },
            {
                "question": "How many institutions do not have an associated protein in our record?",
                "masked_template": "How many <mask> do not have an <mask> in our <mask>",
                "query": "SELECT count( * ) FROM institution WHERE institution_id NOT IN ( SELECT institution_id FROM protein )",
                "ted": 0.0,
                "db_id": "protein_institute"
            },
            {
                "question": "How many scientists do not have any projects assigned to them?",
                "masked_template": "How many <mask> do not have any <mask> to <mask>",
                "query": "SELECT count( * ) FROM scientists WHERE ssn NOT IN ( SELECT scientist FROM AssignedTo )",
                "ted": 0.0,
                "db_id": "scientist_1"
            },
            {
                "question": "Find the number of items that did not receive any review.",
                "masked_template": "Find the number of <mask> that did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM item WHERE i_id NOT IN ( SELECT i_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "How many customers don't have an account?",
                "masked_template": "How many <mask> have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of customers who do not have an account.",
                "masked_template": "Count the number of <mask> who do not have an <mask>",
                "query": "SELECT count( * ) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Accounts )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of colors that are not used in any products.",
                "masked_template": "Count the number of <mask> that are not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                "ted": 0.0,
                "db_id": "products_gen_characteristics"
            },
            {
                "question": "How many products were not included in any order?",
                "masked_template": "How many <mask> not <mask> in any <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Count the number of products that were never ordered.",
                "masked_template": "Count the number of <mask> that <mask>",
                "query": "SELECT count( * ) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                "ted": 0.0,
                "db_id": "customers_and_invoices"
            },
            {
                "question": "Find the number of users who did not write any review.",
                "masked_template": "Find the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM useracct WHERE u_id NOT IN ( SELECT u_id FROM review )",
                "ted": 0.0,
                "db_id": "epinions_1"
            },
            {
                "question": "Count the number of tourists who did not visit any place.",
                "masked_template": "Count the number of <mask> who did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            },
            {
                "question": "How many courses that do not have prerequisite?",
                "masked_template": "How many <mask> that do not have <mask>",
                "query": "SELECT count( * ) FROM course WHERE course_id NOT IN ( SELECT course_id FROM prereq )",
                "ted": 0.0,
                "db_id": "college_2"
            },
            {
                "question": "How many games are free of injury accidents?",
                "masked_template": "How many <mask> are <mask> of <mask>",
                "query": "SELECT count( * ) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
                "ted": 0.0,
                "db_id": "game_injury"
            },
            {
                "question": "Cound the number of artists who have not released an album.",
                "masked_template": "<mask> the number of <mask> who have not <mask> an <mask>",
                "query": "SELECT count( * ) FROM ARTIST WHERE artistid NOT IN ( SELECT artistid FROM ALBUM )",
                "ted": 0.0,
                "db_id": "chinook_1"
            },
            {
                "question": "How many camera lenses are not used in taking any photos?",
                "masked_template": "How many <mask> are not <mask> in <mask> any <mask>",
                "query": "SELECT count( * ) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
                "ted": 0.0,
                "db_id": "mountain_photos"
            },
            {
                "question": "How many accelerators are not compatible with the browsers listed ?",
                "masked_template": "How many <mask> are not <mask> with the <mask> listed ?",
                "query": "SELECT count( * ) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser ) ",
                "ted": 0.0,
                "db_id": "browser_web"
            },
            {
                "question": "How many persons are not body builders?",
                "masked_template": "How many <mask> are not <mask>",
                "query": "SELECT count( * ) FROM people WHERE people_id NOT IN ( SELECT People_ID FROM body_builder )",
                "ted": 0.0,
                "db_id": "body_builder"
            },
            {
                "question": "How many departments are led by heads who are not mentioned?",
                "masked_template": "How many <mask> are led by <mask> who are not <mask>",
                "query": "SELECT count( * ) FROM department WHERE department_id NOT IN ( SELECT department_id FROM management ) ",
                "ted": 0.0,
                "db_id": "department_management"
            },
            {
                "question": "How many tourists did not make any visit?",
                "masked_template": "How many <mask> did not <mask> any <mask>",
                "query": "SELECT count( * ) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                "ted": 0.0,
                "db_id": "cre_Theme_park"
            }
        ],
        "best_hyp": "How many dogs do not have any treatments?",
        "best_hyp_bleu": 0,
        "best_oracle_bleu": 0,
        "hyp_with_best_oracle_bleu": "How many dogs are not involved in any treatments?",
        "corpus_bleu": 0,
        "corpus_best_bleu_oracle": 0
    }
]